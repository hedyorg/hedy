adventures:
    story:
        name: Rakonto
        default_save_name: Rakonto
        description: Rakonto
        levels:
            1:
                story_text: |
                    En la 1-a nivelo vi povas krei rakonton kun malsama ĉeffiguro, kiun vi mem enigas.

                    En la unua linio, uzu `{ask}` kaj demandu, kiu estos la ĉeffiguro de la rakonto.

                    Post tiu unua linio, komencu per `{print}` se la frazo bezonas esti presita.
                    Vi uzas `{echo}` se vi volas, ke via ĉeffiguro estu ĉe la fino de la frazo.
                example_code: |
                    ```
                    {ask} La ĉefrolulo de ĉi tiu rakonto estas
                    {print} La ĉefrolulo nun promenas en la arbaro
                    {echo} Li timetas
                    {print} Li aŭdas ĉie frenezajn bruojn
                    {print} Li timas, ke ĉi tie estas hantata arbaro
                    ```
                story_text_2: |
                    ### Ekzercio
                    Kreu vian propran rakonton per almenaŭ 6 linioj de kodo.
                    Tiu rakonto ne povas esti la sama ol la ekzemplkodo.
                    Uzu almenaŭ unu komandon `{ask}` kaj `{echo}`.
                    Povas temi pri kion ajn vi ŝatas.
                    Se vi ne havas inspiron, povas temi pri iri kinejen, pri sporta matĉo, aŭ pri tago en la bestoĝardeno.
            2:
                story_text: |
                    En nivelo 2 vi povas fari vian rakonton pli amuza. La nomo de via ĉeffiguro nun povas esti ie ajn en la frazo.

                    Vi ja devas programi iom krome por tio. Vi devas nun nomi vian ĉeffiguron unue.

                    Vi tiam povas meti tiun nomon ie ajn en frazon.
                example_code: |-
                    ```
                    nomo {is} {ask} Kio estas la nomo de la ĉefrolulo?
                    {print} nomo nun kuras en la arbaro
                    {print} nomo timetas
                    {print} Subite li aŭdas frenezan bruon…
                    {sleep}
                    {print} nomo timas, ke ĉi tie estas hantata arbaro
                    ```
            3:
                story_text: |
                    En Nivelo 3, oni povas igi sian rakonton pli amuza. Oni povas uzi hazardecon por iu ajn monstro, besto aŭ alia obstaklo, jene:
                example_code: |
                    ```
                    bestoj {is} 🦔, 🐿, 🦉, 🦇
                    {print} Li nun aŭdas la sonon de bestoj {at} {random}
                    ```
                story_text_2: |
                    La komando `{add}` ankaŭ povas esti utila en via rakonto.
                example_code_2: |
                    ```
                    {print} Li aŭdas sonon
                    bestoj {is} 🐿, 🦔, 🦇, 🦉
                    besto {is} {ask} Kio estas ĝi laŭ via opinio?
                    {add} besto {to_list} bestoj
                    {print} ĝi estis bestoj {at} {random}
                    ```
                story_text_3: |
                    Jen ekzemplo de la komando `{remove}` en via rakonto
                example_code_3: |
                    ```
                    {print} Lia tornistro fariĝis tro peza.
                    {print} Ene estis botelo da akvo, lanterno kaj briko.
                    sako {is} akvo, lanterno, briko
                    forĵetoto {is} {ask} Kiun li forĵetu?
                    {remove} forĵetoto {from} sako
                    ```
            5:
                story_text: |
                    En ĉi tiu nivelo vi povas programi malsamajn finaĵojn, kiuj faros vian rakonton eĉ pli amuza.

                    Pensu pri du finaĵoj por via rakonto, ekzemple:

                    - La princino promenas tra la arbaro
                    - Ŝi renkontas monstron

                    - Feliĉa fino: Ŝi prenas sian glavon kaj la monstro rapide forkuras
                    - Malbona Fino: La monstro manĝas la princinon

                    Vi ankaŭ povas certigi, ke nomo povas esti enigita denove. Tio funkcias same kiel en la antaŭaj niveloj. Vi povas kombini tion per `{if}`, kaj tiam vi jam faris tutan programon!
                example_code: |
                    ```
                    nomo {is} {ask} 'Who is walking in the forest?'
                    {print} nomo 'walks through the forest'
                    {print} nomo 'renkontas monstron'
                    fino {is} {ask} 'Would you like a good or a bad ending?'
                    {if} fino {is} bona {print} nomo 'takes the sword and the monster quickly runs away'
                    {else} {print} nomo 'estis manĝita de monstro'
                    ```
            7:
                story_text: |
                    En rakonto, iu diras vortojn plurajn fojojn. Ekzemple, kiam iu vokas helpon aŭ kantas kanton.
                    Vi povas meti tiajn ripetojn en vian rakonton, en ĉi tiu nivelo per `{repeat}`.
                example_code: |
                    ```
                    {print} 'La princo petadis por helpo.'
                    {repeat} 5 {times} {print} 'Helpon!'
                    {print} 'Kial neniu helpas min?'
                    ```
            8:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi plurajn liniojn en viaj `{if}`-komandoj; tiel, vi povas plibonigi vian ĝojan aŭ malĝojan finon!
                example_code: |
                    ```
                    {print} 'HO NE! La tiranosaŭro alproksimiĝas!'
                    fino = {ask} 'Ĉu vi volas ĝojan aŭ malĝojan finon?'
                    {if} fino {is} ĝoja
                        {print} 'Ĝustatempe Rikardo resaltas en la tempomaŝinon!'
                        {print} 'Miĥaelo tajpas la kodon kaj…'
                        {print} '💥ZAP!💥'
                        {print} 'Ili estas reen en sia garaĝo'
                    {else}
                        {print} 'Miĥaelo krias: «VENU RIKARDO! KURU PLI RAPIDE!»'
                        {print} 'Sed Rikardo estas tro malrapida…'
                        {print} 'La tiranosaŭro proksimiĝas kaj manĝas lin per unu mordego!🦖'
                    ```
            9:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi nestadon por meti {if}, {repeat} aŭ {for} komandojn en aliajn {if}, {repeat} aŭ {for}. Ĉi tio donas al vi multajn eblojn kaj vere helpas vin fari vian rakonton interaga.
                example_code: |
                    ```
                    {print} 'Robertino promenas urbocentre'
                    loko = {ask} 'Ĉu Robertino iras en butikon, aŭ ĉu ŝi iras hejmen?'
                    {if} loko {is} butiko
                        {print} 'Ŝi eniras la butikon.'
                        {print} 'Robertino vidas interesan libron'
                        libro = {ask} 'Ĉu Robertino aĉetas la libron?'
                        {if} libro {is} jes
                            {print} 'Robertino aĉetas la libron kaj iras hejmen'
                        {else}
                            {print} 'Robertino eliras la butikon kaj iras hejmen'
                    {else}
                        {print} 'Robertino iras hejmen'
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi la komandon `{for}` en via rakonto. Tiel vi povas facile programi la infanlibron «Bruna urso, bruna urso, kion vi vidas?».
                example_code: |
                    ```
                    bestoj = birdo, ŝafo, rano, anaso, infaneto
                    {print} 'bruna urso'
                    {print} 'bruna urso'
                    {print} 'Kion vi vidas?'
                    {for} besto {in} bestoj
                        {print} 'Mi vidas ' besto 'n rigardantan min'
                        {print} besto
                        {print} besto
                        {print} 'Kion vi vidas?'
                    {print} 'Mi vidas ĉiujn bestojn, kiuj rigardas min!'
                    ```
            13:
                story_text: |
                    Uzante la komandojn `{and}` kaj `{or}`, oni povas mallongigi siajn rakontojn. Ekzemple, rigardu la jenan rakonton pri drakoj.
                example_code: |
                    ```
                    glavo = 'perdita'
                    ludo = 'daŭranta'
                    {print} 'Nia heroo promenas tra la arbaro'
                    {print} 'La vojo forkiĝas en du vojojn'
                    {for} i {in} {range} 0 {to} 2
                        {if} ludo {is} 'daŭranta'
                            vojo = {ask} 'Kiun vojon ŝi elektu?'
                            {if} vojo {is} 'maldekstra' {and} glavo {is} 'trovita'
                                {print} 'Nia heroo renkontas drakon!'
                                {print} 'Feliĉe nia heroo havas glavon por venki la beston!'
                                ludo = 'finita'
                            {if} vojo {is} 'maldekstra' {and} glavo {is} 'perdita'
                                {print} 'Nia heroo trovas drakon, sed ŝi ne havas armilojn!'
                                {print} 'Nian heroon venkas la drako…'
                                {print} 'Provu denove'
                                ludo = 'finita'
                            {if} vojo {is} 'dekstra' {and} glavo {is} 'trovita'
                                {print} 'Vi jam trovis la glavon. Ĉi tie restas nenio.'
                                {print} 'Ŝi reiras'
                            {if} vojo {is} 'dekstra' {and} glavo {is} 'perdita'
                                {print} 'Nia heroo trovas glavon'
                                {print} 'Ĉi tio povus esti tre oportuna'
                                glavo = 'trovita'
                    ```
            15:
                story_text: |
                    Uzante la buklon `{while}`, oni povas igi siajn rakontojn pli interesaj. Ekzemple, oni povas uzi `{while} ludo {is} 'daŭranta'` por ke oni povu ludi ĝis la ludo finiĝos.
                    Aŭ oni povas uzi `{while} glavo {is} 'perdita'` por ke la ludanto ne povu daŭrigi sen trovi ion.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    ŝlosilo = 'perdita'
                    {print} 'Vi staras en via ĝardeno, kaj vi perdis vian ŝlosilon.'
                    {print} 'Kie vi volas serĉi ĝin?'
                    {print} 'Vi povas elekti unu el: arbo, florbedo, roko, poŝtkesto'
                    {while} ŝlosilo == 'perdita'
                        loko = {ask} 'Kie vi volas serĉi ĝin?'
                        {if} loko == 'florbedo'
                            {print} 'Jen ĝi troviĝas!'
                            ŝlosilo = 'trovita'
                        {else}
                            {print} 'Ne, ĝi ne estas ĉe la ' loko
                    {print} 'Nun vi povas eniri la domon!'
                    ```
    blackjack:
        name: Nigra fanto
        default_save_name: Nigra fanto
        description: Provu alproksimiĝi al 21 laŭeble
        levels:
            17:
                story_text: |
                    Nigra fanto estas simpla kartludo, dum kiu oni provas alproksimiĝi laŭeble al 21 poentoj. Vi ricevas du kartojn. Ĉiu karto valoras sian numeran valoron, kaj la vizaĝkartoj (fanto, damo kaj reĝo) valoras 10 poentojn.
                    La aso valoras aŭ 1 aŭ 11 poentojn (vi povas elekti). La kazinisto, via kontraŭulo, ankaŭ ricevas du kartojn.
                    Se vi volas, vi povas akiri alian karton, kaj ĝiaj poentoj estos aldonitaj al via totalo. La kazinisto ankaŭ povas preni alian karton.
                    Sed atentu ne akiri pli ol 21 poentojn, ĉar se vi tion faros, vi perdos!
                    La ludanto, kiu plej alproksimiĝos al 21, ne superante 21, gajnos!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
    calculator:
        name: Kalkulilo
        default_save_name: Kalkulilo
        description: Krei kalkulilon
        levels:
            6:
                story_text: |
                    Nun, ĉar vi povas kalkuli, vi ankaŭ povas verki programon por ekzerci vin al matematikaj kalkuloj. Vi povas mem fari la kalkulojn, ekzemple:
                example_code: |
                    ```
                    ĝusta_respondo = 11 * 27
                    respondo = {ask} 'Kiom estas 11 multiplikite per 27?'
                    {if} respondo {is} ĝusta_respondo {print} 'Bone!'
                    {else} {print} 'Malĝuste! Jen la ĝusta respondo: ' ĝusta_respondo
                    ```
                story_text_2: |
                    Vi ankaŭ povas lasi la komputilon fari hazardajn sumojn memstare uzante hazardajn.
                    Jen kiel vi elektas kelkajn tabelojn por ekzerciĝi, kaj el tio vi ĉiam ricevas malsaman sumon:
                example_code_2: |
                    ```
                    tabeloj = 4, 5, 6, 8
                    nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabelo = tabeloj {at} {random}
                    nombro = nombroj {at} {random}
                    ĝusta_respondo = tabelo * nombro
                    respondo = {ask} 'Kiom estas ' tabelo ' multiplikite per ' nombro '?'
                    {if} respondo {is} ĝusta_respondo {print} 'Bone!'
                    {else} {print} 'Malĝuste! La ĝusta respondo estas ' ĝusta_respondo
                    ```
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    En antaŭaj niveloj, vi lernis kiel verki kalkulilon. En ĉi tiu nivelo, vi povas apliki tiun kodon por verki matematikan ludeton jene…
                example_code: |
                    ```
                    poentaro = 0
                    {repeat} 10 {times}
                        nombroj = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nombro1 = nombroj {at} {random}
                        nombro2 = nombroj {at} {random}
                        ĝusta_respondo = nombro1 * nombro2
                        {print} 'Kiom estas ' nombro1 ' multiplikite per ' nombro2 '?'
                        respondo = {ask} 'Tajpu vian respondon ĉi tie…'
                        {print} 'Jen via respondo:' respondo
                        {if} respondo {is} ĝusta_respondo
                            poentaro = poentaro + 1
                    {print} 'Bonege! Jen via poentaro: ' poentaro '/10!'
                    ```
            12:
                story_text: |
                    Nun oni povas verki kalkulilon, kiu funkcias por decimalaj frakcioj.
                example_code: |
                    ```
                    nombro1 = {ask} 'Kio estas la unua nombro?'
                    nombro2 = {ask} 'Kio estas la dua nombro?'
                    respondo = nombro1 + nombro2
                    {print} nombro1 ' plus ' nombro2 ' estas ' respondo
                    ```
    default:
        name: Enkonduko
        default_save_name: enkonduko
        description: Klarigo pri nivelo
        levels:
            1:
                story_text: |
                    En Nivelo 1 vi povas uzi la komandojn `{print}`, `{ask}` kaj `{echo}`.
                    Tajpu vian kodon en la programan kampon. Aŭ premu la verdan butonon en la ekzempla kodbloko, kaj la kodo tajpiĝos por vi!
                    Provu mem la kodon per la verda butono «Ruli kodon» sub la programa kampo.

                    Vi povas presi tekston al la ekrano per la komando `{print}`.
            3:
                story_text: |
                    En Nivelo 3, oni povas fari liston. Oni povas lasi la komputilon elekti hazardaĵon el la listo. Oni faras tion per `{at} {random}`.
            4:
                story_text: |
                    En Nivelo 4, `{ask}` kaj `{print}` ŝanĝiĝis.

                    Oni devas meti presotan tekston inter citiloj.

                    Tio utilas, ĉar nun oni povas presi ĉiajn ajn vortojn. Kaj simile pri tiuj vortoj, kiujn oni konservas per `{is}`.

                    Preskaŭ ĉiuj programlingvoj ankaŭ uzas citilojn por presado; tiel ni proksimiĝas al vera programado!
                example_code: |
                    ```
                    {print} 'Oni devas uzi citilojn ekde nun!'
                    respondo {is} {ask} 'Kion oni bezonas uzi ekde nun?'
                    {print} 'Oni devas uzi ' respondo 'n'
                    ```
            5:
                story_text: |
                    En Nivelo 5 estas io nova, la `{if}`! Per la `{if}`, oni povas elekti inter du malsamaj opcioj.
                    La jena kodo presos «bone», se vi tajpos «Hedy» kiel nomon, kaj «ba!», se vi tajpos ion alian.
                    `{ask}` kaj `{print}` daŭre funkcias kiel en Nivelo 4.
                example_code: |
                    ```
                    nomo {is} {ask} 'kio estas via nomo?'
                    {if} nomo {is} Hedy {print} 'bone' {else} {print} 'ba!'
                    ```
            6:
                story_text: |
                    En ĉi tiu nivelo, vi lernas ion novan: vi povas nun ankaŭ kalkuli.

                    La pluso estas facila; vi skribas ĝin simile al matematiko: `5 + 5` ekzemple. La minuso ankaŭ funkcias bone, jen `5 - 5`.

                    La multipliko estas iom malsamaj, ĉar ne ekzistas la multipliko-signo en via klavaro. Nu, serĉu; ĝi vere ne ekzistas!
                    Tial oni multiplikas per la asterisko (ofte la klavo 8 kun la majuskliga klavo): `5 * 5`. Legu tion kiel «5 multiplikite per 5», por helpi la memoradon.
                example_code: |
                    ```
                    {print} '5 plus 5 estas ' 5 + 5
                    {print} '5 minus 5 estas ' 5 - 5
                    {print} '5 multiplikite per 5 estas ' 5 * 5
                    ```
            7:
                story_text: |
                    Nivelo 7 enkondukas la komandon `{repeat}`. `{repeat}` povas esti uzata por ruli unu linion da kodo plurfoje.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy estas amuza!'
                    ```
            8:
                story_text: |
                    `{ask}` kaj `{print}` ankoraŭ funkcias kiel vi konas ilin. Sed `{if}`, `{else}` kaj `{repeat}` ŝanĝiĝis!
                    Vi nun povas ekzekuti grupojn de kodo kune, sed vi devos *deŝovi* la kodon.
                    Tio signifas meti kvar spacojn ĉe la komenco de la linio. Vi ankaŭ devos deŝovi kiam vi nur volas krei blokon de unu linio.
                example_code: |
                    Jen kiel la komando `{repeat}` funkcias nun:
                    ```
                    {repeat} 5 {times}
                        {print} 'Saluton ĉiuj'
                        {print} 'Jen ĉio ripetota 5 fojojn'
                    ```
                    Jen kiel la komandoj `{if}` kaj `{else}` funkcias nun:

                    ```
                    nomo {is} {ask} 'Kio estas via nomo?'
                    {if} nomo {is} Hedy
                        {print} 'Bonvenon Hedy'
                        {print} 'Vi povas ludi per via komputilo!'
                    {else}
                        {print} 'ENTRUDULO!'
                        {print} 'Vi ne rajtas uzi ĉi tiun komputilon!'
                    ```
            9:
                story_text: |
                    En ĉi tiu nivelo, oni povas ne nur uzi plurajn liniojn kun `{if}` kaj `{repeat}`, sed oni ankaŭ povas kunmeti ilin!
                    La jena ekzemplo enhavas `{if}`-blokon ene de `{repeat}`-bloko. La mala ordo estas ankaŭ permesata, kaj ankaŭ `{if}` ene de `{if}` kaj `{repeat}` ene de `{repeat}`.
                    Provu tion!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        manĝaĵo = {ask} 'Kion vi volas manĝi?'
                        {if} manĝaĵo {is} pico
                            {print} 'bone!'
                        {else}
                            {print} 'vi preferu picon'
                    ```
            10:
                story_text: |-
                    En ĉi tiu nivelo, ni lernas novan kodon nomitan `{for}`. Per `{for}` oni povas fari liston kaj uzi ĉiujn elementojn.
                    `{for}` kreas blokon simile al `{repeat}` kaj `{if}`; do ĉiuj linioj en la bloko devas komenci per spacetoj.
                example_code: |
                    ```
                    bestoj {is} hundo, kato, fiŝo
                    {for} besto {in} bestoj
                      {print} 'Mi amas ' besto 'n'
                    ```
            12:
                story_text: |-
                    **Decimalaj frakcioj**
                    Ĝis nun, Hedy ne permesis decimalajn frakciojn kiel «1.5», sed nun ĝi ja permesas tiujn. Notu, ke komputiloj uzas la punkton `.` (ne la komon `,`) por decimalaj frakcioj.
                example_code: |
                    ```
                    {print} 'Du kaj duono plus du kaj duono estas…'
                    {print} 2.5 + 2.5
                    ```
            13:
                story_text: Ni nun lernos `{and}` kaj `{or}`! Se oni volas kontroli du kondiĉojn, oni ne devas uzi du `{if}`-ojn sed povas uzi `{and}` kaj `{or}`. Se oni uzas `{and}`, ambaŭ kondiĉoj, maldekstra kaj dekstra de la `{and}`, devas esti veraj. Oni ankaŭ povas uzi `{or}`. Tiam nur unu kondiĉo devas esti vera.
                example_code: |
                    ```
                    nomo = {ask} 'kio estas via nomo?'
                    aĝo = {ask} 'kia estas via aĝo?'
                    {if} nomo {is} 'Hedy' {and} aĝo {is} 2
                        {print} 'Vi estas la vera Hedy!'
                    ```
            14:
                story_text: |
                    Ni lernos pli da novaj sintaksaĵoj. Vi eble jam konas ilin pro matematiko: la `<` kaj `>`.
                    La `<` kontrolas, ĉu la unua nombro estas pli malgranda ol la dua: ekzemple `aĝo < 12` kontrolas, ĉu `aĝo` estas pli malgranda ol `12`.
                    Se vi volas kontroli, ĉu la unua nombro estas pli malgranda aŭ egala al la dua, vi povas uzi `<=`: ekzemple, `aĝo <= 11`.
                    La `>` kontrolas, ĉu la unua nombro estas pli granda ol la dua: ekzemple, `poentaro > 10` kontrolas, ĉu `poentaro` estas pli granda ol `10`.
                    Se oni volas kontroli, ĉu la unua nombro estas pli granda aŭ egala al la dua, oni povas uzi `>=`: ekzemple, `poentaro >= 11`.
                    Oni uzas tiujn komparojn en `{if}` jene:
                example_code: |
                    ```
                    aĝo = {ask} 'Kian aĝon vi havas?'
                    {if} aĝo > 12
                        {print} 'Vi estas pli aĝa ol mi!'
                    ```

                    {if} aĝo < 13
                        {print} 'Vi estas malpli aĝa ol mi!'
                    {else}
                        {print} 'Vi estas pli aĝa ol mi!'
            15:
                story_text: |-
                    Ni lernas novan iteracion, `{while}`! Tio daŭrigas la iteracion tiel longe, kiel la aserto estas vera.
                    Do ne forgesu ŝanĝi la valoron en la iteracio.

                    La ekzempla kodo daŭre ruliĝas ĝis ĝusta respondo estos donita.
                    Se la ĝusta respondo neniam estos donita, la iteracio neniam finiĝos!
                example_code: |
                    ```
                    respondo = 0
                    {while} respondo != 25
                        respondo = {ask} 'Kio estas 5 multiplikite per 5?'
                    {print} 'Jen la ĝusta respondo'
                    ```
            16:
                story_text: |-
                    Ni faros listojn laŭ la maniero de Python, kun rektaj krampoj ĉirkaŭ la listoj! Ni ankaŭ konservas la citilojn ĉirkaŭ ĉiu ero, kiel ni lernis en antaŭaj niveloj.
                    Vi povas ankaŭ uzi la rektajn krampojn por indiki lokon en la listoj.
                example_code: |
                    ```
                    amikoj = ['Amano', 'Benjameno', 'Cecilio']
                    bonŝancaj_numeroj = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'la bonŝanca numero de ' amikoj[i]
                        {print} 'estas ' bonŝancaj_numeroj[i]
                    ```
            17:
                story_text: |-
                    Nun ni iom ŝanĝos la regulojn pri la deŝovo. Ĉiufoje kiam oni bezonas deŝovon, oni uzu dupunkton `:` ĉe la fino de la linio antaŭ la deŝovo.

                    En ĉi tiu nivelo, oni povas ankaŭ uzi novan komandon: `{elif}`. `{elif}` estas mallongigo de ``{else} {if}``, kaj oni bezonas ĝin kiam oni volas havi 3 (aŭ pli da) opciojn.
                    Jen:
            18:
                story_text: |
                    Ni alvenis al vera Python-kodo! Tio signifas, ke ni devas uzi rondajn krampojn kun {print} kaj {range} de nun.
                    {print}('Mia nomo estas ', nomo)
    dice:
        name: Ĵetkuboj
        default_save_name: Ĵetkuboj
        description: Fari viajn proprajn ĵetkubojn
        levels:
            3:
                story_text: |
                    En ĉi tiu nivelo, oni povas elekti el listo. Per tio, oni povas igi la komputilon elekti unu flankon de ĵetkubo.
                    Rigardu tiujn ludojn, kiujn vi havas en via ŝranko hejme.
                    Ĉu ekzistas ludoj uzantaj (specialajn) ĵetkubojn? Vi ankaŭ povas kopii ĝin per ĉi tiu kodo.
                    Ekzemple, la ĵetkubo de la ludo Lumbrikoj kun la numeroj 1 ĝis 5 kaj lumbriko sur ĝi.

                    ![Ĵetkubo de Lumbrikoj montrante la numerojn 1 ĝis 5 kaj lumbrikon](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    elektoj {is} 1, 2, 3, 4, 5, lumbriko
                    {print} elektoj {at} {random}
                    ```
            4:
                story_text: |
                    En ĉi tiu nivelo ni povas fari frazojn kun la die valoro en la frazo, kun citaĵoj kompreneble.
                    Ĉi-foje la ekzempla kodo ne estas tute kompleta. Ĉu vi povas fini la kodon?
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    elektoj {is} 1, 2, 3, 4, 5, lumbriko
                    ĵeto {is} _
                    {print} 'la rezulto de via ĵeto estas' _
                    {if} _ {is} lumbriko {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            6:
                story_text: |
                    Vi ankaŭ povas igi Lumbrikon morti denove en ĉi tio, sed nun vi ankaŭ povas kalkuli kiom da poentoj estis rulitaj.
                    Vi eble scias, ke la vermo nombras 5 poentojn por Earthworms. Nun post ruliĝo vi povas tuj kalkuli kiom da poentoj vi ĵetis.
                    Jen la kodo por kalkuli poentojn por unu ĵetkubo:
                example_code: |
                    ```
                    elektoj = 1, 2, 3, 4, 5, lumbriko
                    poentaro = 0
                    ĵeto = elektoj {at} {random}
                    {print} 'la rezulto de via ĵeto estas' ĵeto
                    {if} ĵeto {is} lumbriko poentaro = poentaro + 5 {else} poentaro = poentaro + ĵeto
                    {print} 'those are' poentaro ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    Ĉu vi sukcesis kalkuli la poentaron por 8 ĵetkuboj? Tio postulis multe da tranĉado kaj algluado, ĉu ne? Ni faciligos tion en la nivelo 7!
            7:
                story_text: |
                    Vi ankaŭ povas fari ĵetkubon denove en la nivelo 5. Per la kodo `{repeat}` vi povas facile ruliĝi tutan manon da ĵetkuboj.
                    Provu fini la ekzemplan kodon! La strekoj devus enhavi plurajn komandojn kaj signojn.

                    Sed eble vi volas fari tute alian ĵetkubon. Kompreneble vi povas!
                example_code: |
                    ```
                    elektoj = 1, 2, 3, 4, 5, lumbriko
                    {repeat} _ _ {print} _ _ _
                    ```
            10:
                story_text: |
                    Ĉu la ĵetado de la ĵetkuboj daŭras tro longe? En ĉi tiu nivelo, vi povas lasi Hedy ĵeti ĉiujn ĵetkubojn samtempe!
                example_code: |
                    ```
                    ludantoj = Anno, Johano, Jiŝajo
                    elektoj = 1, 2, 3, 4, 5, 6
                    {for} ludanto {in} ludantoj
                        {print} 'La rezulto de la ĵeto de ' ludanto ' estas ' elektoj {at} {random}
                        {sleep}
                    ```
    dishes:
        name: Lavi telerojn?
        default_save_name: Telerlavado
        description: Komputile elektu la lavonton de la teleroj (Komencu je Nivelo 2)
        levels:
            3:
                story_text: |
                    Ĉu vi ĉiam malkonsentas hejme pri kiu hodiaŭ devos lavi la telerojn aŭ malplenigi la rubujon?
                    Do vi povas lasi la komputilon elekti tre juste. Vi povas programi tion en ĉi tiu nivelo!
                    Vi unue faru liston de la familianoj. Poste elektu el la listo per `{at} {random}`.
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    {print} homoj {at} {random}
                    ```
                story_text_2: |
                    Ĉu vi ne emas prepari la telerojn mem? Haki la programon por forigi vian nomon de la listo.
            4:
                story_text: |
                    Per citiloj vi povas fari vian vazlavadon planadon pli bela.
                    Ĉi-foje la ekzempla kodo ne estas tute kompleta.

                    Ĉu vi povas kompletigi la kodon plenigante la vakojn? Ĉiu malplena devas esti anstataŭigita per unu vorto de simbolo.

                    Konsilo: Ne forgesu la citilojn!
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    {print} _ la telerojn lavu _
                    {sleep}
                    {print} homoj {at} _
                    ```
            5:
                story_text: |
                    Per la `{if}` vi nun povas amuziĝi pli kun elekto en la programo. Vi povas havi vian programon respondi al la elekto kiun la komputilo faris.

                    Ĉu vi povas fini la kodon por ke ĝi presiĝu «domaĝe» kiam estas via vico kaj alie «jes!»?
                    Ne forgesu la citaĵojn!
                example_code: |
                    ```
                    homoj {is} panjo, paĉjo, Emilio, Sofio
                    lavonto {is} homoj {at} {random}
                    {if} lavonto {is} Sofio {print} _ domaĝe ke mi devas lavadi _ {else} {print} 'feliĉe neniuj teleroj ĉar' _ 'jam lavas'
                    ```
            6:
                story_text: |
                    Kiom ofte ĉiuj lavos la telerojn? Ĉu tio estas justa? Vi povas kalkuli tion en ĉi tiu nivelo.
                example_code: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    emilio_lavoj = 0
                    lavonto = homoj {at} {random}
                    {print} 'La lavonto estas' lavonto
                    {if} lavonto {is} Emilio emilio_lavoj = emilio_lavoj + 1
                    {print} 'Emilio lavos la telerojn ĉi-semajne' emilio_lavoj 'fojojn'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    Se vi estas ege malbonŝanca, la antaŭa programo eble elektos vin al la pladoj por la tuta semajno! Tio ne estas justa!
                    Por krei pli justan sistemon vi povas uzi la komandon `{remove}` por forigi la elektitan personon el la listo. Tiel vi ne devas refari la pladojn ĝis ĉiuj havas turnon.

                    Lundo kaj mardo estas pretaj por vi! Ĉu vi povas aldoni la reston de la semajno?
                    Kaj... ĉu vi povas elpensi solvon por kiam via listo estas malplena?
                example_code_2: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    lavonto = homoj {at} {random}
                    {print} 'Lunde la telerojn lavos: ' lavonto
                    {remove} lavonto {from} homoj
                    lavonto = homoj {at} {random}
                    {print} 'Marde la telerojn lavos: ' lavonto
                    {remove} lavonto {from} homoj
                    lavonto = homoj {at} {random}
                    ```
            7:
                story_text: |
                    Per `{repeat}` oni povas ripeti pecojn da kodo. Vi povas uzi tion por determini la telerlavontojn por tuta semajno.
                example_code: |
                    ```
                    homoj = panjo, paĉjo, Emilio, Sofio
                    {repeat} _ _ {print} 'la lavonto estas' _
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi povas fari eĉ pli bonan lavadhoraron.
                example_code: |
                    ```
                    tagoj = Lundo, Mardo, Merkolo, Ĵaŭdo, Vendredo, Sabato, Dimanĉo
                    nomoj = panjo, paĉjo, Emilio, Sofio
                    {for} tago {in} tagoj
                        {print} nomoj {at} {random} ' lavas telerojn je ' tago
                    ```
    fortune:
        name: Aŭguristo
        default_save_name: Aŭguristo
        description: Igu Hedy aŭguri la estontecon
        levels:
            1:
                story_text: |
                    Ĉu vi iam estis en karnavalo kaj antaŭdiris vian estontecon de aŭguristo? Aŭ ĉu vi iam ludis kun magia ok pilko?
                    Tiam vi verŝajne scias, ke ili vere ne povas antaŭdiri vian estontecon, sed estas tamen amuze ludi!

                    En la venontaj niveloj vi povas lerni kiel krei vian propran aŭguran maŝinon!
                    En nivelo 1 vi povas komenci facile lasante Hedy prezenti sin kiel aŭguristo kaj lasi ŝin {echo} la respondojn de la ludantoj.
                    Jene:
                example_code: |
                    ```
                    {print} Saluton, mi estas Hedy la aŭguristo!
                    {ask} Kiu vi estas?
                    {print} Mi rigardu mian kristalan globon
                    {print} Mi vidas… mi vidas…
                    {echo} Via nomo estas
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    En ĉi tiu ekzemplo, la ludanto povas demandi Hedy ĉu-demandon, kaj Hedy elektos hazardan respondon por vi.
                    ```
                    {print} Mi estas Hedy la aŭguristo!
                    demando {is} {ask} Kion vi volas ekscii?
                    {print} Jen tio, kion vi volas ekscii: demando
                    respondoj {is} jes, ne, eble
                    {print} Laŭ mia kristala globo…
                    {sleep} 2
                    {print} respondoj {at} {random}
                    ```
                story_text_2: |
                    Nun, Hedy povas respondi nur «jes», «ne» aŭ «eble». Ĉu vi povas doni al Hedy pliajn eblajn respondojn, kiel «certe» aŭ «demandu denove»? <!--{ask}-->
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'Mi povas aŭguri, ĉu vi gajnos la loterion morgaŭ!'
                    homo {is} {ask} 'Kiu vi estas?'
                    {if} homo {is} Hedy {print} 'Vi certe gajnos!🤩' {else} {print} 'Misfortune, aliulo gajnos!😭'
                    ```
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    aĝo = {ask} 'Kia estas via aĝo?'
                    gefratoj = {ask} 'Kiom da gefratoj vi havas?'
                    alto = {ask} 'Kiom alta vi estas centimetre?'
                    infanoj = alto / aĝo
                    infanoj = infanoj - gefratoj
                    {print} 'Vi havos…'
                    {sleep}
                    {print} infanoj ' infanojn!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'I will predict how smart you are!'
                    futbalo = {ask} 'On a scale 1-10 how much do you love football?'
                    bananoj = {ask} 'How many bananas did you eat this week?'
                    higieno = {ask} 'How many times did you wash your hands today?'
                    rezulto = bananoj + higieno
                    rezulto = rezulto * futbalo
                    {print} 'You are ' rezulto ' percent smart.'
                    ```
            7:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi la komandon `{repeat}` por igi vian komputilon aŭguri plurfoje.
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'Vi povas demandi tri fojojn!'
                    {repeat} 3 {times} demando = {ask} 'Kion vi volas ekscii?'
                    respondo = jes, ne, eble
                    {repeat} 3 {times} {print} 'Laŭ mia kristala globo… ' respondo {at} {random}
                    ```
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'Mi estas Hedy la aŭguristo!'
                    {print} 'You can {ask} me 3 questions.'
                    respondoj = jes, ne, eble
                    {repeat} 3 {times}
                       demando = {ask} 'What do you want to know?'
                       {print} demando
                       {sleep}
                       {print} 'Laŭ mia kristala globo…' respondoj {at} {random}
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi lernos kiel programi la ludon MASH (domego, apartamento, barako, domo). En ĉi tiu ludo vi povas aŭguri por ĉiuj ludantoj samtempe, kiel aspektos iliaj estontecoj.
                example_code: |
                    ```
                    domoj = domego, apartamento, barako, domo
                    amoj = neniu, reĝo, najbaro, vera amanto
                    dorlotbestoj = hundo, kato, elefanto
                    nomoj = Johanino, Rikardo, Jakobo
                    {for} nomo {in} nomoj
                        {print} nomo ' loĝos en ' domoj {at} {random}
                        {print} nomo ' edz(in)iĝos kun ' amoj {at} {random}
                        {print} nomo ' ricevos ' dorlotbestoj {at} {random} 'n kiel sian dorlotbeston.'
                        {sleep}
                    ```
            12:
                story_text: |
                    En ĉi tiu nivelo, vi povas montri plurvortajn aŭguraĵojn jene:
    haunted:
        name: Hantata domo
        default_save_name: Hantata domo
        description: Eskapu el la hantata domo
        levels:
            1:
                story_text: |
                    En ĉi tiu aventuro vi laboras por krei ludon, en kiu vi devas eskapi el hantita domo elektante la ĝustan pordon.
                    Se vi elektas la ĝustan pordon vi pluvivos, sed se ne terura monstro povus...

                    En Nivelo 1, ni komencas nian fantomludon inventante timigan rakonton kaj demandas al la ludanto kiun monstron ili vidos en la hantita domo.
                example_code: |
                    ```
                    {print} Kiel mi alvenis ĉi tien?
                    {print} Mi memoras, ke mia amiko diris al mi iri en la malnovan domegon...
                    {print} kaj subite ĉio nigriĝis.
                    {print} Sed kiel mi finiĝis sur la planko...?
                    {print} Mia kapo doloras kiel mi estis trafita de basbalbatilo!
                    {print} Kio estas tiu sono?
                    {print} Ho ne! Mi sentas, ke mi ne estas sola en ĉi tiu domo!
                    {print} Mi devas eliri de ĉi tie!
                    {print} Estas 3 pordoj antaŭ mi..
                    {ask} Kiun pordon mi elektu?
                    {echo} Mi elektas pordon
                    {print} ...?
                    ```
                story_text_2: |
                    Ĉu vi povas fini la timigan rakonton? Aŭ elpensu vian propran fantomdoman rakonton?
            2:
                story_text: |
                    En ĉi tiu hantata domo, vi povas montri viajn monstrojn per vinjetosignoj. Kompreneble vi ankaŭ povas uzi vortojn.
                example_code: |
                    ```
                    monstro_1 {is} 👻
                    monstro_2 {is} 🤡
                    monstro_3 {is} 👶
                    {print} Vi eniras la hantatan domon.
                    {print} Subite vi vidas monstro_1
                    {print} Vi kuras en la alian ĉambron, sed monstro_2 atendas vin tie!
                    {print} Ho ne! Rapidu al la kuirejo.
                    {print} Sed dum vi eniras monstro_3 atakas vin!
                    ```
            4:
                story_text: |
                    En ĉi tiu nivelo vi lernas kiel uzi citilojn en viaj ludoj.
                    Ĉu vi povas igi vian Hantatan Domon rulebla en Nivelo 4?

            11:
                example_code: |
                    ```
                    {print} 'Eskapu el la Hantata Domo!'
                    ludanto {is} vivanta
                    pordoj = 1, 2, 3
                    monstroj = kadavromonstro, vampiro, araneego
                    {for} i {in} {range} 1 {to} 3
                        {if} ludanto {is} vivanta
                            ĝusta_pordo = pordoj {at} {random}
                            {print} 'Ĉambro ' i
                            {print} 'Jen tri pordoj antaŭ vi…'
                            elektita_pordo = {ask} 'Kiun pordon vi elektos?'
                            {if} elektita_pordo {is} ĝusta_pordo
                                {print} 'Neniu monstro ĉi tie!'
                            {else}
                                {print} 'Vin formanĝas ' monstroj {at} {random}
                                ludanto = mortinta
                        {else}
                            {print} 'FINO'
                    {if} ludanto {is} vivanta
                        {print} 'Bonege! Vi pretervivis!'
                    ```
    language:
        name: Lingvo
        default_save_name: Lingvo
        description: Praktiku vortojn de fremda lingvo
        levels:
            5:
                story_text: |
                    Faru vian propran programon por ekzerci vian vortprovizon en nova lingvo.
                example_code: |
                    ```
                    {print} 'Lernu la francan!'
                    kato {is} {ask} '🐱'
                    {if} kato {is} chat {print} 'Bonege!'
                    {else} {print} 'Ne, kato estas chat'
                    rano {is} {ask} '🐸'
                    {if} rano {is} grenouille {print} 'Bonege!'
                    {else} {print} 'Ne, rano estas grenouille'
                    ```
            16:
                example_code: |
                    ```
                    francaj_vortoj = ['bonjour', 'ordinateur', 'pomme de terre']
                    traduko = ['saluton', 'komputilo', 'terpomo']
                    poentaro = 0
                    {for} i {in} {range} 1 {to} 3
                        respondo = {ask} 'Kion signifas ' francaj_vortoj[i] '?'
                        ĝusta = traduko[i]
                        {if} respondo == ĝusta
                            {print} 'Ĝuste!'
                            poentaro = poentaro + 1
                        {else}
                            {print} 'Malĝuste, ' francaj_vortoj[i] ' signifas la jenon: ' traduko[i]
                    {print} 'Vi respondis ' poentaro ' fojojn ĝuste.'
                    ```
    parrot:
        name: Papago
        default_save_name: Papago
        description: Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
        levels:
            1:
                story_text: |
                    Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
                example_code: |
                    ```
                    {print} Mi estas Hedy la papago
                    {ask} kio estas via nomo?
                    {echo}
                    {echo}
                    ```
            2:
                story_text: |
                    Kreu vian propran Interretan dorlotpapagon, kiu kopios vin!
                example_code: |
                    ```
                    {print} Mi estas Hedy la papago
                    nomo {is} {ask} kio estas via nomo?
                    {print} nomo
                    {sleep}
                    {print} grak
                    {sleep}
                    {print} nomo
                    ```
            3:
                story_text: |
                    Instruu al via papago novan vorton per `{add}`.
                example_code: |
                    ```
                    vortoj {is} grak, Hedy
                    {print} Trejnu vian papagon!
                    nova_vorto {is} {ask} Kiun vorton instrui?
                    {add} nova_vorto {to_list} vortoj
                    {print} 🧒 Diru nova_vorto , Hedy!
                    {print} 🦜 vortoj {at} {random}
                    ```
            5:
                story_text: |
                    Rekompencu vian papagon, se ĝi diras la ĝustan vorton!
                example_code: |
                    ```
                    vortoj {is} grak, Hedy
                    {print} 'Trejnu vian papagon!'
                    nova_vorto {is} {ask} 'Kiun vorton instrui?'
                    {add} nova_vorto {to_list} vortoj
                    dirita_vorto {is} vortoj {at} {random}
                    {print} '🧒 Diru «' nova_vorto '», Hedy!'
                    {print} '🦜 ' dirita_vorto
                    {if} dirita_vorto {is} nova_vorto {print} '🧒 Bonege, Hedy! 🍪'
                    {else} {print} '🧒 Ne, Hedy! Diru «' nova_vorto '»'
                    ```
    piggybank:
        name: Ŝparujo
        default_save_name: Ŝparujo
        description: Kalkulu vian poŝmonon!
    quizmaster:
        name: Kvizmajstro
        default_save_name: Kvizmajstro
        description: Faru vian propran kvizon!
        levels:
            14:
                story_text: |
                    En ĉi tiu aventuro vi povas fari vian propran kvizon! Plenigu la vakojn, aldonu pliajn demandojn kaj ĝuu vian propran kvizon!
                    Vi povas fari kvizon pri ĉio, kion vi ŝatas: via ŝatokupo, via plej ŝatata besto, via plej ŝatata libro aŭ io ajn!
                example_code: |
                    ```
                    {print} 'Faru vian propran kvizon'
                    poentoj_a = 0
                    poentoj_b = 0
                    {print} 'Demando'
                    {print} 'Respondopcio A'
                    {print} 'Respondopcio B'
                    respondo = {ask} 'Kiu respondo?'
                    {if} respondo == 'A'
                        poentoj_a = poentoj_a + 1
                    {if} respondo == 'B'
                        poentoj_b = poentoj_b + 1
                    {print} 'Fino de la kvizo!'
                    {print} 'Ni vidu la rezultojn!'
                    {if} poentoj_a > poentoj_b
                        {print} 'Vi apartenas al la A-klubo'
                    {if} poentoj_b > poentoj_a
                        {print} 'Vi apartenas al la B-klubo'
                    ```
    restaurant:
        name: Restoracio
        default_save_name: Restoracio
        description: Kreu vian propran virtualan restoracion
        levels:
            1:
                story_text: |
                    En Nivelo 1, vi povas krei vian propran virtualan restoracion kaj preni la mendojn de viaj gastoj.
                example_code_2: |
                    ```
                    {print} Bonvenon al Restoracio Hedy 🍟
                    {ask} Kion vi volas mendi?
                    {echo} Do vi volas mendi
                    {print} Dankon pro via mendo!
                    {print} Ĝi estas kuirata!
                    ```
            2:
                example_code: |
                    ```
                    {print} Bonvenon al Restoracio Hedy!
                    {print} Hodiaŭ ni servas picon aŭ lasanjojn.
                    manĝaĵo {is} {ask} Kion vi ŝatus manĝi?
                    {print} Bonega elekto! La manĝaĵo estas mia plej ŝatata!
                    topping {is} {ask} Ĉu vi ŝatus viandon aŭ legomojn sur tio?
                    {print} manĝaĵo kun topping estas survoje!
                    trinkas {is} {ask} Kion vi ŝatus trinki per tio?
                    {print} Dankon pro via mendo.
                    {print} Viaj manĝaĵoj kaj trinkaĵoj estos ĝuste tie!
                    ```
            3:
                story_text: |
                    Ĉu vi havas problemon decidante, kion vi volas manĝi por vespermanĝo? Vi povas lasi Hedy elekti por vi!
                    Simple tajpu listojn de viaj plej ŝatataj (aŭ malplej ŝatataj) manĝoj, kaj Hedy povas hazarde elekti vian vespermanĝon.
                    Vi ankaŭ povas iomete amuziĝi, lasante Hedy ankaŭ elekti la prezon de via vespermanĝo! Kion vi ricevos?
                example_code: |
                    ```
                    {print} Bonvenon al la Hazarda Restoracio de Hedy!
                    {print} La ununura restoracio, kiu hazarde elektos vian manĝon kaj ĝian prezon por vi!
                    antaŭmanĝaĵoj {is} salato, supo, krudaĵo
                    ĉefpladoj {is} pico, brussels sprouts, spagetoj
                    desertoj {is} kuketoj, glaciaĵo, francaj fromaĝoj
                    trinkaĵoj {is} kolao, biero, akvo
                    prezoj {is} 1 spesmilo, 10 spesmiloj, 100 spesmiloj
                    {print} Vi komencos per: antaŭmanĝaĵoj {at} {random}
                    {print} Then we'll serve: ĉefpladoj {at} {random}
                    {print} Kaj kiel deserto: desertoj {at} {random}
                    {print} You will get a trinkaĵoj {at} {random} por trinki
                    {print} Jen la totalo: prezoj {at} {random}
                    {print} Dankon kaj ĝuu vian manĝon!
                    ```
                example_code_2: |
                    ```
                    {print} Mistera laktotrinkaĵo
                    ingrediencoj {is} frago, ĉokolado, vanilo
                    alergio {is} {ask} Ĉu vi estas alergia al iu ingredienco?
                    {remove} alergio {from} ingrediencoj
                    {print} Vi ricevas laktotrinkaĵon kun ingrediencoj {at} {random}
                    ```
            4:
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Bonvenon al Restoracio Hedy!
                    {print} Hodiaŭ ni havas picon kaj lasanjojn.
                    manĝaĵo {is} {ask} Kion vi volas manĝi?
                    {print} Great choice! The  manĝaĵo  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} manĝaĵo  with  topping  is on its way!
                    trinkaĵo {is} {ask} Kion vi volas trinki por via manĝo?
                    {print} Dankon pro via mendo.
                    {print} Your  manĝaĵo  and  trinkaĵo  will be right there!
                    ```
            5:
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} jes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    manĝaĵo {is} {ask} 'What would you like to eat?'
                    {print} 'Unu ' manĝaĵo ', coming right up!'
                    trinkaĵo {is} {ask} 'What would you like to drink with that?'
                    {if} trinkaĵo {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Mi ripetos vian mendon…'
                    {print} 'Unu ' manĝaĵo
                    {if} trinkaĵo {is} cola {print} 'kaj…' {else} {print} 'Unu ' trinkaĵo
                    {if} anything {is} ne {print} 'Thats it!' {else} {print} 'Unu ' anything
                    {print} 'Dankon pro via mendo. Ĝuu vian manĝon!'
                    ```
            6:
                example_code: |
                    Vi povas verki simplan kodon por restoracio, jene:
                    ```
                    {print} 'Bonvenon al restoracio Hedy'
                    {print} 'Jen nia menuo:'
                    {print} 'Jen niaj ĉefpladoj: pico, lasanjoj aŭ spagetoj'
                    ĉefplado = {ask} 'Kiun ĉefpladon vi deziras?'
                    prezo = 0
                    {if} ĉefplado {is} pico prezo = 10
                    {if} ĉefplado {is} lasanjoj prezo = 12
                    {if} ĉefplado {is} spagetoj prezo = 8
                    {print} 'Vi mendis ' ĉefplado 'n'
                    {print} 'La prezo estas ' prezo ' spesmiloj'
                    {print} 'Dankon, ĝuu vian manĝon!'
                    ```
            7:
                story_text: |
                    En ĉi tiu nivelo, vi lernis kiel uzi la komandon `{repeat}` por ripeti linion da kodo iomfoje.
                    Vi povas uzi tion en via restoracio por demandi (per la komando `{ask}`) plurajn homojn pri iliaj mendoj jene:
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'Kiom da homoj manĝas ĉe ni hodiaŭ?'
                    {repeat} homoj {times} manĝaĵo = {ask} 'Kion vi volas manĝi?'
                    {print} 'Dankon pro via mendo! La manĝaĵo baldaŭ venos!'
                    ```
            9:
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'How many people will be joining us today?'
                    {print} 'Bonege!'
                    prezo = 0
                    {repeat} homoj {times}
                        manĝaĵo = {ask} 'What would you like to order?'
                        {print} manĝaĵo
                        {if} manĝaĵo {is} terpomfritoj
                            prezo = prezo + 3
                            saŭco = {ask} 'What kind of sauce would you like with your fries?'
                            {if} saŭco {is} sen
                                {print} 'sen saŭco'
                            {else}
                                prezo = prezo + 1
                                {print} 'kun ' saŭco
                        {if} manĝaĵo {is} pico
                            prezo = prezo + 4
                    {print} 'That will be ' prezo ' dollar'
                    {print} 'Ĝuu vian manĝon!'
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo, vi lernos kiel facile peti (per `{ask}`) la mendojn de viaj gastoj en mallonga kodo.
                example_code: |
                    ```
                    pladoj = entreo, ĉefplado, deserto
                    {for} plado {in} pladoj
                        manĝaĵo = {ask} 'Kion vi volas manĝi por via ' plado '?'
                        {print} manĝaĵo ' estos via ' plado
                    ```
                story_text_2: |
                    Kompreneble, vi ankaŭ povus mendi por pluraj homoj!
                example_code_2: |
                    ```
                    pladoj = entreo, ĉefplado, deserto
                    nomoj = Timoteo, Omaro
                    {for} nomo {in} nomoj
                        {for} plado {in} pladoj
                            manĝaĵo = {ask} nomo ', kion vi volas manĝi por via ' plado '?'
                            {print} nomo ' mendas ' manĝaĵo 'n por sia ' plado
                    ```
            11:
                story_text: |
                    Oni povas uzi `{for} i {in} {range} 1 {to} 5` por orde presi (kune kun `{print}`) la mendojn de pluraj klientoj.
                example_code: |
                    ```
                    {print} 'Bonvenon al Restoracio Hedy!'
                    homoj = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} homoj
                        {print} 'Mendo n-ro ' i
                        manĝaĵo = {ask} 'What would you like to eat?'
                        {print} manĝaĵo
                        {if} manĝaĵo {is} terpomfritoj
                            saŭco = {ask} 'What kind of sauce would you like with that?'
                            {print} saŭco
                        trinkaĵo = {ask} 'What would you like to drink?'
                        {print} trinkaĵo
                    prezo = 4 * homoj
                    {print} 'Jen ' prezo ' spesmiloj totale!'
                    ```
            12:
                story_text: |
                    En ĉi tiu nivelo, vi povas uzi decimalajn frakciojn por igi vian menuon pli realeca.
                example_code: |
                    ```
                    prezo = 0
                    manĝaĵo = {ask} 'Kion vi volas mendi?'
                    trinkaĵo = {ask} 'Kion vi volas trinki?'
                    {if} manĝaĵo {is} 'hamburgero'
                        prezo = prezo + 6.50
                    {if} manĝaĵo {is} 'pico'
                        prezo = prezo + 5.75
                    {if} trinkaĵo {is} 'akvo'
                        prezo = prezo + 1.20
                    {if} trinkaĵo {is} 'sodakvo'
                        prezo = prezo + 2.35
                    {print} 'Bonvolu pagi ' prezo ' spesmilojn'
                    ```
            13:
                example_code: |
                    ```
                    prezo = 10
                    manĝaĵo = {ask} 'Kion vi volas manĝi?'
                    trinkaĵo = {ask} 'Kion vi volas trinki?'
                    {if} manĝaĵo {is} 'sandviĉo' {and} trinkaĵo {is} 'suko'
                        {print} 'Jen nia rabatmenuaĵo'
                        prezo = prezo - 3
                    {print} 'La totalo estas ' prezo ' spesmiloj'
                    ```
            15:
                example_code: |
                    ```
                    {print} 'Bonvenon al McHedy'
                    pli = 'jes'
                    _
                        mendo = {ask} 'Kion vi volas mendi?'
                        {print} mendo
                        pli = {ask} 'Ĉu vi volas mendi ion pli?'
                    {print} 'Dankon!'
                    ```
    rock:
        name: Roko, papero, tondilo
        default_save_name: Roko
        description: Faru vian propran ludon de roko, papero kaj tondilo
        levels:
            1:
                story_text: |
                    En Nivelo 1, vi komencu per la ludo «roko, papero, tondilo».

                    Per `{ask}` oni povas fari elekton, kaj per `{echo}` oni povas ripeti tiun elekton.
                example_code: |
                    ```
                    {print} kion vi elektas?
                    {ask} elektu el roko, papero aŭ tondilo
                    {echo} do via elekto estis:
                    ```
                    Anstataŭ vortoj, vi ankaŭ povus uzi vinjetosignojn kompreneble: ✊✋✌
            2:
                story_text: |
                    En ĉi tiu nivelo, vi povas praktiki uzi la variablojn, por ke vi povu fari la ludon de roko, papero kaj tondilo en la sekva nivelo!
                example_code: |
                    ```
                    elekto {is} _
                    {print} Mi elektas elekto
                    ```
            3:
                story_text: |
                    En ĉi tiu nivelo ni povas eniri listojn kaj elekti aferojn el ili.
                    Vi unue faru liston per `{is}`. Tiam vi povas lasi la komputilon elekti ion el la listo per `{at} {random}`.
                    Ekzemple, vi povas lasi la komputilon elekti el roko, papero kaj tondilo.
                example_code: |
                    ```
                    elektoj {is} roko, papero, tondilo
                    {print} elektoj {at} {random}
                    ```
            5:
                story_text: |
                    En ĉi tiu nivelo ni povas determini kiu venkis.
                    Por tio vi bezonas la novan kodon `{if}`.

                    Konservu vian elekton kun la elektonomo kaj la elekto de komputilo kiel komputila elekto.
                    Tiam vi povas uzi `{if}` por vidi {if} ili estas samaj aŭ malsamaj.
                    Ĉu vi finos la kodon?
                example_code: |
                    ```
                    opcioj {is} roko, papero, tondilo
                    komputila_elekto {is} _
                    elekto {is} {ask} 'Kion vi elektas?'
                    {print} 'vi elektis' _
                    {print} 'komputilo elektis' _
                    {if} _ {is} _ {print} 'vana partio!' {else} {print} 'nevana partio'
                    ```

                    Plenigu la ĝustan kodon en la spacoj por kontroli, ĉu la partio estas vana.
            9:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi la tutan ludon de roko, papero kaj tondilo ingante la {if}-komandojn. Ĉu vi povas fini la kodon?
                example_code: |
                    ```
                    elektoj = roko, papero, tondilo
                    via_elekto = {ask} 'Kion vi elektas?'
                    {print} 'Vi elektas ' via_elekto 'n'
                    komputila_elekto = elektoj {at} {random}
                    {print} 'La komputilo elektas ' komputila_elekto 'n'
                    {if} komputila_elekto {is} via_elekto
                        {print} 'Vana partio'
                    {if} komputila_elekto {is} roko
                        {if} via_elekto {is} papero
                            {print} 'Vi gajnas!'
                        {if} via_elekto {is} tondilo
                            {print} 'Vi malgajnas!'
                    # finu ĉi tiun kodon
                    ```
            10:
                story_text: |
                    Ĉu vi estas tro maldiligenta por ludi la ludon mem? Lasu Hedy ludi ĝin por vi!
                example_code: |
                    ```
                    elektoj = roko, papero, tondilo
                    ludantoj = Margareto, Miĥaelo
                    {for} ludanto {in} ludantoj
                         {print} ludanto ' elektas la jenon: ' elektoj {at} {random}
                    ```
            13:
                story_text: |
                    Per la komando `{and}`, vi povas mallongigi vian kodon por la ludo! Rigardu la jenan ekzemplokodon kaj provu kompletigi ĝin.
                example_code: |
                    ```
                    opcioj = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = opcioj {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'Vi gajnas!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'La komputilo gajnas!'
                    ```
            15:
                story_text: |
                    ### Exercise
                    Ludu ĝis vi gajnos! Sed unue, kompletigu la ekzemplan kodon…
                example_code: |
                    ```
                    gajnis = 'ne'
                    opcioj = 'roko', 'papero', 'tondilo'
                    {while} gajnis == 'ne'
                        via_elekto = {ask} 'Kion vi elektas?'
                        komputila_elekto = opcioj {at} {random}
                        {print} 'vi elektis ' via_elekto 'n'
                        {print} 'la komputilo elektis ' komputila_elekto 'n'
                        {if} komputila_elekto == via_elekto
                            {print} 'Vana partio!'
                        {if} komputila_elekto == 'roko' {and} via_elekto == 'tondilo'
                            {print} 'Vi perdas la partion!'
                        {if} komputila_elekto == 'roko' {and} via_elekto == 'papero'
                            {print} 'Vi gajnas la partion!'
                            gajnis = 'jes'
                    ```
    secret:
        name: Superspiono
        default_save_name: Superspiono
        description: Faru vian propran spionkodon
        levels:
            12:
                story_text: |
                    En ĉi tiu aventuro, vi povas krei vian propran superspionkodon. Kodu mesaĝon, kiun nur la ĝusta agento povas deĉifri.
                    Se la malamiko provos solvi la kodon, ili ricevos falsajn informojn por malŝpari sian tempon.
                example_code: |
                    ```
                    nomo = {ask} 'Kio estas via nomo?'
                    {if} nomo {is} 'Agento007'
                        a = 'Iru al la flughaveno '
                    {else}
                        a = 'Iru al la stacidomo '
                    pasvorto = {ask} 'Kio estas la pasvorto?'
                    {if} pasvorto {is} 'SEKRETO'
                        b = 'morgaŭ je la 2a horo'
                    else
                        b = 'hodiaŭ je la 10a horo'
                    {print} a + b
                    ```
            13:
                story_text: |
                    La kodo, kiun vi faris en la antaŭa nivelo, estas simpligebla en ĉi tiu nivelo per la komando `{and}`.
                example_code: |
                    ```
                    nomo = {ask} 'Kio estas via nomo?'
                    pasvorto = {ask} 'Kio estas via pasvorto?'
                    {if} nomo {is} 'Agento007' {and} pasvorto {is} 'SEKRETO'
                        {print} 'Iru al la flughaveno je la 2a horo'
                    {else}
                        {print} 'Iru al la stacidomo je la 10a horo'
                     ```
    songs:
        name: Kantu!
        default_save_name: Kanto
        description: Presi kanton
        levels:
            6:
                story_text: |
                    Kantoj ofte enhavas multe da ripetado. Foje la ripeto ankaŭ baziĝas sur kalkulado.
                    Ekzemple, en la konata kanto 'Boteloj da biero'. Vi povas programi tiun kanton per iom da matematiko.
                example_code: |
                    ```
                    nombro = 99
                    {print} nombro ' boteloj da biero sur la muro'
                    {print} nombro ' boteloj da biero'
                    {print} 'Prenu unu, ĝuu ĝin kune'
                    nombro = nombro - 1
                    {print} nombro ' boteloj da biero sur la muro'
                    ```

                    Vi nun povas ripeti liniojn 2 ĝis 6 tiom da fojoj, kiom vi volas, kopiante la liniojn.
            7:
                story_text: |
                    Kantoj ofte enhavas multe da ripetaĵojn. Ekzemple… Ŝarkido! Se vi kantas ĝin, vi ripete kantas la samajn vortojn:

                    Ŝarkido tututudutudu <br>
                    Ŝarkido tututudutudu <br>
                    Ŝarkido tututudutudu <br>
                    Ŝarkido

                    Vi povas malplilongigi la kanton per `{repeat}`! Ĉu vi povas kompletigi la kodon?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Ŝarkido tututudutudu'
                    {print} 'Ŝarkido'
                    ```

                    Post Ŝarkido, vi povas programi aliajn kantojn. Ekzistas multaj kantoj enhavantaj ripetaĵojn.
            8:
                story_text: |
                    En antaŭa nivelo vi programis la kanton 'Boteloj da biero'. Vi faris unu verson kaj tiam devis kopii la versojn 99 fojojn. En la nivelo 7 vi povas ripeti la kanton 99 fojojn, nur aldonante unu simplan linion!
                example_code: |
                    ```
                    nombro = 99
                    {repeat} 99 {times}
                        {print} nombro ' boteloj da biero sur la muro'
                        {print} nombro ' boteloj da biero'
                        {print} 'Prenu unu, ĝuu ĝin kune'
                        nombro = nombro - 1
                        {print} nombro ' boteloj da biero sur la muro'
                    ```
            10:
                story_text: |
                    En ĉi tiu nivelo vi povas facile fari la infanan kanton "Kvin simietoj". Ĉu vi povas fari la lastan koruson?
                    Vi ankaŭ povas fari la tutan beban ŝarkan kanton (inkluzive de ĉiuj aliaj ŝarkoj en la familio) en nur 6 linioj!
                    Aŭ vi povas fari Old MacDonald kun ĉiuj malsamaj bestoj.
                example_code: |
                    ```
                    simioj = 5, 4, 3, 2
                    {for} simio {in} simioj
                        {print} simio ' simietoj saltantaj sur la lito'
                        {print} 'Oni defalis kaj vundis sian kapon'
                        {print} 'Panjo vokis la kuraciston, kiu diris:'
                        {print} 'SIMIOJ NE SALTU SUR LA LITO!'
                    ```

                    ```
                    ŝarkoj = ŝarkido, panjo, paĉjo, avinjo, avĉjo
                    {for} ŝarko {in} ŝarkoj
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko 'tututututudu'
                        {print} ŝarko
                    ```
                    ```
                    bestoj = porko, hundo, bovo
                    {for} besto {in} bestoj
                        {if} besto {is} porko
                            sono = grunt
                        {if} besto {is} hundo
                            sono = boj
                        {if} besto {is} bovo
                            sono = muĝ
                        {print} 'Maljuna MacDonald havis bienon'
                        {print} 'I Aj I Aj O!'
                        {print} 'kaj en la bieno estis ' besto
                        {print} 'I Aj I Aj O!'
                        {print} 'kun ' sono sono ' ĉi tie'
                        {print} 'kaj ' sono sono ' tie'
                        {print} 'jen ' sono
                        {print} 'aliloke ' sono
                        {print} 'ĉie ' sono sono
                    ```
            11:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi la komandon `{for} i {in} {range}` por fari kantojn, kiuj uzas kalkuladon.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i 'simietoj saltantaj sur la lito'
                        {print} 'Iu defalis kaj vundis sian kapon'
                        {print} 'Panjo vokis la kuraciston, kiu diris'
                        {if} i {is} 1
                            {print} 'ENLITIGU TIUJN SIMIOJN!'
                        {else}
                            {print} 'SIMIOJ NE SALTU SUR LA LITO!'
                    ```
            12:
                story_text: |
                    En ĉi tiu kanto, oni povas eĉ pli facile programi «se vi estas feliĉa kaj vi scias ĝin, frapu la manojn», ĉar oni povas meti ĉiujn agojn en unu variablon jene:<!--{if}-->
                example_code: |
                    ```
                    agoj = 'frapu manojn', 'frapu piedojn', 'kriu «hura!»'
                    {for} ago {in} agoj
                        {for} mi {in} {range} 1 {to} 2
                            {print} 'se vi feliĉas kaj scias tion'
                            {print} ago
                        {print} 'se vi feliĉas kaj scias tion kaj vi volas montri tion'
                        {print} 'se vi feliĉas kaj scias tion'
                        {print} ago
                    ```
            16:
                story_text: |
                    En ĉi tiu nivelo, vi povas programi kanton kiel OldMacDonald eĉ pli rapide. Vi povas konekti la ĝustan beston al la ĝusta sono simple metante ilin en la sama loko en la listo.
                    La Ebria Maristo ankaŭ estas rapide farita en ĉi tiu nivelo. Vi nur bezonas 8 liniojn por la tuta kanto, kontrolu ĝin!
                example_code: |
                    ```
                    bestoj = ['porko', 'hundo', 'bovo']
                    sonoj = ['oink', 'woof', 'muĝ']
                    {for} i {in} {range} 1 {to} 3
                        besto = _
                        sono = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' besto
                        {print} 'E I E I O!'
                        {print} 'with a ' sono sono ' here'
                        {print} 'and a ' sono sono ' there'
                        {print} 'here a ' sono
                        {print} 'there a ' sono
                        {print} 'everywhere a ' sono sono
                    ```

                    ```
                    linioj = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} linio {in} linioj
                        {for} i {in} {range} 1 {to} 3
                            {print} linio
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    turtle:
        name: Testudo
        default_save_name: Testudo
        description: Faru vian propran desegnaĵon
        levels:
            1:
                story_text: |
                    Vi ankaŭ povas uzi Hedy por desegni. Kombinante turnojn kaj liniojn, vi povas fari kvadraton aŭ ŝtuparon!

                    Per `{forward}` oni desegnas linion antaŭen. La nombro malantaŭ ĝi determinas kiom longe la testudo marŝos. `{turn} {right}` turnas la testudon kvaronturnon horloĝdirekte; `{turn} {left}`{left}` turnas la testudon kontraŭhorloĝe.
                    Se vi volas iri malantaŭen, uzu la komandon `{forward}` kun negativa nombro. Do ekzemple, `{forward} -100`
                story_text_2: |
                    ### Exercise
                    Jen la komenco de eta ŝtuparo. Ĉu vi povas igi ĝin havi 5 ŝtupojn?
            2:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi variablojn por fari la testudon interaga. Ekzemple vi povas demandi al la ludanto kiom da paŝoj devas fari la testudo.
                example_code: |
                    ```
                    respondo {is} {ask} Kiom da paŝoj faru la testudo?
                    {forward} respondo
                    ```
                story_text_2: |
                    Ankaŭ, en nivelo 1 la testudo povis nur turni maldekstren aŭ dekstren. Tio estas iom enuiga!
                    En nivelo 2 li povas direkti sian nazon en ĉiuj direktoj.

                    Uzu 90 por turni kvaronon. Ni nomas ĉi tion gradoj. Plena turniĝo estas 360 gradoj.
                    Ĉu vi povas fari figuron kun ĉi tiu kodo? Eble triangulo aŭ cirklo?
                example_code_2: |
                    ```
                    {print} Desegnante figurojn
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
            3:
                story_text: |
                    En ĉi tiu nivelo, oni povas uzi `{at} {random}` kun la desegnanta testudo. Hazarda elekto igas la testudon marŝi laŭ malsamaj vojoj ĉiufoje.
                    Uzu `{at} {random}` por elekti valoron el listo. Vi povas kopii kaj alglui liniojn 2 kaj 3 por krei pli longan hazardan vojon.
                example_code: |
                    ```
                    anguloj {is} 10, 50, 90, 150, 250
                    {turn} anguloj {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    En Nivelo 4, oni devas uzi citilojn kun `{print}` kaj `{ask}`. Ankaŭ dum desegnado!
                example_code: |
                    ```
                    {print} 'Desegnante figurojn'
                    angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
            5:
                story_text: |
                    En Nivelo 5, oni povas fari elekton per `{if}`. Ekzemple, inter diversaj specoj de figuroj.
                example_code: |
                    ```
                    {print} 'Desegnante figurojn'
                    figuro {is} {ask} 'Ĉu vi deziras kvadraton aŭ triangulon?'
                    {if} figuro {is} triangulo angulo {is} 120
                    {else} angulo {is} 90
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    {turn} angulo
                    {forward} 25
                    ```
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    En ĉi tiu nivelo vi povas uzi kalkulojn por desegni malsamajn figurojn.
                    Vi eble lernis en la lernejo, ke turni plenan cirklon estas 360 gradoj. Se ne, nun vi scias!
                    Tial vi ankaŭ uzas 90 gradojn por kvadrato. 360 dividita per 4 estas 90.
                    Nun kiam ni povas fari matematikon kun Hedy, ni povas desegni ĉiujn figurojn, kiujn ni volas!
                example_code: |
                    ```
                    anguloj = {ask} 'Kiom da anguloj vi deziras?'
                    angulo = 360 / anguloj
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    {forward} 50
                    {turn} angulo
                    ```
            8:
                story_text: |
                    Nun ni povas ripeti plurajn liniojn; tial ni povas fari figurojn pli facile.
                    Ni devas nur unufoje agordi la angulon kaj poste uzi tiun variablon en la `{repeat}`.
                example_code: |
                    ```
                    angulo = 90
                    {repeat} 10 {times}
                        {turn} angulo
                        {forward} 50
                    ```
                story_text_2: |
                    Ankaŭ ni nun povas plibonigi la programon, kiu desegnas malsamajn figurojn.
                    Ĉu vi povas eltrovi kiom malproksimen la testudo devas turni ĉi tien? Finu la kodon kaj vi povas desegni ajnan plurangulon, kiun vi ŝatus!
                example_code_2: "```\nanguloj = {ask} 'Kiom da anguloj mi desegnu?'\nangulo = 360 / anguloj \n{repeat} anguloj {times}\n    {turn} _\n    {forward} _\n```\n"
