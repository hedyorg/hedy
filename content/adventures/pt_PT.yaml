adventures:
    story:
        name: Hist√≥ria
        default_save_name: Hist√≥ria
        description: Crie uma hist√≥ria pequena
        levels:
            1:
                story_text: |
                    No n√≠vel 1 podes criar uma hist√≥ria com um personagem principal diferente, sa√≠do da tua imagina√ß√£o.

                    Na primeira linha, usa `{ask}` e pergunta √† personagem principal como ser√° a hist√≥ria.

                    Ap√≥s a primeira linha, come√ßa com `{print}` se precisares que a frase seja escrita.
                    Utilizas `{echo}` se quiseres colocar o teu personagem principal no final da frase.
                example_code: "```\n{ask} O(A) personagem principal desta hist√≥ria √©\n{print} O(A) personagem principal vai caminhar agora na floresta\n{echo} Est√£o um pouco assustados,\n{print} Ouvem barulhos estranhos por toda a parte\n{print} Receiam que esta floresta seja assombrada\n```\n"
                story_text_2: |
                    ### Exerc√≠cio
                    Agora, cria a tua pr√≥pria hist√≥ria com pelo menos 6 linhas de c√≥digo.
                    Esta hist√≥ria n√£o pode ser igual ao c√≥digo de exemplo.
                    Usa pelo meno um comando `{ask}` e um `{echo}`.
                    Podes escolher o tema que preferires.
                    Se n√£o conseguires lembrar-te de um tema, escolhe uma das nossas op√ß√µes: ir ao cinema, um evento desportivo ou um dia no zoo.
            2:
                story_text: |
                    No n√≠vel 2 podes tornar a tua hist√≥ria ainda mais divertida. O nome da tua personagem principal pode agora aparecer em qualquer parte da frase.

                    Precisas de programar algumas coisas extra, para conseguires isso. Antes de mais, tens de atribuir o nome ao teu personagem principal.

                    Depois, podes colocar esse nome em qualquer lugar da frase.
                example_code: |-
                    ```
                    nome {is} {ask} Qual √© o nome da tua personagem principal?
                    {print} nome vai agora correr na floresta
                    {print} nome est√° um pouco assustado(a)
                    {print} De repente, escuta um barulho estranho...
                    {sleep}
                    {print} nome receia que esta floresta seja assombrada
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Chegou o momento de adicionar vari√°veis √† tua hist√≥ria, que constru√≠ste no n√≠vel anterior.
                    Vai at√© 'Os meus programas', procura pela hist√≥ria aventura do n√≠vel 1 e copia o c√≥digo. Cola o c√≥digo na tua janela de introdu√ß√£o neste n√≠vel.

                    Este c√≥digo n√£o ir√° funcionar neste n√≠vel, porque ainda n√£o usaste vari√°veis.
                    Altera os comandos `{ask}` e `{echo}` no teu c√≥digo para a forma correcta, que aprendeste neste n√≠vel.

                    **Extra** Adiciona um comando `{sleep}` ao teu c√≥digo, para aumentar o nervosismo na tua hist√≥ria.
            3:
                story_text: |
                    No n√≠vel 3 podes tornar a tua hist√≥ria mais divertida. Podes usar a aleatoriedade para qualquer monstro, animal ou outro obst√°culo, da seguinte forma:
                example_code: |
                    ```
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Agora conseguem ouvir o barulho de animais {at} {random}
                    ```
                story_text_2: |
                    O comando `{add}` pode tamb√©m ser √∫til na tua hist√≥ria. Por exemplo
                example_code_2: |
                    ```
                    {print} Ouvem um ru√≠do
                    animais {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} O que achas que √©?
                    {add} animal {to_list} animais
                    {print} era um animais {at} {random}
                    ```
                story_text_3: |
                    Este √© um exemplo do comando `{remove}` na tua hist√≥ria

                    ### Exerc√≠cio
                    Copia a tua hist√≥ria do n√≠vel anterior para este novo n√≠vel.
                    Neste n√≠vel aprendeste 3 novos comandos `{at} {random}`, `{add} {to_list}` e `{remove} {from}`.
                    Adiciona novas linhas de c√≥digo √† tua hist√≥ria, por forma a que todos os novos comandos apare√ßam, pelo menos, uma vez na tua hist√≥ria.
                example_code_3: |
                    ```
                    {print} A mochila dele ficou demasiado pesada.
                    {print} No interior, estavam uma garrafa de √°gua, uma lanterna e um tijolo.
                    mochila {is} √°gua, lanterna, tijolo
                    despeja {is} {ask} Que objeto ele devia despejar?
                    {remove} despeja {from} mochila
                    ```
            4:
                story_text: |
                    ### Exerc√≠cio
                    Copia o c√≥digo de exemplo e completa-o, adicionando aspas no espa√ßos vazios nas linhas 1 e 2.
                    Os espa√ßos vazios nas linhas 3 e 4 n√£o devem ser substitu√≠dos por aspas, mas sim por um comando `{sleep}` e um `{clear}`. Consegues fazer isto resultar?

                    ### Exerc√≠cio 2
                    Volta ao n√≠vel anterior e copia o c√≥digo da tua hist√≥ria. Faz com que o c√≥digo funcione neste n√≠vel, adicionando aspas nos s√≠tios certos.
                    Lembra-te: As vari√°veis na tua pr√≥pria hist√≥ria devem estar fora das aspas. Tal como est√° na segunda linha do c√≥digo de exemplo. Nessa linha, o nome da vari√°vel √© colocado por fora das aspas.
                example_code: |
                    ```
                    nome {is} {ask} _ Qual √© o seu nome? _
                    {print} _ O personagem principal chama-se _ nome
                    _
                    _
                    {print} nome _ vai agora caminhar na floresta _
                    {print} nome _ est√° um pouco(a) assustado(a) _
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Ele ouve o som de um _ animais {at} {random}
                    {print} nome _ receia que √© uma floresta assombrada _
                    ```
            5:
                story_text: |
                    Neste n√≠vel podes programar diferentes finais, o que ir√° tornar a tua hist√≥ria ainda mais divertida.
                    No c√≥digo de exemplo podes ver como podes criar 2 finais diferentes.

                    ### Exerc√≠cio 1
                    Escreve uma nova hist√≥ria curta com, pelo menos, 6 linhas de c√≥digo sobre um tema √† tua escolha.
                    Sem inspira√ß√£o? Escolhe um dos seguintes t√≥picos: um super-her√≥i, um dia chato na escola, preso numa ilha deserta.

                    Agora concede ao jogador a possibilidade de escolher um final feliz ou triste, tal como no c√≥digo de exemplo.
                    Programa ambos os finais.

                    ### Exerc√≠cio 2
                    Copia a hist√≥ria que criaste na tua pr√≥pria hist√≥ria aventura, nos n√≠veis anteriores.
                    Encontra uma forma de inclu√≠res na tua hist√≥ria, pelo menos, 2 comandos `{if}` e `{else}`.
                    Podes faz√™-lo com um final feliz e outro triste, mas podes tamb√©m experimentar outras maneiras de incorporar os comandos.
            7:
                story_text: |
                    Numa hist√≥ra, algu√©m pode repetir palavras v√°rias vezes. Por exemplo, quando gritam por ajuda ou cantam uma can√ß√£o.
                    Podes colocar estas repeti√ß√µes na tua hist√≥ria, neste n√≠vel, com o `{repeat}`.

                    ### Exerc√≠cio
                    Adiciona repeti√ß√£o √† tua pr√≥pria hist√≥ria. Volta aos teus programas guardados, escolhe o teu programa da hist√≥ria de um n√≠vel anterior e
                    procura uma linha contendo `{print}` e repete-a!
                example_code: |
                    ```
                    {print} 'O pr√≠ncipe continuava a gritar por ajuda'
                    {repeat} 5 {times} {print} 'Socorro!'
                    {print} 'Porque √© que ningu√©m me ajuda?'
                    ```
            8:
                story_text: |
                    Neste n√≠vel podes usar m√∫ltiplos comandos `{if}`, desta forma, podes melhorar o teu final feliz ou triste!

                    ### Exerc√≠cio 1
                    O c√≥digo de exemplo mostra dois finais diferentes; um onde os personagens saltam para uma m√°quina do tempo e outro onde isso n√£o acontece.
                    Completa os espa√ßos em branco com pelo menos uma frase por cada final.
                    **Extra** Torna a hist√≥ria mais longa. O que acontece na hist√≥ria? Podes tamb√©m adicionar um segundo `{ask}` com diferente op√ß√µes.

                    ### Exerc√≠cio 2
                    Regressa ao teus programas guardados, escolhe o programa da tua hist√≥ria do n√≠vel 5. Agora, escreve um final feliz e um final triste, com pelo menos tr√™s linhas cada um!
                example_code: |
                    ```
                    {print} 'OH, N√ÉO! O T-rex est√° a aproximar-se!'
                    fim = {ask} 'Quer um final feliz ou triste?'
                    {if} fim {is} feliz
                        {print} 'Mesmo a tempo, Ricardo salta para dentro da m√°quina do tempo!'
                        {print} _
                    {else}
                        {print} 'Oh, n√£o! Ricardo √© demasiado lento...'
                        {print} _
                    ```
            9:
                story_text: |
                    Neste n√≠vel pode utilizar comandos `{if}` e `{repeat}` dentro de outros comandos `{if}` e `{repeat}`.
                    Isto proporciona-lhe muitas op√ß√µes e ajuda imenso a tornar a sua hist√≥ria mais interativa.

                    ### Exerc√≠cio 1
                    Termine o c√≥digo para que o `{if}` funcione corretamente.

                    ### Exerc√≠cio 2
                    Adicione tamb√©m um `{if}` e um `{else}` para a parte da hist√≥ria em que Robin regressa a casa.

                    ### Exerc√≠cio 3
                    Volte para a sua hist√≥ria de n√≠vel 8 e utilize pelo menos dois `{if}`s dentro de outro `{if}`.
                example_code: |
                    ```
                    {print} 'Robin est√° a caminhar pela baixa da cidade'
                    local = {ask} 'Robin vai entrar numa loja ou est√° a voltar para casa?'
                    {if} local {is} loja
                    	{print} 'Ela entra na loja.'
                    	{print} 'Robin v√™ um livro com um aspecto interessante'
                    	livro = {ask} 'A Robin compra o livro?'
                    	{if} livro {is} sim
                    	_ {print} 'Robin compra o livro e volta para casa'
                    	_ {else}
                    	_ {print} 'Robin sai da loja e volta para casa'
                    {else}
                    	{print} 'Robin volta para casa'
                    ```
            10:
                story_text: |
                    Neste n√≠vel podes usar o comando {for} na tua hist√≥ria. Desta maneira, podes facilmente programar o livro infantil 'Urso Castanho, Urso Castanho, o que v√™s aqui?'.

                    ### Exerc√≠cio

                    Vai ver <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> a hist√≥ria</a>, se ainda n√£o a conheces, e assegura-te que √© escrita conforme est√° no livro.
                example_code: "```\nanimais = _ , _, ¬≠¬≠¬≠_  \n{print} 'Urso Castanho, Urso Castanho'\n{print} 'O que v√™s aqui?'\n```\n"
            13:
                story_text: |
                    Usando os comandos `{and}` e `{or}` , podes tornar as tuas hist√≥rias ainda mais vers√°teis. Podes colocar duas quest√µes e responder √† combina√ß√£o de ambas as respostas.

                    ### Exerc√≠cio 1
                    Observa o c√≥digo de exemplo e completa-o. Em seguida, inclui mais 2 c√≥digos `{if}` com `{and}` ou `{or}`.

                    ### Exerc√≠cio 2
                    Encontra uma hist√≥ria de um n√≠vel anterior e adiciona um `{and}` ou `{or}`.
                example_code: |
                    ```
                    {print} 'O nosso her√≥i caminha pela floresta'
                    {print} 'O caminho divide-se em dois'
                    caminho = {ask} 'Qual o caminho que ela deve escolher?'
                    arma = {ask} 'Que arma deve utilizar?'
                    {if} caminho {is} 'esquerda' {and} arma {is} 'espada'
                    	_
                    ```
            15:
                story_text: |
                    Recorrendo ao ciclo `{while}` podes tornar as tuas hist√≥rias mais interessantes. Por exemplo, podes usar `{while} game == 'on'` para que possas jogar at√© o jogo chegar ao fim.
                    Ou ent√£o podes usar `{while} sword == 'lost'` para que o jogador n√£o possa continuar o jogo, at√© que encontre algum objecto.

                    ### Exerc√≠cio
                    O c√≥digo de exemplo mostra-te como usar o ciclo `{while}` numa hist√≥ria. Agora, **pensa no teu pr√≥prio cen√°rio** no qual o jogador tem de encontrar algo antes que possa continuar.
            18:
                story_text: |
                    Vamos agora escrever outra hist√≥ria, mas agora temos de usar chavetas com o `{print}`.

                    ### Exerc√≠cio 1
                    Cria uma hist√≥ria com pelo menos 5 frases. N√£o precisas de usar j√° a vari√°vel 'nome'.
                example_code: |
                    ```
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
                story_text_2: |
                    ### Exerc√≠cio 2
                    J√° preparamos um `{input}` para ti. Primeiro, usa a vari√°vel `name` na tua hist√≥ria.
                    Depois, adiciona um segundo `{ask}` e usa a vari√°vel tamb√©m.
                    Dica: Lembra-te das v√≠rgulas no `{print}` entre o texto e as vari√°veis!
                example_code_2: |
                    ```
                    nome = {input}("Qual √© o teu nome?")
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
    add_remove_command:
        default_save_name: adiciona_remove_comando
        description: introduzindo {add} {to_list} e {remove} {from}
        levels:
            3:
                story_text: |
                    ## Adiciona a
                    Podes adicionar itens a uma lista com o comando `{add} {to_list}`. Para adicionar um item a uma lista, basta digitar: `{add} penguin {to_list} animals` o podes usar o comando `{ask}` como no c√≥digo de exemplo.
    default:
        name: Introdu√ß√£o
        default_save_name: introdu√ß√£o
        description: Explica√ß√£o do n√≠vel
        levels:
            1:
                story_text: |
                    Bem-vindo √† Hedy! Aqui podes aprender a programar passo a passo.

                    Experimente o c√≥digo voc√™ mesmo! O bot√£o amarelo copia o c√≥digo de exemplo para o seu campo de programa√ß√£o.
                    Depois carregue no bot√£o verde 'Executar c√≥digo' por baixo do campo de programa√ß√£o para executar o c√≥digo.

                    J√° est√° pronto? Ent√£o, passa ao separador seguinte para aprenderes a criar os teus pr√≥prios c√≥digos!
            3:
                story_text: |
                    No n√≠vel 3 tamb√©m podes criar uma lista. Podes fazer o computador escolher algo aleat√≥rio (ou seja, uma coisa ao calhas) dessa lista. Fazes isso utilizando 'at random'.

                    Encontras todos os c√≥digos do n√≠vel 3 na barra esquerda. Temos tamb√©m separadores com tarefas.
            4:
                story_text: |
                    `ask` funciona no n√≠vel 4 tal como funcionava no n√≠vel 3, mas `print` est√° diferente agora.

                     Tens de colocar o texto que queres escrever entre aspas simples.

                     Isto √© √∫til, porque agora podes escrever todas as palavras que queres. O mesmo se aplica √†s palavras com que costumavas guardar algo usando `is`.

                     A maioria das linguagens de programa√ß√£o tamb√©m usam aspas simples quando querem escrever, por isso, estamos um passo mais pr√≥ximos da realidade da programa√ß√£o!

                     Vais encontrar os comandos √† esquerda, novamente, e as tarefas nos separadores seguintes. √Ä medida que avan√ßas pelos separadores, as tarefas v√£o ficando mais dif√≠ceis.
                     Por isso, √© melhor come√ßares pela esquerda na hist√≥ria e ires avan√ßando para a direita, para que o desafio v√° aumentando, gradualmente.

            5:
                story_text: |
                    `ask` e `print` funcionam como no n√≠vel 4.

                     No n√≠vel 5 temos algo novo, o `if`! Com o `if` podes escolher entre duas op√ß√µes diferentes.

                     Este c√≥digo escreve Fixe! se colocares Hedy como nome e boo! se colocares outra coisa qualquer.


                     Tamb√©m no n√≠vel 5 as tarefas que vais encontrar nos separadores est√£o a tornar-se mais dif√≠ceis. Por isso, completa-as da esquerda para a direita.
                example_code: |-
                    ```
                    nome is ask 'Como te chamas?'
                    if nome is Hedy print 'Fixe!' else print 'boo!'
                    ```
            6:
                story_text: |
                    No n√≠vel anterior praticou com `{ask}` e `{if}`. Por exemplo, pode perguntar aos convidados o que eles gostariam de comer.
                    O que ainda n√£o pode fazer √© calcular o pre√ßo do jantar de todos.

                    Este n√≠vel permite utilizar a adi√ß√£o, a subtra√ß√£o e a multiplica√ß√£o nos seus programas. Desta forma, podes calcular os pre√ßos no teu restaurante, mas tamb√©m podes acrescentar um c√≥digo secreto para fazeres um desconto aos teus amigos e familiares.
                    Outra op√ß√£o neste n√≠vel √© programar o teu pr√≥prio jogo de matem√°tica, para o teu irm√£o ou irm√£ mais novos praticarem as multiplica√ß√µes.
                    V√™ por ti pr√≥prio!
                example_code: |-
                    ```
                    print '5 mais 5 √© ' 5 + 5
                    print '5 menos 5 √© ' 5 - 5
                    print '5 vezes 5 √© ' 5 * 5
                    ```
            7:
                story_text: |
                    `ask`, `print` e `if` funcionam, exactamente, como acontecia no n√≠vel 5 e 6.
                    Mas o n√≠vel 7 acrescenta o comando `repeat`.  `repeat` pode ser usado para executar uma linha de c√≥digo m√∫ltiplas vezes.
                example_code: |-
                    ```
                    repeat 3 times print 'Hedy √© divertida!'
                    ```
            8:
                story_text: |
                    `ask` e `print` ainda funcionam como j√° conheces. Mas `if` e `repeat` mudaram!
                    Tu podes agora executar grupos de c√≥digo em conjunto, mas vais ter de indentar o c√≥digo.
                    Isto significa colocar quatro espa√ßos no in√≠cio da linha. Isto tamb√©m se aplica quando quiseres apenas criar um bloco s√≥ de uma linha.

                    Se juntares um `repeat` e um `if`, ter√°s de indentar cada bloco. Observa o exemplo de c√≥digo para mais detalhes!"
                example_code: |-
                    ```
                    repeat 5 times
                        print 'Ol√° a todos!'
                        print 'Tudo isto √© repetido 5 vezes.'
                    ```
            13:
                story_text: Vamos agora aprender `and` e `or`! Se queres verificar duas instru√ß√µes, n√£o precisas de usar dois `if` mas podes usar `and` e `or`. Se utilizares `and`, ambas as instru√ß√µes, √† esquerda e √† direita do `and` t√™m de ser verdadeiras. Podemos tamb√©m utilizar `or`. Neste caso, apenas uma das instru√ß√µes tem de ser verdadeira.
            14:
                story_text: Vamos aprender mais coisas novas! Podes j√° ter aprendido sobre elas na Matem√°tica, o `<` e `>`. O `<` verifica se o primeiro n√∫mero √© menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro n√∫mero √© maior que o segundo, como `6 > 5`.
            15:
                story_text: Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o ciclo enquanto a instru√ß√£o for verdadeira/v√°lida! Portanto, no exemplo de c√≥digo, continuamos at√© ser dada a resposta certa. Se a resposta correcta nunca for dada, o ciclo nunca acaba!
            16:
                story_text: "N√≥s vamos criar listas do jeito do Python, com par√™ntesis reto ao redor das listas! N√≥s tamb√©m mantemos as aspas em torno de cada item, como n√≥s aprendemos nos n√≠veis anteriores. \nTamb√©m pode usar os par√™ntesis para indicar um lugar nas listas."
            17:
                story_text: "Agora, n√≥s vamos alterar um pouco a indenta√ß√£o. Cada vez que n√≥s precisarmos de uma indenta√ß√£o, n√≥s temos de colocar `:` na linha antes da indenta√ß√£o. \n \nNeste n√≠vel, tamb√©m pode usar um novo comando:  `{elif}`. `{elif}` √© curto para `{else} {if}` e precisa disto quando quiser criar 3 (ou mais!) op√ß√µes.\nD√™ uma vista de olhos!"
    fortune:
        levels:
            3:
                example_code: |
                    Neste exemplo o jogador pode {ask} Hedy uma quest√£o 'sim-n√£o' e Hedy ir√° escolher uma resposta aleatoriamente para si.
                    ```
                    {print} Eu sou Hedy o adivinho!
                    quest√£o {is} {ask} O que quer saber?
                    {print} Isto √© o que quer saber: quest√£o
                    respostas {is} sim, n√£o, talvez
                    {print} A minha bola de cristal diz...
                    {sleep} 2
                    {print} respostas {at} {random}
                    ```
