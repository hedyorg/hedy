adventures:
    story:
        name: Geschichte
        default_save_name: Geschichte
        description: Schreib eine Kurzgeschichte
        levels:
            1:
                story_text: |
                    In Level 1 kannst du die Hauptfigur deiner Geschichte √§ndern, indem du ihren Namen selbst eingibst.

                    Nutze `{ask}` in der ersten Zeile um zu fragen, wer der Hauptcharakter der Geschichte sein soll.

                    Beginne anschlie√üend eine Zeile mit `{print}`, wenn ein Satz ausgegeben werden soll.
                    Nutze `{echo}`, wenn du m√∂chtest, dass der Name deiner Hauptfigur am Ende des Satzes steht.
                example_code: |
                    ```
                    {ask} Der Name der Hauptfigur lautet
                    {print} Die Hauptfigur l√§uft nun durch einen dunklen Wald
                    {echo} Er ist etwas ver√§ngstigt,
                    {print} Er h√∂rt √ºberall seltsame Ger√§usche
                    {print} Er bef√ºrchtet, dass es in diesem Wald spukt
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle nun deine eigene Geschichte aus mindestens 6 Zeilen Code.
                    Diese Geschichte soll nicht die gleiche sein wie im Beispiel-Code.
                    Benutze mindestens einen `{ask}` und einen `{echo}` Befehl.
                    Du kannst das Thema frei w√§hlen.
                    Wenn dir kein Thema einf√§llt, nimm eines der folgenden: ins Kino gehen, ein Sportwettkampf oder ein Tag im Zoo.
            2:
                story_text: |
                    In Level 2 kannst du deine Geschichte noch etwas spannender machen. Der Name deiner Hauptfigur kann nun an jeder Stelle im Satz auftauchen.

                    Daf√ºr musst du aber auch ein kleines bisschen mehr programmieren. Du musst dir jetzt seinen oder ihren Namen richtig merken.

                    Daf√ºr kannst du den Namen irgendwo im Satz verwenden.
                example_code: |-
                    ```
                    Name {is} {ask} Wie lautet der Name der Hauptfigur?
                    {print} Name l√§uft nun durch einen dunklen Wald.
                    {print} Name hat etwas Angst.
                    {print} Pl√∂tzlich ert√∂nen seltsame Ger√§usche...
                    {sleep}
                    {print} Name hat Angst, dass es in diesem Wald spukt.
                    ```
                story_text_2: |
                    ### √úbung
                    Nun ist es an der Zeit, Variablen zu deiner eigenen Geschichte aus dem vorigen Level hinzu zu f√ºgen.
                    Gehe zu "Meine Programme", suche dein Level 1 Geschichten-Abenteuer und kopiere den Code. F√ºge den Code in den Eingabebereich in diesem Level ein.

                    Dieser Code wird nicht funktionieren, weil du noch keine Variablen benutzt hast.
                    Bringe den `{ask}` Befehl und den `{echo}` Befehl in deinem Code in die richtige Form, die du in diesem Level gelernt hast.

                    **Extra** F√ºge deinem Code den `{sleep}`-Befehl hinzu, um Spannung in deiner Geschichte aufzubauen.
            3:
                story_text: |
                    In Level 3 wird es etwas witziger. Du kannst nun etwas ganz zuf√§lliges zu Deiner Geschichte hinzuf√ºgen. Ein beliebiges Monster, ein Tier oder ein Hindernis. Das funktioniert so:
                example_code: |
                    ```
                    Tiere {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Er h√∂rt jetzt ein Tierger√§usch von Tiere {at} {random}
                    ```
                story_text_2: |
                    Der Befehl `{add}` k√∂nnte auch n√ºtzlich werden in deiner Geschichte.
                example_code_2: |
                    ```
                    {print} Er h√∂rt ein Ger√§usch
                    tiere {is} üêø, ü¶î, ü¶á, ü¶â
                    tier {is} {ask} Was denkst du ist es?
                    {add} tier {to_list} tiere
                    {print} Es war das tiere {at} {random}
                    ```
                story_text_3: |
                    Das ist ein Beispiel f√ºr den `{remove}` Befehl in deiner Geschichte

                    ### √úbung
                    Kopiere deine Geschichte aus den vorigen Leveln in dieses Level.
                    In diesem Level hast du 3 neue Befehle gelernt: `{at} {random}` , `{add} {to_list}` und `{remove} {from}`.
                    F√ºge neue Zeilen Code zu deiner Geschichte hinzu, sodass alle neuen Befehle mindestens ein Mal in deiner Geschichte vorkommen.
                example_code_3: |
                    ```
                    {print} Sein Ruck sack wurde viel zu schwer.
                    {print} Drinnen waren eine Flasche Wasser, eine Taschenlampe und ein Ziegelstein.
                    Rucksack {is} Wasser, Taschenlampe, Ziegelstein
                    rauswerfen {is} {ask} Welchen Gegenstand soll er rauswerfen?
                    {remove} rauswerfen {from} Rucksack
                    ```
            4:
                story_text: |
                    ### √úbung 1
                    Kopiere den Beispielcode und vervollst√§ndige ihn, indem du Anf√ºhrungszeichen in die L√ºcken in Zeile 1 und 2 einsetzt.
                    Die L√ºcken in Zeile 3 und 4 sollen nicht durch Anf√ºhrungszeichen ersetzt werden, sondern mit einem `{sleep}` und mit einem `{clear}` Befehl. Kannst du es zum Laufen bekommen?

                    ### √úbung 2
                    Gehe zur√ºck zum vorherigen Level und kopiere deinen Geschichte-Code. Bringe den Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen einf√ºgst.
                    Beachte: Die Variablen in deiner eigenen Geschichte sollten ausserhalb der Anf√ºhrungszeichen stehen. So wie in der zweiten Zeile des Beispielcodes. In dieser Zeile wird der Variablenname ausserhalb der Anf√ºhrungszeichen gesetzt.
                example_code: |
                    ```
                    Name {is} {ask} _ Was ist dein Name? _
                    {print}  _ Der Name der Hauptfigur lautet _ Name
                    _
                    _
                    {print} Name  _ l√§uft nun in den Wald hinein _
                    {print} Name _ f√ºrchtet sich ein wenig _
                    Tiere {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Da h√∂rt er pl√∂tzlich ein _ Tiere {at} {random}
                    {print} Name _ erschrickt. Es spukt in diesem Wald _
                    ```
            5:
                story_text: |
                    In diesem Level programmierst Du unterschiedliche Enden, was Deine Geschichte noch spannender werden l√§sst.
                    Im Beispielcode kannst du sehen, wie man zwei verschiedene Enden machen kann.

                    ### √úbung 1
                    Schreibe eine neue Kurzgeschichte von mindestens sechs Codezeilen √ºber ein Thema deiner Wahl.
                    Keine Inspiration? W√§hle eines der folgenden Themen: ein Superheld, ein langweiliger Schultag, gestrandet auf einer einsamen Insel.

                    Gib der Spielerin nun die M√∂glichkeit, ein gutes oder schlechtes Ende zu w√§hlen, genau wie im Beispielcode.
                    Programmiere beide Enden.

                    ### √úbung 2
                    Kopiere die Geschichte, die du in deinem eigenen Abenteuer in den vorherigen Levels erstellt hast.
                    Finde einen Weg, um mindestens zwei `{if}` und `{else}` Befehle in deine Geschichte einzubauen.
                    Dies kann mit einem guten oder schlechten Ende geschehen, aber du kannst auch andere M√∂glichkeiten finden, die Befehle einzubauen.
                example_code: |
                    ```
                    name {is} {ask} 'Wer l√§uft durch den Wald?'
                    {print} name ' l√§uft durch den Wald.'
                    {print} name ' begegnet einem Monster.'
                    ende {is} {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} ende {is} gut {print} name ' zieht ihr Schwert und das Monster ergreift die Flucht.'
                    {else} {print} 'Das Monster frisst ' name '.'
                    ```
            7:
                story_text: |
                    In einer Geschichte kommt es manchmal vor, dass jemand ein Wort mehrmals hintereinander sagt. So zum Beispiel, wenn jemand um Hilfe ruft, oder etwas singt.
                    Solche Wiederholungen kannst du mit dem Befehl `{repeat}` in diesem Level in deine Geschichte einf√ºgen.

                    ### √úbung
                    F√ºge Wiederholungen zu deiner eigenen Geschichte hinzu. Gehe zur√ºck zu deinen gespeicherten Programmen, w√§hle dein Geschichte-Programm aus einem vorherigen Level aus und
                    finde eine Zeile die `{print}` enth√§lt und wiederhole sie.
                example_code: |
                    ```
                    {print} 'Der Prinz rief immer wieder um Hilfe.'
                    {repeat} 5 {times} {print} 'Hilfe!'
                    {print} 'Warum hilft mir niemand?'
                    ```
            8:
                story_text: |
                    In diesem Level kannst du mehrere Zeilen zu einem `{if}`-Befehl hinzuf√ºgen. So kannst du deine guten und schlechten Enden etwas erweitern.

                    ### √úbung 1
                    Der Beispiel-Code zeigt zwei verschiedene Enden; eines bei dem die Figuren in eine Zeitmaschine springen und eines wo sie es nicht tun.
                    Vervollst√§ndige die L√ºcken mit mindestens einem Satz pro Ende.
                    **Extra** Mach die Geschichte l√§nger. Was passiert in der Geschichte? Du kannst auch ein zweites `{ask}` mit verschiedenen Auswahlm√∂glichkeiten hinzuf√ºgen.

                    ### √úbung 2
                    Gehe zur√ºck zu deinen gespeicherten Programmen und w√§hle deine Geschichte-Programm aus Level 5 aus. Schreibe nun ein gutes und ein schlechtes Ende mit jeweils mindestens drei Zeilen L√§nge!
                example_code: |
                    ```
                    {print} 'OH NEIN! Der T-Rex kommt immer n√§her!'
                    Ende = {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} Ende {is} gut
                        {print} 'Richard springt gerade noch rechtzeitig zur√ºck in seine Zeitmaschine.'
                        {print} _
                    {else}
                        {print} 'Oh nein! Richard ist zu langsam...'
                        {print} _
                    ```
            9:
                story_text: |
                    In diesem Level kannst du `{if}` und `{repeat}` innerhalb anderer `{if}` und `{repeat}` Befehle verwenden.
                    Das er√∂ffnet dir viele M√∂glichkeiten und hilft dir, deine Geschichte wirklich interaktiv werden zu lassen.

                    ### √úbung 1
                    Vervollst√§ndige den Code, damit das `{if}` korrekt funktioniert.

                    ### √úbung 2
                    F√ºge ein `{if}` und `{else}` in den Teil der Geschichte hinzu, wo Robin auch nach Hause geht.

                    ### √úbung 3
                    Gehe zur√ºck zu deiner Geschichte aus Level 8 und benutze mindestens zwei `{if}`s innerhalb eines anderen `{if}`.
                example_code: |
                    ```
                    {print} 'Robin l√§uft durch die Innenstadt.'
                    Ort = {ask} 'Geht Robin in ein Gesch√§ft oder nach Hause?'
                    {if} Ort {is} Gesch√§ft
                        {print} 'Sie betritt ein Gesch√§ft.'
                        {print} 'Robin sieht ein interessant aussehendes Buch'
                        Buch = {ask} 'Kauft Robin das Buch?'
                        {if} Buch {is} ja
                        _ {print} 'Robin kauft das Buch und geht nach Hause.'
                        _ {else}
                        _ {print} 'Robin verl√§sst das Gesch√§ft und geht nach Hause.'
                    {else}
                        {print} 'Robin geht nach Hause.'
                    ```
            10:
                story_text: |
                    In diesem Level kannst du den {for} Befehl f√ºr deine Geschichte nutzen. Damit kannst du zum Beispiel ganz einfach das Kinderbuch "Brauner B√§r, wen siehst denn Du?" programmieren.

                    ### √úbung

                    Schau dir <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf">die Geschichte</a> an, falls du sie nicht kennst und stelle sicher, dass es wie im Buch ausgegeben wird.
                example_code: "```\ntiere = _ , _ , _ \n{print} 'Brauner B√§r'\n{print} 'Was siehst du?'\n```\n"
            13:
                story_text: |
                    Durch die Verwendung der Befehle `{and}` und `{or}` kannst du deine Geschichten vielseitiger gestalten. Du kannst zwei Fragen stellen und auf die Kombination der Antworten antworten.

                    ### √úbung 1
                    Sieh dir den Beispiel-Code an und vervollst√§ndige ihn. F√ºge dann mindestens 2 weitere `{if}` Befehle mit `{and}` oder `{or}` hinzu.

                    ### √úbung 2
                    Suche eine Geschichte aus einem vorherigen Level und f√ºge ein `{and}` oder ein `{or}` hinzu.
                example_code: |
                    ```
                    {print} 'Unser Held geht durch den Wald'
                    {print} 'Der Pfad teilt sich in zwei Wege'
                    path = {ask} 'Welchen Weg soll sie w√§hlen?'
                    weapon = {ask} 'Welche Waffe zieht sie?'
                    {if} Pfad {is} 'links' {and} Waffe {is} 'Schwert'
                        _
                    ```
            15:
                story_text: |
                    Mit der `{while}`-Schleife kannst du deine Geschichten noch interessanter gestalten. So kannst du zum Beispiel mit  `{while} game == 'on'``{while} sword == 'lost'` dein Spiel so lange laufen lassen, bis es tats√§chlich vorbei ist.
                    Oder du l√§sst die Spieler mit  `{while} game == 'on'` so lange weiter suchen, bis sie etwas finden.

                    ### √úbung
                    Der Beispiel Code zeigt dir, wie du eine `{while}` Schleife in einer Geschichte verwenden kannst. Denke dir jetzt **ein eigenes Szenario** aus, in dem die Spieler etwas finden m√ºssen, bevor sie weitermachen k√∂nnen.
                example_code: |
                    ```
                    Schl√ºssel = 'verloren'
                    {print} 'Du stehst in Deinem Garten, hast jedoch Deine Schl√ºssel verloren.'
                    {print} 'Wo willst Du nach ihnen suchen?'
                    {print} 'W√§hle zwischen: Baum, Blumenbeet, Stein, Briefkasten'
                    {while} Schl√ºssel == 'verloren'
                        Ort = {ask} 'Wo willst Du suchen?'
                        {if} Ort == 'Blumenbeet'
                            {print} 'Ah, hier sind sie!'
                            Schl√ºssel = 'gefunden'
                        {else}
                            {print} 'Nope, sie sind nicht beim ' Ort '.'
                    {print} 'Jetzt kannst Du ins Haus!'
                    ```
            18:
                story_text: |
                    Wir werden eine andere Geschichte ausgeben, aber nun m√ºssen wir Klammern mit `{print}` benutzen.

                    ### √úbung 1
                    Erstelle eine Geschichte mit mindestens 5 S√§tzen. Du musst 'name' noch nicht benutzen.
                example_code: |
                    ```
                    {print}('Willkommen in dieser Geschichte!')
                    ```
                story_text_2: |
                    ### √úbung 2
                    Wir haben bereits einen `{input}` Befehl f√ºr dich vorbereitet. Benutze zuerst die `name` Variable in deiner Geschichte.
                    F√ºge dann einen zweiten `{ask}` Befehl hinzu und benutze diese Variable ebenfalls.
                    Tipp: Denke an die Kommas im `{print}` Befehl zwischen Text und Variablen!
                example_code_2: |
                    ```
                    name = {input}("Wie ist dein Name?")
                    {print}('Willkommen in dieser Geschichte!')
                    ```
    add_remove_command:
        name: '{add} {to_list} & {remove} {from}'
        description: Einf√ºhrung von {add} {to_list} und {remove} {from}
        levels:
            3:
                story_text: |
                    ## Hinzuf√ºgen zu
                    Du kannst einer Liste mit dem Befehl `{add} {to_list}` Elemente hinzuf√ºgen. Um ein Element zu einer Liste hinzuzuf√ºgen, kannst du einfach Folgendes eingeben: `{add} penguin {to_list} animals` oder du kannst den Befehl `{ask}` wie im Beispielcode verwenden.
                example_code: |
                    ```
                    tiere {is} Hund, Katze, K√§nguru
                    mag_ich {is} {ask} Welches ist dein Lieblingstier?
                    {add} mag_ich {to_list} tiere
                    {print} Ich habe tiere {at} {random} gew√§hlt
                    ```
                story_text_2: |
                    ## Entfernen von
                    Wenn man Elemente zu einer Liste hinzuf√ºgen kann, kann man diese nat√ºrlich auch wieder entfernen. Dies geschieht mit dem Befehl `{remove} {from}`.
                example_code_2: |
                    ```
                    tiere {is} Hund, Katze, K√§nguru
                    mag_ich_nicht {is} {ask} Welches Tier magst du nicht?
                    {remove} mag_ich_nicht {from} tiere
                    {print} Ich mag tiere {at} {random}
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere die neuen Befehle in diesem virtuellen Restaurant aus. F√ºge jene Geschmacksrichtung hinzu, auf die der Spieler hofft, und entferne solche, gegen die er allergisch ist.
                example_code_3: |
                    ```
                    {print} Mysteri√∂ser Milchshake
                    geschmacksrichtungen {is} Erdbeere, Schokolade, Vanille
                    hoffnung {is} {ask} Auf welche Geschmacksrichtung hoffst du?
                    _
                    allergie {is} {ask} Bist du auf eine Geschmacksrichtung allergisch?
                    _
                    {print} Du bekommst einen geschmacksrichtungen {at} {random} Milchshake
                    ```
        default_save_name: hinzuf√ºgen_entfernen_Befehl
    and_or_command:
        description: Einf√ºhrung von {and} & {or}
        levels:
            13:
                story_text: |-
                    Jetzt lernen wir `{and}` und `{or}`! Wenn du zwei Aussagen pr√ºfen willst, musst du nicht zwei `{if}`s verwenden, sondern `{and}` und `{or}`.

                    Wenn du `{and}` verwendest, m√ºssen beide Aussage links und rechts von `{and}` wahr sein. Wir k√∂nnen auch `{or}` verwenden. Dann muss nur eine Aussage wahr sein.
                example_code: |
                    ```
                    name = {ask} 'Wie hei√üt du?'
                    alter = {ask} 'Wie alt bist du?'
                    {if} name {is} 'Hedy' {and} alter {is} 2
                        {print} 'Du bist die echte Hedy!'
                    ```
        name: '{and} & {or}'
        default_save_name: und oder
    ask_command:
        default_save_name: frage_Befehl
        description: Einf√ºhrung des {ask} Befehls
        levels:
            1:
                story_text: |
                    ## Der frage Befehl
                    Jetzt, wo du den `{print}` Befehl verwenden kannst, bist du bereit, den n√§chsten Befehl zu lernen: `{ask}`. Mit dem `{ask}` Befehl kannst du Fragen stellen. Probiere es aus:
                example_code: |
                    ```
                    {print} Hallo!
                    {ask} Wie hei√üt du?
                    ```
                story_text_2: |
                    ## Der `{echo}` Befehl
                    Wenn du m√∂chtest, dass der Computer die Antwort f√ºr dich wiederholt, kannst du den `{echo}` Befehl verwenden. Beachte, dass die Antwort am Ende des Satzes wiederholt wird - also in diesem Beispiel nach Hallo.
                example_code_2: |
                    ```
                    {print} Hallo!
                    {ask} Wie hei√üt du?
                    {echo} Hallo
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere die `{ask}` und `{echo}` Befehle aus. Zuerst f√ºlle die L√ºcken, damit das Programm funktioniert.
                    Dann frage zwei weitere Fragen mit dem `{ask}` Befehl. Nach jedem `{ask}` benutze ein `{echo}`, um die Antwort auf dem Bildschirm auszugeben.
                example_code_3: |
                    ```
                    _ Wie geht es dir?
                    _
                    ```
            2:
                story_text: |
                    ## Der frage Befehl
                    Jetzt, wo du **Variablen** in deinen Programmen benutzen kannst, brauchen wir den `{echo}` Befehl nicht mehr.
                    Wir k√∂nnen Variablen verwenden, um die Antworten auf unsere Fragen zu speichern. Dadurch k√∂nnen wir die Antwort an mehreren Stellen im Code verwenden.
                    Probiere es aus:

                    Damit wird dein Code viel interaktiver!
                example_code: |
                    ```
                    name {is} {ask}  Wie hei√üt du?
                    {print} Hallo name
                    alter {is} {ask} Wie alt bist du?
                    {print} name ist alter Jahre alt.
                    ```
                story_text_2: |
                    ### √úbung
                    In der vorherigen √úbung hast du die Definition von Variablen mit dem `{is}` Befehl ge√ºbt.
                    Du hast mindestens 3 Variablen festgelegt und sie mit dem Druckbefehl verwendet.
                    Jetzt wollen wir die Variablen nicht einfach festlegen, sondern flexibel machen -  so wie in unserem Beispiel.

                    Kopiere den Code der vorherigen √úbung hierher und mache sie mit `{ask}` Befehlen interaktiv.
                example_code_2: |
                    ```
                    lieblingstier {is} {ask} Was ist dein Lieblingstier?
                    {print} Mein Lieblingstier ist lieblingstier
                    ```
            18:
                story_text: Die letzte Anpassung, die wir machen m√ºssen, um Python Code zu erhalten, ist  `{ask}` in `{input}` zu √§ndern.
                example_code: |
                    ```
                    {print}('Mein Name ist Hedy!')
                    name = {input}('Wie hei√üt du?')
                    {print}('Aha, dein Name ist ', name)
                    ```
        name: '{ask}'
    blackjack:
        description: Versuche, so nah wie m√∂glich an die 21 heran zu kommen
        levels:
            17:
                story_text: |
                    Blackjack ist ein einfaches Kartenspiel, bei dem du so nahe wie m√∂glich an die 21 herankommen musst. Du bekommst zwei Karten. Jede Karte hat den Wert ihrer abgebildeten Zahl. Die Karten mit Bildern (Bube, Dame, K√∂nig) sind 10 Punkte wert.
                    Das Ass ist entweder 1 oder 11 Punkte wert - das kannst du dir aussuchen. Der Kartengeber, dein Gegner, erh√§lt auch zwei Karten.
                    Wenn du m√∂chtest, kannst du noch eine Karte ziehen und ihre Punkte werden zu deinen dazugerechnet. Der Kartengeber darf auch noch eine Karte ziehen.
                    Aber pass auf, dass du nicht mehr als 21 Punkte bekommst, denn dann verlierst du!
                    Der Spieler, der am n√§chsten an 21 herankommt ohne sie zu √ºberschreiten, gewinnt!

                    ### √úbung
                    In diesem Abenteuer programmieren wir den ersten Teil unseres Blackjack Spiels. Wir schreiben eine Funktion, die berechnet, wie viele Punkte eine Karte z√§hlt.

                    ***Setze die Variablen***
                    Beginne, indem du eine Liste mit Karten anlegst, von der 2 bis zum Ass. Als n√§chstes mache eine Liste mit den Bildkarten, also Bube, Dame und K√∂nig. Dann w√§hle eine zuf√§llige Karte aus der Liste der Karte als karte_1.

                    ***Schreibe eine Funktion, um die Punkte zu berechnen***
                    Schreibe eine Funktion, die berechnet, wie viele Punkte eine Karte z√§hlt.
                    Alle Bildkarten z√§hlen 10 Punkte, ein Ass 11 und alle anderen Karten z√§hlen ihren Zahlenwert
                    Gib die Variable `punkte` am Ende der Funktion zur√ºck.

                    ***Teste die Funktion***
                    Teste, ob deine Funktion richtig funktioniert. Vervollst√§ndige den ersten `{print}`Befehl, indem du die Karte erg√§nzt, die du gezogen hast. Dann vervollst√§ndige die zweite Zeile, indem du die Funktion mit karte_1 aufrufst.
                    Lass dein Programm ein paar Mal laufen. Bist du mit den Ergebnissen zufrieden? Dann kannst du den Testteil entfernen und zum n√§chsten Tab wechseln!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Setze diese Variablen
                    karten = _
                    bildkarten = _
                    karte_1 =

                    # Erzeuge eine Funktion, um die Punkte zu berechnen
                    {define} berechne_punkte {with} karte:
                        {if} karte {in} bildkarten:
                            punkte = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ punkte

                    # Teste deine Funktion
                    {print} 'Deine Karte ist ein(e) ' _
                    {print} 'Sie z√§hlt  ' _ ' Punkte'.
                    ```
        default_save_name: Blackjack
        name: Blackjack
    blackjack_2:
        description: Blackjack Teil 2
        levels:
            17:
                story_text: |
                    ### √úbung
                    In diesem Abenteuer programmieren wir den zweiten Teil unseres Blackjack-Spiels.

                    ***F√ºge das Programm aus dem vorherigen Abenteuer hier ein***
                    Im vorherigen Abenteuer hast du mit einer Liste von Variablen begonnen und eine Funktion geschrieben, die berechnet, wie viele Punkte eine Karte z√§hlt. Kopiere dein Program und f√ºge es hier ein. Beachte, dass du den Testteil nicht ben√∂tigst. Wenn du ihn noch nicht gel√∂scht hast, mache es jetzt.

                    ***Erg√§nze weitere Variablen***
                    Du hast schon die Listen `karten` und `bildkarten` und die Variable `karte_1` gesetzt. Erzeuge nach diesen Variablen noch 3 weitere: `karte_2`, `geber_karte_1` und `geber_karte_2`. Diese Variablen sind auf eine zuf√§llige Karte aus der Liste der Karten gesetzt.

                    ***Z√§hle die Punkte zusammen***
                    Um zu berechnen, wie viele Punkte du erreicht hast, rufen wir die Funktion mit `karte_1` und `karte_2` auf. Dann addieren wir die beiden Punktzahlen, um deine Gesamtpunkte zu bestimmen.
                    Mache dasselbe f√ºr die Punkte des Gebers, aber stelle sicher, dass du die Karten des Gebers und nicht deine benutzt.

                    ***2 Asse***
                    Gro√üartig! Fast alle Punkte k√∂nnen jetzt berechnet werden. Bis auf eine Ausnahme: 2 Asse. Wenn du 2 Asse bekommst, gibt es daf√ºr 12 Punkte und nicht 22 (weil du mit 22 Punkten schon verloren h√§ttest). Das gilt nat√ºrlich auch f√ºr den Geber.

                    ***Zeige den Punktestand***
                    Zuletzt soll das Programm noch ausgeben, welchen Karte du gezogen hast und wie viele Punkte es daf√ºr gibt. Dann zeige, welche Karten der Geber hat und wie viele Punkte sie z√§hlen.

                    ***Weiter geht es mit dem n√§chsten Abenteuer***
                    Ausgezeichnet! Du hast diesen Teil des Spiels beendet! Kopiere dein Programm und gehe zum n√§chsten Abenteuer um zu lernen, wie du nach einer extra Karte fragen und den Gewinner bestimmen kannst.
                example_code: |
                    ```
                    # Kopiere deine Programm aus dem vorherigen Abenteuer hier her

                    # F√ºge diese Variablen zu der Liste der Variablen hinzu
                    karte_1 = _
                    geber_karte_1 = _
                    geber_karte_2 = _

                    # Z√§hle deine Punkte zusammen
                    deine_punkte_1 = {call} _ {with} karte_1
                    deine_punkte_2 = _
                    deine_gesamtpunkte = _

                    # Z√§hle die Punkte des Gebers zusammen
                    geber_punkte_1 = _
                    _
                    _

                    # 2 Asse
                    {if} karte_1 == 'Ass' {and} _
                        deine_gesamtpunkte = 12
                    {if} geber_karte_1 _
                        geber_gesamtpunkte = _

                    # Zeige den Spielstand
                    {print} 'Du hast ' _ ' und ' _ ' gezogen. Das sind ' _ ' Punkte'
                    {print} 'Der Geber hat ' _ ' und ' _ ' gezogen. Das sind  ' _ ' Punkte'
                    ```
        name: Blackjack 2
        default_save_name: Blackjack_2
    blackjack_3:
        description: Blackjack Teil 3
        levels:
            17:
                story_text: |
                    In den vorherigen Abenteuern hast du gelernt, wie du 2 zuf√§llige Karten f√ºr dich und den Geber ziehen kannst und zu berechnen, wie viele Punkte ihr beiden habt.
                    In diesem Abenteuer f√ºgen wir f√ºr dich und den Geber die M√∂glichkeit hinzu, nach einer weiteren Karte zu fragen.

                    ### √úbung
                    ***F√ºge dein Programm aus dem vorherigen Abenteuer ein*** Kopiere zun√§chst das Programm aus dem vorherigen Abenteuer und f√ºge es hier ein.

                    ***Extra Karte f√ºr dich*** Wenn du willst, kannst du eine weitere Karte bekommen, um mit deinen Gesamtpunkten so nah wie m√∂glich an 21 zu kommen. Frage zuerst den Spieler, ob er noch eine Karte will.
                    Falls ja, w√§hle eine zuf√§llige Karte und drucke, was gezogen wurde. Falls die Karte kein Ass ist, kannst du die Funktion aufrufen und die Punkte zu deinen Gesamtpunkten hinzuz√§hlen.
                    Falls die Karte ein Ass ist, kannst du die Funktion nicht verwenden, weil ein Ass entweder 1 Punkt oder 11 Punkte z√§hlen kann, abh√§ngig davon, wie viele Punkte du bereits hast.
                    Falls deine Gesamtpunkte weniger als 11 sind, sollte das Ass 11 Punkte z√§hlen (weil das am n√§chsten an 21 ist). Also z√§hlst du 11 Punkte zu deinen Gesamtpunkten hinzu.
                    Falls du mehr als oder genau 11 Gesamtpunkte hast, sollte dein Ass 1 Punkt z√§hlen (weil du nicht mehr als 21 Punkte haben solltest). Also z√§hlst du 1 Punkt zu den Gesamtpunkten hinzu.
                    Zuletzt, drucke deine neue Gesamtpunktzahl.

                    ***Extra Karte f√ºr den Geber*** Der Geber kann auch eine extra Karte bekommen. Der Geber muss nicht gefragt werden, weil er immer eine extra Karte bekommt, wenn er weniger als 17 Gesamtpunkte hat.
                    Kopiere den 'Extra Karte f√ºr dich' Code und f√ºge ihn in den Geber-Abschnitt ein. Dann √§ndere ihn, dass es f√ºr den Geber passt, eine extra Karte zu nehmen und die Punkte zu seinen Gesamtpunkten hinzugef√ºgt zu bekommen
                example_code: |
                    ```
                    # F√ºge dein Programm aus dem vorherigen Abenteuer hier ein

                    # Extra Karte f√ºr dich
                    weiter = {ask} _
                    {if} weiter == 'ja':
                        karte_3 = _
                        {print} _
                        {if} karte_3 _ 'Ass':
                            deine_punkte_3 = _
                            deine_gesamtpunkte = _
                        {else}:
                           {if} deine_gesamtpunkte _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra Karte f√ºr den Geber
                    {if} geber_gesamtpunkte < 17
                    _
                    ```
        name: Blackjack 3
        default_save_name: Blackjack_3
    blackjack_4:
        description: Blackjack Teil 4
        levels:
            17:
                story_text: |
                    In den letzten 3 Abenteuern hast du fast ein funktionierendes Blackjack Spiel geschrieben! Jetzt fehlt nur noch, den Gewinner zu bestimmen
                    *
                    Paste your code from the previous adventure*** Start by pasting the code that you've made so far into your programming
                    ***Decide a winner***
                    Firstly, if you and the dealer have an equal amount of points, it's a draw.
                    Secondly, if the dealer has more than 21 points and you don't, you are the winner.
                    Thirdly, if both you and the dealer have less than 22 points, we have to see who came closest to 21. We do that by comparing who has the highest score. Is your total higher than the dealer's total, then you are the winner. If not, the dealer wins.
                    Lastly, in all other scenarios (e.g. you have more than 21 points and the dealer doesn't, or you both have more than 21 points) you are the loser.

                    ***Enjoy the game!***
                    Does your game work properly? Amazing! You have done a great job! Enjoy your game!
                    If it doesn't work right away, no worries, you might have made a mistake. Just keep calm and bebug your code using the ladybug button.
                example_code: |
                    ```
                    # F√ºge das Programm aus dem vorherigen Abenteuer hier ein

                    # Bestimme den Gewinner
                    {if} _
                        {print} 'Unentschieden! Spiele nochmal!'
                    {elif} _
                        {print} 'Du gewinnst!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
        name: Blackjack 4
        default_save_name: Blackjack_4
    calculator:
        name: Taschenrechner
        default_save_name: Taschenrechner
        description: Programmiere einen Taschenrechner
        levels:
            6:
                story_text: |
                    Nun da du die Mathematik beherrscht, kannst du selbst einen Taschenrechner erstellen!
                example_code: |
                    ```
                    nummer1 = {ask} 'Gib die erste Zahl ein:'
                    nummer2 = {ask} 'Gib die zweite Zahl ein:'
                    richtige_antwort = nummer1 * nummer2
                    {print} nummer1 ' mal ' nummer2 ' ist ' richtige_antwort
                    ```
                story_text_2: |
                    ### √úbung
                    Der Taschenrechner oben berechnet die Antwort f√ºr dich, aber du kannst auch ein Programm erstellen, um deine mathematischen F√§higkeiten zu testen, so wie dieses:
                    F√ºlle die L√ºcken aus, um es zu vervollst√§ndigen!
                example_code_2: |
                    ```
                    richtige_antwort = 11 * 27
                    antwort = {ask} 'Wie viel ist 11 mal 27?'
                    {if} antwort {is} _ {print} 'Gut gemacht!'
                    {else} {print} 'Falsch! Es war ' _
                    ```
                story_text_3: |
                    **Extra** Du kannst den Computer auch alleine zuf√§llige Summen rechnen lassen, indem du `{random}` benutzt.
                example_code_3: |-
                    ```
                    zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    zahl_1 = _
                    zahl_2 = _
                    richtige_antwort = zahl_1 * zahl_2
                    gegebene_antwort = {ask} 'Was ist ' zahl_1 ' mal ' zahl_2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    In einem vorhergehenden Level hast du einen Taschenrechner erstellt. In diesem Level kannst du den Code erweitern, so dass er mehrere Fragen stellt.

                    ### √úbung 1
                    Kannst du Zeile 10 vervollst√§ndigen, damit das Programm funktioniert?

                    ### √úbung 2
                    Gib dem Spieler eine R√ºckmeldung, wenn er eine richtige oder falsche Antwort eingegeben hat, beispielsweise mit `{print} 'Richtig!'` oder `{print} 'Falsch! Die richtige Antwort ist ' richtige_antwort`.
                example_code: |
                    ```
                    Punkte = 0
                    {repeat} 10 {times}
                        Nummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        Nummer1 = Nummern {at} {random}
                        Nummer2 = Nummern {at} {random}
                        richtige_antwort = Nummer1 * Nummer2
                        {print} 'Was ist ' Nummer1 ' mal ' Nummer2 '?'
                        Antwort = {ask} 'Tippe deine Antwort hier ein...'
                        {print} 'Deine Antwort ist ' Antwort
                        {if} _ {is} _
                            Punkte = Punkte + 1
                    {print} 'Gro√üartig gemacht! Dein Punktestand ist... ' Punkte ' von 10!'
                    ```
            10:
                story_text: |
                    Dieses Taschenrechner-Spiel hilft die dabei, das Ein-mal-Eins zu √ºben!
                    ### √úbung
                    F√ºlle die L√ºcken. Wir wollen, dass das Programm den Spielern diese Fragen stellt:
                    ```
                    Was ist 1 mal 1?
                    Was ist 1 mal 2?
                    Was ist 1 mal 3?
                    Was ist 2 mal 1?
                    Was ist 2 mal 2?
                    Was ist 2 mal 3?
                    Was ist 3 mal 1?
                    Was ist 3 mal 2?
                    Was ist 3 mal 3?
                    _
                    ```
                example_code: |
                    ```
                    zahlen = 1, 2, 3
                    {for} _
                        {for} _
                            antwort = {ask} _
                            richtig = zahl_1 * zahl_2
                            {if} antwort {is} richtig
                                {print} 'Gut gemacht!'
                            {else}
                                {print} 'Das ist falsch. Die richtige Antwort ist ' richtig
                    ```
            11:
                story_text: |
                    Mit einem `{for}` kannst du das Multiplikationsprogramm vereinfachen.

                    ### √úbung 1
                    Verbessere den Beispiel-Code, sodass es eine nette Multiplikationstabelle ausgibt: "1 mal 10 is 10", "2 mal 10 ist 20", usw.

                    ### √úbung 2
                    Gehe zur√ºck zu deinem Level 10 Multiplikations-Code und ver√§ndere ihn, sodass er ein `{for}` und `{range}` benutzt.
                example_code: |
                    ```
                    zahl = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * zahl
                    ```
            12:
                story_text: |
                    In diesem Level kannst du einen Taschenrechner bauen, der mit Dezimalzahlen arbeitet.

                    ### √úbung 1
                    F√ºlle die L√ºcken aus, um den Taschenrechner zu vervollst√§ndigen. Denke daran, f√ºr Dezimalzahlen einen Punkt und kein Komma zu verwenden.

                    ### √úbung 2
                    Erstelle ein neues Mathematik-√úbungsprogramm, aber verwenden jetzt Dezimalzahlen.
                    Erstelle eine Liste von Zahlen, w√§hle zwei zum Multiplizieren aus und lasse die Spielerin antworten.
                    Und nat√ºrlich musst du die Antwort √ºberpr√ºfen! **(Zus√§tzlich)** Erh√∂he den Schwierigkeitsgrad, indem du Leben hinzuf√ºgst: Ein Spieler verliert ein Leben f√ºr eine falsche Antwort und nach drei falschen Antworten endet das Spiel.
                example_code: |
                    ```
                    Zahl1 = {ask} 'Was ist die erste Zahl?'
                    Zahl2 = {ask} 'Was ist die zweite Zahl?'
                    Antwort = _
                    {print} Zahl1 ' plus ' Zahl2 ' macht ' _
                    ```
            13:
                story_text: |
                    ### √úbung 1
                    Wir wollen das √úbungsprogramm etwas schwieriger gestalten. Der Spieler muss nun zwei Fragen richtig beantworten. F√ºlle die L√ºcken aus, um das Programm zu vervollst√§ndigen.

                    ### √úbung 2 (extra)
                    Manchmal gibt es bei Berechnungen mehrere richtige Antworten. Zum Beispiel kann 10 durch 5 und durch 2 geteilt werden. Die Frage "Welche Zahl teilt 10?" kann also durch 2 und durch 5 beantwortet werden.
                    Frage nach einer Berechnung, die mehrere richtige Antworten hat, bitte die Spielerin, sie zu beantworten, und bestimme mit `{or}`, ob die Antwort richtig ist.
                    Leere das Programmierfeld und erstelle deine eigene L√∂sung.
                example_code: |
                    ```
                    antwort1 = {ask} 'Was ist 10 mal 7?'
                    antwort2 = {ask} 'Was ist 6 mal 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In diesem Abenteuer wirst du einen Taschenrechner bauen, der einen Notendurchschnitt f√ºr dich berechnet. Wenn du in funktionsf√§hig gemacht hast, kannst du zum n√§chsten Abenteuer weiter gehen, in dem du zwei extra Features erg√§nzen kannst.

                    ### √úbung 1
                    F√ºlle die Leerstellen, um den Taschenrechner funktionsf√§hig zu machen.
                    * Beginne mit der vierten Zeile, erg√§nze eine Frage, um herauszufinden, welche Note die Sch√ºler:in bekommen hat.
                    * In der f√ºnften Zeile solltest du die Gesamtzahl aller Noten berechnen, also gesamt = gesamt + note
                    * Dann setzen wir den R√ºckgabewert. Wir wollen den Durchschnitt zur√ºckgeben, also gesamt geteilt durch die Anzahl Tests (4).
                    * Zuletzt vervollst√§ndigen wir den Code indem wir die Funktion in Zeile 8 aufrufen.

                    Hast du es hingekriegt? Wirklich toll! Willst du noch andere Sachen mit deinem Taschenrechner machen? **Im n√§chsten Abenteuer geht es weiter!**
                example_code: |
                    ```
                    {define} berechne_notendurchschnitt
                        gesamt = 0
                        {for} i {in} {range} 1 {to} 4
                            note = {ask} _
                            gesamt = gesamt + _
                            {return} _ / 4

                    notendurchschnitt = {call} _
                    {print} 'Dein Notendurchschnitt ist ' notendurchschnitt
                    ```
            15:
                story_text: |
                    Du kannst die `{while}` Schleife zum Taschenrechnerspiel, das du im vorigen Level gelernt hast, hinzuf√ºgen.
                    Dies stellt sicher, dass der Spieler nicht zur n√§chsten Frage weiterkommt, wenn er falsch antwortet.

                    ### √úbung
                    Erg√§nze. die `{while}` Schleife in der Funktion, frage die Spieler, was zahl_1 mal zahl_2 ist und drucke ihre Antowrt.
                    Dann mache einen `{call}` der Funktion.
                example_code: "```\n{define} neue_frage\n    Zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    Zahl_1 = Zahlen {at} {random}\n    Zahl_2 = Zahlen {at} {random}\n    richtig = Zahl_1 * Zahl_2\n    Antwort = 0\n    _\n    _\n    _\n    {print} 'Gut gemacht!'\n\n{print} 'Gib 10 richtige Antworten, um zu gewinnen!'\n{for} i {in} {range} 1 {to} 10\n    _\n{print} 'Gewonnen!'\n```\n"
    calculator_2:
        name: Taschenrechner 2
        levels:
            14:
                story_text: |
                    ### √úbung 2
                    **Das ist der zweite Teil dieses Abenteuers.** Das Abenteuer startet im vorherigen Abenteuer.
                    Nat√ºrlich willst du nicht immer nur den Durchschnitt von 4 Tests berechnen. Vielleicht willst du den Mittelwert von 10 Tests oder nur 2 berechnen?
                    Du kannst das Problem beheben, indem du ein Argument und die Variable 'anzahl_von_tests' erg√§nzt.
                    * Beginne eine neue Zeile in der Zeile 3. Setze die anzahl_von_tests indem du die Sch√ºler:in danach fragst, wie viele Tests geschrieben wurden.
                    * √Ñndere die 4 in der Zeile 4 in das neue Argument anzahl_von_tests.
                    * Zuletzt √§ndere noch die 4 in der Zeile 6 in anzahl_von_tests.

                    Versuche dein neues Programm. Funktioniert es?

                    ### √úbung 3
                    Willst du dein Programm weiter verbessern? Gro√üartig! Das letzte Programm konnte nur den Durchschnitt von einer Sch√ºler:in berechnen. Es w√§re aber besser, die Durchschnitt von allen Sch√ºler:innen zu berechnen, die du willst.
                    Wir sagen dir nicht, wie du es machen sollst, geben dir aber einen Hinweis: Beginne deinen Code in Zeile 1 mit {define} berechne_notendurchschnitt {with} sch√ºler_in.
                example_code: |
                    ```
                    # Benutze deinen eigenen Code aus dem letzten Abenteuer.
                    ```
        default_save_name: Taschenrechner 2
        description: Taschenrechner 2
    clear_command:
        levels:
            4:
                story_text: |
                    Zeit f√ºr einen neuen Befehl! Mit `{clear}` kann der gesamte Text vom Ausgabebildschirm gel√∂scht werden. Auf diese Weise wird verhindert, dass der Bildschirm zu voll mit Text wird.
                    Achtung! Wenn du den `{clear}` Befehl verwendest, denke daran, zuvor ein `{sleep}` zu verwenden. Andernfalls l√∂scht Hedy den Bildschirm, ohne dass du Zeit zum Lesen hast!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'Warte...'
                    {sleep} 3
                    {clear}
                    {print} '√úBERRASCHUNG!'
                    ```
        default_save_name: l√∂schen_Befehl
        description: '{clear} Befehl'
        name: '{clear}'
    debugging:
        levels:
            1:
                story_text: |-
                    Willkommen zu einem Debugging-Abenteuer. Einen Code zu debuggen bedeutet, Fehler im Code zu beseitigen.
                    Das bedeutet, dass wir dir in diesen Debugging-Abenteuern Code zeigen werden, der noch nicht funktioniert.
                    Du musst herausfinden, was falsch ist und die Fehler korrigieren.

                    ### √úbung
                    Debugge den Code. Viel Gl√ºck!
                example_code: |
                    **Achtung! Dieser Code muss gedebugged werden!**
                    ```
                    {print} Ich liebe programmieren
                    Liebst du Programmieren auch?
                    {echo}
                    {print} Was sind deine Hobbys?
                    {echo} Deine Hobbys sind
                    ```
            2:
                story_text: |-
                    Willkommen zu einem Debugging-Abenteuer. Einen Code zu debuggen bedeutet, Fehler im Code zu beseitigen.
                    Das bedeutet, dass wir dir in diesen Debugging-Abenteuern Code zeigen werden, der noch nicht funktioniert.
                    Du musst herausfinden, was falsch ist und die Fehler korrigieren.

                    ### √úbung
                    Debugge den Code. Viel Gl√ºck!
                example_code: |
                    **Achtung! Dieser Code muss debugged werden!**
                    ```
                    reiseziel {ask} Wohin willst du in den Urlaub?
                    {print} Der Flug nach reseziel hebt um 13 Uhr ab.
                    {ask} Hast du schon dein Gep√§ck abgegeben?
                    {echo}
                    {print} Lass mich deine Boardkarten f√ºr dich ausdrucken.
                    {sleep}
                    Bitte sch√∂n! Gute Reise!
                    ```
            3:
                story_text: |-
                    Willkommen zu einem Debugging-Abenteuer. Einen Code zu debuggen bedeutet, Fehler im Code zu beseitigen.
                    Das bedeutet, dass wir dir in diesen Debugging-Abenteuern Code zeigen werden, der noch nicht funktioniert.
                    Du musst herausfinden, was falsch ist und die Fehler korrigieren.

                    ### √úbung
                    Debugge den Code. Viel Gl√ºck!
                example_code: |
                    **Achtung! Dieser Code muss debugged werden!**
                    ```
                    film_auswahl {is} Dracula, Harry Potter, Shrek, Barbie
                    film_wahl {is} filme {at} {random}
                    {print} Heute schau wir uns film _wahl an
                    Magst {ask} Magst du den Film?
                    {print} Morgen schauen wir etwas anderes.
                    {add} film_wahl {to_list} film_auswahl
                    {print} Morgen schauen wir morgigen_film
                    morgigen_film {is} film_auswahl {at} {random}
                    Ich hole uns mal das Popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### √úbung
                    Debugge dieses Programm. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss korrigiert werden!**
                    ```
                    {print} 'Willkommen zur Online-Bibiliothe!
                    {ask} Welche Buchgenre magst du?
                    {print} Du magst das Genre
                    autor {is} {ask} 'Wer ist dein(e) Lieblingsautor(in)?'
                    {print} 'autor ist dein(e) Lieblingsautor(in)'
                    {print} Hmmm... Ich denke du solltest... books {at} {random} ausprobieren
                    ```
            5:
                story_text: |-
                    ### √úbung
                    Debugge dieses Programm. Viel Gl√ºck!
                example_code: |
                    **Warnung! Diese Code muss gedebugged werden!**
                    ```
                    {print} Willkommen im Schwimmbad Hedy!
                    klasse {is} {ask} 'Bist du hier, um heute einer Klasse beizutreten?'
                    {if} klasse ja
                    {print} 'Gro√üartig, du bist jetzt in einer Klasse!
                    {print} {else} 'Du wirst keiner Klasse beitreten.'
                    erm√§ssigung {is} 'Hast du eine Code f√ºr eine Erm√§ssigung?'
                    {if} erm√§ssigung {is} ja
                    erm√§ssigung_antwort {is} {ask} 'Wie ist deine Code f√ºr die Erm√§ssigung?'
                    erm√§ssigungs_codes = Senior4231, Student8786, NeuesMitglied6709
                    {if} erm√§ssigung_antwort {is} {in} erm√§ssigungs_cods
                    {print} 'Das kostet 3,50 ‚Ç¨'
                    'Das kostet 5,50 ‚Ç¨'
                    {print} 'Viel Spa√ü beim Schwimmen!'
                    ```
            6:
                story_text: |-
                    ### √úbung
                    Debugge dieses Programm. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss gedebugged werden!**
                    ```
                    {print} 'Verkaufsmaschine'
                    gew√§hltes_produkt = {ask} 'Bitte w√§hle ein Produkt'
                    1_euro_produkte = cola orangensaft wasser
                    2_euro_produkte = schokolade, kekse, m√ºsliriegel
                    3euro_prodkte = kartoffel chips, landj√§ger, bananenbrot
                    {if} gew√§hlte {is} {in} 1_euro_produkte
                    price = 1
                    {if} gew√§hltes_produkt {is} 2_euro_produkte
                    preis = 2
                    {else} gew√§hltes_produkt {in} 2_euro_produkte
                    preis = 3
                    anzahl_produkte = '{ask} Wie viele ' gew√§hltes_produkt willst du haben?'
                    gesamt = preis + anahl_produkte
                    {print} 'Das kostet ' preis ' ‚Ç¨ bitte'
                    ```
            7:
                story_text: |-
                    ### √úbung
                    √úberraschung! Dies Programm sieht mehr wie eine Ausgabe aus als wie Code. Dennoch - wir wollen nun nicht einfach ein `{print}` in jeder Zeile hinzuf√ºgen.
                    Korrigiere das Programm, so dass 'Bruder Jakob' ausgegeben wird, indem du den {repeat} Befehl verwendest (nat√ºrlich)!
                example_code: |
                    **Warnung! Dieser Code muss gedebugged werden!**
                    ```
                    Schl√§fst du noch?
                    Bruder Jakob!
                    Hell die Glocken klingen!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |-
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {print} 'Willkommen zur Manik√ºre und Pedik√ºre durch Hedy'
                    k√∂rperteil = {ask} 'L√§sst du dir heute die Fingern√§gel oder Zehenn√§gel richten? Oder beides?'
                    {if} k√∂rperteile {is} beides
                            {print} Das macht 24 ‚Ç¨'
                            preis = 25
                        {else}
                            {print} Das mach 18 ‚Ç¨'
                            preis = 18
                    farbe = {ask} Welche Farbe h√§ttest du gerne?
                    glitzer = {ask} 'M√∂chtest du Glitzer dazu?'
                    {if} glitzer {is} ja
                        {print} 'Das mach 3 ‚Ç¨ extra'
                    preis = preis + 3
                    {else} {print} 'Kein Glitzer' {print} 'Nichts extra'
                    {sleep} 5
                    {print} 'Fertig! Das macht ' preis ' ‚Ç¨ bitte!'
                    {print} 'Danke! Ciao!'
                    ```
            9:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {print} 'Willkommen in unserem Sandwich Laden'
                    menge 'Wie viele Sandwiches m√∂chtest Du gerne kaufen?'
                    {repeat} menge {times}
                    {ask} {is} {ask} 'Welches Brot h√§ttest du gerne?'
                    brotarten {is} weiss, weizen, roggen, knoblauch, gluten frei
                    {if} gew√§hltes_brot in Brotarten
                    {print} 'Gro√üartig!'
                    {else}
                    'Leider haben wir das nicht'
                    belag {is} {ask} 'Welchen Belag h√§ttest du gerne?'
                    so√üe {is} {ask} 'Welche So√üe h√§ttest du gerne?'
                    {print} Ein gew√§hltes_brot mit belag und so√üe.
                    preis = menge * 6
                    {print} 'Das kostet 'preis euro' bitte'
                    ```
            10:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    namen = Muad Hasan Samira Nora
                    aktivit√§ten = Drachen steigen lassen, schwimmen gehen, wandern gehen, sonnenbaden
                    {for} name {is} namen
                    {print} Am Strand mag name aktivit√§t {at} {random}
                    ```
            11:
                story_text: |-
                    ### √úbung
                    Debugge dieses Kalender-Programm. Die Ausgabe des Programms soll aussehen wie eine Liste mit Datumsangaben.
                    Zum Beispiel:

                    ```
                    Hedy Kalender
                    Hier sind alle Tage im November
                    November 1
                    November 2
                    November 3
                    ```
                    Und so weiter.

                    Beachte, dass du den Code besonders sorgf√§ltig f√ºr den Februar testen muss, weil die Anzahl der Tage sich in Schaltjahren √§ndert.
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {print} 'Hedy Kalender'
                    monate_mit_31 tagen = Januar, M√§rz, Mai, Juli, September, Oktober, Dezember
                    monate_mit_30_tage = April, Juni, August, November
                    monat = {ask} 'Welchen Monat m√∂chtest du sehen?'
                    {if} monat {in} monate_mit_31_tagen
                        tage = 31
                        {if} monat {in} monate_mit30_tagen
                            tage = 30
                    {if} monat = Februar
                        schaltjahre = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        jahr = {ask} 'Welches Jahr haben wir?'
                    {if} jahr {in} schaltjahre
                        tage = 29
                    {else}
                        tage = 28

                    {print} 'Hier sind alle Tage im  ' mont
                    {for} i {in} {range} 1 {to} tage
                        {print} monat i
                    ```
            12:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {define} gr√º√üe
                    gru√üworte = 'Hallo', 'Willkommen', 'Guten Abend'
                        {print} gru√üworte {at} {random}

                    {define} bestellung_aufnehmen
                        essen = {ask} 'Was willst du essen?'
                        {print} 'Ein Essen'
                        getr√§nk = 'Was willst du trinken?'
                        {print} 'Ein ' getr√§nk
                        mehr = {ask} 'M√∂chtest du noch etwas?'
                            {if} mehr {is} 'nein'
                        {print} 'OK'
                            {else}
                            {print} 'Und ' mehr
                    {print} 'Danke'

                    {print} 'Willkommen in unserem Restaurant'
                    personen = {ask} 'Wie viele Personen seid ihr heute Abend?'
                    {for} i {in} {range} 0 {to} personen
                        {call} gr√º√üe_kunde
                    ```
            13:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {define} filmempfehlung {with} name
                        action_filme == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romatische_filme = 'Tats√§chlich... Liebe', 'Wie ein einziger Tag', 'Titanic'
                        kom√∂dien = 'Mr Bean' 'Barbie''Deadpool'
                        kinderfilme = 'Minions', 'Paddington', 'Encanto'
                        {if} name {is} 'Camilla' {or} name {is} 'Manuel'
                            empfohlener_film = kinderfilm {at} {random}
                        {if} name {is} 'Peter' {or} 'Gabriela'
                                stimmung = {ask} 'Wonach bist du in Stimmung?'
                            {if} stimmung {is} 'action'
                                empfohlener_file = kom√∂dien {at} {random}
                            {if} stimmung {is} 'romantisch'
                                empfohlener_file = romantische_filme
                        {if} stimmung {is} 'kom√∂die'
                                empfohlener_film = kom√∂dien {at} {random}

                    {print} 'Ich w√ºrde dir ' empfohlener_file ' f√ºr ' name ' empfehlen.'

                    name = {ask} 'Wer will den Film sehen?'
                    empfehlung = {ask} 'M√∂chtest du gerne eine Empfehlung?'
                    {if} empfehlung {is} 'ja'
                    {print} filmempfehlung {with} name
                    {else}
                    {print} 'Kein Problem!'
                    ```
            14:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {define} berechne_puls
                        {print} 'Dr√ºcke deine Fingerspitzknochenen sanft gegen die Seite deines Halses'
                        {print} '(gerade unter dem Kiefer)'
                        {print} 'Z√§hle die Anzahl der Schl√§ge die du f√ºhlst f√ºr 15 Sekunden'
                        schl√§ge == {ask} 'Wie viele Schl√§ge hast du in 15 Sekunden gef√ºhlt?'
                        puls = schl√§ge*4
                        {print} 'Dein Puls ist ' puls
                        {if} puls >= 60 {or} puls <= 100
                            {print} 'Dein Puls scheint in Ordnung zu sein'
                        {else}
                            {if} puls > 60
                                {print} 'Dein Puls scheint zu niedrig zu sein'
                            {if} puls < 100
                                {print} 'Dein Puls scheint zu hoch zu sein'
                            {print} 'Vielleicht willst du einen Arzt aufsuchen'

                    messe_puls = {ask} 'Willst du deinen Puls messen?'
                    {if} messe_puls = 'ja'
                        {call} messe_puls
                    {else}
                        'Kein Problem'
                    ```
            15:
                story_text: |-
                    ### √úbung
                    Debugge diese zuf√§llige Kindergeschichte. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    namen = 'Tanja', 'Romy', 'Katja', 'Axel', 'Ali'
                    verben='gehen', 'springen', 'Rad fahren', 'fahren', 'rennen'
                    orte = 'auf einen Gipfel', 'in den Supermarkt', 'zum Freibad'
                    verstecke = 'hinter einem Baum', unter einem Tisch', in einer Kiste'
                    ger√§usche = 'eine Trompete', 'ein Autounfall', 'Donner'
                    ger√§uschquelle = 'ein Fernseher', 'ein Kind mit B√∂llern', 'ein magischer Elefant', 'ein Traum'

                    gew√§hlter_ name = namen {at} {random}
                    gew√§hltes_verb = verben {at} {random}
                    gew√§hlter_ort = 'orte {at} {random}'
                    gew√§hltes_ger√§usch = ger√§usche {at} {random}
                    gew√§hltes_versteck = verstecke {random}
                    gew√§hlte_quelle = ger√§uschquellen  {at} {random}

                    {print} gew√§hlter_name ' war ' gew√§hltes_verb ' ' gew√§hlter_ort
                    {print} 'als sie pl√∂tzlich ein Ger√§usch wie ' ger√§usche {at} {random}
                    {print} gew√§hlter_name ' sah sich um, aber sie konnten nicht herausfinden, woher das Ger√§usch kam.'
                    {print} gew√§hlter_name ' versteckte sich ' gew√§hltes_versteck'
                    {print} 'Sie sahen sich von dort aus um, aber konnten auch von dort nichts sehen.'
                    versteckt = 'ja'
                    {while} versteckt = 'ja'
                        {print} gew√§hlter_name 'sah immer noch nichts.'
                    antwort = {ask} 'bewegt sich ' gew√§hlter_name ' aus dem Versteck?'
                        {if} antwort = 'ja'
                            versteckt == 'nein'
                    {print} 'gew√§hlter_name ist aus dem ' gew√§hlten_versteck ' gekommen.'
                    {print} 'Und dann sahen sie, es war nur ein' gew√§hlte_quelle
                    {print} gew√§hlter_name 'lachte und der Tag ging weiter.'
                    {print} Ende
                    ```
            16:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                    Tip: Stelle sicher, dass du deinen Punktestand am Ende nur einmal siehst.
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    land = ['den Niederlanden', 'Polen', 'der T√ºrkei', 'Zimbabwe', 'Thailand', 'Brasilien', 'Peru', 'Australien', 'Indien', 'Rom√§nien' ]
                    hauptst√§dte = 'Amsterdam', 'Warschau' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'Neu Delhi', 'Bucharest'
                    punkte = 0
                    {for} i {in} {range} 0 {to} 10
                        antwort = {ask} 'Wie heisst die Hauptstadt von  ' l√§nder[i]
                        richtig = hauptstadt[i]
                        {if} antwort = richtig
                            {print} 'Richtig!'
                        punkte = punkte + 1
                        {else}
                            {print} 'Falsch,' hauptst√§dte[i] 'in der Hauptstadt von ' countries[i]
                        {print} 'Du hast ' Punkte ' punkte von 10'

                    ```
            17:
                story_text: |-
                    ### √úbung
                    Debugge diesen Code. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    {define} essens_bestellung
                        belag = {ask} 'Pepperoni, Tunfisch, vegetarisch oder K√§se?'
                        gr√∂√üe = {ask} 'gro√ü, mittel oder klein?'
                        anzahl_von_pizzen = {ask} 'Wie viele von diesen Pizzen m√∂chtest du gerne?'

                        {print} 'DU HAST BESTELLT'
                        {print} anzahl_von_pizzen ' gro√üe  ' belag ' Pizza'

                    {define} getr√§nke_bestellung
                        getr√§nk = {ask} 'Wasser, Cola, Tee, Limonade or Kaffee?'
                        anzahl_getr√§nke = {ask} 'Wie viele von diesen Getr√§nken m√∂chtest du gerne?'

                        {print} 'DU HAST BESTELLT'
                        {print} anzahl_getr√§nke ' ' getr√§nk

                    'Willkommen bei Hedy Pizza'
                    mehr_essen = {ask} 'M√∂chtest du eine Pizza bestellen?'
                    {while} mehr_essen = 'ja'
                        {return} essens_bestellung
                        mehr_essen = {ask} 'M√∂chtest du gerne eine Pizza bestellen?'
                    mehr_getr√§nke = {ask} 'M√∂chtest du etwas zu trinken bestellen?'
                    {while} mehr_getr√§nke == 'ja'
                        {call} getr√§nk_bestellung
                        mehr_getr√§nke == {ask} 'M√∂chtest du weitere Getr√§nke bestellen?'


                    {print} 'Danke f√ºr die Bestellung!'
                    ```
            18:
                story_text: |-
                    ### √úbung
                    Debugge dieses alte Old MacDonald Programm aus Level 16. Viel Gl√ºck!
                example_code: |
                    **Warnung! Dieser Code muss debugged werden!**
                    ```
                    tiere = ['Schweine', 'Hunde', 'K√ºhe']
                    ger√§usche = ['grunz', 'wuff', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        tier = tiere[i]
                        ger√§usch = ger√§usche[i]
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt's  ' tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' ger√§usch ger√§usch ' hier'
                        {print} 'und nem ' ger√§usch ger√§usch ' da'
                        {print} 'hier ein ' ger√§usch
                        {print} 'dort ein ' ger√§usch
                        {print} '√ºberall ein ' ger√§usch ger√§usch
                    ```
        description: Debugging-Abenteuer
        name: Debugging
        default_save_name: Debugging
    default:
        name: Einf√ºhrung
        default_save_name: Einleitung
        description: Erkl√§rung des Levels
        levels:
            1:
                story_text: |
                    Willkommen bei Hedy! Hier kannst du Schritt f√ºr Schritt Programmieren lernen.

                    Probiere den Code selbst! Die gelbe Schaltfl√§che kopiert den Beispielcode in das Programmierfeld.
                    Mit der gr√ºnen Schaltfl√§che 'Programm ausf√ºhren' unter dem Programmierfeld wird der Code ausgef√ºhrt.

                    Bereit? Dann gehe zum n√§chsten Abenteuer um deinen ersten Befehl zu lernen!
                example_code: |
                    ```
                    {print} Hallo Welt!
                    ```
            2:
                story_text: |
                    Gl√ºckwunsch! Du hast Level 2 erreicht. Hoffentlich hast du bereits einige tolle Programme erstellt!
                    Auf Level 1 ist dir vielleicht aufgefallen, dass der Befehl `{echo}` jeweils nur einen Teil an Information speichern kann.
                    Im Restaurant-Abenteuer konntest du beispielsweise in einem Satz wiedergeben, was der Kunde essen oder trinken m√∂chte, aber nicht beides.

                    Das √§ndert sich in Level 2. In Level 2 lernst du, mit Variablen zu arbeiten. Diese erlauben es, mehrere Informationen zu speichern und an jedem beliebigen Ort auszugeben.
                    Gehen wir also zum n√§chsten Abenteuer!
                example_code: |
                    **Warnung! Dieser Code funktioniert nicht!**
                    In Hedy √§ndern sich die Befehle manchmal. `{echo}` funtioniert beispielsweise nur auf Level 1. Auf diesem Level lernst du eine bessere M√∂glichkeit, Antworten zur√ºckzugeben.
                    ```
                    {print} Willkommen bei Hedy's
                    {ask} Was m√∂chtest du essen?
                    {echo} Du m√∂chtest also
                    {ask} Was m√∂chtest du trinken?
                    {echo} Du m√∂chtest also
                    ```
            3:
                story_text: |
                    Im vorherigen Level hast du gelernt, was eine Variable ist und wie du sie verwenden kannst, um deine Abenteuer interaktiver zu gestalten.
                    Aber... das ist nicht das Einzige, was du mit Variablen machen kannst! Du kannst Variablen auch zum Erstellen von Listen verwenden.
                    Und du kannst Hedy sogar ein zuf√§lliges Wort aus einer Liste ausw√§hlen lassen, wodurch du echte Spiele erstellen kannst!
                    Wirf einen kurzen Blick auf das n√§chste Abenteuer!
            4:
                story_text: |
                    In den vorherigen Levels hast du mit Variablen ge√ºbt, bist aber m√∂glicherweise auf dieses Problem gesto√üen.
                    M√∂glicherweise hast du versucht, Code wie diesen auszuf√ºhren:

                    Nat√ºrlich wolltest du folgendes ausgeben

                    `Mein name ist Sophie`

                    aber Hedy druckt

                    `Mein Sophie ist Sophie`.

                    In diesem Level wird dieses Problem durch die Verwendung von Anf√ºhrungszeichen behoben.
                example_code: |
                    ```
                    name {is} Sophie
                    {print} Ich hei√üe name
                    ```
            5:
                story_text: |
                    In Level 5 gibt es etwas Neues, n√§mlich das `{if}`! Mit `{if}` kannst du zwischen zwei verschiedenen M√∂glichkeiten w√§hlen.
                    Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Bl√∂d!', wenn du etwas anderes eingibst.
                    `{ask}` und `{print}` funktionieren immer noch wie in Level 4.
                example_code: |
                    ```
                    passwort {is} {ask} 'Was ist das richtige Passwort?'
                    ```
            6:
                story_text: |
                    In diesem Level lernst du etwas Neues: Du kannst jetzt auch rechnen.

                    Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

                    Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen vorhanden ist. Suche mal, das gibt es wirklich nicht!
                    Deshalb multiplizieren wir mit dem Stern (auf der Tastatur √ºber dem Plus): `5 * 5`. Lies das als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.
                example_code: |
                    ```
                    {print} '5 plus 5 macht ' 5 + 5
                    {print} '5 minus 5 macht ' 5 - 5
                    {print} '5 mal 5 macht ' 5 * 5
                    ```
            7:
                story_text: |
                    In Level 7 kommt der Befehl `{repeat}` dazu. Mit `{repeat}` kannst du eine Zeile Code mehrmals ausf√ºhren.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy macht Spa√ü!'
                    ```
            8:
                story_text: |
                    `{ask}` und `{print}` funktionieren immer noch wie du es gewohnt bist. Aber `{if}`, `{else}` und `{repeat}` haben sich ver√§ndert!
                    Du kannst jetzt mehrere Zeilen gruppieren, aber du musst den Code daf√ºr *einr√ºcken*.
                    Das bedeutet, dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben m√∂chtest.
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'Im n√§chsten Abenteuer kannst du mehrere Zeilen auf einmal ausgeben!
                    ```
            9:
                story_text: |
                    In diesem Level kannst du nicht nur mehrere Zeilen mit `{if}` und `{repeat}` verwenden, du kannst sie auch kombinieren!
                    Im Beispiel siehst du einen `{if}` Befehl innerhalb eines `{repeat}` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `{if}` innerhalb eines anderen `{if}` Befehls erlaubt, genau wie `{repeat}` in einem anderen `{repeat}` Befehl.
                    Versuch es mal!
                example_code: |
                    ```
                    Antwort = {ask} 'Bist du bereit, etwas Neues zu lernen?'
                    {if} Antwort {is} ja
                        {print} 'Gro√üartig! Du kannst nun lernen, wie man den Wiederholen-Befehl mit dem Wenn-Befehl zusammen benutzt!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                    {else}
                        {print} 'Vielleicht solltest du noch etwas mehr im vorherigen Level √ºben?'
            10:
                story_text: |
                    Du schl√§gst dich gut! In den vorherigen Leveln sind wir noch auf ein kleines Problem gesto√üen. Du wei√üt jetzt, wie man Zeilen wiederholt, aber was, wenn du die Zeilen etwas ver√§ndern m√∂chtest?
                    Beispielsweise wenn du den Song 'if you're happy and you know it' singen m√∂chtest. Das w√ºrde dann so aussehen:

                    Wenn du also auch die Zeile 'stop your feet' m√∂chtest, und die danach und danach und danach, musst du den Code komplett ver√§ndern.
                    In diesem Level lernst du den `{for}` Befehl, mit dem du eine Liste von Aktionen anlegen kannst, die der Code dann jedes Mal mit einer weiteren Aktion wiederholt!
                    Sieh dir das mal an!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'if you're happy and you know it clap your hands'
                    {print} 'if you're happy and you know it and you really want to show it'
                    {print} 'if you're happy and you know it clap your hands'
                    ```
            11:
                story_text: |
                    Du hast Level 11 erreicht, du machst das gro√üartig! In den h√∂heren Level konzentiert sich Hedy mehr und mehr darauf, dir die Programmiersprache Python beizubringen.
                    In Python gibt es keinen `{repeat}` Befehl, aber es gibt einen Befehl, der wie {repeat} funktioniert. Bist du neugierig darauf, herauszufinden, wie du `{repeat}` in der Python sagen kannst? Gehe rasch weiter, und finde es heraus!
            12:
                story_text: |
                    Vielleicht hast du versucht Dezimalzahlen bei deinem Restaurant Abenteuer zu verwenden. Falls ja, hast du wahrscheinlich bemerkt, dass Hedy die noch nicht verstand und immer abgerundet hat.
                    Ab diesem Level kannst du Dezimalzahlen verwenden.
                example_code: |
                    ```
                    burger = 5
                    getraenk = 2
                    gesamt = burger + getraenk
                    drucke 'Du hast einen Burger und ein Getr√§nk bestellt'
                    drucke 'Das macht zusammen 'gesamt' Euro, bitte'
                    ```
            13:
                story_text: |
                    In den vorherigen Leveln hast du gelernt, zwei `{if}`Befehle zu verschachteln. Das funktioniert, f√ºhrt aber zu sehr langem und unhandlichen Code wie diesem:

                    F√ºr dieses System musst du sowohl Benutzername als auch Passwort richtig eingeben.
                    In diesem Level wirst du den `{and}` Befehl lernen, der diesen Code viel k√ºrzer und verst√§ndlicher macht!
                    Probier es aus!
                example_code: |
                    ```
                    benutzername = {ask} 'Was ist dein Benutzername?'
                    passwort = {ask} 'Was ist dein Passwort?'
                    {if} benutzername {is} 'Hedy'
                        {if} passwort {is} 'geheim'
                            {print} 'Willkommen Hedy!'
                        {else}
                            {print} 'Zugang verwehrt'
                    {else}
                        {print} 'Zugang verwehrt!'
                    ```
            14:
                story_text: |
                    Mit dem Beispielcode kannst du berechnen, ob du in einem Fach bestanden hast (also eine 4 oder besser).
                    Wie du siehst, ist dieser Code extrem ineffizient, wegen des langen Codes in Zeile 5.
                    Die Noten 1 bis 4 wurden getrennt programmiert. Aber - Gl√ºck f√ºr dich, in diesem Level wirst du lernen, wie du ohne diesen extrem langen Code zurecht kommst.
                example_code: |
                    ```
                    erste_note = {ask} 'Welche Note hast du f√ºr deinen ersten Test bekommen?'
                    zweite_note = {ask} 'Welche Note hast du f√ºr deinen zweiten Test bekommen?'
                    summe = erste_note + zweite_note
                    durchschnitt = summe / 2
                    {if} durchschnitt = 1 {or} durchschnitt = 2 {or} durchschnitt = 3 {or} durchschnitt = 4 {or} durchschnitt = 5
                        {print} 'Oh nein! Du bist durchgefallen...'
                    {else}
                        {print} 'Toll! Du hast bestanden!'
                    ```
            15:
                story_text: |
                    Im unten gezeigten Spiel wurde der Code so erstellt, dass der Spieler so lange spielen kann, wie er will ‚Ä¶
                    Leider ist der Code ineffizient und viel zu lang. Und au√üerdem: Was ist, wenn der Spieler 101 Spiele statt nur 100 machen will?
                    Du kannst nicht unendlich lange spielen?
                    In diesem Level lernst du einen Befehl, der das alles deutlich leichter macht!
                example_code: |
                    ```
                    Spiel = 'Start'
                    {for} i {in} {range} 1 {to} 100
                        {if} Spiel == 'Start'
                            Antwort = {ask} 'M√∂chtest du weiterspielen?'
                            {if} Antwort == 'nein'
                                Spiel = 'abgeschlossen'
                            {if} Antwort == 'ja'
                                {print} 'Okay, spielen wir weiter'
                    ```
            16:
                story_text: |
                    In diesem Level n√§hern wir uns ein bisschen mehr echtem Python-Code. Au√üerdem lernst du, wie man zwei Listen miteinander verbindet.
                    So kannst du einen Code programmieren, in dem ein Tier mit dem entsprechenden Tierger√§usch verbunden ist.
                    Weil die zwei Codes unten ‚Ä¶ ganz offensichtlicher Bl√∂dsinn sind!
                example_code: |
                    ```
                    freunde = ['Ahmed', 'Ben', 'Clemens']
                    gl√ºckszahlen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'Die Gl√ºckszahl von ' freunde[i]
                        {print} 'ist ' gl√ºckszahlen[i]
                    ```
            17:
                story_text: |
                    Jetzt werden wir die Einr√ºckung ein wenig √§ndern. Jedes Mal, wenn wir eine Einr√ºckung ben√∂tigen, brauchen wir `:` in der Zeile vor der Einr√ºckung.

                    In diesem Level kannst du au√üerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abk√ºrzung f√ºr ``{else} {if}`` und du brauchst ihn, wenn du drei (oder mehr!) Optionen machen willst.
                    Probier es mal aus!
            18:
                story_text: |-
                    Wir sind bei echtem Python-Code angekommen! Das bedeutet, dass wir ab jetzt runde Klammern mit den Befehlen `{print}` und `{range}` benutzen m√ºssen.
                    Es bedeutet auch, dass du Hedy-Code aus diesem Level in jeder Python-Umgebung benutzen kannst, solange du die englischen Befehle nutzt. Falls du es bisher noch nicht gemacht hast, kannst du den Schalter im Befehlsmen√º zum Umschalten benutzen.

                    {print}('Ich hei√üe ', name)
    dice:
        name: W√ºrfel
        default_save_name: W√ºrfel
        description: Erstelle deinen eigenen W√ºrfel
        levels:
            3:
                story_text: |
                    In diesem Level k√∂nnen wir von einer Liste w√§hlen. Damit k√∂nnen wir den Computer eine Seite des W√ºrfels w√§hlen lassen.
                    Schaut mal in die Brettspiele in eurem Schrank zu Hause.
                    Haben einige davon (besondere) W√ºrfel? Die kannst du auch mit diesem Code nachbauen.
                    Zum Beispiel den W√ºrfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf.

                    ![W√ºrfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    W√ºrfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    {print} Du warfst _ {at} {random} !
                    ```
                story_text_2: |
                    ### √úbung
                    Die W√ºrfel im Beispiel oben sind die W√ºrfel f√ºr ein bestimmtes Spiel. Kannst du normale W√ºrfel machen?
                    Oder andere Spezialw√ºrfel von einem anderen Spiel?
                example_code_2: |
                    ```
                    Auswahlm√∂glichkeiten {is} _
                    ```
            4:
                story_text: |
                    In diesem Level kannst du auch W√ºrfel erstellen. Aber dieses Mal kannst du es selbst versuchen, ohne Beispiel-Code!

                    ### √úbung
                    Erstelle deinen eigenen W√ºrfel in diesem Level.
                    Tipp: Falls du keine Idee hast, wie man einen W√ºrfel erstellt, schau dir deinen W√ºrfel vom vorigen Level an, aber vergiss nicht, Anf√ºhrungszeichen hinzuzuf√ºgen.
            5:
                story_text: |
                    Wir werden die `{if}` und `{else}` Befehle zu unseren W√ºrfeln hinzuf√ºgen!

                    ### √úbung
                    Vervollst√§ndige den Beispiel-Code, sodass der Code sagt "Du kannst aufh√∂ren zu werfen", sobald du einen Regenwurm gew√ºrfelt hast. Er sollte "Du musst nochmal werfen" ausgeben, falls du etwas anderes gew√ºrfelt hast.
                    **Extra** Vielleicht m√∂chtest Du auch einen W√ºrfel aus einem ganz anderen Spiel nachbauen. Das ist auch super! Dann √ºberlege dir selbst eine Reaktion. Zum Beispiel 'ja' bei einer 6 und 'schade' f√ºr alles andere.
                example_code: |
                    ```
                    w√ºrfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    wurf {is} w√ºrfelseiten {at} {random}
                    {print} 'Du hast gew√ºrfelt: ' wurf
                    _ wurf {is} Regenwurm {print} 'Du kannst aufh√∂ren zu w√ºrfeln.'
                    _ {print} 'Du musst nochmal w√ºrfeln!'
                    ```
            6:
                story_text: |
                    Hier kannst Du auch wieder der Regenwurmw√ºrfel erstellen, aber hier kannst Du dazu auch noch berechnen, wie viele Punkte gew√ºrfelt wurden.
                    Vielleicht wei√üt Du ja, dass der Wurm 5 Punkte z√§hlt. Jetzt kannst Du nach jedem Wurf direkt berechnen, wie viele Punkte Du bekommst.
                    Hier ist der Code zur Berechnung der Punkte f√ºr einen W√ºrfel:

                    ### √úbung
                    Kannst du den Code ver√§ndern, um die Gesamtpunktzahl f√ºr 8 W√ºrfel zu bekommen? Um das zu machen musst du einige Zeilen Code kopieren und einf√ºgen.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, Regenwurm
                    Punkte = 0
                    Wurf = W√ºrfelseiten {at} {random}
                    {print} 'Du hast ' Wurf ' gew√ºrfelt.'
                    {if} Wurf {is} Regenwurm Punkte = Punkte + 5 {else} Punkte = Punkte + Wurf
                    {print} 'Jetzt hast Du ' Punkte ' Punkte.'
                    ```
                example_code_2: |
                    Ist es dir gelungen, die Gesamtpunktzahl f√ºr 8 W√ºrfel auszurechnen? Daf√ºr musstest du ganz sch√∂n viel hin und her kopieren, oder? In Level 7 machen wir das einfacher!
            7:
                story_text: |
                    Auch in diesem Level kannst du wieder einen W√ºrfel programmieren. Mit dem Befehl `{repeat}` kannst du ganz einfach eine ganze Handvoll W√ºrfel werfen.

                    ### √úbung
                    Versuche, den Beispiel-Code zu vervollst√§ndigen!   **Extra** Denke an ein Spiel, das du kennst, bei dem es um W√ºrfel geht und programmiere es mit dem Befehl `{repeat}`.
                example_code: |
                    ```
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### √úbung
                    Brauchen alle zu lange, um zu w√ºrfeln? In diesem Level kannst du Hedy alle W√ºrfel auf einmal werfen lassen.
                    √Ñndere die Namen zu den Namen deiner Freunde oder Familienmitglieder und vervollst√§ndige den Code.
                example_code: |
                    ```
                    Spielerliste = Ann, John, Jesse
                    W√ºrfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} Spieler ' w√ºrfelt ' W√ºrfelseiten {at} {random}
                        {sleep}
                    ```
            15:
                story_text: "### √úbung\nIn diesem Level kannst du ein kleines Spiel schreiben, bei dem du so schnell wie m√∂glich eine 6 W√ºrfeln musst.\nWir haben mit dem Code angefangen, deine Aufgabe ist, das Spiele zum funktionieren zu bringen.\n\nAls erstes, f√ºge eine `{while}` Schleife hinzu, die pr√ºft, ob eine 6 gew√ºrfelt wurde oder nicht.\nSolange du keine 6 gew√ºrfelt hast, w√ºrfle eine Zufallszahl.\nDrucke die Zahl, die der Spieler gew√ºrfelt hat.\nAddiere den Versuch zu der Anzahl der Versuchen.\nWarte eine Sekunde, bevor du wieder w√ºrfelst, oder - falls du eine 6 gew√ºrfelt hast - bevor das Spiel endet.\n"
                example_code: "```\nm√∂glichkeiten = 1, 2, 3, 4, 5, 6\n{print} 'W√ºrfle eine 6 so schnell du kannst!'\ngew√ºrfelt = 0\nversuche = 0\n_\n_\n_\n_\n_\n{print} 'Ja! Du hast in ' versuche ' Versuchen eine 6 gew√ºrfelt.'\n```\n"
    dishes:
        name: Abwasch?
        default_save_name: Abwasch
        description: Nutze den Computer, um zu sehen, wer abw√§scht
        levels:
            3:
                story_text: |
                    Gibt es bei euch zu Hause immer Streit, wer mit dem Abwasch dran ist und wer den M√ºll raus bringen muss?
                    Dann kannst du den Computer v√∂llig fair entscheiden lassen. Das kannst du in diesem Level programmieren!
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} Familienmitglieder {at} {random} muss abwaschen
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle deine eigene Version des Sp√ºlmaschinenprogramms. Erstelle zuerst eine Liste deiner Familienmitglieder.
                    Denke dann an eine Aufgabe, die erledigt werden soll, und lasse den Computer entscheiden, wer die Aufgabe erledigen muss, indem du `{at} {random}` benutzt.

                    **Extra** Keine Lust auf selbst abwaschen? Hacke das Sp√ºlmaschinenprogramm und entferne deinen Namen von der Liste mit dem `{remove}` `{from}` Befehl.
            4:
                story_text: |
                    Mit Anf√ºhrungszeichen kannst du dein Abwaschprogramm noch besser machen.

                    ### √úbung
                    F√ºlle zuerst die richtigen Symbole in die L√ºcken, um dieses Beispielprogramm zum Laufen zu bringen.
                    Hast du es hinbekommen? Gro√üartig! Kopiere nun deinen eigenen Code aus den vorigen Leveln und bring ihn in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} _ den Abwasch macht heute _
                    {sleep}
                    {print} Familienmitglieder {at} _
                    ```
            5:
                story_text: |
                    Mit dem Befehl `{if}` kannst Du noch etwas mehr Spa√ü haben, wenn Du die Auswahl auswertest. Du kannst Dein Programm auf die Auswahl, die der Computer trifft, reagieren lassen.
                    ### √úbung
                    Kannst Du den Code so vervollst√§ndigen, dass er "So ein Pech" ausgibt, wenn Du dran bist und ansonsten "Zum Gl√ºck!"?
                    Vergiss die Anf√ºhrungszeichen nicht!
                example_code: |
                    ```
                    leute {is} Mama, Papa, Emma, Sophie
                    tellerw√§scher {is} leute {at} {random}
                    _ tellerw√§scher {is} Sophie {print} _ So ein Pech. Ich muss abwaschen. _
                    _ {print} 'Zum Gl√ºck kein Abwasch, weil ' _ ' dran ist.'
                    ```
            6:
                story_text: |
                    Wer ist wie oft mit dem Abwasch dran? Ist es gerecht verteilt? In diesem Level kannst Du mitz√§hlen.
                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Emmas_Anzahl = 0
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Den Abwasch macht ' Tellerw√§scher
                    {if} Tellerw√§scher {is} Emma Emmas_Anzahl = Emmas_Anzahl + 1
                    {print} 'Emma ist diese Woche ' Emmas_Anzahl ' Mal mit dem Abwasch dran'
                    ```

                    Jetzt kannst Du die Zeilen ein paar Mal kopieren (z.B. weitere 6 Mal f√ºr die ganze Woche), um einen Plan f√ºr die ganze Woche aufzustellen.
                    Kannst Du den Code f√ºr eine ganze Woche schreiben?
                story_text_2: |
                    Wenn Du ganz gro√ües Pech hast, k√∂nnte Dich das vorigen Programm f√ºr die ganze Woche als Abw√§scher bestimmen. Das ist ungerecht!
                    Um das System gerechter zu gestalten, kannst Du mit dem Befehl `{remove}` die ausgew√§hlt Person von der Liste entfernen. Auf diese Weise musst Du nicht nochmal abwaschen, bis jeder einmal dran war.

                    Montag und Dienstag sind schon vorbereitet! Kannst Du den Rest der Woche vervollst√§ndigen?
                    Und‚Ä¶ Kannst Du dir etwas einfallen lassen f√ºr den Fall, dass die Liste leer ist?
                example_code_2: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Am Montag macht ' Tellerw√§scher ' den Abwasch.'
                    {remove} Tellerw√§scher {from} Familienmitglieder
                    Tellerw√§scher = Familienmitglieder {at} {random}
                    {print} 'Am Dienstag macht ' Tellerw√§scher ' den Abwasch.'
                    {remove} Tellerw√§scher {from} Familienmitglieder
                    ```
            7:
                story_text: |
                    Mit dem Befehl `{repeat}` kannst du Code-Zeilen wiederholen. Das kannst du nutzen, um f√ºr mehrere Tage zu berechnen, wer abw√§scht.
                    ### √úbung
                    Benutze den `{repeat}` Befehl um zu entscheiden wer die ganze Woche abwaschen muss. Jede L√ºcke muss mit einem Befehl oder einer Zahl gef√ºllt werden!
                    **(Extra)** Kannst du an eine andere Aufgabe im Haushalt denken? Passe den Code an, sodass er drei Haushaltsaufgaben entscheidet. Vergiss nicht auszugeben um welche Aufgaben es sich handelt!
                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    {repeat} _ _ {print} 'Abgewaschen wird von' _ _ _
                    ```
            10:
                story_text: |
                    In diesem Level kannst du einen Ablauf f√ºr die ganze Woche auf eine einfache Art und Weise erstellen!

                    ### √úbung
                    F√ºge eine zweite Hauspflicht hinzu, wie z.B. Staubsaugen oder Aufr√§umen, und stelle sicher, dass sie ebenfalls f√ºr die ganze Woche aufgeteilt ist.
                    <br> **(Extra)** Das Programm ist nicht fair, du kannst Pech haben und die ganze Woche abwaschen. Wie k√∂nntest du das Programm fairer machen?
                example_code: |
                    ```
                    tage = Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag
                    namen = Mama, Papa, Emma, Sophie
                    {for} tag {in} tage
                        {print} namen {at} {random} ' ist mit dem Abwasch dran am ' tag
                    ```
    elif_command:
        levels:
            17:
                story_text: |
                    In diesem Level kannst du auch einen neuen Befehl nutzen: `{elif}`. `{elif}` ist eine Kombination der Schl√ºsselw√∂rter `{else}` und `{if}` und du brauchst es, wenn du 3 (oder mehr!) Optionen erstellen m√∂chtest.
                    Guck es dir jetzt an!
        default_save_name: sofalls
        description: '{elif}'
        name: '{elif}'
    for_command:
        default_save_name: f√ºr
        description: '{for} Befehl'
        levels:
            10:
                story_text: |-
                    ## F√ºr
                    In diesem Level lernen wir einen neuen Befehl: `{for}`. Mit `{for}` kannst du eine Liste erzeugen und alle Elemente verwenden.
                    `{for}` erzeugt einen Block, so wie `{repeat}` und `{if}`. Alle Linien im Block m√ºssen mit 4 Leerzeichen beginnen.
                example_code: |
                    ```
                    tierarten = Hunde, Katzen, Blobfische
                    {for} art {in} tierarten
                        {print} 'Ich mag ' art
                    ```
                story_text_2: |
                    ### √úbung
                    Vervollst√§ndige den Code, indem du `{for} aktion {in} aktionen` in Zeile 2 erg√§nzt.
                example_code_2: |
                    ```
                    aktionen = dann klatsch mit, stampfe mit dem Fu√ü, ruf Hurra!
                    _
                        {repeat} 2 {times}
                            {print} 'Bist du gl√ºcklich und du wei√üt es, ' aktion
                            {sleep} 2
                        {print} 'Bist du gl√ºcklich und du wei√üt es und willst es wirklich zeigen'
                        {print} 'Bist du gl√ºcklich und du wei√üt es, ' aktion
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    In diesem Level f√ºgen wir eine neue Form des Befehls `{for}` hinzu. In fr√ºheren Leveln haben wir `{for}` mit Listen benutzt, aber wir k√∂nnen `{for}` auch mit Zahlen verwenden.
                    Dies machen wir, indem wir einen Variablennamen und dann `{in}` `{range}` schreiben. Dahinter schreiben wir die Zahl bei der es losgehen soll, `{to}` und dann die Zahl, wo es aufh√∂rt.

                    Probiere das Beispiel aus, um zu sehen was passiert! In diesem Level musst du wieder Einr√ºckungen in den Zeilen unter dem `{for}` anwenden.
                example_code: |
                    ```
                    {for} z√§hler {in} {range} 1 {to} 10
                        {print} z√§hler
                    {print} 'Eckstein, Speckstein, alles muss versteckt sein!'
                    ```
            17:
                story_text: |
                    Jetzt √§ndern wir die Einr√ºckung ein wenig. Jedes Mal, wenn wir eine Einr√ºckung ben√∂tigen, brauchen wir `:` in der Zeile vor der Einr√ºckung.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Eckstein, Speckstein, alles muss versteckt sein!'
                    ```
            18:
                story_text: |
                    Zuletzt, machen wir aus `{for} i {in} {range} 1 {to} 5` so richtigen Python Code:
                example_code: "```\n{for} i {in} {range}(1,5):\n    {print} (i)\n```\n"
        name: '{for}'
    fortune:
        name: Wahrsagerin
        default_save_name: Wahrsagerin
        description: Lass Hedy die Zukunft voraussagen
        levels:
            1:
                story_text: |
                    Warst du schon mal auf dem Rummel und hast dir die Zukunft von einer Wahrsagerin vorhersagen lassen? Oder hast du schon mal mit einer magischen schwarzen Kugel gespielt?
                    Dann wei√üt du bestimmt, dass sie nicht wirklich die Zukunft vorhersagen k√∂nnen, aber dass es trotzdem Spa√ü macht.

                    In den n√§chsten Leveln kannst du lernen, wie du deine eigene Wahrsagemaschine erstellst!
                    In Level 1 kannst du einfach anfangen, indem du Hedy sich als Wahrsagerin vorstellen l√§sst und sie die Antwort des Spielers mit `{echo}` ausgibst.
                    So wie hier:
                example_code: |
                    ```
                    _ Hallo, ich bin Hedy, die Wahrsagerin!
                    _ Wer bist du?
                    _ Lass mich in meine Kristallkugel sehen
                    _ Ich sehe... Ich sehe...
                    _ Du hei√üt
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich und f√ºlle die L√ºcken, um den Code zum Laufen zu bringen.
                    **Extra** √Ñndere den Code und lasse die Wahrsagerin nicht nur deinen Namen vorhersagen, sondern auch dein Alter, dein Lieblingssport-Team oder etwas anderes √ºber dich.
            3:
                story_text: |
                    Im vorigen Level hast du deine erste Wahrsagemaschine erstellt, aber Hedy konnte nichts wirklich vorhersagen, sondern nur `{echo}`.
                    In diesem Level kannst du Variablen und den `{at} {random}` Befehl benutzen, um Hedy wirklich eine Antwort f√ºr dich ausw√§hlen zu lassen. Schau dir zum Beispiel diesen Code an:
                example_code: |
                    ```
                    {print} Ich bin Hedy, die Wahrsagerin!
                    Frage {is} {ask} Was w√ºrdest du gerne wissen?
                    {print} Das w√ºrdest du gerne wissen: Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                story_text_2: |
                    ### √úbung
                    Bis hierhin konnte Hedy nur mit ja, nein oder vielleicht antworten. Kannst du Hedy mit zus√§tzlichen Antwortm√∂glichkeiten ausstatten, wie zum Beispiel 'auf jeden Fall' oder 'frag nochmal'?
            4:
                story_text: |
                    ### √úbung 1
                    Wir haben alle Anf√ºhrungszeichen aus diesem Beispiel-Code entfernt. Kannst du sie alle an den richtigen Stellen hinzuf√ºgen?

                    ### √úbung 2
                    Gehe zum vorigen Level zur√ºck und kopiere deinen Wahrsagerin-Code. Bring diesen Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge die Anf√ºhrunszeichen in diesen Code ein _
                    {print} Ich bin Hedy die Wahrsagerin!
                    Frage {is} {ask} Was m√∂chtest du wissen?
                    {print} Dies ist deine Frage:  Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
            5:
                story_text: |
                    ### √úbung
                    Im Beispielcode siehst du, wie du ein Wahrsageprogramm schreiben kannst, das die Chance auf deiner Seite sind. Dieses Schummel-Programm antwortet, dass du immer im Lotto gewinnst, aber deine Freunde nie.

                    Benutze es, um daraus dein eigenes Programm zu machen, sei kreativ! Zum Beispiel kannst Du ein Programm schreiben, das vorhersagt:
                    * dein Lieblingssportverein wird alle Konkurrenten schlagen!
                    * dein Lieblingsfilm wird f√ºr die Filmnacht ausgew√§hlt!
                    * du gewinnst Karten f√ºr deine Lieblingsshow!
                    * du bist am Sch√∂nsten von allen, wie in Schneewittchens Spiegel.
                    Lass deine Vorstellungskraft freien Lauf!

                    Dein Programm muss aus mindestens 10 Zeilen Code bestehen und du musst mindestens einen `{if}` und `{else}` Befehl verwenden.
                example_code: |
                    ```
                    freunde {is} Johannes, Luzie, David
                    {print} 'Ich kann vorhersage, ob du morgen in der Lotterie gewinnen wirst!'
                    person {is} {ask} 'Wer bist du?'
                    gute_antwort {is} Hurra! Du gewinnst!, Du wirst sicher gewinnen!, Wir haben einen Gewinner!
                    schlechte_antwort {is} Pech gehabt! Versuch nochmal!, Eine andere Person wird gewinnen, Du verlierst!
                    {if} person {in} freunde {print} gute_antwort {at} {random}
                    {else} {print} schlechte_antwort {at} {random}
                    ```
            6:
                story_text: |
                    In diesem Level k√∂nnen wir Mathe in deinen Vorhersagen als Wahrsagerin verwenden. Das erm√∂glicht es dir (alberne) Formeln zur Berechnung der Zukunft zu erfinden.
                    Zum Beispiel k√∂nntest du ausrechnen wie reich du einmal wirst oder wie viele Kinder du haben wirst, wenn du erwachsen bist.



                    ### √úbung
                    Kannst du dir deine eigene (alberne) Vorhersagemaschine ausdenken?
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen wie viele Kinder du haben wirst!'
                    Alter = {ask} 'Wie alt bist du?'
                    Geschwister = {ask} 'Wie viele Geschwister hast du?'
                    L√§nge = {ask} 'Wie gro√ü bist du in Zentimetern?'
                    Kinder = L√§nge / Alter
                    Kinder = Kinder - Geschwister
                    {print} 'Du bekommst ...'
                    {sleep}
                    {print} Kinder ' Kinder!'
                    ```
            7:
                story_text: |
                    ### √úbung
                    Vervollst√§ndige das Programm, das vorhersagt, ob dein Schatz dich liebt oder nicht.
                example_code: |
                    ```
                    {print} 'Ich habe Blumen mit magischen Bl√ºtenbl√§ttern!'
                    {print} 'Wenn du die Bl√ºtenbl√§tter pfl√ºckst, wird dir die Blume sagen, ob dein Schatz dich liebt!'
                    Anzahl = {ask} 'Wie viele Bl√ºtenbl√§tter willst du pfl√ºcken?'
                    M√∂glichkeiten = Du wirst geliebt, Du wirst nicht geliebt
                    _ _ _ _ M√∂glichkeiten {at} {random}
                    ```
            8:
                story_text: |
                    Im n√§chsten Beispiel kannst du die Wahrsagerin mehrere Fragen stellen lassen und sie auch anzeigen!

                    ### √úbung
                    Kannst du den richtigen Befehl in die L√ºcken f√ºllen?
                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Du kannst mir 3 Fragen stellen.'
                    Antworten = ja, nein, vielleicht
                    _ _ _
                       Frage = {ask} 'Was m√∂chtest du wissen?'
                       {print} Frage
                       {sleep}
                       {print} 'Meine Kristallkugel sagt... ' Antworten {at} {random}
                    ```
            10:
                story_text: |
                    In diesem Level wirst du lernen, das englische Spiel MASH zu programmieren. In diesem Spiel geht es darum, f√ºr alle Spieler die Zukunft vorauszusagen. Auf Englisch stehen die Buchstaben f√ºr mansion, apartment, shack, und house, was auf Deutsch Schloss, Wohnung, Schuppen und Haus bedeutet.

                    ### √úbung 1
                    F√ºlle die Leerstellen! Benutze dazu die neuen Befehle, die du in diesem Level gelernt hast.
                example_code: |
                    ```
                    H√§user = Schloss, Wohnung, Schuppen, Haus
                    Liebe = niemand, eine k√∂nigliche Person, ihr Nachbar, ihre wahre Liebe
                    Haustiere = Hund, Katze, Elefant
                    Namen = Judith, Ralf, Tim
                    _
                        {print} Name ' lebt in einem ' H√§user {at} {random}
                        {print} Name ' wird ' Liebe {at} {random} ' heiraten.'
                        {print} Name ' wird eine(n) ' Haustiere {at} {random} ' als Haustier haben.'
                        {sleep}
                    ```
            12:
                story_text: |-
                    Ab Level 12 musst du auch in Listen Anf√ºhrungszeichen vor und nach jedem Element verwenden.

                    ### √úbung
                    Erg√§nze die Liste um zwei Vorhersagen
                example_code: |
                    ```
                    Schicksale = 'Du wirst auf einer Bananenschale ausrutschen', _
                    {print} 'Ich werde in meine Kristallkugel schauen, um deine Zukunft zu sehen.'
                    {print} 'Ich sehe... Ich sehe...'
                    {sleep}
                    {print} Schicksale {at} {random}
                    ```
    functions:
        name: Funktionen
        default_save_name: Funktionen
        description: Funktionen
        levels:
            12:
                story_text: |
                    In diesem Level lernst du, wie du **Funktionen** verwenden kannst. Eine Funktion ist ein Block code, der einfach √∂fter ausgef√ºhrt werden kann. Funktionen helfen uns dabei, Code zu organisieren, der immer wiederverwendet werden kann.
                    Um eine Funktion zu erzeugen, benutze `{define}`und gib der Funktion einen Namen. Dann schreibe alle Zeilen, die in der Funktion sein sollen, in einen einger√ºckten Block unter der `{define}`Zeile.
                    Lass eine Leerzeile in deinem Code, Damita alles H√ºbsch aussieht. Gro√üartig! Du hast eine Funktion erzeugt.

                    Jetzt k√∂nnen wir jedes mal, wenn wir diesen Block Code ben√∂tigen, einfach <code>{call}</code> mit dem Namen der Funktion verwenden, um sie aufzurufen. Diesen Block Code m√ºssen wir nicht immer wieder schreiben.

                    Schau dir diesen Beispiel Code von einem Spiel Twister an. Die Funktion 'zug' enth√§lt einen Block Code, der bestimmt, wohin welches K√∂rperteil gehen soll.

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die beiden Variablen gew√§hltes_k√∂rperteil und gew√§hlte_farbe setzt.
                    W√§hle dann, wie oft du die Funktion aufrufen willst, dem Twister den richtige Dreh mit zu eben.

                    ### √úbung 2
                    Verbessere deinen Code, indem du eine Variable 'personen" erg√§nzt. Benutzte die Variable, um allen Spielern ihre eigenen Befehle im Spiel zu geben.
                    Zum Beispiel: 'Achmed, rechte Hand auf gr√ºn' oder 'Jessica, linker Fu√ü auf gelb'.
                example_code: |
                    ```
                    seiten = 'links', 'rechts'
                    k√∂rperteile = 'hand', 'fu√ü'
                    farben = 'rot', 'blau', 'gr√ºn', 'gelb'

                    {define} zum
                        gew√§hlte_seite = seiten {at} {random}
                        gew√§hltes_k√∂rperteil = k√∂rperteile _
                        gew√§hlte_farbe = farben _
                        {print} gew√§hlte_seite ' ' gew√§hltes_k√∂rperteil ' auf ' gew√§hlte_farbe

                    {print} 'Lass uns eine Runde Twister spielen!'
                    {for} i {in} {range} 1 {to} _
                        {call} zug
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Nun, da du gelernt hast, wie Funktionen verwendet werden, wirst du lernen, wie du eine Funktion mit einem Argument verwenden kannst.
                    Ein **Argument** ist eine Variable, die in einer Funktion verwendet wird. Au√üerhalb der Funktion wird sie nicht verwendet.

                    In diesem Code haben wir die beispielsweise die erste Strophe des Liedes 'My Bonnie is over the ocean' programmiert.
                    Im Beispielcode wird das Argument `ort`verwendet. Ort ist eine Variable, die nur in der Funktion genutzt wird, also ein Argument.
                    Um `ort`zu verwenden haben wir `{with}`nach `{define}`geschrieben.
                    Wenn die Funktion aufgerufen wird, wird der Computer das Argument 'ort' mit dem Text nach `{call} lied {with}`ersetzen.

                    ### √úbung
                    Die n√§chste Strophe des Liedes geht so:

                    ```not_hedy_code
                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead
                    ```

                    Kannst Du diese Strophe so programmieren wie das Beispiel?
            14:
                story_text: |
                    Im letzten Level hast du gelernt, Funktionen zu erzeugen und mit Argumenten zu verwenden. Ein anderer wichtiger Nutzen einer Funktion ist, sie etwas f√ºr dich berechnen zu lassen.
                    Du kannst die Funktion eine Berechnung anstellen lassen und dir das Ergebnis der Berechnung geben lassen. Das Ergebnis wird **r√ºckgabe wert** genannt.

                    In diesem Code beispielsweise wird die Funktion berechne_neuen_preis den neuen Preis eines Artikel berechnen. Sie gibt dir den neuen Preis des Artikels als R√ºckgabewert

                    ### √úbung
                    Vervollst√§ndige diesen Code. Wir haben schon die schon die Variable neuer_preis definiert, du musst sie nur noch richtig setzen.
                    Du solltest die Codezeile fertigstellen, indem du die Funktion aufrufst, die den neuen Preis berechnet.
                example_code: |
                    ```
                    {define} berechne_neuen_preis {with} menge, prozent
                        prozent = prozent / 100
                        rabbat = menge * prozent
                        {return} menge - rabatt

                    alter_preis = {ask} 'Wie ist der Listenpreis?'
                    nachlass = {ask} 'Gibt es Prozente?'

                    neuer_preis = _ berechne_neuen_preis {with} alter_preis, _
                    {print} 'Der neue Preis ist ' neuer_preis ' Euro'
                    ```
            18:
                story_text: |
                    Lass uns Funktionen verwenden, wie es in Python geht! Um eine Funktion zu definieren, benutzen wir nicht l√§nger:

                    `{define} name_funktion {with} argument_1, argument_2:`

                    sondern:

                    `{def} name_funktion(argument_1, argument_2):`.


                    Wenn du keine Argumente verwenden willst, l√§sst du den Platz zwischen den Klammern einfach leer.
                    Um eine Funktion aufzurufen, m√ºssen wir den `{call}` Befehl nicht mehr verwenden. Schreib einfach den Namen der Funktion.
                example_code: |
                    ```
                    {def} berechne_punkte(antwort, richtige_antwort):
                        {if} antwort == richtige_antwort:
                            punkte = 1
                        {elif} antwort == '?':
                            punkte = 0
                        {else}:
                            punkte = -1
                        {return} punkte

                    antwort = {input} ('Wo findest du den Eiffelturm?')
                    richtige_antwort = 'Paris'
                    punkte = berechne_punkte(antwort, richtige_antwort)
                    {print} ('Dein Punktestand ist... ', punkte)
                    ```
    guess_my_number:
        levels:
            14:
                story_text: |
                    In diesem Level kannst du das Spiel 'Errate meine Zahl' programmiere.

                    ### √úbung
                    Erg√§nze die richtigen Zeichen in den Leerstellen, so dass das Spiel funktioniert
                example_code: |
                    ```
                    {print} 'Errate meine Zahl'
                    zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    zahl = zahlen {at} {random}
                    spiel = 'l√§uft'
                    {for} i {in} {range} 1 {to} 10
                        {if} spiel == 'l√§uft'
                            vermutung = {ask} 'Welche Zahl meinst du ist es?'
                            {if} vermutung _ zahl
                                {print} 'Kleiner!'
                            {if} vermutung _ zahl
                                {print}  'Gr√∂√üer!'
                            {if} vermutung _ zahl
                                {print} 'Gewonnen!'
                                spiel = 'vorbei'
                    ```
        default_save_name: Errate meine Zahl
        name: Errate meine Zahl
        description: Errate meine Zahl
    hangman:
        name: Galgenm√§nnchen
        default_save_name: Galgenm√§nnchen
        description: Errate das Wort
    hangman_2:
        name: Galgenm√§nnchen 2
        description: Galgenm√§nnchen 2
        default_save_name: Galgenm√§nnchen_2
    hangman_3:
        name: Galgenm√§nnchen 3
        description: Galgenm√§nnchen 3
        default_save_name: Galgenm√§nnchen_3
    harry_potter:
        description: Harry Potter Abenteuer
        levels:
            10:
                story_text: |
                    ### √úbung
                    Wir k√∂nnen auch ein Orakel im Harry Potter Stil machen. F√ºlle die Leerstellen aus, so dass 9 Zeilen ausgegeben werden.
                    **Extra** √Ñndere die Sil des Orakels in dein Lieblingsbuch, -film oder -serie.
                example_code: |
                    ```
                    h√§user = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    f√§cher = Zaubertr√§nke, Verteidigung gegen die dunklen K√ºnste, Zauberkunst, Verwandlung
                    √§ngste = Voldemort, Spinnen, Durchfallen beim OWL Test
                    namen = Harry, Ron, Hermione
                    _
                    _ {print} name ' kommt nach ' h√§user {at} {random}
                    _ {print} name ' ist gut in ' f√§cher {at} {random}
                    _ {print} name ' hat am meisten Angst vor ' √§ngste {at} {random}
                    ```
        default_save_name: Harry Potter
        name: Harry Potter
    haunted:
        name: Spukhaus
        default_save_name: Spukhaus
        description: Entkomme dem Spukhaus
        levels:
            1:
                story_text: |
                    In diesem Abenteuer arbeiten wir an einem Spiel, in dem du aus einem Geisterhaus entkommen musst, indem du die richtigen T√ºren w√§hlst.
                    Wenn du die richtige T√ºr w√§hlst, √ºberlebst du, aber wenn nicht, k√∂nnte ein schreckliches Monster‚Ä¶

                    In Level 1 beginnen wir mit unserem Spukhaus-Spiel, indem wir uns eine gruselige Geschichte ausdenken und die Spieler fragen, welches Monster sie in unserem Spukhaus finden werden.
                example_code: |
                    ```
                    {print} Wie bin ich hierher gekommen?
                    {print} Ich erinnere mich an meinen Freund, der sagte dass ich in das alte Haus gehen soll...
                    {print} und pl√∂tzlich wurde alles dunkel.
                    {print} Aber warum bin ich jetzt auf dem Boden...?
                    {print} Mein Kopf tut weh als h√§tte mir jemand mit der Pfanne eine √ºbergezogen!
                    {print} Was ist das f√ºr ein Ger√§usch?
                    {print} Oh nein! Ich habe das Gef√ºhl dass ich nicht alleine in diesem Haus bin!
                    {print} Ich muss hier raus!
                    {print} Vor mir sind drei T√ºren...
                    {ask} Durch welche T√ºr soll ich gehen?
                    {echo} Ich nehme T√ºr
                    {print} ...?
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    Beende nun die Geschichte, indem du mindestens 5 Zeilen zum Code hinzuf√ºgst.
                    Denke daran, dass du jede Zeile mit einem `{print}` Befehl beginnst.
            2:
                story_text: |
                    In diesem Spukhaus kannst du Monster mit Emojis ausw√§hlen. Nat√ºrlich kannst du auch W√∂rter verwenden.
                example_code: |
                    ```
                    Monster_1 {is} üëª
                    Monster_2 {is} ü§°
                    Monster_3 {is} üë∂
                    {print} Du gehst ins Spukhaus.
                    {print} Pl√∂tzlich siehst du ein Monster_1
                    {print} Du l√§ufst in den anderen Raum...
                    {print} Aber ein Monster_2 wartet dort auf dich!
                    {print} Oh nein! Schnell flitzt du in die K√ºche.
                    {print} Aber als du reinkommst greift dich Monster_3 an!
                    ```
                story_text_2: |
                    ### √úbung
                    Im obigen Beispiel sind die Monster vorherbestimmt. Also ist die Ausgabe deines Codes jedes Mal das Gleiche.
                    Kannst du `{ask}` Befehle hinzuf√ºgen, um das Spukhaus interaktiv zu machen und die Spieler die Monster ausw√§hlen zu lassen auf die sie treffen?
                example_code_2: |
                    ```
                    Monster1 {is} _
                    Monster2 {is} _
                    Monster3 {is} _
                    {print} Du betrittst das Spukhaus.
                    {print} Pl√∂tzlich siehst du ein Monster1
                    {print} Du rennst in den anderen Raum...
                    {print} Aber ein Monster2 wartet dort auf dich!
                    {print} Oh nein! Schnell in die K√ºche.
                    {print} Aber als du hineingehst attackiert dich Monster3 !
                    ```
            3:
                story_text: |
                    In den vorherigen Leveln hast du eine Einleitung ins Spukhaus-Spiel gemacht, aber wie du vielleicht gemerkt hast war das Ender der Geschichte immer schrecklich.
                    In diesem Level kannst du die Geschichte interaktiver machen, indem du den Ausgang des Spiels √§nderst. Manchmal wirst du gefressen, manchmal kannst du entkommen!
                    Lass Hedy zuf√§llig entscheiden!

                    ### √úbung
                    Kopiere den Beispielcode und f√ºlle die Leerstellen, so dass er funktioniert!

                    **Extra** Die Geschichte ist ziemlich einfach. Vielleicht kannst du sie noch grusliger machen, indem du dir eine aufregendere Geschichte ausdenkst.
                    Es gibt bisher auch nur sehr wenige verschiedene Enden, es gib ja nur drei M√∂glichkeiten, was hinter der T√ºr sein kann. Vielleicht fallen dir noch mehr Monster f√ºr die Liste ein!
                example_code: |
                    ```
                    _ Entfliehe dem Spukhaus!
                    _ Vor dir gibt es 3 T√ºren...
                    _ _ _ Welche T√ºr w√§hlst du?
                    _ Du w√§hlst T√ºr ... t√ºr_wahl
                    monster _ ein Zombie, ein Vampir, NICHTS DU BIST ENTFLOHEN
                    _ Du siehst...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    In diesem Level lernst du, mit Anf√ºhrungszeichen umzugehen.

                    ### √úbung 1
                    Kannst du dein Spukhaus f√ºr Level 4 fit machen?

                    ### √úbung 2
                    Gehe zum vorigen Level zur√ºck und kopiere deinen Spukhaus-Code. Bringe den Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge Anf√ºhrungszeichen zu diesem Code hinzu _
                    {print} Entkomme dem Spukhaus!
                    {print} Vor dir sind drei T√ºren...
                    Wahl {is} {ask} Welche T√ºr w√§hlst du?
                    {print} Du nimmst T√ºr ... Wahl
                    Monster {is} ein Zombie, ein Vampir, NICHTS DU BIST ENTKOMMEN
                    {print} Du siehst...
                    {sleep}
                    {print} Monster {at} {random}
                    ```
            5:
                story_text: |
                    Bis zu diesem Level hat das Spukaus den Spieler immer gefragt durch welche T√ºr er gehen will, aber wie du vielleicht gemerkt hast, musste der Spieler nicht wirklich richtig antworten.
                    Wenn der Spieler einfach irgendetwas eingeben hat, ging das Spiel trotzdem weiter und der Spieler konnte sogar gewinnen (obwohl er gar keine T√ºr gew√§hlt hat).
                    In diesem Level kannst du nur gewinnen, wenn du die gleiche T√ºr w√§hlst die Hedy zuf√§llig ausgesucht hat.

                    ### √úbung
                    Kannst du die 4 fehlenden W√∂rter finden, um den Code zu vervollst√§ndigen?
                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus!'
                    {print} 'Es sind 3 T√ºren vor dir...'
                    T√ºren {is} 1, 2, 3
                    Monster {is} Werwolf, Mumie, Vampir, Zombie
                    gew√§hlte_T√ºr {is} {ask} 'Welche T√ºr w√§hlst du?'
                    {print} 'Du w√§hlst T√ºr Nummer...' gew√§hlte_T√ºr
                    {sleep}
                    richtige_T√ºr {is} T√ºren {at} {random}
                    _ _ _ _ {print} 'Gro√üartig! Du bist entkommen!'
                    {else} {print} 'Oh nein! Du wirst gegessen von...' Monster {at} {random}
                    ```
            9:
                story_text: |
                    In diesem Level kannst du Verschachtelung verwenden, um das Spukhaus noch interaktiver zu machen!

                    ### √úbung
                    Im Moment ist es ziemlich schwer, das Spiel zu gewinnen. Kannst du es leichter machen?
                    √Ñndere deinen Code, sodass er nur eine falsche T√ºr und zwei richtige T√ºren, anstatt eine richtige und zwei falsche hat.
                    Tipp: Dies bedeutet, dass du die Variablen f√ºr richtige und falsche T√ºren und die Befehle `{if}` und `{else}` tauscht.
                    Und nat√ºrlich kannst du auch die Geschichte nach Belieben ver√§ndern. √Ñndere die Monster oder mach es zu einer fr√∂hlichen Spiel-Show, wo man ein Geschenk bekommt!
                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus!'
                    Spieler = am_Leben
                    T√ºren = 1, 2, 3
                    Monster = Zombie, Vampir, riesige Spinne
                    {repeat} 3 {times}
                        {if} Spieler {is} am_Leben
                            richtige_T√ºr {is} T√ºren {at} {random}
                            {print} 'Vor dir sind drei T√ºren...'
                            gew√§hlte_T√ºr = {ask} 'Welche T√ºr w√§hlst du?'
                            {if} gew√§hlte_T√ºr {is} richtige_T√ºr
                                {print} 'Hier sind keine Monster!'
                            {else}
                                {print} 'Du wirst gefressen von einem(r) ' Monster {at} {random}
                                Spieler = tot
                        {else}
                            {print} 'GAME OVER'
                    {if} Spieler {is} am_Leben
                        {print} 'Gro√üartig! Du hast √ºberlebt'
                    ```
            11:
                story_text: |
                    In diesem Level haben wir den `{for}` Befehl ver√§ndert, um dem Spieler zu sagen, wo er ist.

                    ### √úbung 1
                    Vervollst√§ndige das Programm, sodass der Spieler wei√ü in welchem Raum er ist.

                    ### √úbung 2
                    Mache ein Abenteuer aus dem Programm, indem du folgenden Schritten folgst:

                    1. Erstelle eine Liste von Auswahlm√∂glichkeiten (wie k√§mpfe oder fl√ºchte)
                    2. Stelle sicher, dass der Spieler eine M√∂glichkeit ausw√§hlen kann. Nutze `{ask}`
                    3. Ist die Antwort richtig? Dann darf er zum n√§chsten Monster fortfahren. Gibt er eine falsche Antwort? Lass es den Spieler mit `{print}` wissen.

                    **Extra** Wenn man eine falsche Wahl trifft, wird immer noch ein Monster angezeigt! Wie k√∂nntest du das √§ndern?
                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    monsterliste = Zombie, Vampir, Riesenspinne
                    _
                        {print} 'Raum ' i
                        monster = monsterliste {at} {random}
                    ```
            14:
                story_text: |
                    ### √úbung
                    In diesem Level kannst du das `<` und `>` Symbol verwenden, um Leben in deinem Spiel zu verwenden.
                    Stelle sicher, dass die Spieler:in ein Leben verliert, wenn sie auf das falsche Monster trifft und das Spiel vorbei ist, wenn keine Leben mehr √ºbrig sind.
                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus'
                    leben = 3
                    t√ºren = 1, 2, 3
                    monsters = 'die b√∂se Hexe', 'ein Zombie', 'einen schlafenden 3-k√∂pfiger Hund'
                    {for} i {in} {range} 1 {to} 10
                        {if} leben _
                            richtige_t√ºr = t√ºren {at} {random}
                            monster = monsters {at} {random}
                            gew√§hlte_t√ºr = {ask} 'Welche T√ºr nimmst du?'
                            {if}richtige_t√ºr == gew√§hlte_t√ºr
                                {print} 'Du hast die richtige T√ºr gew√§hlt'
                            {else}
                                {print} 'Du siehst...' monster
                                {if} monster == 'einen schlafenden 3-k√∂pfigen Hund'
                                    {print} 'Ahh.... Er schl√§ft'
                                {else}
                                    {print} 'Du verlierst ein Leben'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
    hotel:
        name: Hotel
        levels:
            13:
                story_text: |
                    Im letzten Abenteuer hast du gelernt, ein Argument in einer Funktion zu verwenden. Du hast auch glen, wie du das mit einem {ask} kombinieren kannst.
                    Du hast dich vielleicht gefragt, warum du eine Funktion verwenden solltest, weil die Funktionen im Beispiel nur eine Zeile lange sind.
                    Jetzt werden wir dir zeigen, wie gr√∂√üere Funktionen aussehen. Wir werden jetzt auch mehrere Argumente verwenden. Du wirst sehen, wie viel besser es ist, eine Funktion zu verwenden, wenn die Funktion gr√∂√üer wird.
                    Hier ist ein Beispiel einer Funktion mit Argumenten, kombiniert mit dem {ask} Befehl.
        default_save_name: Hotel
        description: Hotel
    if_command:
        description: Einf√ºhrung des {if} Befehls
        levels:
            5:
                story_text: |
                    ## Falls... sonst....
                    Im Level 5 gib's was Neues, das `{if}`! Mit dem `{if}` kannst zu zwischen zwei verschiedenen M√∂glichkeiten w√§hlen.
                    Dieses Programm druckt Wunderbar, falls du Hedy als Name eingibst und Buh, bei anderen Eingaben.
                    `{ask}` und `{print}` funktionieren noch so wie in Level 4.
                example_code: |
                    ```
                    name {is} {ask} 'Wie hei√üt du?'
                    {if} name {is} Hedy {print} 'Wunderbar' {else} {print} 'Buh!'
                    ```
                story_text_2: |
                    Machmal wird der Code mit einem `{if}` wirklich lang und passt nicht gut in eine Zeile. <br> Du kannst dann den Code auf zwei Zeilen verteilen. Die zweite Zeile beginnt mit einem `{else}` dann so:
                example_code_2: |
                    ```
                    name {is} {ask} 'Hie hei√üt du?'
                    {if} name {is} Hedy {print} 'Wunderbar'
                    {else} {print} 'Buh!'
                    ```
                story_text_3: |
                    ### √úbung
                    Versuche dein eigenes Programm mit `{if}` und `{else}` zu schreiben. Wenn du willst, kannst du das Beispielprogramm verwenden.
                example_code_3: |
                    ```
                    antwort {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Gro√üartig!'
                    _ _ 'Nein, 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## Falls... Sonst...
                    Du hast gelernt, einen Block von Programmzeilen nach einem `{repeat}` Befehl zu wiederholen.
                    Jetzt kannst du auch Einr√ºckung verwenden um Bl√∂cke nach einem {if} oder {else} Befehl zu erzeugen.
                    Schau dir das Beispielprogramm an.

                    ### √úbung
                    F√ºge einen {else} Befehl zum Beispielprogramm hinzu. Erzeuge einen Block von Zeilen indem du Einr√ºckungen verwendest. Starte dazu jede Zeile mit 4 Leerzeichen.
                example_code: |
                    ```
                    name = {ask} 'Wie hei√üt Du?'
                    {if} name {is} Hedy
                        {print} 'Willkommen Hedy'
                        {print} 'Du kannst auf deinem Computer spielen!'
                    ```
            9:
                story_text: |
                    In diesem Level kannst du einen `{if}` Befehl innerhalb eines anderen `{if}` Befehls verwenden.
                example_code: |
                    ```
                    weiter = {ask} 'Willst Du weiter machen?'
                    {if} weiter = ja
                        sicher = {ask} 'Bist du sicher?'
                        {if} sicher {is} ja
                            {print} 'Wir machen weiter.'
                        {else}
                            {print} 'Du ist nicht sicher.'
                    {else}
                        {print} 'Du willst nicht weiter machen.'
                    ```
        default_save_name: if_Befehl
        name: '{if} & {else}'
    in_command:
        default_save_name: in_Befehl
        description: Einf√ºhrung des {in} Befehls
        levels:
            5:
                story_text: |
                    ## Listen
                    Wenn wir pr√ºfen wollen, ob etwas in einer Liste enthalten ist, k√∂nnen wir den `{in}` Befehl.
                    Dieser Code druckt H√ºbsch! falls du gr√ºn oder gelb ausw√§hlst und sonst b√§h.
                example_code: |
                    ```
                    h√ºbsche_farben {is} gr√ºn, gelb
                    lieblingsfarbe {is} {ask} 'Was ist deine Lieblingsfarbe?'
                    {if} lieblingsfarbe {in} h√ºbsche_farben {print} 'H√ºbsch!'
                    {else} {print} 'b√§h'
                    ```
                story_text_2: |
                    ### √úbung
                    Vervollst√§ndige den Beispielcode indem du die Leerstellen mit Befehlen f√ºllst, die du gelernt hast.
                    Wenn du den Code fertig hast, versuche selbst Code mit Frage zu entwickeln, die du dir selbst ausgedacht hast..
                example_code_2: |
                    ```
                    tiere {is} Hund, Kuh, Schaf
                    antwort {is} {ask} 'Was is dein Lieblingstier?'
                    _ antwort _ tiere _ 'Meines auch!'
                    _ _ 'Meine Lieblingstiere sind Hunde, K√ºhe und Schafe'
                    ```
        name: '{in}'
    is_command:
        default_save_name: ist_Befehl
        description: Einf√ºhrung des {is}-Befehls
        levels:
            2:
                story_text: |
                    ## Variablen
                    Du kannst einem Wort mit `{is}` einen Wert geben. Dieses Wort nennt man eine **Variable**. In diesem Beispiel haben wir eine Variable namens name und eine Variable names alter benutzt. Du kannst das Wort name irgendwo in deinem Code verwenden. Es wird von Hedy automatisch ersetzt, wie hier:
                example_code: |
                    ```
                    name {is} Hedy
                    alter {is} 15
                    {print} name ist alter Jahre alt.
                    ```
                story_text_2: |
                    ### √úbung
                    Es ist Zeit, deine eigenen Variablen zu definieren.
                    Im Beispiel-Code zeigen wir ein Beispiel mit der Variable `lieblingstier`. In Zeile 1 wird die Variable gesetzt, und in Zeile 2 verwenden wir die Variable in einem `{print}` Befehl.
                    Zuerst, vervollst√§ndige unser Beispiel, in dem du dein Lieblingstier in die Leerstelle eintr√§gst. Dann denke dir mindestens 3 eigene Code-Beispiele aus. W√§hle eine Variable und gib der Variable mit dem `{is}` Befehl einen Wert. Dann verwenden den `{print}` Befehl, so wie wir es gezeigt haben.
                example_code_2: |
                    ```
                    lieblingstier {is} _
                    {print} Ich mag lieblingstier
                    ```
            6:
                story_text: |
                    Wir haben au√üerdem ge√§ndert, wie man ein Wort in einer Variable speichert. Du kannst nun auch `=` anstatt von `{is}` verwenden, wenn du einen Namen oder eine Zahl in einer Variable speichert, und zwar so:
                example_code: |
                    ```
                    name = Hedy
                    antwort = 20 + 4
                    ```
            14:
                story_text: |
                    Wir lernen neue Elemente kennen. Aus der Mathematik kennst du vielleicht schon `<` und `>`.
                    Das `<`pr√ºft, ob die erste Zahl kleiner als die zweite ist. Zum Beispiel pr√ºft alter `<`12, ob alter kleiner als 12 ist.
                    Falls zu pr√ºfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kann du `<=` verwenden, zum Beispiel alter `<=` 11
                    Das `>` pr√ºft, ob die erste Zahl gr√∂√üer als die zweite ist, zum Beispiel punkte `>`10 pr√ºft, ob punkte gr√∂√üer als 10 ist.
                    Falls du pr√ºfen willst ob die erste Zahl gr√∂√üer als oder gleich der zweiten ist, kannst du `>=`verwenden, zum Beispiel punkte `>=` 11.
                    Benutze diese Vergleiche so in einem `{if}`:
                story_text_2: |
                    Ab diesem Level kannst du zwei Gleichheitszeichen verwenden, um etwas zu vergleichen. Das ist in den meisten Programmiersprachen so:
                example_code_2: |
                    ```
                    name = {ask} 'Wie hei√üt du?'
                    {if} name == 'Hedy'
                        {print} 'Du bist cool!'
                    ```
                story_text_3: |
                    Du kannst auch vergleichen, ob etwas *nicht* gleich wie etwas anderes ist. Dazu benutzt du `!=` so:
                example_code_3: |
                    ```
                    name = {ask} 'Wie heisst du?'
                    {if} name != 'Hedy'
                        {print} 'Du bist nicht Hedy'
                    ```
        name: '{is}'
    language:
        name: Sprache
        default_save_name: Sprache
        description: √úbe W√∂rter in einer Fremdsprache
        levels:
            5:
                story_text: |
                    Schreibe dein eigenes Programm, um Vokabeln in einer neuen Sprache zu √ºben.

                    ### √úbung
                    Mache das Programm l√§nger, indem du mindestens 3 weitere W√∂rter zum Lernen f√ºr den Spieler hinzuf√ºgst.
                    **Extra** Nat√ºrlich kannst du auch eine andere Sprache als Franz√∂sisch w√§hlen. Du kannst den Code zu jeder beliebigen Sprache √§ndern, die du lernen m√∂chtest.
                example_code: |
                    ```
                    {print} 'Lerne Franz√∂sisch!'
                    Katze {is} {ask} 'üê±'
                    {if} Katze {is} chat {print} 'Gro√üartig!'
                    {else} {print} 'Nein, Katze hei√üt chat'
                    Frosch {is} {ask} 'üê∏'
                    {if} Frosch {is} grenouille {print} 'Super!'
                    {else} {print} 'Nein, Frosch hei√üt grenouille'
                    ```
    maths:
        name: Mathe
        default_save_name: Mathe
        description: Mathe einf√ºhren
        levels:
            6:
                story_text: |
                    In diesem Level lernst du etwas Neues: Du kannst nun auch Rechnen.

                    Das Plus ist einfach, du schreibst es wie in Mathe: `5 + 5` zum Beispiel. Das Minus klappt auch prima, es ist `5 - 5`.

                    Das Mal ist ein bisschen anders, weil es daf√ºr kein Symbol auf deiner Tastatur gibt. Such danach, es gibt wirklich keins!
                    Darum multiplizieren wir mit dem Sternchen √ºber der 8: `5 * 5`. Lies das als "5 mal 5", so kannst du es dir am Besten merken.
                example_code: |
                    ```
                    {print} '5 plus 5 ist ' 5 + 5
                    {print} '5 minus 5 ist ' 5 - 5
                    {print} '5 mal 5 ist ' 5 * 5
                    {print} '5 dividiert durch 5 ist ' 5 / 5
                    ```
            12:
                story_text: |-
                    **Dezimalzahlen**
                    Bis jetzt hat Hedy Dezimalzahlen wie 1.5 nicht erlaubt, aber jetzt erlauben wir sie. Beachte, dass Computer `.` als Komma verwenden.
                example_code: |
                    ```
                    {print} 'Zweieinhalb plus Zweieinhalb ist...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Mathe mit Worten**
                    In diesem Level kannst du so Mathe mit Worten machen:
                example_code_2: |
                    ```
                    a = 'Hallo '
                    b = 'Welt!'
                    {print} a + b
                    ```
    music:
        name: Musik
        default_save_name: Musik
        description: Spiele einen Ton!
        levels:
            1:
                story_text: |-
                    In diesem Level lernst du, wie man den `{play}` Befehl benutzt um einen Ton zu spielen.

                    Tippe `{play}` gefolgt von der Note, die du spielen m√∂chtest. Die Skala geht C-D-E-F-G-A-B.
                    Wie du sehen kannst, sind es 7 verschiedene Buchstaben, wir k√∂nnen aber viel mehr als 7 T√∂ne spielen.
                    Tippe eine Nummer zwischen 0 und 9 hinter den Buchstaben um die Skala auszuw√§hlen, zum Beispiel kommt B4 nach C5.
                    C0 ist die tiefste Note die du spielen kannst, B9 die h√∂chste

                    ### √úbung
                    Probier den Beispielcode aus und spiele damit herum! Kannst du deine eigene Melodie erzeugen?
                    Im n√§chsten Level lernst du, wie man einige bereits existierende Lieder spielt.
            2:
                story_text: |
                    ### √úbung
                    Beende die Lieder! Wir haben mit dem Code f√ºr einige Melodien begonnen.
                story_text_2: Wie du siehst, kannst du den `{sleep}` Befehl auch nutzen, um eine kleine Pause im Lied einzubauen.
            3:
                story_text: |
                    Erfinde eine zuf√§llige Melodie!

                    ### √úbung
                    Der Beispielcode erstellt eine zuf√§llige Melodie, die jedoch sehr kurz ist und nicht viele Noten verwendet.
                    F√ºge der Liste weitere Noten hinzu und erstellen Sie eine l√§ngere Melodie, indem du die letzte Zeile noch ein paar Mal kopierst.
                example_code: |
                    ```
                    noten {is} A4, B4, C4
                    {play} noten {at} {random}
                    {play} noten {at} {random}
                    {play} noten {at} {random}
                    ```
            4:
                story_text: |
                    Benutze den  `{clear}` Befehl, um eine Karaokemaschine zu bauen!

                    ### √úbung
                    Vervollst√§ndige die Karaokeversion von  'Mary had a little lamb'.
                    Dann schreibe eine Karaokeversion eines Lieds, das dir gef√§llt!
            5:
                story_text: |
                    Du kannst den `{play}` Befehl nicht nur zu verwenden, um ein ganzes Lied zu spielen. Manchmal willst du nur eine einzelne Note spielen.
                    Wenn Du beispielsweise einen Quiz programmieren willst, kannst du einen fr√∂hlichen hohen Ton spielen, wenn die Antwort richtig ist und einen traurigen tiefen Ton, wenn sie falsch ist.

                    ### √úbung
                    Vervollst√§ndige die erste Frage, in dem du eine Zeile Code einf√ºgst, die ein C3 spielt, wenn die Antwort falsch ist.
                    Dann denke dir noch 3 Fragen f√ºr den Quiz aus.
                example_code: |
                    ```
                    antwort {is} {ask} 'Wie hei√üt die Hauptstadt von Simbabwe?'
                    {if} antwort {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Anstatt Noten zu spielen, kannst du nun auch Zahlen spielen. Tippe einfach `{play} 1` f√ºr die tiefste Note, `{play} 70` f√ºr die h√∂chste Note, oder irgendetwas dazwischen.\n\n### √úbung\nDas schreit nach musikalischer Mathematik. Probiere den Beispielcode einige Male mit verschiedenen Startzahlen aus.\nDann gucke, ob du ein Lied komponieren kannst, indem du Zahlen benutzt.\n"
                example_code: |
                    ```
                    zahl = {ask} 'Sag eine Anfangszahl zwischen 1 und 67'
                    {print} zahl
                    {play} zahl
                    zahl = zahl + 1
                    {print} zahl
                    {play} zahl
                    zahl = zahl + 1
                    {print} zahl
                    {play} zahl
                    ```
            7:
                story_text: |
                    Wenn du den  `{repeat}` Befehl benutzt, kann dein Programm viel k√ºrzer werden!

                    ### √úbung
                    Vervollst√§ndige das Programm f√ºr Twinkle Twinkle Little Star mit dem `{repeat}`Befehl.
                    Dann gehe nochmal zu den Liedern aus den vorherigen Levels. Kannst Du die Programme auch k√ºrzer machen?
            8:
                story_text: |
                    Nachdem wir den `{repeat}`Befehl auch f√ºr mehrere Zeilen verwenden k√∂nnen, ist es noch leichter, Lieder zu schreiben!

                    ### √úbung
                    Vervollst√§ndige das Lieder von Bruder Jakob. Vergiss nicht, `{repeat}` zu benutzen!
                example_code: |
                    ```
                    {print} 'Bruder Jakob'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    Ab diesem Level kannst Du - unter anderem - den {repeat} Befehl in einem {repeat} Befehl verwenden.
                    Damit wird z.B. 'Happy birthday' noch k√ºrzer!

                    ### √úbung
                    Vervollst√§ndige das Lied!
                example_code: |
                    ```
                    erstes_mal = ja
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} erstes_mal {is} ja
                            {play} F
                            {play} E
                            erstes_mal {is} nein
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Benutze Funktionen in Deinen Liedern! So wie im Programmbeispiel kannst du eine Funktion f√ºr jede Zeile von 'Twinkle Twinkle Little Star' machen. Wenn du die ersten drei Zeilen geschrieben hast, mu√üt du nur noch die Funktionen in der Reihenfolge aufrufen, in der du sie gespielt haben willst.

                    ### √úbung
                    Vervollst√§ndige 'Twinkle Twinkle Little Star'.
                    Dann schau die nochmal die Lieder an, die du in den vorherigen Leveln geschrieben hast. Kannst du die Programme auch besser und k√ºrzer machen, indem du Funktionen benutzt?
                example_code: |
                    ```
                    {define} erste_zeile
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} zweite_zeile
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} dritte_zeile
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    Du kannst eine Funktion mit einem Argument verwenden, wenn in einem Lied Zeilen vorkommen, die fast gleich, aber jedes mal etwas unterschiedlich sind.
                    Ein Beispiel daf√ºr ist das Lied 'Yankee Doodle'. Die ersten 4 Noten in der ersten Zeile sind gleich, aber danach kommen jedes Mal andere Noten.

                    ### √úbung
                    Kannst du 'Yankee Doodle' vervollst√§ndigen?
                    F√§llt dir ein anderes Lied ein, das du so programmieren kannst?
            14:
                story_text: |
                    Du kannst Musik zum Spass programmieren, aber du kannst die Noten auch verwenden, um etwas n√ºtzliches wie einen Feueralarm zu machen!

                    ### √úbung
                    Stelle sicher, dass der Feueralarm ert√∂nt, wenn es brennt!
                example_code: |
                    ```
                    {define} feueralarm
                        {print} 'FEUER!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    feuer = {ask} 'Brennt es?'
                    {if} feuer _ 'ja'
                        {call} feueralarm
                    ```
            15:
                story_text: |
                    **Achtung** Dieses Abenteuer kann mega nervig werden!
                    Wir k√∂nnen auch den {while} Befehl verwenden, um das Lied ewig zu wiederholen.

                    ### √úbung
                    Vervollst√§nige das Lied-das-niemals-endet.
                example_code: |
                    ```
                    {define} lied
                        {play} _

                    ja_oder_nein = {ask} 'Willst du mein Lied-das-niemals-endet h√∂ren?'
                    {while} ja_oder_nein = 'ja'
                        {call} song
                        {print} 'ü•≥'
                    ```
            16:
                story_text: |
                    Verbessere dein 'Old MacDonald' Programm!

                    ### √úbung
                    Nimm das Programm aus Deinem 'Singe eine Lied' Abenteuer und f√ºge Musiknoten hinzu!
                    Da kannst eine Funktion f√ºr jede Zeile des Lieds erstellen und die Funktion aufrufen, nachdem die Zeile gedruckt wurde.
                    Wir haben die erste Zeile f√ºr dich definiert und den Aufruf im Programm eingef√ºgt. Kannst du das ganze Lied vervollst√§ndigen?
                example_code: |
                    ```
                    {define} zeal_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    tiere = ['Schwein', 'Hund', 'Kuh']
                    laute = ['quieck', 'wau', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        tier = tiere[i]
                        laut = laute[i]
                        {print} 'Old MacDonald had a farm'
                        {call} zeile_1
                        {print} 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    Kannt kannst {elif} verwenden, um verschiedene M√∂glichkeiten zu erzeugen.

                    ### √úbung
                    Zuerst erg√§nze die Doppelpunkte, so dass das Programm funktioniert.
                    Dann vervollst√§ndige das Programm, indem du mindestens zwei weitere Lieder f√ºr andere Stimmungen erg√§nzt. Zum Beispiel ein Gl√ºcklich-Lied und ein √Ñrger-Lied.
                example_code: |
                    ```
                    {define} grusel_lied
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    stimmung = {ask} 'Was f√ºhlst du?'
                    {if} stimmung {is} 'furcht'
                        {call} grusel_lied
                    {elif} _
                    ```
            18:
                story_text: |
                    ### √úbung
                    Sogar in diesem letzten Level von Hedy k√∂nnen wir Musik machen.
                    Schau dir gut an, wie die Funktionen definiert sind und wie die Aufrufe im Beispiel statt finden.
                    Vervollst√§ndige das Lied!
                example_code: |
                    ```
                    {def} zeile_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} zeile_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} zeile_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papagei
        default_save_name: Papagei
        description: Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!
        levels:
            1:
                story_text: |
                    Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!
                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei!
                    {ask} Wie lautet Dein Name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    Bringe den Papagei dazu, eine andere Frage zu stellen? F√ºlle die L√ºcken im Beispiel aus!
                    **Extra** Du kannst den Papagei auch mehrere Fragen stellen lassen. Tippe noch ein paar Zeilen Code unter deinen eigenen Code.
                example_code_2: |
                    ```
                    {print} Ich bin Hedy der Papagei
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Lass Deinen zahmen Papageien noch etwas echter klingen!
                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei.
                    Name _ _ Wie lautet Dein Name?
                    {print} Name
                    _
                    {print} Aaaaaak
                    _
                    {print} Name
                    ```
                story_text_2: |
                    ### √úbung
                    Du kannst Variablen verwenden, damit der Papagei mehr als nur deinen Namen sagt. Kannst du diesen Code vervollst√§ndigen?
            3:
                story_text: |
                    Bringe Deinem Papageien mit dem Befehl `{add}` neue W√∂rter bei.
                    ### √úbung
                    Kannst du den `{add} {to}` Befehl hinzuf√ºgen, so dass der Code funktioniert?
                example_code: |
                    ```
                    W√∂rter {is} Aaaaaaak, Hedy
                    {print} Bring deinem Papagei etwas bei!
                    neues_Wort {is} {ask} Welches Wort willst du ihm beibringen?
                    _ neues_Wort _ W√∂rter
                    {print} üßí Sag neues_Wort, Hedy!
                    {print} ü¶ú W√∂rter {at} {random}
                    ```
            4:
                story_text: |
                    In diesem Level m√ºssen wir Anf√ºhrungszeichen bei den Befehlen `{ask}` und `{print}` benutzen.
                    ### √úbung
                    Vervollst√§ndige den Code, indem du Anf√ºhrungszeichen in die L√ºcken f√ºllst.
                example_code: |
                    ```
                    w√∂rter {is} kr√§chz, Hedy
                    {print} _ Trainiere deinen Papagei! _
                    neues_wort {is} {ask} _ Welches Wort m√∂chtest du ihm beibringen? _
                    {add} neues_wort {to_list} w√∂rter
                    {print} _ üßí Sage _ neues_wort _, Hedy!_
                    {print} _ ü¶ú _ w√∂rter {at} {random}
                    ```
            5:
                story_text: |
                    Belohne deinen Papagei, wenn er das richtige Wort sagt!

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die 4 fehlenden Befehle erg√§nzt.
                example_code: |
                    ```
                    W√∂rter {is} Aaaaaaak, Hedy
                    {print} 'Bring deinem Papagei etwas bei!'
                    neues_Wort {is} {ask} 'Welches Wort willst du ihm beibringen?'
                    {add} neues_Wort {to_list} W√∂rter
                    gesagtes_Wort {is} W√∂rter {at} {random}
                    {print} 'üßí Sag ' neues_Wort ', Hedy!'
                    {print} 'ü¶ú ' gesagtes_Wort
                    _ gesagtes_Wort {is} neues_Wort _ 'üßí Gut gemacht, Hedy! üç™'
                    _ _ 'üßí Nein, Hedy! Sag ' neues_Wort
                    ```
    piggybank:
        name: Sparschwein
        default_save_name: Sparschwein
        description: Z√§hle dein Taschengeld!
        levels:
            12:
                story_text: |
                    In diesem Abenteuer lernst du, wie man ein digitales Sparschwein herstellt.

                    ### √úbung
                    Beende den Code, um zu berechnen, wie viel Geld du hast und wie lange du sparen musst, um dir zu kaufen, was du willst!
                    **Extra** Vielleicht hast du schon etwas Geld gespart? Ziehe das von dem Betrag ab, den du noch sparen musst.
                example_code: |
                    ```
                    {print} 'Das digitale Sparschwein'
                    Wunsch = {ask} 'Was w√ºrdest du dir gerne kaufen?'
                    Preis = {ask} 'Wieviel kostet das?'
                    Gespartes = {ask} 'Wieviel Geld hast du schon gespart?'
                    Taschengeld = {ask} 'Wieviel Taschengeld bekommst du pro Woche?'
                    zu_sparen = Preis - Gespartes
                    Wochen = zu_sparen / Taschengeld
                    {print} 'Du kannst dir ein ' _ ' in ' _ ' Wochen kaufen.'
                    ```
            14:
                story_text: |
                    ### √úbung
                    In diesem Level kannst du dir von Hedy sagen lassen, ob du genug Geld gespart hast.
                    Vervollst√§ndige den Code, in dem du die Leerstellen f√ºllst.
                example_code: |
                    ```
                    _ berechne_budget {with} wunsch, erspartes, taschengeld
                        zu_sparen = wunsch - erspartes
                        wochen = zu_sparen / taschengeld
                        {if} wunsch _ erspartes
                            {print} 'Du musst noch weiter sparen!'
                            {print} 'Du brauchst noch ' wochen ' weitere Wochen.'
                        {else}
                            {print} 'Gro√üartige! Du hast genug'
                            {print} 'Kommt, wir gehen einkaufen!'

                    erspartes = {ask} 'Wie viel Geld hast du gespart?'
                    wunsch = {ask} 'Wie viel Geld brauchst du?'
                    taschengeld = {ask} 'Wie viel Taschengeld bekommst du jede Woche?'

                    {call} _
                    ```
    pressit:
        name: Tastengedr√ºcke
        default_save_name: Gedr√ºckt
        description: Versuche eine Taste an einen Befehl zu binden!
        levels:
            5:
                story_text: |
                    In diesem Level gibt es ein neues Schl√ºsselwort: `{pressed}`!
                    Mit `{pressed}` kannst du mit den Tasten auf deiner Tastatur steuern, welche Zeilen verwendet werden.

                    ### √úbung
                    Schau dir das Beispiel an und f√ºge eine weitere Zeile hinzu, die auf Tasten reagiert.
                example_code: |
                    ```
                    {print} 'M√∂chtest du ein gutes (g) oder ein b√∂ses (b) Ende?'
                    {if} g {is} {pressed} {print} 'Sie lebten gl√ºcklich bis ans Ende ihrer Tage ‚ù§'
                    {else} {print} 'Der Prinz wurde von einem Nilpferd gefressen üò≠'
                    ```
                story_text_2: |
                    Sie k√∂nnen jeden Code mit einem Schl√ºssel verkn√ºpfen, einschlie√ülich der Zeichenschildkr√∂te.

                    ### √úbung
                    Kopieren Sie die Codezeilen, damit Sie eine gr√∂√üere Zeichnung erstellen k√∂nnen.
                example_code_2: |
                    ```
                    {if} x {is} {pressed} {forward} 50
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Nun da du `{repeat}` kennengelernt hast, k√∂nnen wir Tasten mehrfach dr√ºcken!
                    Du kannst dazu nutzen, die Schildkr√∂te vorw√§rts gehen und sich drehen zu lassen.

                    ### √úbung
                    Der Code, den du in Level 5 gesehen hast, pr√ºft die Taste nur einmal. Kopiere den Beispielcode und f√ºge ein `{repeat}` hinzu, so dass du die Tasten mehrmals dr√ºcken kannst.
                    Benutze diesen Code, um etwas Sch√∂nes zu zeichnen.
            9:
                story_text: "Da du jetzt wei√üt wie man Befehle kombiniert, kannst du mit Hilfe von `{pressed}` ein Touch-Type-Tool erstellen. \n\n### √úbung\nVervollst√§ndige den Code. Jedes Mal soll ein zuf√§lliger Buchstabe ausgew√§hlt werden. Diesen muss man dr√ºcken. Du bekommst einen Punkt f√ºr die richtige Taste und zwei Punkte Abzug f√ºr die falsche Taste.\n**Extra** L√∂sche den Bildschirm nach jedem Buchstaben und zeige dem Benutzer, wie viele Punkte er erreicht hat.\n"
                example_code: "```\nPunkte = 0\nBuchstaben = a, b, c, d, e\n{repeat} 10 {times}\n    Buchstabe = _ _ _ \n    {print} 'Dr√ºck den Buchstaben ' Buchstabe\n    {if} Buchstabe {is} {pressed}\n    _\n    _\n    _\n```\n"
    print_command:
        levels:
            1:
                story_text: |
                    ## Der Drucken Befehl
                    Mit Hilfe des `{print}` Befehls kannst du den Text auf dem Bildschirm anzeigen.
                example_code: |
                    ```
                    {print} Hallo, Programmierer!
                    {print} Willkommen bei Hedy!
                    ```
                story_text_2: |
                    ### √úbung
                    In Hedy findest du √úbungen in jedem Abenteuer. Eine √úbung erlaubt dir, neue Befehle und Konzepte zu √ºben und Beispielprogrammen deinen eigenen Schwung zu geben.
                    In dieser √úbung wirst du eine pinke leere Fl√§che sehen. Du musst die leere Fl√§che mit etwas bef√ºllen, bevor du das Programm ausf√ºhren kannst.

                    F√ºge den `{print}`  Befehl in die leere Fl√§che ein und dann noch f√ºnf weitere Codezeilen. Jede Zeile muss mit dem `{print}` Befehl beginnen.
                    Viel Spa√ü!
                example_code_2: |
                    ```
                    _ Hallo!
                    ```
            18:
                example_code_2: |
                    ```
                    temperatur = 25
                    {print}('Drau√üen sind ', temperatur, ' Grad')
                    ```
                    ```
                    name = 'Hedy'
                    {print}('Mein Name ist ', name)
                    ```
        name: '{print}'
        description: Einf√ºhrung des {print} Befehls
        default_save_name: drucke
    quizmaster:
        name: Quizmeister
        default_save_name: Quizmeister
        description: Mache dein eigenes Quiz!
        levels:
            14:
                story_text: |
                    ### √úbung
                    In diesem Abenteuer kannst du dein eigenes Quiz machen! F√ºll alle L√ºcken aus, f√ºge mehr Fragen hinzu und hab Spa√ü bei deinem eigenen Quiz!
                    Du kannst das Quiz machen √ºber was du m√∂chtest: dein Hobby, dein Lieblingstier, dein Lieblingsbuch, eigentlich √ºber alles!
                example_code: |
                    ```
                    {print} 'Erstelle dein eigenes Quiz'
                    punkte_a = 0
                    punkte_b = 0
                    {print} 'Frage'
                    {print} 'Antwortm√∂glichkeit A'
                    {print} 'Antwortm√∂glichkeit B'
                    antwort = {ask} 'Welche Antwort?'
                    {if} antwort == 'A'
                        punkte_a = punkte_a + 1
                    {if} antwort == 'B'
                        punkte_b = punkte_b + 1
                    {print} 'Ende des Quiz!'
                    {print} 'Lasst und die Ergebnisse ansehen!'
                    {if} punkte_a > punkte_b
                        {print} 'Du geh√∂rst zum A-Club'
                    {if} punkte_b > punkte_a
                        {print} 'Du geh√∂rst zum B-Club'
                    ```
    quotation_marks:
        name: '''Anf√ºhrungszeichen'''
        levels:
            4:
                story_text: |
                    ## 'Anf√ºhrungszeichen'
                    In Level 4 haben sich `{ask}` und `{print}` ver√§ndert.
                    Du musst Text, den du drucken m√∂chtest, zwischen einfache Anf√ºhrungszeichen schreiben.
                    Das ist n√ºtzlich, weil du jetzt alle W√∂rter drucken kannst, die du m√∂chtest. Auch die W√∂rter, die du benutzt hast, um etwas mit `{is}` zu speichern.
                    Die meisten Programmiersprachen verwenden Anf√ºhrungszeichen, wenn sie etwas drucken, wir kommen also einen Schritt weiter zum echten Programmieren!
                example_code: |
                    ```
                    {print} 'Du musst ab jetzt Anf√ºhrungszeichen verwenden'
                    antwort {is} {ask} 'Was m√ºssen wir ab jetzt benutzen?'
                    {print} 'Wir m√ºssen ' antwort ' benutzen'
                    ```
                story_text_2: "## Verk√ºrzungen im Englischen\nWichtig! Da wir jetzt Anf√ºhrungszeichen verwenden, wird Hedy verwirrt, wenn du bei englischen Texten das Apostroph f√ºr Verk√ºrzungen wie I'm oder What's verwendest.\nEntferne diese Apostrophe und √§ndere die Schreibweise in I am oder What is sein.\nSchaue dir den Beispielcode an, um die falsche Verwendung von Apostrophen zu lernen.\n"
            12:
                story_text: |
                    **Alle Texte m√ºssen in Anf√ºhrungszeichen stehen**
                    Ab diesem Level musst du auch Anf√ºhrungszeichen verwenden, um Text mit `=` zu speichern:
                example_code: |
                    ```
                    name = 'Hedy der Roboter'
                    {print} 'Hallo ' name
                    ```
                story_text_2: |
                    **Alle Helden in dieser Liste m√ºssen auch in Anf√ºhrungszeichen stehen**
                    In Listen m√ºssen Texte auch in Anf√ºhrungszeichen stehen. Beachte, dass jeder einzelne Held in der Liste Anf√ºhrungszeichen hat. 
                    Damit kann der Name auch aus zwei W√∂rtern bestehen, wie zum Beispiel 'Silver Surfer'.
                example_code_2: |
                    ```
                    superhelden = 'Spiderman', 'Batman', 'Siver Surfer'
                    {print} superhelden {at} {random}
                    ```
                story_text_3: |
                    **Alle Texte nach `{if}` Vergleichen brauchen auch Anf√ºhrungszeichen**
                example_code_3: |
                    ```
                    name = {ask} 'Wie hei√üt du?'
                    {if} name = 'Hedy der Roboter'
                        {print} 'Hallo!!'
                    ```
                story_text_4: |
                    **Zahlen brauchen keine Anf√ºhrungszeichen**
                    F√ºr Zahlen benutzen wir keine Anf√ºhrungszeichen bei `=`:
                example_code_4: |
                    ```
                    punkte = 25
                    {print} 'Du hast ' punkte
                    ```
        description: Einf√ºhrung der Anf√ºhrungszeichen
        default_save_name: Anf√ºhrungszeichen
    random_command:
        default_save_name: zuf√§llig_Befehl
        description: Einf√ºhrung des {random} Befehls
        levels:
            3:
                story_text: |
                    ## An zuf√§llig
                    In diesem Level kannst du eine Liste mit dem `{is}` Befehl erstellen. Du kannst den Computer einen zuf√§lligen Eintrag aus dieser Liste ausw√§hlen lassen. Das machst du mit `{at} {random}`.
                example_code: |
                    ```
                    tiere {is} Hunde, Katzen, K√§ngurus
                    {print} tiere {at} {random}
                    ```
                story_text_2: |
                    Du kannst den `{at} {random}` Befehl auch innerhalb eines Satzes verwenden.
                example_code_2: |
                    ```
                    essen {is} Brot, Pizza, Salat, Burrito
                    {print} Ich werde essen {at} {random} zum Mittag haben.
                    ```
                story_text_3: |
                    ### √úbung
                    Probiere den `{at} {random}` Befehl aus und erschaffe deine eigene Spielesendung (wie die im Fernsehen), wo du eine T√ºr oder einen Koffer ausw√§hlst und sich dort ein grosser Preis versteckt!
                    Schaffst du das? Wir haben schon mal die ersten Zeilen in den Beispielcode eingef√ºgt.
                example_code_3: |
                    ```
                    {print} Die gro√üe Spielshow!
                    {print} Vor die stehen drei Koffer ...
                    auswahl {is} {ask} Welchen Koffer w√§hlst du?
                    preis {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    freunde = ['Ahmed', 'Ben', 'Clemens']
                    {print} freunde[1] ' ist der erste Freund auf der Liste.'
                    {print} freunde[2] ' ist der zweite Freund auf der Liste.'
                    {print} freunde[3] ' ist der dritte Freund auf der Liste.'
                    #Jetzt paaren wir die Elemente aus beiden Listen indem wir die variable i verwenden.
                    gl√ºckszahl = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} freunde[i] 's Gl√ºckszahl ist  ' gl√ºckszahl[i]
                    ```
        name: '{random}'
    repeat_command:
        default_save_name: wiederhole_Befehl
        description: '{repeat} Befehl'
        levels:
            7:
                story_text: |
                    ## Wiederhole!Wiederhole!Wiederhole!
                    In Level 7 kommt der `{repeat}`Befehl. `{repeat}` kann benutzt werden, um eine Zeile Code mehrmals auszuf√ºhren. So:

                    ### √úbung
                    Spiele mit dem `{repeat}` Befehl. Kannst du Happy Birthday mit 3 Zeilen anstellen von 4 machen?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy macht Spa√ü!'
                    ```
            8:
                story_text: |
                    ### Wiederhole Befehle und Einr√ºckung
                    In diesem Level kannst du mehrere Zeilen Code wiederholte ausf√ºhren mit nur einem wiederhole Befehl.
                    Das kannst du machen, indem du einen Block mit den Zeilen machst, die du wiederholen willst.
                    Die Zeilen des Blocks brauchen **Einr√ºckung**
                    Das bedeutet, dass du 4 Leerzeichen an den Anfang jeder Zeile setzt. Du musst auch einr√ºcken, wenn du einen Block mit nur einer Zeile erzeugen willst.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo zusammen'
                        {print} 'Alles wird 5 mal wiederholt'
                    ```
            9:
                story_text: |
                    Toll gemacht! Du hast einen weiteren neuen Level erreicht! Im vorherigen Level hast du gelernt, mehrere Zeile Code in einem `{if}` oder `{repeat}` Befehl zu benutzen.
                    Aber du kannst noch nicht beide kombinieren...

                    Gute Nachrichten! In diesem Level darfst du ein `{if}`in einem `{if}`, `{repeat}`in einem `{repeat}`und jeweils ineinander zu verwenden.
                    Versuch es!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        bestellung = {ask} 'Was m√∂chtest du bestellen?'
                        {if} bestellung {is} pizza
                            {print} 'Lecker!'
                        {else}
                            {print} 'Pizza ist besser!'
                    ```
        name: '{repeat}'
    repeat_command_2:
        default_save_name: wiederhole_Befehl_2
        description: '{repeat} Befehl 2'
        levels:
            7:
                story_text: |
                    ## Wiederhole mit anderen Befehlen und mit Variablen
                    Das hast den `{repeat}`Befehl zusammen mit dem `{print}` Befehl gebaut. Aber wusstest du, dass du auch andere Befehle mit `{repeat}`verwenden kannst?
                    In diesem Beispielprogramm siehst du, dass `{repeat}` auch zusammen mit `{ask}`, `{if}` oder `{else}` verwendet werden kann.
                example_code: |
                    ```
                    {repeat} 2 {times} antwort = {ask} 'Wusstest du, dass du eine Frage mehrfach stellen kannst?'
                    {if} antwort {is} ja {repeat} 2 {times} {print} 'Das wusstest du schon!'
                    {else} {repeat} 3 {times} {print} 'Du hast was Neues gelernt!'
                    ```
                story_text_2: |
                    Etwas anderes Interessantes, das du mit dem `{repeat}` Befehl machen kannst ist, Variablen zu verwenden um die Anzahl der Wiederholungen zu bestimmen. In dem Beispielprogramm kannst du sehen, dass wir die Person zuerst fragen, wie alt sie ist.
                    In Zeile 3 wird diese Frage dann 'alter' Male wiederholt. Dazu m√ºssen wir die Variable 'alter' mit dem `{repeat}` Befehl verwenden.
                example_code_2: |
                    ```
                    {print} 'Yuhu! Es ist dein Geburtstag!'
                    alter = {ask} 'Wie alt bist du geworden?'
                    {repeat} alter {times} {print} 'Hip Hip Hurra!'
                    ```
            8:
                story_text: |
                    ### Im Block oder nicht?
                    In diesem Level musst du sorgf√§ltig dar√ºber nachdenken, welche Code Zeilen in dem Block sein sollten und welche nicht.
                    Zum Beispiel: Wenn du das Lied *vom Muffin Mann* singen willst, sollte die Zeile mit dem 'den Muffin Mann' zwei mal wiederholt werden.
                    Das bedeutet, dass die letzte Zeile nicht mit einer Einr√ºckung beginnen sollte, weil sie nicht zum Block geh√∂rt.
                    Wenn du die letzte Zeile mit einer Einr√ºckung beginnst, wird das Lied falsch.

                    ### √úbung
                    Jede Zeile im Beispielprogram startet mit einem Leerzeichen. L√∂sche die Leerzeichen und versuche herauszufinden, welche Zeilen einr√ºckt werden m√ºssen und welche nicht, um das Lied vom Muffin Mann zu schreiben.
                example_code: |
                    ```
                    _ {print} 'Kennst du denn den Muffin Mann?'
                    _ {repeat} 2 {times}
                    _ {print} 'Den Muffin Mann'
                    _ {print} 'Kennst du den Muffin Mann, der wohnt in Dury Lane.'
                    ```
        name: '{repeat} 2'
    restaurant:
        description: Erstelle dein eigenes virtuelles Restaurant
        levels:
            1:
                story_text: |
                    Im ersten Level kannst du dein eigenes virtuelles Restaurant erstellen, und die Bestellungen deiner G√§ste aufnehmen.
                story_text_2: |
                    ### √úbung
                    Kopiere den Beispiel-Code in den Eingabebereich, indem du den gelben Knopf dr√ºckst.
                    F√ºlle zuerst die L√ºcken mit den richtigen Befehlen, um den Code zum Laufen zu bringen.
                    F√ºge dann mindestens 4 zus√§tzliche Zeilen zum Restaurant-Programm hinzu.
                    Frage die G√§ste, was sie trinken m√∂chten und frage, ob sie in bar oder mit Karte zahlen m√∂chten.
                    Denke die zum Schluss eine nette Verabschiedung f√ºr deine G√§ste aus.
                example_code_2: |
                    ```
                    {print} Willkommen in Hedys Restaurant üçü
                    _ Was w√ºrden Sie gerne bestellen?
                    {echo} Sie h√§tten also gerne
                    {print} Danke f√ºr Ihre Bestellung!
                    {print} Kommt sofort!
                    ```
            2:
                story_text: |
                    In Level 2 konntest du dein Restaurant mit Variablen erweitern. In Level 1 konnte Hedy nur die Bestellung einmal wiedergeben (mit `{echo}`) und sich nur das merken, was zuletzt bestellt wurde.
                    Jetzt kannst du Variablen verwenden und Hedy kann sich sowohl das Essen als auch den Belag merken!
                example_code: |
                    ```
                    {print} Willkommen in Hedys Restaurant!
                    {print} Heute gibt es Pizza oder Lasagne.
                    Essen {is} {ask} Was w√ºrden Sie gerne essen?
                    {print} Gute Wahl! Das ist mein Lieblingsessen!
                    Belag {is} {ask} H√§tten Sie die gerne mit Fleisch oder mit Gem√ºse?
                    {print} Das Essen mit Belag ist auf dem Weg!
                    ```
                story_text_2: |
                    ### √úbung
                    Kopiere deinen eigenen Restaurant-Code aus dem vorigen Level in den unteren Eingabebereich.
                    Repariere den Code, indem du die {ask} und {echo} Befehle ersetzt und Variablen benutzt, wie du in diesem Level gelernt hast.

                    Nun da dein Code wieder l√§uft, ist es Zeit etwas Weiteres hinzu zu f√ºgen.
                    Schau dir die letzte Zeile des Beispiel-Codes an: `{print} essen mit belag ist auf dem Weg!`
                    In dieser einzelnen Zeile wurden 2 Variablen benutzt, um die Bestellung zusammen zu fassen.
                    F√ºge nun deine eigene Zusammenfassung der Essen- und Getr√§nkebestellung deiner G√§ste hinzu.

                    **Extra** Nun da du gelernt hast Variablen zu benutzen, kannst du so viele Variablen in einer Zeile nutzen wie du magst. Kannst du mehr Variablen zu deinem Code hinzuf√ºgen, wie hier essen oder zum Mitnehmen, bar oder Karte, mit oder ohne Strohhalm usw.?
            3:
                story_text: |
                    F√§llt es dir schwer zu entscheiden, was du gerne zum Abendessen h√§ttest? Du kannst das Hedy machen lassen!
                    F√ºge einfach Listen deiner Lieblingsgerichte (oder der von dir nicht so gemochten Gerichte) hinzu und Hedy kann zuf√§llig f√ºr dich ein Abendessen ausw√§hlen.
                    Du kannst dir auch einen Spa√ü draus machen, indem du Hedy den Preis f√ºr dein Abendessen ausw√§hlen l√§sst! Was wird wohl rauskommen?
                example_code: |
                    ```
                    gerichte {is} Spaghetti, Rosenkohl, Hamburger
                    {print} Du bekommst gerichte {at} {random} heute abend!
                    preise {is} 1 Euro, 10 Euro, 100 Euro
                    {print} Das macht preise {at} {random} bitte.
                    ```
                story_text_2: |
                    ### √úbung
                    Erstelle nun deine eigene Version des Zufallsrestaurants.
                    Erstelle selbst eine Liste aller Vorspeisen, Hauptgerichte, Nachtische, Getr√§nke und Preise.
                    Nutze dann `{print}` und `{at} {random}` Befehle, um dem Kunden zu sagen, was heute auf seinem Men√º steht.
                example_code_2: |
                    ```
                    {print} Willkommen in deinem eigenen Zufallsrestaurant!
                    vorspeisen {is} _
                    hauptgerichte {is} _
                    nachspeisen {is} _
                    getr√§nke {is} _
                    preise {is} _
                    _
                    ```
            4:
                story_text: |
                    In der Restaurant-√úbung musst du auch Anf√ºhrungszeichen benutzen, wenn du die `{print}` oder `{ask}` Befehle verwendest.

                    ### √úbung 1
                    F√ºge die Anf√ºhrungszeichen zum Code hinzu, um ihn zum Laufen zu bringen! Sei vorsichtig: Variablen sollten nicht in Anf√ºhrungszeichen stehen.

                    ### √úbung 2
                    Gehe zum vorigen Level zur√ºck und kopiere deinen Restaurant-Code. Bringe diesen Code in diesem Level zum Laufen, indem du Anf√ºhrungszeichen an den richtigen Stellen hinzuf√ºgst.
                example_code: |
                    ```
                    _ F√ºge Anf√ºhrungszeichen in diesen Code ein _
                    {print} Willkommen im Restaurant Chez Hedy!
                    {print} Heute gibt es Pizza oder Lasagne.
                    Essen {is} {ask} Was w√ºrden Sie gerne essen?
                    {print} Gute Wahl! Die  Essen  ist mein Favorit!
                    Belag {is} {ask} H√§tten Sie gerne Fleisch oder Gem√ºse als Belag?
                    {print} Essen  mit  Belag  ist auf dem Weg!
                    Getr√§nke {is} {ask} Was w√ºrden Sie gerne dazu trinken?
                    {print} Danke f√ºr Ihre Bestellung.
                    {print} Ihre  Essen  und  Getr√§nke  kommen sofort!
                    ```
            5:
                story_text: |
                    In diesem Level erlaubt dir der `{if}`-Befehl deinen Kundinnen oder Kunden Fragen zu stellen (`{ask}`) und verschiedene Antworten zu geben.
                    In dem unteren Beispiel siehst du, dass du die Kundin oder den Kunden fragen (`{ask}`) kannst, ob (`{if}`) sie oder er die Tagesgerichte erfahren m√∂chte, und Hedy kann dementsprechend antworten.
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    Tagesgericht {is} {ask} 'W√ºrden Sie gerne das heutige Tagesgericht erfahren?'
                    {if} Tagesgericht {is} ja {print} 'Das Tagesgericht ist Nudeln mit Tomatenso√üe.' {else} {print} 'Ok, kein Problem.'
                    Essen {is} {ask} 'Was w√ºrden Sie gerne essen?'
                    {print} 'Einmal ' Essen ', kommt sofort!'
                    Getr√§nk {is} {ask} 'Was w√ºrden Sie gerne dazu trinken?'
                    {if} Getr√§nk {is} Cola {print} 'Tut mir leid, die Cola ist aus!' {else} {print} 'Gro√üartige Wahl!'
                    etwas {is} {ask} 'H√§tten Sie gerne noch etwas?'
                    {print} 'Lassen Sie mich Ihre Bestellung noch einmal wiederholen...'
                    {print} 'Einmal ' Essen
                    {if} Getr√§nk {is} Cola {print} 'und...' {else} {print} 'Einmal ' Getr√§nk
                    {if} etwas {is} nein {print} 'Das ist alles!' {else} {print} 'Einmal ' etwas
                    {print} 'Danke f√ºr Ihre Bestellung und guten Appetit!'
                    ```
            6:
                story_text: |
                    In diesem Level kannst du Mathe verwenden um den Gesamtpreis einer Bestellung auszurechnen. Das macht dein virtuelles Restaurant realistischer.
                    Aber du kannst deinem virtuellen Restaurant noch viele weitere Dinge hinzuf√ºgen, zum Beispiel mehr Gerichte.

                    ### √úbung
                    Du kann viele weitere Dinge zu deinem virtuellen Restaurant erg√§nzen. Zum Beispiel kannst du...
                    - frage, wie viele Personen kommen und den Preis mit der Anzahl multiplizieren?
                    - ein weiteres Gericht hinzuf√ºgen?
                    - G√§sten einen Rabatt geben, wenn sie einen (geheimen) Couponcode eingeben?
                    - ein Kinderessen hinzuf√ºgen?
                    - dir noch weitere lustige Dinge ausdenken und erg√§nzen?
                example_code: |
                    Du kannst einen einfachen Restaurant Code erstellen. Das geht so:
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    {print} 'Hier ist unsere Karte:'
                    {print} 'Unsere Hauptgerichte sind Pizza, Lasagne oder Spaghetti'
                    haupt = {ask} 'Welches Hauptgericht m√∂chten Sie?'
                    preis = 0
                    {if} haupt {is} Pizza preis = 10
                    {if} haupt {is} Lasagne preis = 12
                    {if} haupt {is} Spaghetti preis = 8
                    {print} 'Sie bestellten ' haupt
                    {print} 'Das kostet ' preis ' Euro, bitte'
                    {print} 'Danke, genie√üen Sie Ihre Mahlzeit!'
                    ```
            7:
                story_text: |
                    In diesem Level hast du gelernt, wie du den Befehl `{repeat}` verwenden kannst, um eine Codezeile um eine bestimmte Anzahl zu wiederholen.
                    Du kannst das in deinem Restaurant verwenden um mehrere Leute nach ihren Essensw√ºnschen zu fragen (`{ask}`).

                    ### √úbung
                    Kannst du die L√ºcken f√ºllen? Hedy muss diese Frage so oft wiederholen wie Leute da sind. Wenn also 5 Leute da sind, muss die Frage 5 mal gestellt werden.
                    **Extra** Erweitere deinen Code mit mehr Fragen, zum Beispiel zu Getr√§nken oder So√üen.
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    G√§ste = {ask} 'Wie viele Leute kommen heute zu uns?'
                    ```
            8:
                story_text: |
                    In diesem Level kannst du dein virtuelles Restaurant ausbauen, indem du mehrere Zeilen Code wiederholst. Das geht so:

                    ### √úbung
                    Dieser Code kann mit mehr Gerichten auf der Karte erweitert werden, zum Beispiel einem Getr√§nkeangebot, und/oder mehreren G√§ngen oder Nachtisch. F√ºge mindestens ein Gericht hinzu.
                    **(extra)** F√ºge so viele Gerichte hinzu wie du magst!
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    G√§ste = {ask} 'Zu wie vielen kommen Sie heute zu uns?'
                    {print} 'Gro√üartig!'
                    {repeat} G√§ste {times}
                        Essen = {ask} 'Was w√ºrden Sie gerne bestellen?'
                        {print} Essen
                    {print} 'Danke f√ºr Ihre Bestellung!'
                    {print} 'Guten Appetit!'
                    ```
            9:
                story_text: "In diesem Level kannst du Verschachtelung benutzen, um dein Restaurant realistischer und spa√üiger zu machen!\n\n### √úbung\nDie Einr√ºckung im Beispiel-Code wurde entfernt.\nKannst du herausfinden wie viel Einr√ºckung jede Zeile ben√∂tigt, damit der Code ordentlich funktioniert?\nFalls der Kunde Pizza bestellt, sollte Hedy nicht fragen, welche So√üe der Kunde m√∂chte.\n\n**(extra)** Ein Restaurant lagert nicht alle m√∂glichen So√üen. Erstelle eine Liste mit verf√ºgbaren So√üen und gib eine Antwort bei jeder Bestellung, ob du sie auf Lager hast. <br>\n**(extra)** Pizzen haben Bel√§ge. Frag die Kunden, was sie m√∂chten.<br>\n **(extra)** M√∂chten die Kunden etwas trinken? Frag sie! <br>                    \n"
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    Leute = {ask} 'Wie viele Leute kommen heute?'
                    {print} 'Gro√üartig!'
                    Preis = 0
                    {repeat} Leute {times}
                    _ Essen = {ask} 'Was m√∂chten Sie bestellen?'
                    _ {print} Essen
                    _ {if} Essen {is} Fritten
                    _ Preis = Preis + 3
                    _ Sauce = {ask} 'Welche Sauce m√∂chten Sie f√ºr die Fritten?'
                    _ {if} Sauce {is} keine
                    _ {print} 'keine Sauce'
                    _ {else}
                    _ Preis = Preis + 1
                    _ {print} 'mit ' Sauce
                    _ {if} Essen {is} Pizza
                    _ Preis = Preis + 4
                    {print} 'Das macht ' Preis ' Euro'
                    {print} 'Genie√üen Sie Ihre Mahlzeit!'
                    ```
            10:
                story_text: |
                    In diesem Level wirst du lernen, wie du leicht nach Bestellungen f√ºr verschiedene G√§nge fragst.

                    ### √úbung 1
                    Vervollst√§ndige den Code mit einem `{ask}` in den L√ºcken, sodass der Kunde f√ºr jeden Gang gefragt wird, was er essen m√∂chte.
                example_code: "```\ng√§nge = Vorspeise, Hauptgericht, Nachtisch\n{for} gang {in} g√§nge\n    {print} 'Was ist Ihre Bestellung als ' gang '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### √úbung
                    Nat√ºrlich kannst auch f√ºr mehrere Personen bestellen!
                    Kannst du die richtige Anzahl an Leerzeichen zur Einr√ºckung vor jeder Zeile hinzuf√ºgen, damit der Code richtig l√§uft?
                    Tipp: manche Zeilen brauchen gar keine Einr√ºckung.
                example_code_2: |
                    ```
                    _ Kurse = Vorspeise, Hauptgericht, Nachtisch
                    _ Namen = Timon, Ono
                    _ {for} Name {in} Namen
                    _ {for} Kurs {in} Kurse
                    _ Essen = {ask} Name ', Was m√∂chten Sie als ' Kurs '?'
                    _ {print} Name ' bestellt ' Essen ' als ' Kurs
                    ```
            11:
                story_text: |
                    Wir k√∂nnen `{for}` mit `{range}` nutzen, um die Bestellungen mehrerer G√§ste ordentlich auszugeben.

                    ### √úbung
                    Beende den Restaurant-Code, sodass du nach den Bestellungen mehrerer G√§ste fragen kannst. Gib jedes Mal die Bestellnummer aus: 'Bestellung 1', 'Bestellung 2', usw.
                    Bist du dir nicht sicher, wie du das anstellen sollst? Schau dir deinen Level 8 Code an.

                    **Extra** In Level 9 benutzte das Restaurant auch Preise. Das kannst du hier ebenfalls hinzuf√ºgen!
                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Hedy!'
                    Leute = {ask} 'F√ºr wie viele Leute m√∂chten Sie bestellen?'
                    {print} 'Also m√∂chten Sie f√ºr ' Leute ' Leute bestellen.'
                    {print} "Los geht's!"
                    ```
            12:
                story_text: |
                    Ab diesem Level kannst du Dezimalzahlen verwenden, um deine Speisekarte realistischer zu machen.

                    ### √úbung
                    Kannst du dir Code ausdenken mit dem du deinen Freunden und deiner Familie 15% Rabatt geben kannst?
                example_code: |
                    ```
                    preis = 0.0
                    essen = {ask} 'Was m√∂chten Sie bestellen?'
                    trinken = {ask} 'Was m√∂chten Sie trinken?'
                    {if} essen {is} 'Hamburger'
                        preis = preis + 6.50
                    {if} essen {is} 'Pizza'
                        preis = preis + 5.75
                    {if} trinken {is} 'Wasser'
                        preis = preis + 1.20
                    {if} trinken {is} 'Sprudel'
                        preis = preis + 2.35
                    {print} 'Das macht ' preis ' Euro, bitte'
                    ```
            13:
                story_text: |
                    In diesem Level lernst du neue Befehle, mit denen du deinen Code noch weiter ausbauen kannst.

                    ### √úbung 1
                    Setze ein `{and}` und ein `{or}` an die logische Stelle im Programm.

                    ### √úbung 2
                    Erweitere dein Restaurant mit mindestens einem weiteren `{and}` und einem `{or}`.
                    Erstelle zum Beispiel einen speziellen Rabattcoupon, der nur f√ºr Pizza gilt, oder gib deinen Kunden ein kostenloses Getr√§nk
                    mit Pommes und Pfannkuchen. Oder nat√ºrlich etwas ganz anderes!
                example_code: |
                    ```
                    preis = 10
                    essen = {ask} 'Was willst du essen?'
                    getr√§nk = {ask} 'Was willst du trinken?'
                    {if} essen {is} 'sandwich' _ getr√§nk {is} 'saft'
                        {print} 'Das ist unser Rabattmen√º'
                        preis = preis - 3
                    {if} getr√§nk {is} 'Wasser' _ getr√§nk {is} 'Saft'
                        {print} 'Das ist eine gesunde Wahl'
                    {print} 'Das kostet dann ' preis '  Euro'
                    ```
            15:
                example_code: |
                    ```
                    {print} 'Willkommen bei McHedy'
                    mehr = 'ja'
                    _
                        Bestellung = {ask} 'Was w√ºrden Sie gerne bestellen?'
                        {print} Bestellung
                        mehr = {ask} 'W√ºrden Sie gerne noch etwas bestellen?'
                    {print} 'Dankesch√∂n!'
                    ```
                story_text: "Mit `{while}` kannst du sicherstellen, dass deine Kunden Bestellungen aufgeben bis sie fertig sind.\n\n### √úbung\nF√ºge den `{while}` Befehl dem Code hinzu.\n"
        default_save_name: Restaurant
        name: Restaurant
    rock:
        name: Schere, Stein, Papier
        default_save_name: Stein_2
        description: Mache dein eigenes Schere, Stein, Papier-Spiel
        levels:
            1:
                story_text: |
                    In Level 1 kannst du mit einem Schere, Stein, Papier-Spiel beginnen.

                    Mit `{ask}` kannst du eine Wahl treffen und mit `{echo}` kannst du diese Wahl wiederholen.
                example_code: |
                    ```
                    {print} Was w√§hlst du?
                    {ask} W√§hle aus Stein, Schere oder Papier
                    {echo} Also war deine Wahl:
                    ```
                story_text_2: |
                    ### √úbung
                    Anstelle von W√∂rtern kannst du auch Emoji benutzen ‚úä‚úã‚úå
                    Kannst du Code erstellen, der Emoji benutzt?
                example_code_2: |
                    ```
                    {print} Was w√§hlst du?
                    {ask} W√§hle aus _
                    {echo} Also war deine Wahl:
                    ```
            2:
                story_text: |
                    In diesem Level kannst du √ºben, Variablen zu benutzen, damit du im n√§chsten Level das Spiel Schere, Stein, Papier machen kannst!
                example_code: |-
                    ```
                    _ {is} {ask} Schere, Stein oder Papier?
                    {print} Ich w√§hle
                    ```
            3:
                story_text: |
                    Du kannst den `{at} {random}` Befehl verwenden, um den Computer Schere, Stein oder Papier w√§hlen zu lassen!

                    ### √úbung
                    Vervollst√§ndige den Code, in dem du den `{at} {random}` Befehl verwendest.
                example_code: |
                    ```
                    Auswahlm√∂glichkeiten {is} Schere, Stein, Papier
                    {print} Auswahlm√∂glichkeiten _
                    ```
                story_text_2: |
                    **Extra** Mache ein Spiel f√ºr 2 Spieler! Frage die Spieler nach ihrem Namen. Lass dann den Computer zuf√§llig die Wahl treffen.
                example_code_2: |
                    ```
                    wahlm√∂glichkeiten {is} Schere, Stein, Papier
                    {print} Spieler 1 w√§hlt... wahlm√∂glichkeiten {at} {random}
                    {print} Spieler 2 _
                    ```
            4:
                story_text: |
                    In diesem Level k√∂nnen wir Schere, Stein, Papier weiter programmieren. Aber wenn du Text hinzuf√ºgen m√∂chtest, musst du auch hier Anf√ºhrungszeichen verwenden.
                    ### √úbung
                    F√ºlle die L√ºcken in Anf√ºhrungszeichen aus. Beachte, dass die `choices` Variable au√üerhalb der Anf√ºhrungszeichen stehen sollte.
                example_code: |
                    ```
                    wahlm√∂glichkeiten {is} Schere, Stein, Papier
                    {print} _Der Computer w√§hlt..._ wahlm√∂glichkeiten {at} {random}
                    ```
            5:
                story_text: |
                    In diesem Level k√∂nnen wir bestimmen, ob es unentschieden ausging oder nicht. Daf√ºr brauchst du den neuen `{if}`-Befehl.

                    ### √úbung
                    Vervollst√§ndige den Code, indem du die L√ºcken f√ºllst.
                    * Lass den Computer eine zuf√§llige Wahl treffen
                    * Frage den Spieler, was er w√§hlt
                    * F√ºlle die korrekten Variablen in Zeile 4 und 5
                    * Programmiere Zeile 6 so, dass Hedy pr√ºfen kann, ob es unentschieden ausging oder nicht
                example_code: |
                    ```
                    wahlm√∂glichkeiten {is} Schere, Stein, Papier
                    computer_wahl {is} _
                    deine_wahl {is} _
                    {print} 'Du w√§hlst ' _
                    {print} 'Der Computer w√§hlte ' _
                    {if} _ {is} _ {print} 'Unentschieden!' {else} {print} 'kein Unentschieden'
                    ```

                    Ersetze die Unterstriche (_) mit dem richtigen Code, um zu sehen, ob das Spiel unentschieden ausgeht.
            9:
                story_text: |
                    In diesem Level kannst du das ganze Stein-Schere-Papier-Programm programmieren, indem du `{if}` Befehle verschachtelst.

                    ### √úbung
                    Kannst du den Code vervollst√§ndigen? Das Programm muss f√ºr jede Kombination sagen, wer gewonnen hat.

                    **Extra** M√∂chtest du mehr als eine Runde spielen? Erweitere den Code, sodass du mehrere Runden spielen kannst. Du kannst sogar ein `{ask}` verwenden, um die Nutzer zu fragen, wie viele Runden sie spielen m√∂chten.
                example_code: |
                    ```
                    Auswahl = Schere, Stein, Papier
                    deine_Wahl = {ask} 'Was w√§hlst du?'
                    {print} 'Du w√§hlst ' deine_Wahl
                    Computer_Wahl = Auswahl {at} {random}
                    {print} 'Der Computer w√§hlt ' Computer_Wahl
                    {if} Computer_Wahl {is} deine_Wahl
                        {print} 'Unentschieden'
                    {if} Computer_Wahl {is} 'Stein'
                        {if} deine_Wahl {is} 'Papier'
                            {print} 'Du gewinnst!'
                        {if} deine_Wahl {is} 'Schere'
                            {print} 'Du verlierst!'
                    # mach den Beispiel-Code fertig
                    ```
            10:
                story_text: |
                    ### √úbung
                    In den vorherigen Leveln hast du oft dein eigenes Schere-Stein-Papier Spiel gemacht. Kann du den Code vervollst√§ndigen, indem du den `{for}` Befehl so zu verwenden, dass das Spiel funktioniert?
                example_code: |
                    ```
                    Auswahl = Schere, Stein, Papier
                    Personen = _
                    {for} Spieler {in} Personen
                         {print} Spieler ' w√§hlt ' Auswahl {at} {random}
                    ```
            13:
                story_text: |
                    Mit dem Befehl `{and}` kannst du deinen Schere, Stein, Papier Code k√ºrzen! Sieh dir den Beispielcode an.

                    ### √úbung
                    Beende den Code so, dass immer ein Gewinner ermittelt wird. F√ºhre dein Code ein paar Mal aus, um zu √ºberpr√ºfen, ob immer ein Gewinner ausgegeben wird.
                example_code: |
                    ```
                    Optionen = 'Schere', 'Stein', 'Papier'
                    deine_auswahl = {ask} 'Was w√§hlst du?'
                    computer_auswahl = Optionen {at} {random}
                    {print} 'Du w√§hlst ' deine_auswahl
                    {print} 'Der Computer w√§hlt ' computer_auswahl
                    {if} computer_auswahl {is} deine_auswahl
                        {print} 'Unentschieden'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Papier'
                        {print} 'Du gewinnst!'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Schere'
                        {print} 'Der Computer gewinnt!'
                    _
                    ```
            15:
                story_text: |
                    ### √úbung
                    Spiele, bis du den Computer besiegst! Aber mach zuerst den Beispiel-Code fertig...
                example_code: |
                    ```
                    gewonnen = 'nein'
                    Auswahl = 'Schere', 'Stein', 'Papier'
                    {while} gewonnen == 'nein'
                        deine_Wahl = {ask} 'Was w√§hlst du?'
                        Computer_Wahl = Auswahl {at} {random}
                        {print} 'Du w√§hltest ' deine_Wahl
                        {print} 'Der Computer w√§hlte ' Computer_Wahl
                        {if} Computer_Wahl == deine_Wahl
                            {print} 'Unentschieden!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Schere'
                            {print} 'Du hast verloren!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Papier'
                            {print} 'Du hast gewonnen!'
                            gewonnen = 'ja'
                    _
                    ```
    rock_2:
        name: Schere, Stein, Papier 2
        default_save_name: Stein_2
        description: Teil 2 von Schere, Stein, Papier
        levels:
            2:
                story_text: |
                    Jetzt, da du gelernt hast, wie man den `{ask}` Befehl einsetzt, kannst du den Stein, Schere, Papier Code auch interaktiv machen!

                    ### √úbung
                    Mache den Stein, Schere, Papier Code interaktiv, in dem du den `{ask}` Befehl und eine Frage zu deinem Stein, Schere, Papier Code hinzuf√ºgst.
                example_code: |
                    ```
                    wahl {is} _
                    {print} Ich w√§hle wahl
                    ```
    secret:
        name: Superspion
        default_save_name: Superspion
        description: Schreibe deinen eigenen Spion-Code
        levels:
            12:
                story_text: |
                    In diesem Abenteuer kannst du deinen eigenen Superspion-Code erstellen. Verschl√ºssele eine Nachricht, die nur der richtige Agent entschl√ºsseln kann.
                    Wenn der Feind versucht, den Code zu knacken, wird er falsche Informationen erhalten, um seine Zeit zu verschwenden.

                    ### √úbung 1
                    Erstelle deinen eigenen Geheimcode f√ºr deinen Superspion und gib beide Teile nur an den echten Spion zur√ºck.

                    ### √úbung 2
                    F√ºge dem Code eine dritte Komponente hinzu, zum Beispiel ein Kleidungsst√ºck oder einen Gegenstand.
                example_code: |
                    ```
                    Name = {ask} 'Wie hei√üt du?'
                    {if} Name {is} _
                        a = 'Geh zum Flughafen '
                    {else}
                        a = 'Geh zum Bahnhof '
                    Passwort =  {ask} 'Wie lautet das Passwort?'
                    {if} Passwort {is} _
                        b = 'Morgen um 2 Uhr'
                    {else}
                        b = 'Heute um 10 Uhr'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Wir k√∂nnen den Superspy-Code mit `{and}` vereinfachen, so dass wir nur einen `{if}` ben√∂tigen.

                    ### √úbung 1
                    Vervollst√§ndige den Code, indem du den richtigen Befehl in das leere Feld eintr√§gst. Tipp: Der Superspion muss BEIDE Fragen richtig beantworten, bevor er die vertraulichen Informationen erh√§lt!

                    ### √úbung 2
                    Wir wollen den Gegner noch mehr verwirren! Erstelle eine Liste mit falschen Antworten und w√§hle eine zuf√§llig aus, wenn eine falsche Antwort gegeben wird.
                example_code: |
                    ```
                    Name = {ask} 'Wie hei√üt du?'
                    Passwort = {ask} 'Wie lautet dein Passwort?'
                    {if} Name {is} 'Agent007' _ Passwort {is} 'STRENGGEHEIM'
                        {print} 'Gehe um 2 Uhr zum Flughafen'
                    {else}
                        {print}  'Gehe um 10 Uhr zum Bahnhof'
                     ```
    simon:
        name: Simon sagt
        description: Erstelle das Spiel Simon sagt
        default_save_name: Simon
    simon_2:
        name: Simon sagt 2
        description: Erstelle das Spiel Simon sagt
        default_save_name: Simon
    simon_3:
        name: Simon sagt 3
        description: Erstelle das Spiel Simon sagt
        default_save_name: Simon
    sleep_command:
        default_save_name: schlafe_Befehl
        description: Einf√ºhrung des {sleep} Befehls
        levels:
            2:
                story_text: |
                    Ein weiterer neuer Befehl in diesem Level ist der `{sleep}` Befehl. Er pausiert dein Programm f√ºr eine Sekunde. Wenn du eine Zahl hinter den {sleep} Befehl schreibst, pausiert dein Programm f√ºr diese Anzahl an Sekunden.

                    ### √úbung
                    √úbe den neuen Befehl, in dem du dir eigenen Code ausdenkst, der mindestens 3 mal den Befehl {sleep} verwendet. Mit jeden {sleep} Befehl soll die Pause eine andere L√§nge haben..
                example_code: |
                    ```
                    {print} Meine Lieblingsfarbe ist...
                    {sleep} 2
                    {print} Gr√ºn!
                    ```
        name: '{sleep}'
    songs:
        name: Singe ein Lied!
        description: Drucke einen Songtext
        levels:
            6:
                story_text: |
                    In Liedern wiederholt sich oft einiges. Manchmal basiert die Wiederholung auch darauf, dass etwas gez√§hlt wird.
                    So zum Beispiel im Lied √ºber die Bierflaschen. Dies ist eigentlich ein englisches Lied und hat den Titel "99 bottles of beer". Dieses Lied kannst du mit ein klein wenig Mathematik programmieren.

                    Tipp: Nutze die Laut-Vorlesen-Funktion um Hedy das Lied f√ºr dich singen zu lassen.

                    ### √úbung
                    Du kannst nun die Zeilen 2 bis 7 so oft wie du m√∂chtest wiederholen, indem du sie kopierst.
                example_code: |
                    ```
                    Strophe = 99
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {sleep}
                    ```
                story_text_2: |
                    Dieses Kinderlied z√§hlt runter, von 5 kleinen Affen bis zu 1 Affe.
                    Wenn du die Zeilen 2 bis 7 kopierst und unter dem Code einf√ºgst, kannst du das ganze Lied singen!
                example_code_2: |
                    ```
                    nummer = 6
                    nummer = nummer - 1
                    {print} nummer ' kleine Affen springen auf dem Bett'
                    {print} 'Einer fiel runter und stie√ü sich den Kopf'
                    {print} 'Mama rief den Arzt und der Arzt sagte'
                    {print} 'KEINE KLEINEN AFFEN SPRINGEN MEHR AUF DEM BETT!'
                    {sleep}
                    ```
            7:
                story_text: "In Liedern wiederholt sich oft einiges. So auch im Lied \"Baby Hai\"! Wenn du es singst, singst du eigentlich immer das gleiche:\n\nBaby Hai tututudutudu <br>\nBaby Hai tututudutudu <br>\nBaby Hai tututudutudu <br>\nBaby Hai \n\n### √úbung\nKannst du das Lied mit Hilfe des `{repeat}` Befehls ausgeben? Vervollst√§ndige den Code, indem du die L√ºcken f√ºllst!\n **Extra** Nach dem Baby-Hai kannst du nat√ºrlich auch andere Lieder programmieren. Es gibt viele Lieder mit Wiederholung!\nKannst du an ein weiteres Lied denken und es ausgeben?\n"
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Hai tututudutudu'
                    {print} 'Baby Hai'
                    ```
            8:
                story_text: |
                    In einem vorigen Level hast du das Lied √ºber die Bierflaschen programmiert. Aber ohne den `{repeat}` Befehl musstest du die Strophen viele Male kopieren.
                    In diesem Level kannst du das Lied 99 mal wiederholen, indem du nur eine einfache Zeile hinzuf√ºgst!

                    ### √úbung
                    F√ºge den richtigen Befehl in die L√ºcken ein und r√ºcke den Code korrekt ein.
                example_code: |
                    ```
                    Strophe = 99
                    _ 99 {times}
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    ```
            10:
                story_text: |
                    Mit `{for}` kannst du den ganzen Babyhai-Song (inklusive aller anderen Haie in der Familie) in nur 6 Zeilen Code ausgeben.

                    ### √úbung 1
                    Kannst du den Babyhai-Code noch k√ºrzer machen, indem du `{for}` verwendest? Vervollst√§ndige den Beispiel-Code.
                example_code: "```\nfamilie = Baby, Mami, Papi, Omi, Opi\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### √úbung 2
                    Gib das Lied F√ºnf kleine Affen springen auf dem Bett aus. Schlag den Text nach, falls du dich nicht daran erinnerst.

                    **Extra** Gib das Lied Old MacDonald hat 'ne Farm aus und stelle sicher, dass alle Tiere ein unterschiedliches Ger√§usch machen, indem du `{if}` benutzt.
                example_code_2: |
                    ```
                    affen = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    In diesem Level nutzt du den Befehl `{for}` mit `{range}` f√ºr Lieder, in denen gez√§hlt wird, wie z.B. bei 'F√ºnf kleine Affen'.

                    ### √úbung 1
                    F√ºlle die L√ºcken und mach, dass der Code funktioniert. Falls du den Liedtext nicht kennst, schlage ihn selbst nach.

                    ### √úbung 2
                    Die letzte Zeile des Liedes unterscheidet sich von den anderen. Gib diese Zeile innerhalb eine `{for}` Befehls aus und nutze `{if}` um es korrekt zum Laufen zu bringen.
                example_code: |
                    ```
                    _ affen _ _ 5 _ 1
                        {print} affen ' kleine Affen springen auf dem Bett'
                        _
                    ```
            12:
                story_text: |
                    Jetzt machen wir es uns richtig einfach und programmieren 'Wenn du gl√ºcklich bist, dann klatsche in die Hand'. Alles, was wir tun m√∂chten, wenn wir gl√ºcklich sind, speichern wir in einer Variablen. Sieh es dir an:

                    ### √úbung
                    Kannst du die richtige Anzahl Leerzeichen zum Einr√ºcken hinzuf√ºgen, damit das Lied richtig spielt?
                    Hinweis: Nicht jede Zeile braucht Einr√ºckung.
                example_code: |
                    ```
                    Aktionen = 'klatsche in die Hand', 'stampfe mit dem Fu√ü', 'ruf Hurra'
                    _ {for} Aktion {in} Aktionen
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'Wenn Du gl√ºcklich bist'
                    _ {print} Aktion
                    _ {print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist.'
                    _ {print} 'Wenn Du gl√ºcklich bist'
                    _ {print} Aktion
                    ```
            13:
                story_text: |
                    Im letzten Abenteuer hast du gelernt, wie du ein Argument in einer Funktion verwenden kannst. Aber wusstest du, dass du die Argumente auch mit dem {ask} Befehl kombinieren kannst?
                    In diesem Beispiel haben wir das 'My Bonnie' Programm ver√§ndert und interaktiv gemacht. Jetzt kannst du fragen, wo Bonnie ist.
            16:
                story_text: |
                    In diesem Level kannst Du 'Old MacDonald hat ne Farm' sogar noch schneller programmieren. Du kannst jedem Tier das richtige Ger√§usch zuordnen, indem Du sie an die selbe Stelle einer Liste speicherst.
                    Vielleicht kennst Du ja auch schon das englischsprachige Lied 'The Drunken Sailor'. Hierf√ºr ben√∂tigst Du nur 8 Zeilen Code. Sieh es Dir an!
                example_code: |
                    ```
                    Tiere = ['Schweine', 'Hunde', 'K√ºhe']
                    Ger√§usche = ['grunz', 'wuff', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        Tier = _
                        Ger√§usch = _
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt es ' Tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' Ger√§usch Ger√§usch ' hier'
                        {print} 'und nem ' Ger√§usch Ger√§usch ' da'
                        {print} 'hier ein ' Ger√§usch
                        {print} 'dort ein ' Ger√§usch
                        {print} '√ºberall ein ' Ger√§usch Ger√§usch
                    ```

                    ```
                    Zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} Zeile {in} Zeilen
                        {for} i {in} {range} 1 {to} 3
                            {print} Zeile
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            18:
                story_text: |
                    In Level 16 haben wir Lieder mit Listen gemacht. Diese Programme funktionieren jedoch nicht mehr ganz in diesem Level. Die Doppelpunkte aus Level 17 und die Klammern aus Level 18 m√ºssen noch hinzugef√ºgt werden.

                    ### √úbung 1
                    Das Drunken sailor Lied ist im Beispiel-Code, aber es funktioniert noch nicht.
                    Kannst du sicherstellen, dass alles wieder funktioniert? Um dir zu helfen haben wir _ an die Stellen _einiger_ Fehler gesetzt.

                    ### √úbung 2
                    Schau auch deinen Old MacDonald Song aus Level 16 nach und korrigiere ihn.
                example_code: |
                    ```
                    zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} zeile {in} zeilen _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ zeile _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
        default_save_name: Lied
    songs_2:
        name: Singe ein Lied! 2
        levels:
            12:
                story_text: |
                    In Liedern gibt es viele Wiederholungen. Das k√∂nnen wir mit Funktionen abbilden!
                    ### √úbung
                    Schau die den Beispiel Code mit den Funktionen an. F√ºll die beiden Zeilen so, dass das ganze Lied gespielt wird.
                example_code: |
                    ```
                    {define} laterne
                        {print} 'Laterne'
                        {print} '...'

                    {define} brenne_auf
                        {print} 'Brenne auf mein Licht,'

                    {call} laterne
                    {print} 'Sonne, Mond und Sterne'
                    {call} brenne_auf
                    {call} _
                    {print} 'Aber nur meine Liebe Laterne nicht'
                    ```
        default_save_name: Lied 2
        description: Singe ein Lied 2
    turtle:
        name: Schildkr√∂te
        default_save_name: Schildkr√∂te
        description: Male dein eigenes Bild
        levels:
            1:
                story_text: |
                    Du kannst mit Hedy auch zeichnen. Indem Du Drehungen und Linien kombinierst, kannst Du ein Quadrat oder eine Treppe zeichnen.

                    Mit `{forward}` ziehst Du eine Linie vorw√§rts. Die Zahl dahinter legt fest, wie weit die Schildkr√∂te wandert. Mit `{turn} {right}` ("drehe Dich nach rechts") macht sie eine Viertelumdrehung im Uhrzeigersinn, mit `{turn} {left}` ("drehe Dich nach links") entgegen dem Uhrzeigersinn.

                    Wenn du zur√ºck laufen m√∂chtest, benutzt du den `{forward}`-Befehl mit einer negativen Zahl., wie zum Beispiel `{forward} -100`.
                story_text_2: |
                    ### √úbung
                    Das ist der Anfang einer kleinen Treppe. Kannst Du sie so zeichnen, dass sie 5 Stufen hat?
            2:
                story_text: |
                    In diesen Level kann du Variablen nutzen, um die Schildkr√∂te interaktiv zu machen. Du kannst zum Beispiel die Spieler fragen, wie viele Schritte die Schildkr√∂te machen soll.
                example_code: |
                    ```
                    {forward} 80
                    {turn} 90
                    {forward} 50
                    {turn} 180
                    {forward} 100
                    ```
                story_text_2: |
                    In Level 1 konnte sich die Schildkr√∂te au√üerdem nur nach links oder rechts drehen. Das ist ein bisschen langweilig!
                    In level 2 kann sie ihre Nase in alle Richtungen strecken.

                    Benutze 90 f√ºr eine Vierteldrehung. Dies wird Grad genannt. Eine komplette Drehung sind 360 Grad.

                    ### √úbung
                    Kannst du mit diesem Code eine Form gestalten? Vielleicht ein Dreieck oder einen Kreis?
                example_code_2: |
                    ```
                    {print} Figuren werden gezeichnet
                    winkel {is} 90
                    {turn} winkel
                    {forward} 25
                    {turn} winkel
                    {forward} 25
                    {turn} winkel
                    {forward} 25
                    ```
            3:
                story_text: |
                    In diesem Level kannst Du `{at} {random}` nutzen, w√§hrend die Schildkr√∂te etwas zeichnet. Durch eine zuf√§llige Wahl nimmt die Schildkr√∂te jedes Mal einen anderen Weg.
                    Nutze `{at} {random}` um einen zuf√§lligen Wert aus einer Liste zu w√§hlen.
                    ### √úbung
                    Kannst du die Zeilen 2 und 3 kopieren und wieder einf√ºgen, um einen l√§ngeren, zuf√§lligen Pfad zu erzeugen?
                example_code: |
                    ```
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    In Level 4 musst du bei `{print}` und `{ask}` Anf√ºhrungszeichen nutzen. Das gilt auch f√ºr's Zeichnen!
                example_code: |
                    ```
                    {print} _ Formen zeichnen _
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kannst auch die Farben der Linien mit dem `{color}`  Befehl √§ndern. Sieh dir das Beispiel an.
                    Du kannst auch den `{color} {white}` Befehl benutzen, um "unsichtbare" Linien zu ziehen. Du kannst diese weissen Linien nutzen, um die Schildkr√∂te irgendwo auf dem Bildschirm hin zu bewegen bevor du zu malen anf√§ngst.
            5:
                story_text: |
                    In Level 5 kannst Du mit dem Befehl `{if}` Entscheidungen treffen. Du kannst Dich zum Beispiel zwischen verschiedenen Formen entscheiden.
                example_code: |
                    ```
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'M√∂chtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120
                    {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                story_text_2: |
                    ### √úbung
                    F√ºlle die richtigen Zahlen in die L√ºcken in diesem Code, um ihn zum Laufen zu bringen.
                    Nachdem du das getan hast, kannst du versuchen die Option r√ºckw√§rts hinzuzuf√ºgen.

                    **Extra** Anstelle von "links" und "rechts", √§ndere das Programm so, dass es Nord, Ost, S√ºd und West benutzt.
                    Auf diese Weise kannst du sogar noch mehr Richtungen, wie z.B. Nordost und S√ºdwest, hinzuf√ºgen.
                example_code_2: |
                    ```
                    richtung {is} {ask} 'M√∂chtest du links, rechts oder geradeaus gehen?'
                    {if} richtung {is} links {turn} _
                    {if} richtung {is} rechts {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    In diesem Level nutzen wir Berechnungen, um verschiedene Formen zu zeichnen.
                    Du hast vielleicht schon gelernt, dass eine komplette Umdrehung 360¬∞ sind. Falls nicht, dann wei√üt Du es jetzt!
                    Deswegen benutzen wir immer 90¬∞ f√ºr ein Rechteck. 360 geteilt durch 4 ist 90.
                    Jetzt, da wir wissen wie Mathe mit Hedy geht, k√∂nnen wir alle Formen zeichnen, die wir wollen!
                example_code: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    ```
            8:
                story_text: |
                    Jetzt, da wir einzelne Linien wiederholen k√∂nnen, f√§llt uns das Zeichnen einzelner Formen leichter.
                    Wir setzen den Winkel einmalig und nutzen dann die Variable im `{repeat}`.

                    ### √úbung 1
                    Der Beispiel-Code erstellt ein Quadrat. √Ñndere den Code, sodass er eine andere Figur erstellt, wie ein Dreieck oder ein Sechseck.
                    Dies bedarf einer √Ñnderung in zwei Zeilen Code.
                    Tipp: Ein voller Kreis hat 360 Grad.

                    ### √úbung 2
                    Erstelle nun eine Zeichnung aus mindestens zwei Polygonen.
                example_code: |
                    ```
                    Winkel = 90
                    {repeat} 4 {times}
                        {turn} Winkel
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** Wir k√∂nnen auch das Programm verbessern, das verschiedene Formen zeichnet. Vervollst√§ndige den Code und du kannst jedes Vieleck zeichnen, das du m√∂chtest!
                example_code_2: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {repeat} Ecken {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Nun da wir ein `{repeat}` innerhalb eines `{repeat}` verwenden k√∂nnen, ist es m√∂glich, komplexere Figuren zu erstellen.

                    ### √úbung 1
                    Dieser Code erzeugt drei schwarze Dreiecke, √§ndere dies zu f√ºnf pinken Quadraten.

                    **Extra** Erstelle eine Figur deiner Wahl, die aus mindestens zwei verschiedenen Formtypen besteht.
            10:
                story_text: |
                    In diesem Level kannst du die Schildkr√∂te eine Figur zeichnen lassen.
                    Die Schildkr√∂te wird die Entfernungen in der Liste zur√ºcklegen, eine nach der anderen und dabei immer gr√∂√üere Schritte machen.
                    ### √úbung
                    F√ºr eine 90 Grad Drehung in der Schleife hinzu, so dass eine Spiral gezeichnet wird.
                    F√ºge mindestens 5 Zahlen zu der Liste hinzu, so dass die Spirale gr√∂√üer wird.
                    **(extra)** kannst du die Spirale in eine andere Form umwandeln? Experimentiere mit Zahlen f√ºr die Drehung!
                    ### √úbung 2
                    Die Spirale wird nach aussen gezeichnet, kannst du sie auch nach aussen zeichnen?
                example_code: |
                    ```
                    {turn} 90
                    entfernungen = 10, 20, 30, 40, 50, 60
                    {for} entfernung {in} entfernungen
                        {forward} entfernung
                    ```
            12:
                story_text: |
                    Wir k√∂nnen die Funktion verwenden, um mehr Figuren mit weniger Code zeichnen.
                    ### √úbung 1
                    F√ºlle die Funktion, so dass drei Quadrate erzeugt werden. Wenn du willst, dass das Bild h√ºbscher aussieht, kannst du die Linien zwischen den Quadraten weiss machen.

                    ### √úbung 2
                    Der Code kann noch k√ºrzer gemacht werden. Lege die letzten Zeilen in einen `{repeat}` Befehl, so dass die Figuren gleich bleiben.

                    ### √úbung 3
                    Erzeuge deine eigene Zeichnung mit verschiedenen Figuren.
                    √Ñndere sowohl die Anzahl der Figuren mit dem `{repeat}` Befehl also auch die Form der Figuren im `{define}`.
                example_code: |
                    ```
                    {define} quadrat
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} quadrat
                    {forward} 50
                    {call} quadrat
                    {forward} 50
                    {call} quadrat
                    ```
    turtle_draw_it:
        name: Zeichne!
        default_save_name: Zeichne
        description: Zeichne dieses Bild mit der Schildkr√∂te
        levels:
            1:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                        Rechteck <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Quadrat <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stufen<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Dreieck <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Pfeil <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boot <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Dreieck <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Stern <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Pfeil <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Farbiger Stern <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Regenbogen <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Verschachtelte Quadrate <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Willst du eine wirkliche Herausforderung? Die Farben in den Figuren sollen zuf√§llig ausgew√§hlt werden, so dass jedes Mal, wenn dein Programm l√§uft, anders aussehen!

                    ```
                    farben {is} Rot, Orange, Gelb, Gr√ºn, Blau, Lila, Pink, Braun, Grau, Schwarz
                    farbe _
                    ```
            5:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    **Extra** Erstelle nur einen Code, der die Spielerin oder den Spieler entscheiden l√§sst, welchen Buchstaben sie oder er sehen m√∂chte! Und kannst du noch mehr Buchstaben hinzuf√ºgen?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hinweis:
                    ```
                    gew√§hlter_buchstabe {is} {ask} 'Welchen Buchstaben willst Du sehen? F, E oder L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    **Extra** Lasse die Spielerin oder den Spieler entscheiden, welche Farbe das erste Quadrat haben sollte.

                    ***Extra*** Kannst du den Buchstaben deines eigenen Namen und die Flagge deines eigenen Landes malen?

                    <div class="w-full flex flex-row gap-2">
                    Quadrat <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Buchstaben <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flagge <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hinweis f√ºr das Quadrat:
                    ```
                    gew√§hlte_farbe = {ask} _
                    ```
            7:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Sechseck <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Dreieck <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    F√§cher <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    **Extra** Die Zahl in den Klammern gibt an, in wie vielen Codezeilen die Figur gezeichnet werden kann. Kannst du es in derselben Anzahl an Zeilen machen?

                    <div class="w-full flex flex-row gap-2">
                    Quadrat (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Zuf√§llig gef√§rbter Stern (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Zuf√§llig gef√§rbte Spirale (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    **Extra** Die Zahl der Klammern zeigt an, wie viele Zeilen Code notwendig sind, die Zeichnung zu malen. Kannst du es mit derselben Anzahl von Zeilen machen?

                    **Extra** Gib dem Spieler die Wahl, von welchem Land er die Flagge sehen will.

                    <div class="w-full flex flex-row gap-2">
                    Kreuz (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Verschachtelte Quadrate mit zuf√§lliger Farbe (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flaggen <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hinweis f√ºr die verschachtelten Quadrate:
                    ```
                    farben = Rot, Blau, Orange, Gelb, Pink, Lila, Gr√ºn, Braun, Schwarz
                    entfernung = 120
                    {repeat} 5 {times}
                    _
                    ```
                    Hinweis f√ºr die Flaggen:
                    ```
                    land = {ask} 'Von welchem Land willst Du die Flagge sehen?'
                    {if} land {is} 'Deutschland'
                        farbe_1 = Rot
                        farbe_2 = Wei√ü
                        farbe_3 = Schwarz
                    ```
            10:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Verschachteltes Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Ampel <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hinweis verschachteltes Hexagon:
                    ```
                    entfernungen = 100, 80, 60, 40, 20
                    {for} entfernung {in} entfernungen
                    _
                    ```

                    Hint Ampel:
                    ```
                    farben = Rot, Gelb, Gr√ºn
                    {for} gew√§hlte_farbe {in} farben
                        farbe _
                        {repeat} _
                    ```
                story_text_2: |
                    Weihnachtsbeleuchtung <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hinweis Weihnachtsbeleuchtung:

                    Beginne, indem du die Schildkr√∂te mit einer unsichtbaren Linie zur linken Bildschirmseite bewegst. Dann h√§nge die Weihnachtsbeleuchtung auf!
                    ```
                    {color} Wei√ü
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    farben = Rot, Blau, Gelb, Lila, Gr√ºn, Orange, Pink
                    {for} gew√§hlte_farbe {in} farben
                    _
                    ```
            11:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    <div class="w-full flex flex-row gap-2">
                    Bienenstock (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    F√§cher (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Schneeflocke (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hinweis Bienenkorb:
                    ```
                    {for} anzahl_von_waben {in} {range} 1 {to} _
                        {for} w√§nde_einer_wabe {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hinweis F√§cher:
                    Beginne mit dem F√§cher, den du in Level 7 gemacht hast. Oder wirf einen Blick auf den Hinweis f√ºr den Bienenkorb, weil der Code sehr √§hnlich ist.

                    Hinweis Schneeflocke: Beginne, indem du einen 'Ast' machst und wiederhole es 6 Mal.
            12:
                story_text: |
                    ### √úbung
                    Mache die Zeichnung mit der Schildkr√∂te nach!

                    Definiere zun√§chst eine Funktion **f√ºr jede Form** die du f√ºr das Armband verwenden m√∂chtest. Dann f√ºge die Form so zum Armband hinzu:

                    Armband Design Programm <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500"> 
                example_code: |
                    Hinweis Armband Design Programm
                    ```
                    {define} zeichne_ein_quadrat
                    _

                    {color} weiss
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} grau
                        {forward} 100
                        form = {ask} 'Welche Form m√∂chtest du als n√§chstes mit deinem Armband haben?'
                        gew√§hlte_farbe = {ask} 'In welcher Farbe?'
                        {color} gew√§hlte_farbe
                        {if} form = 'quadrat'
                            {call} zeichne_ein_quadrat
                    ```
            13:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    Stra√üe in verschiedenen Gr√∂√üen <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Gef√§rbte Stra√üe  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Schneesturm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hinweis Stra√üe in verschiedenen Gr√∂√üen
                    ```
                    {define} zeichne_ein_haus {with} gr√∂√üe
                    _

                    {call} zeichne_ein_haus {with} 90
                    {call} zeichne_ein_haus {with} 60
                    {call} zeichne_ein_haus {with} 30
                    ```

                    Hinweis Farbige Stra√üe
                    ```
                    {define} zeichne_ein_haus {with} gew√§hlte_farbe
                    _
                    ```

                    Hinweis Schneesturm
                    ```
                    {define} zeichne_schneeflocke {with} l√§nge, farbe
                        _

                    zahlen = 10, 20, 30
                    f√§rben = _

                    {for} i {in} {range} 1 {to} 5
                        zuf√§llige_zahl = _
                        zuf√§llige_farbe = _
                        {call} zeichne_schneeflocke {with} zuf√§llige_zahl, zuf√§llige_farbe
                        {color} wei√ü
                        {turn} zuf√§llige_zahl * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### √úbung
                    Schreibe ein Programm, das die Spieler fragt, wie viele Ecken ihre Figur haben soll und dann die Figur zeichnet.
                    Die Figur im Bild ist die Ausgabe, wenn der Spieler eine 10 eingibt.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} berechne_winkel {with} anzahl_ecken
                        _ 360 / anzahl_ecken


                    {define} zeichne_figur {with} winkel
                        _
                            {forward} 400/anzahl_ecken
                            {turn} _

                    anzahl_ecken = {ask} _
                    winkel = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### √úbung
                    Mache die Zeichnungen mit der Schildkr√∂te nach!

                    Spirale <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spirale
                    ```
                    entfernung = 5
                    {while} entfernung < 200
                        entfernung = entfernung + 5
                         _
                    ```
                story_text_2: |
                    F√§cher <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    F√§cher
                    ```
                    {define} zeichne_ein_quadrat {with} seitenl√§nge
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Stern <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Stern
                    Ein Stern wird √ºblicherweise mit 144¬∞ Drehungen gezeichnet. Wenn du das zum Beispiel leicht in einen 143¬∞ Winkel ab√§nderst und das Muster mehrfach mit einer {while} Schleife wiederholst, kannst du die gezeigte Figur zeichnen.
    while_command:
        description: '{while}'
        levels:
            15:
                story_text: "Wir lernen jetzt eine neue Schleife, die `{while}` Schleife! Wir bleiben in der Schleife, so lange bis die Aussage wahr ist.\nDeswegen - vergiss nicht, den Wert in der Schleife zu ver√§ndern.\n\nIm Beispiel Code bleiben wir in der Schleife, bis eine richtige Antwort gegeben wurde.\nFalls die richtige Antwort nie gegeben wird, endet die Schleife nie!"
                example_code: "```\nantwort = 0\n{while} antwort != 25\n    antwort = {ask} 'Was ist 5 mal 5?'\n{print} 'Eine richtige Antwort wurde gegeben'\n```\n"
        default_save_name: solange_Befehl
        name: '{while}'
    years:
        name: Neujahr
        default_save_name: Neujahrs-Countdown
        description: Countdown zum neuen Jahr!
        levels:
            11:
                story_text: |
                    In diesem Level kannst du den Befehl `{for}` Zahl `{in}` `{range}` benutzen, um zum neuen Jahr runterzuz√§hlen.

                    ### √úbung
                    F√ºlle die L√ºcken und bring den Code zum Laufen!
                example_code: |
                    ```
                    {for} Zahl {in} {range} _ {to} _
                        {print} Zahl
                        {sleep}
                    {print} 'Frohes neues Jahr!'
                    ```
    tic:
        default_save_name: Drei
        description: Spiele eine Runde Drei gewinnt!
        name: Drei gewinnt
    tic_2:
        description: Spiele eine Runde Drei gewinnt!
        name: Drei gewinnt 2
        default_save_name: Drei
    tic_3:
        name: Drei gewinnt 3
        description: Spiele eine Runde Drei gewinnt!
        default_save_name: Drei
