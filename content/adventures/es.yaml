adventures:
    story:
        name: Historia
        default_save_name: Historia
        description: Haz una historia breve
        levels:
            1:
                story_text: |
                    En el nivel 1 puedes crear una historia con un protagonista que t√∫ elijas.

                    En la primera l√≠nea, usa `{ask}` y pregunta qui√©n es el personaje principal de tu historia.

                    A continuaci√≥n, utiliza `{print}` si necesitas mostrar una frase por pantalla.
                    Utiliza `{echo}` si quieres que el nombre de tu personaje aparezca al final de la frase.
                example_code: |
                    ```
                    {ask} El protagonista de esta historia es
                    {print} El protagonista camina por un bosque
                    {echo} Est√° bastante asustado
                    {print} Por todos lados se oyen extra√±os ruidos
                    {print} Tiene miedo de que √©ste sea un bosque encantado
                    ```
                story_text_2: |
                    ### ejercicio
                    Ahora crea tu propia historia de un m√≠nimo de 6 l√≠neas de c√≥digo.
                    Esta historia no puede ser la misma que el c√≥digo de ejemplo.
                    Utiliza m√≠nimo un comando `{ask}` y un comando `{echo}`.
                    Lo puedes hacer sobre cualquier tema que quieras.
                    Si no se te ocurre ning√∫n tema, usa uno de estos: en el cine, un partido o un d√≠a en el zool√≥gico.
            2:
                story_text: |
                    En el nivel 2 puedes hacer tu historia m√°s divertida. El nombre de tu protagonista ahora puede estar en cualquier posici√≥n de la frase.

                    Para eso debes realizar un poquito m√°s de programaci√≥n. Debes dar primero un nombre al protagonista de tu historia.

                    Puedes luego usar este nombre en las oraciones que siguen.
                example_code: |-
                    ```
                    nombre {is} {ask} ¬øC√≥mo se llama el protagonista?
                    {print} nombre est√° caminando por el bosque
                    {print} nombre est√° bastante asustado
                    {print} Por todos lados se oyen extra√±os ruidos
                    {sleep}
                    {print} nombre tiene miedo de que √©ste sea un bosque encantado
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora es momento de a√±adir variables a la historia que hiciste en el nivel anterior.
                    Ve a 'Mis Programas', busca tu historia del nivel 1 y copia el c√≥digo. Pega el c√≥digo en tu pantalla de entrada en este nivel.

                    Este c√≥digo no funcionar√° en este nivel, porque no has usado variables a√∫n.
                    Cambia los comandos `{ask}` y `{echo}` en tu c√≥digo a la forma correcta que aprendiste en este nivel.

                    **Extra** a√±ade un comando `{sleep}` a tu c√≥digo para crear tensi√≥n en la historia.
            3:
                story_text: |
                    En el nivel 3 puedes hacer tu historia m√°s divertida. Puedes usar aleatoriedad para cualquier monstruo, animal, o cualquier otro obst√°culo, como este:
                example_code: |
                    ```
                    animales {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Ahora escucha el ruido de un animales {at} {random}
                    ```
                story_text_2: |
                    El comando `{add}` puede ser √∫til en tu historia.
                example_code_2: |
                    ```
                    {print} Se escucha un sonido
                    animales {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} ¬øQu√© piensas qu√© es?
                    {add} animal {to_list} animales
                    {print} fue un animales {at} {random}
                    ```
                story_text_3: |
                    Este es un ejemplo del comando `{remove}` en su historia

                    ### Ejercicio
                    Copia tu historia de los niveles anteriores en este nivel.
                    En este nivel has aprendido 3 nuevos comandos `{at} {random}`, `{add} {to_list}` y `{remove} {from}`.
                    A√±ade nuevas l√≠neas de c√≥digo a tu historia, de forma que todos los nuevos comandos aparezcan al menos una vez en tu historia.
                example_code_3: |
                    ```
                    {print} Su mochila se hizo muy pesada.
                    {print} Dentro de ella hab√≠a una botella de agua, una linterna y un ladrillo
                    bolso {is} agua, linterna, ladrillo
                    botar {is} {ask} ¬øQu√© art√≠culo deber√≠a botar √©l?
                    {remove} botar {from} bolso
                    ```
            4:
                story_text: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo y compl√©talo a√±adiendo comillas en los huecos de las l√≠neas 1 y 2.
                    Los huecos en blanco en las l√≠neas 3 y 4 no se deben reemplazar por comillas, sino por un comando `{sleep}` y un `{clear}`. ¬øPuedes hacerlo funcionar?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu historia. Haz funcionar el c√≥digo en este nivel a√±adiendo comillas en los lugares correctos.
                    Recuerda: Las variables en tu propia historia tienen que estar fuera de las comillas. Como en la segunda l√≠nea del c√≥digo de ejemplo. En esa l√≠nea el nombre de la variable esta situado fuera de las comillas.
                example_code: |
                    ```
                    nombre {is}{ask} _ ¬øCu√°l es tu nombre? _
                    {print} _ El protagonista de esta historia es _ nombre
                    _
                    _
                    {print} nombre _ ahora est√° caminando por el bosque _
                    {print} nombre _ est√° un poco asustado _
                    animales {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ √âl escucha el ruido de un _ animales {at} {random}
                    {print} nombre _ teme que √©ste sea un bosque encantado _
                    ```
            5:
                story_text: |
                    En este nivel puedes programar distintos finales, lo que har√° que tu historia sea incluso m√°s divertida.
                    En el c√≥digo de ejemplo puedes ver como hacer 2 finales diferentes.

                    ### Ejercicio 1
                    Escribe una nueva breve historia con al menos 6 l√≠neas de c√≥digo, sobre un tema de tu elecci√≥n.
                    ¬øSin inspiraci√≥n? Escoge uno de estos temas: un superh√©roe, un d√≠a aburrido en la escuela, perdido en una isla desierta.

                    Ahora dale al jugador la oportunidad de escoger una final bueno o malo, como en el c√≥digo de ejemplo.
                    Programa ambos finales.

                    ### Ejercicio 2
                    Copia la historia que has creado para tu propia aventura en los niveles anteriores.
                    Encuentra una forma de a√±adir por lo menos 2 comandos `{if}` y `{else}` a tu historia.
                    Esto puede ser un final bueno o malo, pero puedes intentar buscar otras formas de incorporar los comandos.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øQui√©n camina por el bosque?'
                    {print} nombre ' camina por el bosque'
                    {print} nombre ' encuentra un monstruo'
                    f√≠n {is} {ask} '¬øQuieres un final bueno o malo?'
                    {if} final {is} bueno {print} nombre ' coge la espada y el monstruo huye r√°pidamente'
                    {else} {print} 'El monstruo se come' nombre
                    ```
            7:
                story_text: |
                    En una historia, alguien dice algunas palabras varias veces. Por ejemplo, cuando alguien pide ayuda o canta una canci√≥n.
                    Puedes poner este tipo de repeticiones en tu historia, en este nivel con `{repeat}`.

                    ### Ejercicio
                    A√±ade repeticiones a tu propia historia. Vuelve a tus programas guardados, elige tu programa de historia de un nivel anterior y
                    encuentra una l√≠nea que contenga `{print}` y ¬°rep√≠tela!
                example_code: |
                    ```
                    {print} 'La princesa grita pidiendo ayuda'
                    {repeat} 5 {times} {print} '¬°Ayuda!'
                    {print} 'Por qu√© nadie viene en mi ayuda?'
                    ```
            8:
                story_text: "En este nivel puedes usar varias l√≠neas en tus comandos `{if}`, ¬°de esta manera puedes mejorar tu final malo o bueno!\n\n### Ejercicio 1\n El c√≥digo de ejemplo muestra dos finales diferentes; uno donde los personajes usan una m√°quina del tiempo y otro en el que no.\nCompleta los espacios en blanco con al menos una frase por cada final. \n**Extra** Haz que la historia dure m√°s. ¬øQu√© ocurre en la historia? Puedes tambi√©n a√±adir un segundo `{ask}` con diferentes opciones.\n\n### Ejercicio 2\nVuelve a tus historias guardadas, escoge la historia del nivel 5. Escribe un final bueno y uno malo de al menos tres l√≠neas cada uno.\n"
                example_code: |
                    ```
                    {print} '¬°OH NO! ¬°El T-rex se est√° acercando!'
                    final = {ask} '¬øQuieres un final triste o feliz?'
                    {if} final {is} feliz
                        {print} 'Justo a tiempo Richard salta de vuelta en la m√°quina del tiempo!'
                        {print} _
                    {else}
                        {print} '¬°Oh, no! Richard es demasiado lento...
                        {print} _
                    ```
            9:
                story_text: |
                    En este nivel puedes usar los comandos `{if}` y `{repeat}`  dentro de otros comandos `{if}` y `{repeat}`.
                    Esto te da muchas opciones y te ayuda a hacer tu historia mas interactiva.

                    ### Ejercicio 1
                    Termina el c√≥digo de forma que `{if}` funcione correctamente.

                    ### Ejercicio 2
                    Agrega un comando `{if}` y `{else}` en la parte que Robin va a casa tambi√©n.

                    ### Ejercicio 3
                    Vuelve a tu historia del nivel 8 y usa por lo menos dos `{if}` dentro de otro`{if}`
                example_code: |
                    ```
                    {print} 'Robin est√° caminando hacia el centro de la ciudad'
                    lugar = {ask} '¬øRobin va a ir a una tienda, o va a ir a casa?'
                    {if} lugar {is} tienda
                        {print} 'Ella entra en la tienda.'
                        {print} 'Robin ve un libro que luce interesante'
                        libro = {ask} '¬øCompra el libro Robin?'
                        {if} libro {is} si
                            {print} 'Robin compra el libro y se va a casa'
                        {else}
                            {print} 'Robin deja la tienda y se va a casa'
                    {else}
                        {print} 'Robin se va a casa'
                    ```
            10:
                story_text: |
                    En este nivel puedes usar el comando `{for}` en tu historia. De esta manera puedes programar f√°cilmente el libro para ni√±os 'oso pardo, oso pardo, ¬øqu√© ves?'

                    ### Ejercicio

                    Mira en <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> la historia </a> si no la conoces, aseg√∫rate que este igual que el libro.
                example_code: "```\nanimales = _ , _ , _ \n{print} 'Oso pardo, Oso pardo'\n {print} '¬øQu√© ves?'\n```\n"
            13:
                story_text: |
                    Usando los comandos `{and}` y `{or}` puedes hacer tus historias mas vers√°tiles. Puedes hacer dos preguntas y responder a la combinaci√≥n de respuestas.

                    ### Ejercicio 1
                    Mira el c√≥digo de ejemplo de este nivel y compl√©talo. Luego a√±ade por lo menos 2 `{if}` con `{and}` o `{or}`.

                    ### Ejercicio 2
                    Encuentra una historia de un nivel anterior y a√±ade un `{and}` o `{or}`.
                example_code: |
                    ```
                    {print} 'Nuestra hero√≠na est√° caminando en el bosque'
                    {print} 'El camino se divide en dos'
                    camino = {ask} '¬øQue camino deber√≠a escoger ella?'
                    arma={ask} 'Que arma escoge ella?'
                    {if} camino {is} 'derecha' {and} arma {is} 'espada'
                        _
                    ```
            15:
                story_text: |
                    Usar un bucle `{while}` puede hacer que tus historias sean m√°s interesantes. Por ejemplo, puedes usar `{while} game == 'on'` para seguir jugando hasta que termine.
                    O puedes usar `{while} sword == 'lost'` para evitar que el jugador contin√∫e el juego hasta que encuentre algo.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    llaves = 'perdidas'
                    {print} 'Est√°s en tu jard√≠n y perdiste tus llaves.'
                    {print} '¬øEn donde las quieres buscar?'
                    {print} '¬®Puedes escoger: √°rbol, lecho de flores, roca, buz√≥n'
                    {while} llaves == 'perdidas'
                        lugar = {ask} '¬øEn donde quieres buscar?'
                        {if} lugar == 'lecho de flores'
                            {print} '¬°Aqu√≠ est√°n!'
                            keys = 'encontradas'
                        {else}
                            {print} 'No, no est√°n en ' lugar
                    {print} '¬°Ahora puedes entrar en la casa'
                    ```
            18:
                story_text: |
                    Vamos a hacer otra historia, pero ahora usaremos par√©ntesis con `{print}`.

                    ### Ejercicio 1
                    Crea una historia de m√≠nimo 5 oraciones. No tienes que usar 'nombre' a√∫n.
                example_code: |
                    ```
                    {print}('Bienvenido a esta historia!')
                    ```
                story_text_2: |
                    ### Ejercicio 2
                    Ya preparamos un `{input}` para ti. Primero usa la variable `name` en tu historia.
                    Luego a√±ade un segundo `{ask}` y usa esa variable tambi√©n.
                    Tip: Recuerda las comas en el `{print}` entre texto y variables
                example_code_2: |
                    ```
                    nombre = {input}("Cual es tu nombre?")
                    {print}('Bienvenido a esta historia!')
                    ```
    add_remove_command:
        name: '{add} {to_list} y {remove} {from}'
        default_save_name: comando_a√±adir_borrar
        description: introduciendo {add} {to_list} y {remove} {from}
        levels:
            3:
                story_text: |
                    ## {add}{to_list}
                    Puedes a√±adir objetos a la lista con el comando `{add} {to_list}`. Para a√±adir un objeto a una lista puedes escribir: `{add} penguin {to_list} animals` o puedes usar el comando `{ask}` como en el c√≥digo de ejemplo.
                example_code: |
                    ```
                    animales {is} perro, gato, canguro
                    gusta {is} {ask} ¬øCu√°l es tu animal preferido?
                    {add} gusta {to_list} animales
                    {print} Yo elijo animales {at} {random}
                    ```
                story_text_2: |
                    ## {remove}{from}
                    Si puedes a√±adir objetos a una lista, por supuesto que tambi√©n puedes quitarlos. Esto se hace con el comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animales {is} perro, gato, canguro
                    no_gustar {is} {ask} ¬øQu√© animal no te gusta?
                    {remove} no_gustar {from} animales
                    {print} Elijo animales {at} {random}
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba los nuevos comandos en este restaurante virtual. A√±ade el sabor que el jugador est√° esperando a la lista y elimina los sabores a los que es al√©rgico.
                example_code_3: |
                    ```
                    {print} Batido misterioso
                    sabores {is} fresa, chocolate, vainilla
                    espera {is} {ask} ¬øQu√© sabor est√°s esperando?
                    _
                    alergias {is} {ask} ¬øEres al√©rgico a cualquiera de los sabores?
                    _
                    {print} Recibe un batido de sabores {at} {random}
                    ```
    and_or_command:
        default_save_name: y o
        description: introduciendo {and} y {or}
        levels:
            13:
                story_text: |-
                    ¬°Ahora vamos a aprender `{and}` y `{or}`! Si quieres comprobar dos sentencias, no tienes que usar dos `{if}`s pero puedes usar `{and}` y `{or}`.

                    Si usas `{and}`, ambas sentencias, a la izquierda y derecha de `{and}` tienen que ser verdaderas. Tambi√©n podemos usar `{or}`. Entonces s√≥lo una sentencia tiene que ser correcta.
                example_code: |
                    ```
                    nombre = {ask} '¬øc√≥mo te llamas?'
                    edad = {ask} '¬øcu√°ntos a√±os tienes?'
                    {if} nombre {is} 'Hedy' {and} edad {is} 2
                        {print} '¬°T√∫ eres el verdadero Hedy!'
                    ```
        name: '{and} y {or}'
    ask_command:
        default_save_name: comando_preguntar
        description: Introducci√≥n al comando {ask}
        levels:
            1:
                story_text: |
                    ## El comando `{ask}`
                    Ahora que puedes usar el comando `{print}`, est√°s preparado para usar el siguiente comando: `{ask}`. Con el comando `{ask}`, puedes hacer una pregunta. Compru√©balo:
                example_code: |
                    ```
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    ```
                story_text_2: |
                    ## El comando `{echo}`
                    Si quieres que el ordenador te repita la respuesta, puedes usar el comando `{echo}`. Se har√° eco de la respuesta al final de la frase. En este ejemplo despu√©s de hola.
                example_code_2: |
                    ```
                    {print} ¬°Hola!
                    {ask} ¬øC√≥mo te llamas?
                    {echo} hola
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba los comandos `{ask}` y `{echo}`. Lo primero, rellena los huecos en blanco para hacer que el programa funcione.
                    Despu√©s, haz 2 preguntas m√°s usando el comando `{ask}`, tras cada `{ask}` usa un `{echo}` para imprimir la respuesta en pantalla.
                example_code_3: |
                    ```
                    _ ¬øQu√© tal est√°s?
                    _
                    ```
            2:
                story_text: |
                    ## El comando `{ask}`
                    Ahora que podemos usar **variables** en nuestros c√≥digos, ya no necesitamos el comando `{echo}`.
                    Podemos usar variables para almacenar las respuestas a nuestras pregunta y de esta manera podemos usar la respuesta a varias preguntas en nuestros c√≥digos.
                    Compru√©balo:

                    ¬°De esta manera tu c√≥digo se convierte interactivo!
                example_code: |
                    ```
                    nombre {is} {ask} ¬øC√≥mo te llamas?
                    {print} Hola nombre
                    edad {is} {ask} ¬øCu√°ntos a√±os tienes?
                    {print} nombre tiene edad a√±os.
                    ```
                story_text_2: |
                    ### Ejercicio
                    En la aventura anterior has practicado estableciendo variables con el comando `{is}`.
                    Has creado al menos 3 variables y las has usado con el comando `{print}`.
                    Ahora, en vez de establecer las variables queremos que hagas las variables interactivas, como hicimos en nuestro ejemplo.

                    Copia tu c√≥digo de la aventura anterior y haz las variables interactivas usando el comando `{ask}`.
                example_code_2: |
                    ```
                    favorite_animal {is} {ask} ¬øCu√°l es tu animal favorito?
                    {print} Me gusta favorite_animal
                    ```
            18:
                story_text: El √∫ltimo cambio que tenemos que hacer para conseguir el c√≥digo en Python es cambiar `{ask}` por `{input}`.
                example_code: |
                    ```
                    {print}('¬°Mi nombre es Hedy!')
                    nombre = {input}('¬øC√≥mo te llamas?')
                    {print}('As√≠ que te llamas ', nombre)
                    ```
        name: '{ask}'
    calculator:
        name: Calculadora
        default_save_name: Calculadora
        description: Haz una calculadora
        levels:
            6:
                story_text: |
                    Ahora que puedes calcular, ¬°puedes hacer una calculadora!
                example_code: |
                    ```
                    n√∫mero_1 = {ask} 'Rellena el primer n√∫mero:'
                    n√∫mero_2 = {ask} 'Escribe el segundo n√∫mero:'
                    respuesta_correcta = n√∫mero_1 * n√∫mero_2
                    {print} n√∫mero_1 ' por ' n√∫mero_2 ' es ' respuesta_correcta
                    ```
                story_text_2: |
                    ### Ejercicio
                    La calcula va a ser capaz de calcular las respuestas por ti, pero tambi√©n puedes hacer un programa para probar tus propias habilidades matem√°ticas, as√≠:
                    ¬°Rellena los espacios para completar el c√≥digo!
                example_code_2: |
                    ```
                    respuesta_correcta = 11 * 27
                    respuesta = {ask} '¬øCuanto es 11 por 27?'
                    {if} respuesta {is} _ {print} '¬°Buen trabajo!'
                    {else} {print} '¬°Incorrecto! Era ' _
                    ```
                story_text_3: |
                    **Extra** Tambi√©n puedes dejar que el ordenador haga productos aleatorios por s√≠ mismo usando `{random}`.
                example_code_3: "```\nnumeros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumero_1 = _\nnumero_2 = _\nrespuesta_correcta = numero_1 * numero_2\nrespuesta_dada = {ask} '¬øCu√°nto es ' number_1 ' veces ' number_2 '?'\n{if} _\n{else} _\n```"
            9:
                story_text: |
                    En el nivel anterior creaste una calculadora. En este nivel puedes ampliar el c√≥digo para que haga varias preguntas.

                    ### Ejercicio 1
                    ¬øPuedes completar la l√≠nea 10 para hacer que el c√≥digo funcione?

                    ### Ejercicio 2
                    Dale al jugador informaci√≥n cuando introduzcan una pregunta, por ejemplo `{print}` '¬°Correcto!' o `{print}` '¬°Incorrecto! La respuesta correcta es ' respuesta_correcta
                example_code: "```\npuntuaci√≥n = 0\n{repeat} 10 {times}\n    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    n√∫mero_1 = n√∫meros {at} {random}\n    n√∫mero_2 = n√∫meros {at} {random}\n    respuesta_correcta = numero_1 * numero_2\n    {print} '¬øCu√°nto es 'n√∫mero_1' multiplicado por 'n√∫mero_2'?'\n    respuesta = {ask} 'Escriba su respuesta aqu√≠...'\n    {print} 'Tu respuesta es ' respuesta\n    {if}_{is}_ \n        puntuaci√≥n = puntuaci√≥n + 1\n{print} '¬°Buen trabajo! Tu puntuaci√≥n es... 'puntuaci√≥n' sobre 10!'\n```\n"
            11:
                story_text: |
                    Con `{for}` puedes simplificar programas de pr√°ctica de las tablas de multiplicaci√≥n.

                    ### Ejercicio 1
                    Mejora el c√≥digo de ejemplo para que imprima una tabla de multiplicaci√≥n: <br> "1 veces 10 es 10", "2 veces 10 es 20", etc.

                    ### Ejercicio 2
                    Vuelve al c√≥digo de multiplicaci√≥n del nivel 10, y modif√≠calo para que use un `{for}` y `{range}`.
                example_code: |
                    ```
                    n√∫mero = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * n√∫mero
                    ```
            12:
                story_text: |
                    En este nivel puedes hacer una calculadora que funcione para n√∫meros decimales.

                    ### Ejercicio 1
                    Rellena los huecos en blanco para completar la calculadora. Recuerda usar un punto y no una coma para los n√∫meros decimales.

                    ### Ejercicio 2
                    Crea un nuevo programa de pr√°ctica de matem√°ticas, pero ahora usa n√∫meros decimales.
                    Crea una lista de n√∫meros, elige dos a multiplicar y deja que el jugador responda.
                    ¬°Y por supuesto tienes que validar la respuesta! **Extra** Aumenta la dificultad a√±adiendo vidas: Un jugador pierde una vida por cada respuesta incorrecta y tras fallar tres respuestas el juego termina.
                example_code: |
                    ```
                    n√∫mero1 = {ask} '¬øCu√°l es el primer n√∫mero?'
                    n√∫mero2 = {ask} '¬øCu√°l es el segundo n√∫mero?'
                    respuesta = _
                    {print} n√∫mero1 ' m√°s ' n√∫mero2 ' es ' respuesta
                    ```
            13:
                story_text: |
                    ### Ejercicio 1
                    Hagamos el programa de pr√°ctica un poco m√°s dif√≠cil. Ahora el jugador tiene que responder correctamente a dos preguntas. Rellena los espacios en blanco para completar el programa.

                    ### Ejercicio 2
                    A veces, los c√°lculos tienen varias respuestas correctas. Por ejemplo, 10 se puede dividir entre 5 y entre 2. As√≠ que la pregunta "¬øQu√© n√∫mero divide a 10?" se puede responder entre 2 y entre 5.
                    Pide un c√°lculo que tenga m√∫ltiples respuestas correctas, pide al jugador que te responda y determine si es correcto utilizando `{or}`.
                    Vac√≠a el campo de programaci√≥n y crea tu propia soluci√≥n.
                example_code: |
                    ```
                    respuesta1 = {ask} 'Cuanto es 10 por 7?'
                    respuesta2 = {ask} 'Cuanto es 6 por 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                example_code: |
                    ```
                    {define} calcular_nota_media
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            nota = {ask} _
                            total = total + _
                            {return} _ / 4

                    nota_media = {call} _
                    {print} 'Tu nota media es ' nota_media
                    ```
                story_text: "En esta aventura vamos a crear una calculadora que calcule tu nota media por ti. Si consigues que tu calculadora funcione, puedes avanzar a la siguiente aventura, que te permitir√° a√±adir dos funciones adicionales.\n\n### Ejercicio 1\nRellena los huecos en blanco para hacer que la calculadora funcione.\n* Empieza por la cuarta l√≠nea, a√±ade una pregunta para averiguar que nota obtuvo el alumno.\n* En la quinta l√≠nea, querr√°s calcular el total de todas las notas, as√≠ que total = total + nota.\n* Despu√©s tenemos que establecer el valor devuelto. Queremos devolver la media, as√≠ que el total dividio por la cantidad de pruebas (4).\n* Por √∫ltimo completamos el c√≥digo llamando a la funci√≥n de la l√≠nea 8.\n\n¬øLo conseguiste? ¬°Incre√≠ble! ¬øQuieres a√±adir a√∫n m√°s a tu calculadora? **¬°Esta aventura contin√∫a en la siguiente aventura!**\n"
            15:
                story_text: |
                    Puedes agregar el bucle `{while}` al jugo de la calculadora que aprendiste a hacer en el nivel anterior.
                    Esto asegura que el jugador no pueda continuar a la siguiente pregunta si se responde incorrectamente.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: "```\n{define} nueva_pregunta\n    numeros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    numero_1 = numeros {at} {random}\n    numero_2 = numeros {at} {random}\n    correcta = numero_1 * numero_2\n    respuesta = 0\n    _\n    _\n    _\n    {print} '¬°Bien hecho!'\n\n{print} 'Da 10 respuestas correctas para ganar!'\n{for} i {in} {range} 1 {to} 10\n    _\n{print} '¬°Ganaste!'\n```\n"
            10:
                example_code: "```\nnumeros = 1, 2, 3\n{for} _\n    {for} _\n        respuesta = {ask} _\n        correcta = numero_1 * numero_2\n        {if} respuesta {is} correcta\n            {print} '¬°Gran trabajo!'\n        {else}\n            {print} 'No es correcto. La respuesta correcta es ' correcta\n```\n"
                story_text: "¬°Este juego de calculadora te ayuda a practicar las tablas de multiplicaci√≥n!\n### Ejercicio\nRellena los huecos en blanco. Queremos que este programa pregunte al jugador las siguientes preguntas:\n```\n¬øCu√°nto es 1 veces 1?\n¬øCu√°nto es 1 veces 2?\n¬øCu√°nto es 1 veces 3?\n¬øCu√°nto es 2 veces 1?\n¬øCu√°nto es 2 veces 2?\n¬øCu√°nto es 2 veces 3?\n¬øCu√°nto es 3 veces 1?\n¬øCu√°nto es 3 veces 2?\n¬øCu√°nto es 3 veces 3?\n_\n```\n"
    clear_command:
        default_save_name: comando_limpiar
        description: Comando {clear}
        levels:
            4:
                story_text: |
                    ¬°Es hora de un nuevo comando! Con `{clear}` puedes borrar todo el texto de tu pantalla de salida. De esta forma puedes evitar que tu pantalla se llene demasiado de texto.
                    Atenci√≥n. Si estas usando un comando `{clear}`, puede que necesites usar un `{sleep}` encima. ¬°De lo contrario Hedy limpiar√° tu pantalla sin darte tiempo a leer como puedes ver en el ejemplo!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} '¬°SORPRESA!'
                    ```
        name: '{clear}'
    debugging:
        name: depurando
        default_save_name: depurando
        description: la aventura de la depuraci√≥n
        levels:
            1:
                story_text: |-
                    Bienvenido a la aventura de la depuraci√≥n. Depurar un c√≥digo significa deshacerse de los errores en el c√≥digo.
                    Eso significa que en estas aventuras de depuraci√≥n, te mostraremos un c√≥digo que a√∫n no funciona.
                    Tendr√°s que averiguar qu√© est√° mal y corregir los errores.

                    ### Ejercicio
                    Depura este c√≥digo. ¬°Suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} Me encanta programar
                    ¬øTambi√©n te encanta programar?
                    {echo}
                    {print} ¬øCu√°les son tus aficiones?
                    {echo} Tus aficiones son
                    ```
            2:
                story_text: |-
                    Bienvenido a una aventura de depuraci√≥n. Depurar un c√≥digo significa deshacerse de los errores en el c√≥digo.
                    Eso significa que en estas aventuras de depuraci√≥n, te daremos un c√≥digo que a√∫n no funciona.
                    Tendr√°s que averiguar qu√© est√° mal y corregir los errores.

                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado.
                    ```
                    destino {ask} ¬øA d√≥nde vas de vacaciones?
                    {print} El vuelo a dstino sale a las 3 pm.
                    {ask} ¬øHas facturado ya tu equipaje?
                    {echo}
                    {print} D√©jeme imprimirle su tarjeta de embarque.
                    {sleep}
                    ¬°Aqu√≠ tiene! ¬°Buen viaje!
                    ```
            3:
                story_text: |-
                    Bienvenido a una aventura de depuraci√≥n. Depurar un c√≥digo significa deshacerse de los errores en el c√≥digo.
                    Eso significa que en estas aventuras de depuraci√≥n, te daremos un c√≥digo que a√∫n no funciona.
                    Tendr√°s que averiguar qu√© est√° mal y corregir los errores.

                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado.
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    pelicula_escogida {is} peliculas {at} {random}
                    {print} Esta noche veremos _pel√≠culas_elegidas
                    like {ask} ¬øTe gusta esa pel√≠cula?
                    {print} Ma√±ana veremos otra.
                    {add} pel√≠cula_escogida {to_list} pel√≠culas_escogidas
                    {print} Ma√±ana veremos la pel√≠cula de ma√±ana
                    pel√≠cula_ma√±ana {is} pel√≠cula_elegida {at} {random}
                    ¬°Voy a por las palomitas! {print}
                    ```
            4:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} '¬°Bienvenido a la biblioteca online!
                    {ask} ¬øQu√© g√©nero de libros te gusta?
                    {print} Te gusta el g√©nero
                    autor {is} {ask} '¬øQui√©n es tu autor favorito?'
                    {print} 'autor es tu autor favorito'
                    {print} Hmmm... creo que deber√≠as probar... libros {at} {random}
                    ```
            5:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!
                    ```
                    {print} ¬°Bienvenido a la Piscina Hedy!
                    class {is} {ask} '¬øEst√° aqu√≠ para unirse a una clase hoy?'
                    {if} class yes
                    {print} '¬°Genial! ¬°Te apuntas a una clase!
                    {print} {else} 'No se apuntar√° a ninguna clase'.
                    discount {is} '¬øTienes un c√≥digo de descuento?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} '¬øCu√°l es su c√≥digo de descuento?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} descuento_respuesta {is} {in} cod_descuento
                    {print} 'Ser√°n $3,50'
                    Son 5,50
                    {print} '¬°Buen ba√±o!'
                    ```
            6:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: "**¬°Precauci√≥n! ¬°Hay que depurar este c√≥digo!**\n```\n{print} 'M√°quina expendedora'\nproducto_seleccionado = {ask} 'Por favor, seleccione un producto'\nproducto_1_dolar = coca-cola zumo naranja agua\nproducto_2_dolar = chocolatina, galleta, barrita de muesli\nprodcuto_3dolar = patatas fritas, cecina de vaca, pan de pl√°tano\n{if} seleccionado {is} {in} producto_1_dolar\nprecio = 1\n{if} producto_seleccionado {is} producto_2_dolar\nprecio = 2\n{else} producto_seleccionado {in} producto_3_dolar\nprecio  = 3\ncantidad_de_productos = '{ask} Cu√°ntos ' producto_seleccionado quieres llevarte?'\ntotal = precio + cantidad_de_productos\n{print} 'Ser√°ncantidad_de_product\n```\n"
            7:
                story_text: |-
                    ### Ejercicio
                    ¬°Sorpresa! Este programa parece m√°s un resultado que un c√≥digo. Y a√∫n, no queremos que solo agregues comandos `{print}` frente a cada linea.
                    ¬°Arregla este programa para convertirlo en la canci√≥n de cuna 'Brother John (Fr√®re Jaques)' usando el comando `{repeat}` por supuesto!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado!**
                    ```
                    ¬øEst√°s durmiendo?
                    ¬°Hermano John!
                    Las campanas de la ma√±ana est√°n sonando!
                    Ding, dang, dong!
                    ```
            8:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |-
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} 'Bienvenido/a a Manicuras y Pedicuras por Hedy'
                    parte_cuerpo = {ask} '¬øVas a hacerte las u√±as de las manos o de los pies? ¬øO ambos?'
                    {if} partes_cuerpo {is} ambos
                            {print} Ser√°n 25‚Ç¨'
                            precio = 25
                        {else}
                            {print} Ser√°n 18‚Ç¨'
                            precio = 18
                    color = {ask} ¬øQu√© color quieres?
                    purpurina = {ask} '¬øQuieres algo de purpurina con esto?'
                    {if} purpurina {is} s√≠
                        {print} 'Son 3‚Ç¨ extra por la purpurina'
                    precio = precio + 3
                    {else} {print} 'No purpurina' {print} 'No cobramos extra'
                    {sleep} 5
                    {print} 'Todo hecho! ¬°Ser√°n ' precio '‚Ç¨ por favor!'
                    {print} '¬°Gracias! ¬°Adi√≥s!'
                    ```
            9:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} 'Bienvenido/a a nuestra tienda de s√°ndwiches'
                    cantidad '¬øCu√°ntos s√°ndwiches quieres comprar?'
                    {repeat} cantidad {times}
                    {ask} {is} {ask} '¬øQu√© tipo de pan quieres que tenga tu sandwich?'
                    tipos_de_pan {is} blanco, trigo, centeno, ajo, sin gluten
                    {if} pan_elegido en tipos_de_pan
                    {print} '¬°Encantador!'
                    {else}
                    'Lo siento, no vendemos eso'
                    aderezo {is} {ask} '¬øQu√© tipo de aderezo quieres?'
                    salsa {is} {ask} '¬øQu√© tipo de salsa quieres?'
                    {print} Un pan_elegido con aderezo y salsa.
                    precio = cantidad * 6
                    {print} 'Ser√°n 'precio ‚Ç¨' por favor'
                    ```
            10:
                story_text: |-
                    ### Ejercicio
                    Depurar este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado!**
                    ```
                    nombres = Muad Hasan Samira Noura
                    actividades = volar una cometa, nadar, senderismo, tomar el sol
                    {for} nombre {is} nombres
                    {print} En la playa a nombre le encanta actividad {at}{random}
                    ```
            11:
                story_text: |-
                    ### Ejercicio
                    Depura este programa de calendario. Se supone que el resultado de este programa debe parecerse a una lista de fechas.
                    Por ejemplo:

                    ```
                    Calendario Hedy
                    Aqu√≠ est√°n todos los d√≠as de noviembre
                    1 de Noviembre
                    2 de noviembre
                    3 de noviembre
                    ```
                    Y as√≠ sucesivamente.

                    Ten en cuenta que tienes que probar tu c√≥digo con mucho cuidado para el mes de febrero, porque la cantidad de d√≠as de este mes cambia en los a√±os bisiestos.
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {print} 'Calendario Hedy'
                    meses_con_31_dias = Enero, Marzo, Mayo, Julio, Septiembre, Octubre, Diciembre
                    months_with_30_days = Abril, Junio, Agosto, Noviembre
                    mes = {ask} ¬øQu√© mes le gustar√≠a ver?
                    {if} mes {in} meses_con_31_d√≠as
                        d√≠as = 31
                        {if} mes {in} meses_con_30_d√≠as
                            d√≠as = 30
                    {if} mes = febrero
                        a√±os bisiestos = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        a√±o = {ask} ¬øQu√© a√±o es?
                    {if} a√±o {in} bisiestos
                        d√≠as = 29
                    {else}
                        d√≠as = 28

                    {print} 'Aqu√≠ est√°n todos los d√≠as de ' mes
                    {for} i {in} {range} 1 {to} d√≠as
                        {print} mes i
                    ```
            12:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {define} saludo
                    saludos = 'Hola', 'Hola a todos', 'Buenastardes'
                        {print} saludos {at} {random}

                    {define} tomar_pedido
                        comida = {ask} '¬øQu√© quieres comer?'
                        {print} 'Una comida'
                        bebida = '¬øQu√© quieres beber?'
                        {print} 'Una ' bebida
                        mas = {ask} '¬øQuieres algo m√°s?'
                            {if} mas {is} 'no'
                        {print} 'Muy bien'
                            {else}
                            {print} 'Y ' mas
                    {print} 'Gracias'

                    {print} 'Bienvenido a nuestro restaurante'
                    gente = {ask} '¬øCu√°nta gente hay en tu grupo esta noche?'
                    {for} i {in} {range} 0 {to} gente
                        {call} saludar_cliente
                    ```
            13:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {define} recomendacion_pelicula {with} nombre
                        peliculas_accion == 'La jungla de cristal', 'R√°pido y furioso', 'Bastardos sin gloria'
                        peliculas_amor = 'Love Actually', 'El diario de Noa', 'Titanic'
                        peliculas_humor = 'Mr Bean' 'Barbie''Deadpool'
                        peliculas_infantiles = 'Minions', 'Paddington', 'Encanto'
                        {if} nombre {is} 'Camila' {or} nombre {is} 'Manuel'
                            pelicula_recomendada = pelicula_infantil {at} {random}
                        {if} nombre {is} 'Pedro' {or} 'Gabriella'
                                estado_animo = {ask} '¬øCu√°l es tu estado de √°nimo?'
                            {if} estado_animo {is} 'acci√≥n'
                                pelicula_recomendada = peliculas_humor {at} {random}
                            {if} estado_animo {is} 'romance'
                                pelicula_recomendada = peliculas_amor
                        {if} estado_animo {is} 'humor'
                                pelicula_recomendada = peliculas_humor {at} {random}

                    {print} 'Recomendar√≠a ' pelicula_recomendada ' para ' nombre

                    nombre = {ask} '¬øQui√©n la est√° viendo?'
                    recomendacion = {ask} '¬øQuieres una recomendaci√≥n?'
                    {if} recomendaion {is} 's√≠'
                    {print} recomendacion_pelicula {with} nombre
                    {else}
                    {print} '¬°Sin problema!'
                    ```
            14:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {define} calcular_ritmo_cardiaco
                        {print} 'Presiona suavemente la punta de tus dedos en el lado del cuello'
                        {print} '(justo debajo de tu l√≠nea de mand√≠bula)'
                        {print} 'Cuenta el n√∫mero de pulsaciones que notes en 15 segundos'
                        pulsaciones == {ask} '¬øCu√°ntas pulsaciones has notado en 15 segundos?'
                        ritmo_cardiaco = pulsaciones*4
                        {print} 'Tu ritmo cardiaco es ' ritmo_cardiaco
                        {if} ritmo_cardiaco >= 60 {or} ritmo_cardiaco <= 100
                            {print} 'Tu ritmo cardiaco est√° bien'
                        {else}
                            {if} ritmo_cardiaco > 60
                                {print} 'Tu ritmo cardiaco est√° un poco bajo'
                            {if} ritmo_cardiaco < 100
                                {print} 'Tu ritmo cardiaco est√° un poco alto'
                            {print} 'Deber√≠as hablar con un profesional m√©dico'

                    medir_ritmo_cardiaco = {ask} '¬øQuieres medirte el ritmo cardiaco?'
                    {if} medir_ritmo_cardiaco = 's√≠'
                        {call} medir_ritmo_cardiaco
                    {else}
                        'sin problema'
                    ```
            15:
                story_text: |-
                    ### Ejercicio
                    Depura este cuento infantil al azar. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! Este c√≥digo necesita ser depurado.
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='caminar', 'saltar', 'montar en bici', 'conducir', 'correr'
                    locations = 'en la cima de una monta√±a', 'en el supermercado', 'a la piscina'
                    escondites = ¬´detr√°s de un √°rbol¬ª, ¬´debajo de una mesa¬ª, ¬´en una caja¬ª.
                    sonidos = ¬´una trompeta¬ª, ¬´un accidente de coche¬ª, ¬´un trueno
                    causas_del_ruido = 'un televisor', 'un ni√±o con petardos', 'un elefante m√°gico', 'un sue√±o'

                    chosen_name = nombres {at} {random}
                    chosen_verb = verbos {at} {random}
                    chosen_location = 'lugares {at} {random}'
                    chosen_sounds = ruidos {at} {random}
                    chosen_spot = hiding_spots {random}
                    chosen_causes = causes_of_noise {at} {random}

                    {print} chosen_name ' era ' verbo_elegido ' chosen_spot
                    {print} 'cuando de repente oyeron un sonido como ' sonidos {at} {random}
                    {print} chosen_name ' miraron a su alrededor, pero no pudieron descubrir de d√≥nde proced√≠a el ruido'
                    {print} chosen_name ' escondieron ' punto_elegido'
                    {print} 'Intentaron mirar alrededor, pero no pudieron ver nada desde all√≠'
                    oculto = 's√≠'
                    {while} oculto = 's√≠'
                        {print} chosen_name 'segu√≠an sin ver nada'
                    respuesta = {ask} ¬´¬øse mueve ' chosen_name ' de su escondite?
                        {if} respuesta = 's√≠'
                            oculto == 'no'
                    {print} 'chosen_name se movi√≥ de' chosen_spot
                    {print} 'Y entonces vieron que era s√≥lo' chosen_cause
                    {print} chosen_name 'se rieron y siguieron con su d√≠a'
                    {print} Fin
                    ```
            16:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                    Consejo: Aseg√∫rate que s√≥lo ves la puntuaci√≥n una vez al final.
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    pais = ['Pa√≠ses Bajos', 'Polonia', 'Turqu√≠a', 'Zimbabwe', 'Tailandia', 'Brasil', 'Per√∫', 'Australia', 'India', 'Ruman√≠a' ]
                    capitales = 'Amsterdam', 'Warsaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'Nueva Delhi', 'Bucarest'
                    puntuacion = 0
                    {for} i {in} {range} 0 {to} 10
                        respuesta = {ask} '¬øCu√°l es la capital de ' paises[i]
                        correcto = capital[i]
                        {if} respuesta = correcto
                            {print} '¬°Correcto!'
                        puntuacion = puntuacion + 1
                        {else}
                            {print} 'Incorrecto,' capitales[i] ' es la capital de ' paises[i]
                        {print} 'Has conseguido ' puntuacion ' sobre 10'

                    ```
            17:
                story_text: |-
                    ### Ejercicio
                    Depura este c√≥digo. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    {define} pedir_comida
                        aderezos = {ask} '¬øpepperoni, at√∫n, vegetal o queso?'
                        tama√±o = {ask} '¬øgrande, mediana o peque√±a?'
                        numero_de_pizzas = {ask} '¬øCu√°ntas pizzas de estas quieres?'

                        {print} 'HAS PEDIDO'
                        {print} numero_de_pizzas 'pizza ' tama√±o ' aderezos'

                    {define} pedir_bebidas
                        bebida = {ask} '¬øagua, refresco, t√© helado, limonada, caf√©?'
                        numero_de_bebidas = {ask} '¬øCu√°ntas bebidas de estas quieres?'

                        {print} 'HAS PEDIDO'
                        {print} numero_de_bebidas ' ' bebida

                    'Bienvenido/a a la pizzer√≠a Hedy'
                    mas_comida = {ask} '¬øQuieres pedir una pizza?'
                    {while} mas_comida = 's√≠'
                        {return} pedir_comida
                        mas_comida = {ask} '¬øQuieres pedir una pizza?'
                    mas_bebida = {ask} '¬øQuieres pedir alguna bebida?'
                    {while} mas_bebida == 's√≠'
                        {call} pedir_bebidas
                        mas_bebida == {ask} '¬øQuieres pedir m√°s bebidas?'


                    {print} '¬°Gracias por pedir!'
                    ```
            18:
                story_text: |-
                    ### Ejercicio
                    Depura este programa de Old MacDonald del nivel 16. ¬°Buena suerte!
                example_code: |
                    **¬°Atenci√≥n! ¬°Este c√≥digo necesita ser depurado!**
                    ```
                    animales = ['cerdo', 'perro', 'vaca']
                    sonidos = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animales[i]
                        sonido = sonidos[i]
                        {print} 'Old MacDonald ten√≠a una granja'
                        {print} '¬°E I E I O!'
                        {print} 'y en esa granja √©l ten√≠a ' animal
                        {print} '¬°E I E I O!'
                        {print} 'con un ' sonido sonido ' aqu√≠'
                        {print} 'y un ' sonido sonido ' all√≠'
                        {print} 'aqu√≠ un ' sonido
                        {print} 'all√≠ un ' sonido
                        {print} 'en todos lados un ' sonido sonido
                    ```
    default:
        name: Introducci√≥n
        description: Explicaci√≥n del nivel
        levels:
            1:
                story_text: |
                    ¬°Bienvenido a Hedy! Aqu√≠ puedes aprender a c√≥mo programar paso a paso.

                    ¬°Prueba el c√≥digo por ti mismo! El bot√≥n amarillo copia el c√≥digo de ejemplo a tu bloque de programaci√≥n.
                    Despu√©s pulsa el bot√≥n verde 'Ejecutar c√≥digo' debajo del campo de programaci√≥n para ejecutar el c√≥digo.

                    ¬øPreparado? ¬°Entonces ve a la siguiente aventura para hacer tus propios c√≥digos!
                example_code: |
                    ```
                    {print} ¬°Hola Mundo!
                    ```
            2:
                story_text: |
                    ¬°Enhorabuena! ¬°Has alcanzado el nivel 2! ¬°Espero que ya hayas hecho algunos c√≥digos incre√≠bles!
                    Quiz√°s te hayas dado cuenta que en el primer nivel el comando `{echo}` s√≥lo puede guardar un bit de informaci√≥n cada vez.
                    Por ejemplo en la aventura del restaurante, puedes imprimir lo que el cliente quiere comer, o que quiere de beber, pero no ambas en una misma frase.

                    Esos cambios en el nivel 2. En el nivel 2 aprender√°s a trabajar con variables, que te permiten guardar varias partes de informaci√≥n e imprimirlas donde quieras.
                    ¬°As√≠ que vayamos a la siguiente aventura!
                example_code: |
                    **¬°Cuidado! ¬°Este c√≥digo no funciona!**
                    En Hedy los comandos a veces cambiar√°n. `{echo}` por ejemplo s√≥lo funciona en el nivel 1. En este nivel aprender√°s una forma mejor para devolver las respuestas.
                    ```
                    {print} Bienvenido a Hedy's
                    {ask} ¬øQu√© le gustar√≠a comer?
                    {echo} As√≠ que quiere
                    {ask} ¬øqu√© le gustar√≠a beber?
                    {echo} As√≠ que quiere
                    ```
            3:
                story_text: |
                    En el nivel anterior has aprendido lo que es una variable y como puedes usarla para hacer tus aventuras m√°s interactivas.
                    Pero... ¬°eso no es lo √∫nico que puedes hacer con las variables! Tambi√©n puedes usar variables para hacer listas.
                    Incluso puedes dejar que Hedy elija una palabra al azar de una lista, ¬°lo que te permite hacer juegos de verdad!
                    ¬°Echa un vistazo a la siguiente aventura!
            4:
                story_text: |
                    En los niveles anteriores has estado practicando con las variables, pero es posible que te hayas encontrado con este problema.
                    Es posible que hayas intentado ejecutar un c√≥digo como este:

                    Por supuesto que quer√≠as imprimir

                    `My name is Sophie`

                    pero Hedy imprime

                    `My Sophie is Sophie`.

                    En este nivel, este problema se soluciona mediante el uso de comillas.
                example_code: |
                    ```
                    nombre {is} Sofia
                    {print} Mi nombre es nombre
                    ```
            5:
                story_text: |
                    En los niveles anteriores ya has aprendido a usar `{at} {random}` lo que hizo tus juegos distintos cada vez que ejecutaste el c√≥digo.
                    Pero no es muy interactivo, el jugador no tiene ning√∫n efecto en lo que ocurre en el juego.

                    En este nivel aprender√°s el comando `{if}` , que te permite dar respuestas distintas en tu programa. De esta manera, por ejemplo, puedes programa una contrase√±a secreta para tu ordenador.
                    ¬°As√≠ que vayamos a la siguiente aventura para el nuevo comando!
                example_code: |
                    ```
                    contrase√±a {is} {ask} '¬øCu√°l es la contrase√±a correcta?'
                    ```
            6:
                story_text: |
                    En el nivel anterior has practicado con `{ask}` y `{if}`. Por ejemplo puedes preguntar a los clientes qu√© les gustar√≠a comer.
                    Lo que todav√≠a no puedes hacer, es calcular el precio de la cena de todos.

                    Este nivel te permitir√° usar la suma, resta y multiplicaci√≥n en tus programas. De esta manera podr√°s calcular los precios en tu restaurante, pero tambi√©n podr√°s a√±adir un c√≥digo secreto para dar un descuento a tus amigos y familiares.
                    Otra opci√≥n en este nivel es programar tu propio juego de matem√°ticas, para que tus hermanos peque√±os practiquen sus multiplicaciones.
                    ¬°Ve a verlo por ti mismo!
                example_code: |
                    ```
                    precio_comida {is} 0
                    precio_bebida {is} 0
                    precio_total {is} 0
                    {print} 'Bienvenido a McHedy'
                    pedido {is} {ask} '¬øQu√© le gustar√≠a comer?'
                    {if} pedido {is} hamburguesa precio_comida {is} 5
                    {if} pedido {is} patatas precio_comida {is} 2
                    bebida {is} {ask} '¬øQu√© le gustar√≠a beber?'
                    {if} bebida {is} precio_bebida agua {is} 0
                    {else} precio_bebida {is} 3
                    precio_total {is} precio_comida + precio_bebida
                    {print} 'Ser√°n ' precio_total ' d√≥lares, por favor'
                    ```
            7:
                story_text: |
                    ¬°Gran trabajo! Has alcanzado el siguiente nivel, lo que significa que has practicado con `{if}` and `{else}`. Te habr√°s dado cuenta de que tus c√≥digos son cada vez m√°s extensos.
                    Por ejemplo, si quieres programar 'Feliz Cumplea√±os'.

                    Eso es mucho trabajo para b√°sicamente las mismas palabras una y otra vez. Por fortuna, en la siguiente aventura aprender√°s una soluci√≥n con el comando `{repeat}`, que te permitir√° repetir una l√≠nea de c√≥digo varias veces.
                example_code: |
                    ```
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz'
                    {print} 'cumplea√±os feliz querido Hedy'
                    {print} 'cumplea√±os feliz'
                    ```
            8:
                story_text: |
                    Ahora has aprendido a como repetir una √∫nica l√≠nea de c√≥digo. Esto es √∫til, pero no siempre es suficiente. A veces quieres repetir varias l√≠neas de una vez.
                    Este nivel te permite agrupar un par de l√≠neas de c√≥digo, ¬°y repetir ese peque√±o grupo de l√≠neas de una vez!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} '¬°En la siguiente aventura puedes repetir varias l√≠neas de c√≥digo a la vez!'
                    ```
            9:
                story_text: |
                    ¬°Buen trabajo! ¬°Has alcanzado otro nuevo nivel! En el nivel anterior aprendiste a usar varias l√≠neas de c√≥digo en un comando `{if}` o `{repeat}`. Pero todav√≠a no puedes combinar los dos...
                    ¬°Buenas noticias! En este nivel se te permitir√° poner un `{if}` dentro de otro `{if}`, o dentro de un comando `{repeat}`. Poner un bloque de c√≥digo dentro de otro bloque se llama anidaci√≥n. Poner un bloque de c√≥digo dentro de otro bloque se llama anidaci√≥n.
                example_code: |
                    ```
                    respuesta = {ask} "¬øEst√°s preparado para aprender algo nuevo?"
                    {if} respuesta {is} S√≠
                        {print} '¬°Genial! Puedes aprender a usar el comando repeat en el comando if!'
                        {print} '¬°Hurra!'
                        {print} '¬°Hurra!'
                        {print} '¬°Hurra!'
                    {else}
                        {print} 'Quiz√°s deber√≠as practicar un poco m√°s en el nivel anterior'
            10:
                story_text: |
                    ¬°Lo est√°s haciendo genial! En el nivel anterior todav√≠a nos encontramos con un peque√±o problema. Has aprendido a repetir l√≠neas, pero ¬øy si quisieras cambiar ligeramente la l√≠nea?
                    Por ejemplo, si quieres cantar la canci√≥n 'si est√°s feliz y lo sabes'. Se parecer√≠a a algo como esto:

                    Si tambi√©n quisieras el siguiente verso 'pisa con los pies', y el siguiente, y el siguiente, tendr√≠as que cambiar por completo tu c√≥digo.
                    En este nivel aprender√°s el comando `{for}`, que te permite hacer una lista de acciones y repetir el c√≥digo con otra acci√≥n !cada vez!
                    ¬°√âchale un vistazo!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'si est√°s feliz y lo sabes aplaude con tus manos'
                    {print} 'si en verdad estas contento tu sonrisa es el reflejo'
                    {print} 'si est√°s feliz y lo sabes aplaude con tus manos'
                    ```
            11:
                story_text: |
                    Has alcanzado el nivel 11, ¬°lo est√°s haciendo genial! En los niveles superiores, Hedy se centra m√°s y m√°s en ense√±arte el lenguaje de programaci√≥n Python.
                    En Python no hay comando `{repeat}`, pero hay un comando que funciona como {repeat}.¬øTienes curiosidad de saber c√≥mo se llama `{repeat}` en el idioma Python? Aver√≠gualo r√°pidamente.
            12:
                story_text: |
                    Quiz√° hayas intentado usar n√∫meros decimales en aventura del restaurante. Si lo hiciste, te habr√°s dado cuenta que Hedy no todav√≠a los entend√≠a y siempre los redondeaba.
                    Desde este nivel en adelante puedes usar n√∫meros decimales.
                example_code: |
                    ```
                    hamburguesa = 5
                    bebida = 2
                    total = hamburguesa + bebida
                    {print} 'Has pedido una hamburguesa y una bebida'
                    {print} 'Eso cuesta ' total ' d√≥lares por favor'
                    ```
            13:
                story_text: |
                    En los niveles anteriores aprendiste c√≥mo poner dos comandos `{if}` uno dentro de otro. Esto funciona bien, pero resulta en c√≥digos extensos e inmanejables como este:

                    En este sistema tienes que poner el nombre de usuario correcto y la contrase√±a correcta.
                    En este nivel aprender√°s el comando `{and}` que har√° este c√≥digo !mucho m√°s corto y m√°s entendible!
                    ¬°Compru√©balo!
                example_code: |
                    ```
                    nombre_usuario = {ask} '¬øCu√°l es tu nombre de usuario?'
                    contrase√±a = {ask} '¬øCu√°l es tu contrase√±a?'
                    {if} nombre_usuario {is} 'Hedy'
                        {if} contrase√±a {is} 'secreta'
                            {print} '¬°Bienvenido Hedy!'
                        {else}
                            {print} 'Acceso denegado'
                    {else}
                        {print} '¬°Acceso denegado!'
                    ```
            14:
                story_text: |
                    Con el c√≥digo de ejemplo puedes calcular si has aprobado una asignatura en el colegio (por lo tanto, una nota de seis o superior).
                    Puedes ver que este c√≥digo es extremadamente ineficiente, debido al c√≥digo tan largo en la l√≠nea 5.
                    Todas las diferentes notas de 1 a 5 tuvieron que programarse por separado. Afortunadamente para ti, en este nivel aprender√°s como hacer esto sin este c√≥digo !extremadamente largo!
                example_code: |
                    ```
                    primer_curso = {ask} '¬øQu√© nota conseguiste en tu primer examen?'
                    segundo_curso = {ask} '¬øQu√© nota conseguiste en tu segundo examen?'
                    suma = primer_curso + segundo_curso
                    media_curso = suma / 2
                    {if} media_curso = 1 {or} media_curso = 2 {or} media_curso = 3 {or} media_curso = 4 {or} media_curso = 5
                        {print} '¬°Oh no! Has suspendido la asignatura...'
                    {else}
                        {print} '¬°Genial! ¬°Has aprobado la asignatura!'
                    ```
            15:
                story_text: |
                    En el juego de abajo, se ha preparado un c√≥digo para asegurarse que el jugador pueda jugar tanto como quieran...
                    Pero el c√≥digo es ineficiente y tarda mucho. Adem√°s, ¬øy si el jugador quiere jugar 101 partidas en vez de 100?
                    ¬øNo puede jugar hasta el infinito?
                    !En este nivel aprender√°s un comando que har√° todo esto mucho m√°s f√°cil!
                example_code: |
                    ```
                    juego = 'iniciado'
                    {for} i {in} {range} 1 {to} 100
                        {if} juego == 'iniciado'
                            respuesta = {ask} '¬øQuieres continuar?'
                            {if} respuesta == 'no'
                                juego == 'finalizado'
                            {if} respuesta == 'si'
                                {print} 'Ok continuemos'
                    ```
            16:
                story_text: |
                    En este nivel creceremos un poco m√°s hacia c√≥digo real de Python. Tambi√©n aprender√°s como hacer que dos listas coincidan.
                    As√≠ puedes programar un c√≥digo en el que el animal correcto coincide con el sonido correcto.
                    Porque los dos c√≥digo de abajo... !Obviamente no tienen sentido!
                example_code: |-
                    ```
                    animales = 'gallina', 'caballo', 'vaca'
                    sonidos = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animales
                        {print} 'Un ' animal ' dice ' sonidos {at} {random}
                    ```
                    Tambi√©n puedes intentar que funcione as√≠, pero....
                    ```
                    animales = 'gallina', 'caballo', 'vaca'
                    sonidos = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animales
                        {for} sonido {in} sonidos
                            {print} 'Un ' animal ' dice ' sonido
                    ```
                    Nota: Estos c√≥digos no funcionar√°n as√≠ en este nivel. Dir√≠gete a la siguiente aventura para ver qu√© partes necesitas corregir.
            17:
                story_text: |
                    Ahora vamos a cambiar un poco la indentaci√≥n. Cada vez que necesitemos una sangr√≠a, necesitaremos `:` en la l√≠nea anterior a la sangr√≠a.

                    En este nivel tambi√©n se puede utilizar un nuevo comando: `{elif}`. `{elif}` es la abreviatura de `{else} {if}` y lo necesitas cuando quieres hacer 3 (¬°o m√°s!) opciones.
                    ¬°Compru√©balo!
            18:
                story_text: |
                    ¬°Enhorabuena! Has alcanzado el √∫ltimo nivel de Hedy! El c√≥digo que has creado aqu√≠ se puede copiar a entornos reales de Python como Replit o PyCharm, ¬°y puedes continuar aprendiendo all√≠!
                    Sin embargo ten en cuenta que Python s√≥lo puede leer comando en ingl√©s, as√≠ que si has estado usando otros idiomas, ahora los tendr√°s que cambiar a ingl√©s.
        default_save_name: intro
    dice:
        name: Dados
        default_save_name: Dados
        description: Crea tu propio juego de dados
        levels:
            3:
                story_text: |
                    En el nivel 2 puedes elegir elementos de una lista. De esa manera podemos hacer que se tiren los dados.
                    Dale una mirada a los juegos de mesa que tienes en tu casa.
                    Hay en tu casa juegos que usen un dado normal (¬øo un dado especial)? Puedes crear los mismos dados con el siguiente programa.
                    Por ejemplo, los dados del juego Gusanitos, que tienen los n√∫meros del 1 al 5, y en lugar de 6, un gusanito.

                    ![Dado con n√∫meros del 1 al 5 y un gusanito en lugar del 6](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    opciones {is} 1, 2, 3, 4, 5, lombriz de tierra
                    {print} ¬°Lanzaste _ {at} {random}!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Los dados en el ejemplo de arriba son dados para un juego en espec√≠fico. ¬øPuedes hacer un dado normal?
                    ¬øU otro dado especial para un juego diferente?
                example_code_2: |
                    ```
                    opciones {is} _
                    ```
            4:
                story_text: |
                    En este nivel podemos crear dados. Pero en esta ocasi√≥n puedes intentarlo por ti mismo, sin un c√≥digo de ejemplo!

                    ### Ejercicio
                    Haz tu propio dado en este nivel.
                    Nota: Si no tienes idea de como hacer dados. Mira tus dados del nivel anterior, pero no olvides las comillas.
            5:
                story_text: |
                    Vamos a a√±adir los comandos `{if}` y `{else}` a nuestros dados!

                    ### Ejercicio
                    Completa el c√≥digo de ejemplo para que diga "Ya puedes dejar de lanzar" una vez que lances un gusano. Deber√≠a decir "Debes lanzarlo otra vez" si no has lanzado nada mas.
                    **Extra** Tal vez quieras recrear una muerte de un juego totalmente diferente. Tambi√©n esta bien! Luego haz tu propia reacci√≥n, por ejemplo, 'Si!' para 6 y 'Lastima!' para algo mas.
                example_code: "```\nopciones {is} 1, 2, 3, 4, 5, lombriz\ntirada {is} opciones {at}{random}\n{print} 'haz tirado ' opciones\n_ lanzar{is} lombriz {print} 'Puedes dejar de tirar los dados' \n_ {print} '!Debes tirar los dados otra vez!'\n```\n"
            6:
                story_text: |
                    Puedes hacer un dado de gusanito otra vez en este nivel, pero ahora tambi√©n puedes calcular cuantos puntos han sido tirados.
                    Puedes saber que el gusano cuenta como cinco puntos para los gusanitos. Ahora cada vez que lances el dado puedes calcular inmediatamente cuantos puntos haz tirado.
                    Este es el c√≥digo para calcular los puntos para un dado:

                    ### Ejercicio
                    ¬øPuedes hacer que el c√≥digo obtenga la puntuaci√≥n total por 8 dados? Para hacer eso tienes que copiar y pegar algunas l√≠neas de c√≥digo.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, lombriz
                    puntos = 0
                    tirada = opciones {at} {random}
                    {print} 't√∫ lanzaste ' tirada
                    {if} tirada {is} lombriz puntos = puntos + 5 {else} puntos = puntos + tirada
                    {print} 'esos son ' puntos ' puntos'
                    ```
                example_code_2: |
                    ¬øConseguiste calcular la puntuaci√≥n de 8 dados? Eso requiri√≥ mucho copiar y pegar, ¬øverdad? ¬°Vamos a hacerlo m√°s f√°cil en el nivel 7!
            7:
                story_text: |
                    Puedes hacer un dado otra vez en este nivel. Con el c√≥digo `{repeat}` puedes tirar f√°cilmente una mano entera de dados.

                    ### Ejercicio
                    ¬°Intenta terminar el c√≥digo de ejemplo! **Extra** Piensa en un juego que conozcas que tenga un dado y progr√°malo usando `{repeat}`.
                example_code: |
                    ```
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Ejercicio
                    ¬øTodo el mundo tarda mucho lanzando el dado? ¬°En este nivel puedes dejar que Hedy lance todos los dados a la vez!
                    Cambia los nombres por nombres de tus amigos o familia, y completa el c√≥digo.
                example_code: |
                    ```
                    jugadores = Ana, Juan, Pedro
                    opciones = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} jugador ' tir√≥ un ' opciones {at} {random}
                        {sleep}
                    ```
            15:
                example_code: "```\nopciones = 1, 2, 3, 4, 5, 6\n{print} '¬°Saca un 6 tan r√°pido como puedas!'\nlanzamientos = 0\nintentos = 0\n_\n_\n_\n_\n_\n{print} '¬°S√≠! Has sacado un 6 en ' intentos ' intentos.'\n```\n"
                story_text: "### Ejercicio\nEn este nivel puedes crear un peque√±o juego en el que tienes que lanzar un 6 tan r√°pido como sea posible.\nHemos comenzado el c√≥digo, ¬°de ti depende que el juego funcione!\n\nLo primero, a√±ade un bucle `{while}` que compruebe si se ha lanzado un 6 o no.\nSiempre y cuando no hayas tirado ya 6, lanza el dado en un n√∫mero aleatorio.\nImprime lo que el jugador haya lanzado.\nA√±ade un intento a la cantidad de intentos.\nEspera un segundo antes de lanzar otra vez, o - en el caso de lanzar un 6 - antes de que termine el juego.\n"
    dishes:
        name: ¬øPlatos?
        default_save_name: Platos
        description: Usa la computadora para ver quien ha de lavar los platos
        levels:
            3:
                story_text: |
                    ¬øTienes en tu casa discusiones interminables sobre quien ha de lavar los platos hoy, o quien tiene que limpiar la caja del gato?
                    Ahora puedes dejar que la computadora elija honestamente a quien debe hacerlo. ¬°Puedes programar esto ahora en este nivel!
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Sof√≠a
                    {print} personas {at} {random} tiene que lavar los platos
                    ```
                story_text_2: |
                    ### Ejercicio
                    Haz tu propia versi√≥n del programa. Primero haz una lista de los miembros de tu familia.
                    Luego piensa en una tarea que tenga que ser hecha, y deja que la computadora decida quien debe hacer la tarea con el comando `{at} {random}`.

                    **Extra** ¬øNo quieres lavar los platos por ti mismo? Hackea el programa quitando tu nombre de la lista con el comando `{remove}` `{from}`.
            4:
                story_text: |
                    Usando comillas puedes hacer m√°s interesante tu programa.

                    ### Ejercicio
                    Primero, rellena los espacios con los s√≠mbolos o comandos correctos para hacer que el programa de ejemplo funcione.
                    Lo entendiste? Incre√≠ble! Ahora copia tu c√≥digo del nivel anterior y haz que funcione en este nivel a√±adiendo comillas en el lugar correcto.
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Mar√≠a
                    {print} _ los platos ser√°n hechos por _
                    {sleep}
                    {print} personas {at} _
                    ```
            5:
                story_text: |
                    Usando el comando `{if}` ahora puedes hacer tu programa todav√≠a m√°s divertido. Ahora tu programa puede reaccionar de acuerdo a la elecci√≥n de quien lavar√° los platos.
                    ### Ejercicio
                    ¬øPuede hacer que tu programa imprima 'oh no' si es tu turno de lavar los platos, y '¬°s√≠!' en caso contrario?
                    ¬°No olvides las comillas!
                example_code: |
                    ```
                    personas {is} mam√°, pap√°, Emma, Sof√≠a
                    lavavajillas {is} personas {at} {random}
                    lavavajillas {is} Sof√≠a {print} _ l√°stima que tengo que lavar los platos _
                    {print} 'afortunadamente no hay platos porque' _ 'ya los est√° lavando'
                    ```
            6:
                story_text: |
                    ¬øTodo el mundo lava los platos por igual? ¬øTe parece justo? Puedes contarlo en este nivel.
                example_code: "```\npersonas = mam√°, pap√°, Emma, Mar√≠a\nemma_lava = 0\nlavaplatos = personas {at} {random}\n{print} 'El lavaplatos es ' lavaplatos\n{if} lavaplatos {is} Emma emma_lava = emma_lava + 1\n{print} 'Emma va a hacer los platos hoy ' emma_lava 'veces'\n```\n\nAhora puedes copiar las l√≠neas 3 a 5 unas cuantas veces (por ejemplo, 7 para toda la semana) para calcular para toda la semana otra vez. \n¬øPuedes hacer el c√≥digo para toda la semana?\n"
                story_text_2: |
                    Si tienes muy mala suerte, puede que el programa anterior te elija para fregar los platos durante toda la semana. ¬°Eso no es justo!
                    Para crear un sistema m√°s justo puedes utilizar el comando `{remove}` para eliminar a la persona elegida de la lista. As√≠ no tendr√°s que volver a fregar los platos hasta que todos hayan tenido su turno.

                    El Lunes y el Martes ya est√°n listos. ¬øPuedes a√±adir el resto de la semana?
                    Y... ¬øse te ocurre alguna soluci√≥n para cuando tu lista est√© vac√≠a?
                example_code_2: "```\npersonas = mam√°, pap√°, Emma, Sof√≠a\nlavavajillas = personas {at} {random}\n{print} 'El lunes los platos ser√°n lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\nlavavajillas = personas {at} {random}\n{print} 'El martes los platos ser√°n lavados por ' lavavajillas \n{remove} lavavajillas {from} personas\n```\n"
            7:
                story_text: |
                    Con `{repeat}` puedes repetir partes del c√≥digo. Puedes usarlo para calcular qui√©n va a lavar los platos por varios d√≠as!
                    ### Ejercicio
                    Usa el comando de `{repeat}` para decidir quien debe lavar los platos toda la semana. ¬°Cada espacio en blanco debe rellenarse con un comando o numero!
                    **Extra** ¬øPuedes pensar en otras tareas para la casa? Adapta el c√≥digo para que decida sobre tres tareas dom√©sticas. !No te olvides mostrar de que tareas se tratan!
                example_code: |
                    ```
                    gente = mam√°, pap√°, Emma, Sof√≠a
                    {repeat} _ _ {print} 'el lavaplatos es ' _
                    ```
            10:
                story_text: |
                    En este nivel puedes hacer un horario de lavado de platos de forma f√°cil.

                    ### Ejercicio
                    Agrega una tarea secundaria, como aspirar o planchar, y aseg√∫rate que tambi√©n est√© dividida para toda la semana.
                    <br>**Extra** El programa no es justo, puedes tener mala suerte y lavar toda la semana. ¬øC√≥mo puedes hacer el programa m√°s justo?
                example_code: |
                    ```
                    d√≠as = Lunes, Martes, Mi√©rcoles, Jueves, Viernes, S√°bado, Domingo
                    nombres = mam√°, pap√°, Emma, Sof√≠a
                    {for} d√≠a {in} d√≠as
                        {print} nombres {at} {random} ' Har√° los platos el ' d√≠a
                    ```
    elif_command:
        default_save_name: sinosi
        levels:
            17:
                story_text: |
                    En este nivel tambi√©n puedes usar un comando nuevo: `{elif}`. `{elif}` es la combinaci√≥n de las palabras clave `{else}` y `{if}` y lo necesitas cuando quieres hacer 3 (¬°o m√°s!) opciones.
                    ¬°Compru√©balo!
                example_code: |
                    ```
                    premios = ['1 mill√≥n de d√≥lares', 'una tarta de manzana', 'nada']
                    tu_premio = premios[{random}]
                    {print} 'Ganaste ' tu_premio
                    {if} tu_premio == '1 mill√≥n de d√≥lares' :
                        {print} '¬°S√≠! ¬°Eres rico!'
                    {elif} tu_premio == 'una tarta de manzana' :
                        {print} '¬°Delicioso, una tarta de manzana!'
                    {else}:
                        {print} 'M√°s suerte la pr√≥xima vez..'
                    ```
        name: '{elif}'
        description: '{elif}'
    for_command:
        default_save_name: para
        description: comando {for}
        levels:
            10:
                story_text: |-
                    ## Para
                    En este nivel aprendemos un nuevo c√≥digo llamado `{for}`. Con `{for}` puedes hacer una lista y usar todos los elementos.
                    `{for}` crea un bloque, como `{repeat}` y `{if}` as√≠ todas las l√≠neas dentro del bloque necesita empezar con 4 espacios.
                example_code: |
                    ```
                    animales = perro, gato, pez globo
                    {for} animal {in} animales
                        {print} 'Yo amo ' animal
                    ```
                story_text_2: "### Ejercicio\nCompleta este c√≥digo a√±adiendo `{for} action {in} actions` acciones en la l√≠nea 2.\n"
                example_code_2: "```\nacciones = aplaudir con tus manos, pisa con tus pies, ¬°grita Hurra!\n_\n    {repeat} 2 {times}\n        {print} 'si est√°s feliz y lo sabes, ' accion\n        {sleep} 2\n    {print} 'Si en verdad estas contento tu sonrisa es el reflejo'\n    {print} 'Si est√°s feliz y lo sabes, ' accion\n    {sleep} 3\n```\n"
            11:
                story_text: |-
                    En este nivel, a√±adimos una nueva forma del `{for}`. En niveles anteriores, usamos `{for}` con una lista, pero tambi√©n podemos usar `{for}` con n√∫meros.
                    Esto lo hacemos a√±adiendo un nombre de variable, seguido por `{in}` `{range}`. Entonces escribimos el n√∫mero en el que empezar, `{to}` y el n√∫mero en el que terminar.

                    ¬°Prueba este ejemplo a ver qu√© pasa! Otra vez en este nivel, tendr√°s que usar sangr√≠as en las l√≠neas situadas debajo de las sentencias `{for}`.
                example_code: |
                    ```
                    {for} contador {in} {range} 1 {to} 10
                        {print} contador
                    {print} 'Listos o no, all√≠ voy.'
                    ```
            17:
                story_text: |
                    Ahora vamos a cambiar la sangr√≠a un poco. Cada vez que necesitemos una sangr√≠a, necesitamos `:` en la l√≠nea antes de la sangr√≠a.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '¬°Preparado o no, all√° voy!'
                    ```
            18:
                example_code: "```\n{for} i {in} {range}(1,5):\n    {print} (i)\n```\n"
                story_text: "Por √∫ltimo, vamos a convertir `{for} i {in} {range} 1 {to} 5` en c√≥digo real de Python, como esto:\n"
        name: '{for}'
    fortune:
        name: El adivino
        default_save_name: El adivino
        description: Deja que Hedy prediga el futuro
        levels:
            1:
                story_text: |
                    ¬øAlguna vez has estado en un carnaval y un adivino ha predicho tu futuro? ¬øO alguna vez has jugado con una bola m√°gica de ocho?
                    Entonces probablemente sepas que realmente no pueden predecir tu futuro, ¬°pero sigue siendo divertido jugar!

                    ¬°En los pr√≥ximos niveles puedes aprender a crear tu propia m√°quina de la fortuna!
                    En el nivel 1 puedes comenzar f√°cil dejando que Hedy se presente como adivina y dejes que haga `{echo}` de las respuestas de los jugadores.
                    As√≠:
                example_code: |
                    ```
                    _ ¬°Hola, soy Hedy la adivina!
                    _ ¬øQui√©n eres t√∫?
                    _ D√©jame echar un vistazo a mi bola de cristal.
                    _ Veo... Veo...
                    _ Tu nombre es
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo en tu pantalla de entrada y rellena los espacios en blanco para hacer que tu c√≥digo funcione.
                    **Extra** Cambia el c√≥digo y deja que el adivino no s√≥lo prediga tu nombre, sino tambi√©n tu edad, tu equipo favorito de deporte o cualquier otra cosa sobre ti mismo.
            3:
                story_text: |
                    En los niveles anteriores has creado tu primera m√°quina de la fortuna, pero Hedy realmente no pod√≠a predecir nada, s√≥lo `{echo}`.
                    En este nivel puedes utilizar una variable y el comando `{at} {random}` para dejar que Hedy escoja una respuesta para ti. Mira este c√≥digo, por ejemplo:
                example_code: |
                    ```
                    {print} ¬°Soy Hedy el adivino!
                    pregunta {is} {ask} ¬øQu√© quieres saber?
                    {print} Esto es lo que quieres saber: pregunta
                    respuestas {is} s√≠, no, quiz√°s
                    {print} Mi bola de cristal dice...
                    {sleep} 2
                    {print} respuestas {at} {random}
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora Hedy s√≥lo puede responder si, no o quiz√°s. ¬øPuedes darle m√°s opciones a Hedy, como 'sin duda' o 'pregunta de nuevo'.
            4:
                story_text: |
                    ### Ejercicio
                    Hemos eliminado todas las comillas del c√≥digo de ejemplo, ¬øpuedes a√±adirlas en todos los lugares correctos?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia tu c√≥digo del adivino. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en los puntos correctos.
                example_code: |
                    ```
                    _ Agrega las comillas a este c√≥digo _
                    {print} ¬°Soy Hedy la adivina!
                    pregunta {is} {ask} ¬øQu√© quieres saber?
                    {print} Esta es tu pregunta:  pregunta
                    respuesta {is} s√≠, no, quiz√°s
                    {print} Mi bola de cristal dice...
                    {sleep} 2
                    {print} respuesta {at} {random}
                    ```
            5:
                story_text: |
                    ### Ejercicio
                    En este c√≥digo de ejemplo ver√°s como hacer un programa adivino que te permita inclinar las posibilidades a tu favor. Este programa de trampas siempre te dice que vas a ganar la loter√≠a, pero tus amigos nunca ganar√°n.

                    Usa esto para hacer tu propio programa, ¬°s√© creativo! Por ejemplo puedes crear un c√≥digo que prediga que:
                    * ¬°tu equipo favorito vencer√° a todos sus rivales!
                    * ¬°se elegir√° tu pel√≠cula favorita para la pel√≠cula de la noche!
                    * ¬°ganas entrada para tu espect√°culo favorito!
                    * eres el m√°s hermoso de todos, como el espejo m√°gico de Blancanieves.
                    ¬°Deja que tu imaginaci√≥n haga el trabajo!

                    Tu programa tiene que ser de al menos 10 l√≠neas de c√≥digo y tiene que tener al menos un comando `{if}` y `{else}`.
                example_code: |
                    ```
                    amigos {is} Jordan, Luc√≠a, David
                    {print} '¬°Puedo predecir si ganar√°s ma√±ana la loter√≠a!'
                    persona {is} {ask} '¬øQui√©n eres?'
                    respuesta_buena {is} ¬°Hurra! ¬°Ganaste!, ¬°Seguro que ganar√°s!, ¬°Tenemos un ganador!
                    respuesta_mala {is} ¬°Mala suerte! ¬°Int√©ntalo de nuevo!, ¬°Otra persona ganar√°, T√∫ perder√°s!
                    {if} persona {in} amigos {print} respuesta_buena {at} {random}
                    {else} {print} respuesta_mala {at} {random}
                    ```
            6:
                story_text: |
                    En este nivel puedes usar matem√°ticas para en tus predicciones de adivino. Esto te permite crear f√≥rmulas (bobas) para calcular el futuro.
                    Por ejemplo, puedes calcular cu√°n rico vas a ser o cuantos ni√±os vas a tener cuando crezcas.



                    ### Ejercicio
                    ¬øPuedes pensar en tu (boba) m√°quina adivina?
                example_code: |
                    ```
                    {print} '¬°Soy Hedy el adivino!'
                    {print} '¬°Puedo predecir cu√°ntos hijos tendr√°s cuando crezcas!'
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    hermanos = {ask} '¬øCu√°ntos hermanos tienes?'
                    altura = {ask} '¬øQu√© altura tienes en cent√≠metros?'
                    ni√±os = altura / edad
                    ni√±os = ni√±os - hermanos
                    {print} 'Tendr√°s...'
                    {sleep}
                    {print} ni√±os ' ni√±os!'
                    ```
            7:
                story_text: |
                    ### Ejercicio
                    Completa este programa que te dice si tu romance te quiere o no.
                example_code: |
                    ```
                    {print} 'Tengo una flor con p√©talos m√°gicos'
                    {print} 'Si coges los p√©talos la flor te dir√° si tu amor tambi√©n te querr√°'
                    cantidad = {ask} '¬øCu√°ntos p√©talos quieres coger?'
                    opciones = te quiere, no te quiere
                    _ _ _ _ opciones {at} {random}
                    ```
            8:
                story_text: |
                    !En el siguiente ejemplo puedes hacer que tu adivino haga varias preguntas y tambi√©n que las imprima!

                    ### Ejercicio
                    ¬øPuedes poner los comandos correctos en los huecos en blanco?
                example_code: |
                    ```
                    {print} '¬°Soy Hedy la adivina!'
                    {print} 'Puedes hacerme 3 preguntas.'
                    respuestas = s√≠, no, quiz√°s
                    _ _ _
                       pregunta = {ask} '¬øQue quieres saber?'
                       {print} pregunta
                       {sleep}
                       {print} 'Mi bola de cristal dice...' respuestas {at} {random}
                    ```
            10:
                story_text: |
                    En este nivel aprender√°s a programar el juego MACC (mansi√≥n, apartamento, caba√±a, casa). En este juego puedes predecir para todos los jugadores a la vez, cu√°l ser√° su futuro.

                    ### Ejercicio
                    Llena los huecos en blanco usando el nuevo comando que has aprendido en este nivel.
                example_code: |
                    ```
                    casas = mansi√≥n, apartamento, caba√±a, casa
                    ama = nadie, alguien de la realeza, su vecino, su verdadero amor
                    mascotas = perro, gato, elefante
                    nombres = Jenna, Ryan, Jim
                    _
                        {print} nombre ' vive en una ' casas {at} {random}
                        {print} nombre ' se casar√° con ' ama {at} {random}
                        {print} nombre ' tendr√° un ' mascotas {at} {random} ' como su mascota.'
                        {sleep}
                    ```
            12:
                story_text: "Desde el nivel 12, tendr√°s que usar comillas en las listas, antes y despu√©s de cada elemento.\n\n### Ejercicio \nA√±ade dos predicciones a la lista"
                example_code: |
                    ```
                    fortunes = 'te resbalar√°s en una c√°scara de pl√°tano', _
                    {print} 'Echar√© un vistazo a mi bola de cristal para tu futuro.'
                    {print} 'Ya veo... Ya veo...
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        name: funciones
        default_save_name: funciones
        description: funciones
        levels:
            12:
                story_text: |
                    En este nivel aprender√°s a usar **funciones**. Una funci√≥n es un bloque de c√≥digo que se puede utilizar f√°cilmente varias veces. Usar funciones nos ayuda a organizar piezas de c√≥digo que podamos usar de forma repetida. Para crear una funci√≥n, usa `{define}` que da a la funci√≥n un nombre. Luego pon todas las l√≠neas que desees en la funci√≥n en un bloque con sangr√≠a bajo la l√≠nea `{define}`.
                    Deja una l√≠nea vac√≠a en tu c√≥digo para que parezca agradable y limpio. Y ya est√°, ¬°Gran trabajo! ¬°Has creado una funci√≥n!


                    ¬°Ahora, cuando necesitemos ese bloque de c√≥digo, solo usamos <code>{call}</code> con el nombre de la funci√≥n para llamarlo! No tenemos que volver a escribir ese bloque de c√≥digo.

                    Echa un vistazo a este c√≥digo de ejemplo de un juego de Twister. La funci√≥n 'turno' contiene un bloque de c√≥digo que elige qu√© miembro debe ir donde.

                    ### Ejercicio
                    Termina este c√≥digo estableciendo las 2 variables miembro_escogido y color_escogido.
                    Luego, elige cu√°ntas veces deseas llamar a la funci√≥n para darle vueltas a la ruleta.

                    ### Ejercicio 2
                    Mejora tu c√≥digo a√±adiendo una variable llamada "personas". Utiliza la variable para dar a todos los jugadores su propio comando en el juego.
                    Por ejemplo: 'Amed, derecha en verde' o 'Jessica, pie izquierdo en amarillo'.
                example_code: |
                    ```
                    lados = 'derecha', 'izquierda'
                    miembros = 'mano', 'pie'
                    colores = 'rojo', 'azul', 'verde', 'amarillo'

                    {define} turno
                        lado_escogido = lados {at} {random}
                        miembro_escogido = miembros _
                        color_escogido = colores _
                        {print} lado_escogido' ' miembro_escogido' en ' color_escogido

                    {print} '¬°Vamos a jugar al Twister!'
                    {for} i {in} {range} 1 {to} _
                        {call} turno
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Ahora que has aprendido a usar funciones, aprender√°s a usar una funci√≥n con argumento.
                    Un **argumento** es una variable que se utiliza dentro de una funci√≥n. Y no se utiliza fuera de la funci√≥n.

                    Por ejemplo, en este c√≥digo hemos programado el primer verso de la canci√≥n 'Mi Bonnie est√° sobre el oc√©ano'.
                    En este c√≥digo de ejemplo se utiliza el argumento `lugar`. El lugar es una variable que solamente se utiliza en la funci√≥n, es un argumento.
                    Para utilizar `lugar` hemos programado la l√≠nea `{define} canci√≥n {with} lugar`.
                    Cuando se llama la funci√≥n, la computadora reemplazar√° el argumento `lugar`, con la pieza de texto despu√©s `{call} canci√≥n {with}`.

                    ### Ejercicio
                    El siguiente verso de la canci√≥n dice:

                    ```not_hedy_code
                    Anoche mientras me acostaba en mi almohada
                    Anoche mientras me acostaba en mi cama
                    Anoche mientras me acostaba en mi almohada
                    So√±√© que mi Bonnie estaba muerta.
                    ```

                    ¬øPuedes programar este verso de la misma manera que el ejemplo?
                example_code: |
                    ```
                    {define} canci√≥n {with} lugar
                        {print} 'Mi Bonnie est√° sobre el ' lugar

                    {call} canci√≥n {with} 'oceano'
                    {call} canci√≥n {with} 'mar'
                    {call} canci√≥n {with} 'oceano'
                    ```
            14:
                story_text: |
                    En los niveles anteriores aprendiste a crear funciones y usar argumentes con ellas. Otro gran uso de una funci√≥n es permitirle calcular algo por t√≠.
                    Puedes darle una operaci√≥n y te dar√° el resultado de ese c√°lculo. La respuesta se llama un **valor devuelto**.

                    Por ejemplo, en este c√≥digo la funci√≥n calcular_nuevo_precio calcular√° el precio de cualquier objeto. Te dar√° el nuevo precio como un valor devuelto.

                    ### Ejercicio
                    Completa este c√≥digo. Ya hemos creado la variable nuevo_precio por t√≠, s√≥lo necesitas establecerla.
                    Deber√≠as completar la l√≠nea de c√≥digo llamando a la funci√≥n que calcula el nuevo precio.
                example_code: |
                    ```
                    {define} calcular_nuevo_precio {with} cantidad, porcentaje
                        porcentaje = porcentaje / 100
                        cantidad_descuento = cantidad * porcentaje
                        {return} cantidad - cantidad_descuento

                    precio_anterior = {ask} '¬øQu√© precio pone en la etiqueta?'
                    descuento = {ask} '¬øQu√© porcentaje es el descuento?'

                    nuevo_precio = _ calcular_nuevo_precio {with} precio_anterior, _
                    {print} 'El nuevo precio es ' nuevo_precio ' d√≥lares'
                    ```
            18:
                story_text: "¬°Hagamos funciones al estilo de Python! Para definir una funci√≥n ya no utilizaremos:\n\n`{define} name_function {with} argument_1, argument_2:`\n\npero utilizaremos:\n\n`{def} name_function(argument_1, argument_2):`.\n\n\nSi no quieres utilizar argumentos, deja un espacio vac√≠o entre los par√©ntesis.\nPara llamar a una funci√≥n, no necesitamos el comando `{call}` nunca m√°s. Solo escribe el nombre de la funci√≥n.\n"
                example_code: "```\n{def} calcular_puntuacion(respuesta, respuesta_correcta):\n    {if} respuesta == respuesta_correcta:\n        puntuacion = 1\n    {elif} respuesta == '?':\n        puntuacion = 0\n    {else}:\n        puntuacion = -1\n    {return} puntuacion\n\nrespuesta = {input} ('¬øDonde se encuentra la Torre Eiffel?')\nrespuesta_correcta = 'Paris'\npuntuacion = calcular_puntuacion(respuesta, respuesta_correcta)\n{print} ('Tu puntuaci√≥n es... ', puntuacion)\n```\n"
    guess_my_number:
        name: Adivina mi n√∫mero
        default_save_name: adivina mi n√∫mero
        description: adivina mi n√∫mero
        levels:
            14:
                story_text: |
                    En este nivel puede programar el juego 'Adivina mi n√∫mero'

                    ### Ejercicio
                    Rellena los s√≠mbolos correctos en los huecos en blanco para hacer que el juego funcione.
                example_code: |
                    ```
                    {print} 'Adivina mi n√∫mero'
                    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    n√∫mero = n√∫meros {at} {random}
                    juego = 'empezar'
                    {for} i {in} {range} 1 {to} 10
                        {if} juego == 'empezar'
                            adivinar = {ask} '¬øQu√© n√∫mero piensas que es?'
                            {if} adivinar _ n√∫mero
                                {print} '¬°M√°s bajo!'
                            {if} adivinar _ n√∫mero
                                {print} '¬°M√°s alto!'
                            {if} adivinar _ n√∫mero
                                {print} '¬°Ganaste!'
                                juego = 'terminado'
                    ```
    harry_potter:
        description: Aventuras de Harry Potter
        levels:
            10:
                story_text: |
                    ### Ejercicio
                    Tambi√©n podemos hacer un adivino ambientado en Harry Potter. Rellena los huecos en blanco de forma que se impriman 9 l√≠neas.
                    **Extra** Cambia la tem√°tica del adivino a algo distinto, como tu libro, pel√≠cula o espect√°culo de la tele favoritos.
                example_code: |
                    ```
                    casas = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    asignaturas = pociones, defensa frente a artes oscuras, encantos, transfiguraci√≥n
                    miedos = Voldemort, ara√±as, fallar tu examen de LECHUZA
                    nombres = Harry, Ron, Hermione
                    _
                    _ {print} nombre ' pertenece a ' casas {at} {random}
                    _ {print} nombre ' es mejor en ' asignaturas {at} {random}
                    _ {print} nombre ' su gran miedo es ' miedos {at} {random}
                    ```
        name: Harry Potter
        default_save_name: Harry Potter
    haunted:
        name: La Casa Embrujada
        default_save_name: La Casa Embrujada
        description: Escapa de la casa embrujada
        levels:
            1:
                story_text: |
                    En esta aventura vas a a empezar a hacer un juego en el cual necesitas escapar de una casa embrujada escogiendo la puerta correcta.
                    Si escoges la puerta correcta vas a sobrevivir, pero sino un terrible monstruo podr√≠a...

                    En el nivel 1 vamos a empezar nuestro juego de la casa embrujada haciendo una historia de terror y preguntando al jugador que ven en la casa embrujada.
                example_code: |
                    ```
                    {print} ¬øC√≥mo llegu√© aqu√≠?
                    {print} Recuerdo que mi amigo me estaba diciendo que fu√©ramos a la mansi√≥n...
                    {print} y de repente todo se volvi√≥ negro.
                    {print} ¬øPero como termine en el suelo...?
                    {print} ¬°Mi cabeza me duele como si me hubieran golpeado con un bate de baseball!
                    {print} ¬øQu√© es ese sonido?
                    {print} Oh no! ¬°Siento que no estoy solo en esta casa!
                    {print} ¬°Necesito salir de aqu√≠!
                    {print} Hay 3 puertas...
                    {ask} ¬øCu√°l puerta deber√≠a escoger?
                    {echo} Escoge la puerta
                    {print} ‚Ä¶?
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo a tu entrada de pantalla haciendo clic en el bot√≥n amarillo.
                    Ahora completa la historia a√±adiendo al menos 5 l√≠neas de c√≥digo.
                    Recuerda que cada l√≠nea de c√≥digo empiece con un comando `{print}` .
            2:
                story_text: |
                    En esta casa embrujada puedes escoger tus monstruos con emojis. Claro que tambi√©n puedes usar palabras.
                example_code: |
                    ```
                    monstruo_1 {is} üëª
                    monstruo_2 {is} ü§°
                    monstruo_3 {is} üë∂
                    {print} Entras en la casa embrujada.
                    {print} De repente ves al monstruo_1
                    {print} Vas al otro cuarto...
                    {print} Pero ves que el monstruo_2 ¬°te est√° esperando all√≠!
                    {print} ¬°Oh no! R√°pido, ve a la cocina.
                    {print} ¬°Pero tan pronto entras all√≠ el monstruo_3 te ataca!
                    ```
                story_text_2: |
                    ### Ejercicio
                    En el ejemplo de arriba los monstruos est√°n predeterminados. De forma que cada vez que ejecutas tu c√≥digo, el resultado es el mismo.
                    ¬øPuedes agregar un comando `{ask}` para hacer que interactiva la casa embrujada y dejar que los jugadores escojan que monstruos se encuentran?
                example_code_2: |
                    ```
                    monstruo_1 {is} _
                    monstruo_2 {is} _
                    monstruo_3 {is} _
                    {print} Entras en la casa embrujada.
                    {print} De repente ves al monstruo_1
                    {print} Vas al otro cuarto...
                    {print} Pero ves que el monstruo_2 ¬°te est√° esperando all√≠!
                    {print} ¬°Oh no! R√°pido, ve a la cocina.
                    {print} ¬°Pero tan pronto entras all√≠ el monstruo_3 te ataca!
                    ```
            3:
                story_text: |
                    En los niveles anteriores hiciste la introducci√≥n al juego de la casa embrujada, pero como te habr√°s dado cuenta, la historia siempre termina en un final tenebroso.
                    En este nivel puedes hacer que tu historia sea m√°s interactiva cambiando el resultado del juego; ¬°algunas veces te comer√°n, otras veces escapar√°s!
                    ¬°Deja que Hedy decida aleatoriamente!

                    ### Ejercicio
                    Copia los c√≥digos de ejemplo y rellena los espacios ¬°para hacerlo funcionar!

                    **Extra** Esta historia es bastante sencilla, tal vez puedes asustarla m√°s a√±adiendo una historia m√°s emocionante.
                    Adem√°s ahora mismo tienes finales muy limitados, s√≥lo hay 3 opciones sobre que hay detr√°s de las puertas. ¬°Quiz√° puede pensar en m√°s monstruos para a√±adir a la lista!
                example_code: |
                    ```
                    _ ¬°Escapa de la casa embrujada!
                    _ Hay 3 puertas delante de ti‚Ä¶
                    _ _ _ ¬°Qu√© puerta eliges?
                    _ Elegiste ‚Ä¶ opci√≥n
                    monstruos _ a zombi, a vampiro, NADA DE LO QUE HAYAS ESCAPADO
                    _ Mira...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    En este nivel vas a aprender como usar comillas en tus juegos.

                    ### Ejercicio
                    ¬øPuedes hacer que tu Casa Encantada resistente al nivel 4?

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu casa embrujada. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en los lugares adecuados.
                example_code: |
                    ```
                    _ A√±ade comillas a este c√≥digo _
                    {print} ¬°Escapa de la casa encantada!
                    {print} Hay 3 puertas delante de ti‚Ä¶
                    elecci√≥n {is} {ask} ¬øQu√© puerta eliges?
                    {print} Escogiste ‚Ä¶ elecci√≥n
                    monstruo {is} un zombi, un vampiro, NADA DE LO QUE HAYAS ESCAPADO
                    {print} Ves...
                    {sleep}
                    {print} monstruo {at} {random}
                     ```
            5:
                story_text: |
                    Hasta este nivel el juego de la casa encantada siempre preguntaba al jugador que eligiera una puerta, pero como puede que te hayas dado cuenta los jugadores no necesitaban responder correctamente.
                    Si el jugador respond√≠a algo aleatorio, el juego funcionar√≠a igual y el jugador ¬°puede que hasta ganase! (pese a que no eligiese una puerta).
                    En este nivel, solo podr√°s ganar el juego si eliges la puerta que Hedy eligi√≥ de forma aleatoria.

                    ### Ejercicio
                    ¬øPuedes encontrar las cuatro palabras faltantes para completar el c√≥digo?
                example_code: |
                    ```
                    {print} '¬°Escapa de la casa encantada!'
                    {print} 'Hay tres puertas frente a ti...'
                    puertas {is} 1, 2, 3
                    monstruos {is} hombre lobo, momia, vampiro, zombi
                    puerta_elegida {is} {ask} '¬øQu√© puerta eliges?'
                    {print} 'Has elegido la puerta...' puerta_elegida
                    {sleep}
                    puerta_correcta {is} puertas {at} {random}
                    _ _ _ _ {print} '¬°Genial! ¬°Has escapado!'
                    {else} {print} '¬°O no! Te ha comido un...' monstruos {at} {random}
                    ```
            9:
                story_text: |
                    En este nivel puedes usar anidaciones, ¬°lo que te permite hacer tu casa encantada incluso m√°s interactiva!

                    ### Ejercicio
                    Ahora este juego es muy dif√≠cil de vencer, ¬ølo puedes hacer m√°s f√°cil de ganar?
                    ¬øCambias tu c√≥digo para que s√≥lo tenga una puerta incorrecta y dos correctas en vez de una correcta y dos incorrectas?
                    Consejo: Esto significa cambiar tu variable puerta_correcta a puerta_incorrecta, y cambiar el c√≥digo `{if}` y `{else}` .
                    Y claro que puedes cambiar la historia y hacerla a tu manera. ¬°Cambia los monstruos o convi√©rtelo en un concurso donde recibir√°s un regalo!
                example_code: |
                    ```
                    {print} 'Escape de la Casa Embrujada!'
                    jugador = vivo
                    puertas = 1, 2, 3
                    monstruos = zombi, vampiro, ara√±a gigante
                    {repeat} 3 {times}
                        {if} jugador {is} vivo
                            puerta_correcta {is} puertas {at} {random}
                            {print} 'Hay 3 puertas...'
                            puerta_escogida = {ask} '¬øQu√© puerta quieres escoger?'
                            {if} puerta_escogida {is} puerta_correcta
                                {print} '¬°No hay monstruos aqu√≠!'
                            {else}
                                {print} 'Te comi√≥ un ' monstruos {at} {random}
                                jugador = muerto
                        {else}
                            {print} 'JUEGO TERMINADO'
                    {if} jugador {is} vivo
                        {print} '¬°Genial! ¬°Sobreviviste!'
                    ```
            11:
                story_text: "En este nivel hemos cambiado el comando `{for}` para que podamos decirle al jugador donde est√°n. \n\n### Ejercicio 1\nCompleta el programa para que el jugador sepa en qu√© habitaci√≥n est√°n.\n\n### Ejercicio 2\nConvierte el programa en una aventura siguiendo estos pasos:\n\n1. Haz una lista de opciones (como: pelear o volar)\n2. Aseg√∫rate que el jugador puede elegir una opci√≥n con `{ask}`\n3. ¬øEs la respuesta correcta? Entonces pueden pasar al siguiente monstruo. ¬øDieron una respuesta incorrecta? H√°zselo saber con un `{print}`. \n\n**Extra** Si haces una opci√≥n incorrecta, ¬°se sigue mostrando un monstruo! ¬øC√≥mo cambiar√≠as eso?\n"
                example_code: |
                    ```
                    {print} '¬°Escapa de la Casa Encantada!'
                    monstruos = zombi, vampiro, ara√±a gigante
                    _
                        {print} '¬°Habitaci√≥n ' i
                        monstruo = monstruos {at} {random}
                    ```
            14:
                story_text: "### Ejercicio\nEn este nivel puedes utilizar los s√≠mbolos `<` y `>` para introducir vidas a tu juego.\nAseg√∫rate que el jugador pierde una vida cuando se encuentra con el monstruo equivocado y que el juego se pare si se ha quedado sin vidas.\n"
                example_code: "```\n{print} 'Escapa de la casa encantada'\nvidas = 3\npuertas = 1, 2, 3\nmonstruos = 'la bruja malvada', 'un zombi', 'un perro de 3 cabezas dormido'\n{for} i {in} {range} 1 {to} 10\n    {if} vidas _\n        puerta_buena = puerta {at} {random}\n        monstruo = monstruos {at} {random}\n        puerta_seleccionada = {ask} '¬øQu√© puerta eliges?'\n        {if} puerta_buena == puerta_seleccionada\n            {print} 'Has elegido la puerta correcta'\n        {else}\n            {print} 'Ves...' monstruo\n            {if} monstruo == 'un perro de 3 cabezas dormido'\n                {print} 'Pffieuw.... Est√° dormido'\n            {else}\n                {print} 'Pierdes una vida'\n                vidas = _\n    {else}\n        {print} 'SE ACAB√ì EL JUEGO'\n```\n"
            16:
                story_text: "### Ejercicio\nEste juego de la casa encantada utiliza la conexi√≥n entre las listas que puedes usar en este nivel.\nPor ejemplo: todas las propiedades que pertenecen al zombi son las primeras en todas las listas, la bruja las segundas y el vampiro las terceras.\n¬°Revisa el c√≥digo y rellena `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` en los huecos correctos para hacer que el c√≥digo funcione!\n"
                example_code: "```\nnumeros = [1, 2, 3]\ni = numeros[{random}]\nsugerencia = ['gru√±ir', 'una carcajada', 'aleteo de alas de murci√©lago']\nmonstruos= ['zombi', 'bruja', 'vampiro']\nmal_destino = ['Se comen tu cerebro', 'Est√°s maldecido para siempre', 'Te muerden']\nbuen_destino = ['Lanzas el jam√≥n. El zombi se distrae y empieza a com√©rselo.', 'Prendes fuego a las cortinas. La brujaThe witch huye por miedo al fuego', 'El vampiro odia el ajo y huye']\narmas = ['jam√≥n', 'mechero', 'ajo']\n{print} 'Te encuentras frente a una mansi√≥n antigua'\n{print} 'Algo no va bien aqu√≠'\n{print} 'Oyes ' _\n{print} 'Vas a explorar qu√© es'\n{print} 'Entras en la cocina y ves un mechero, un jam√≥n crudo y un ajo.'\ntu_arma = {ask} '¬øQu√© traes contigo?'\n{print} 'Con tu ' tu_arma ' entras en el sal√≥n'\n{print} 'All√≠ te encuentras un ' _\narma_necesaria = _\n{if} tu_arma == arma_necesaria\n    {print} 'Utilizas tu ' tu_arma\n    {print} _\n    {print} '¬°GANASTE!'\n{else}\n    {print} 'Es elegido el arma equivocada...'\n    {print} _\n    {print} 'FIN DEL JUEGO'\n```\n"
    if_command:
        default_save_name: comando_si
        description: Introducci√≥n al comando {if}
        levels:
            5:
                story_text: |
                    ## Si‚Ä¶ sino‚Ä¶.
                    En el nivel 4 hay algo nuevo, !`{if}`! Con `{if}` puedes elegir entre dos opciones diferentes.
                    Este c√≥digo imprime genial si pones Hedy como nombre, y boo! si pones cualquier otra cosa.
                    `{ask}` y `{print}` todav√≠a funcionan como hicieron en el nivel 4.
                example_code: |
                    ```
                    nombre {is} {ask} '¬øc√≥mo te llamas?'
                    {if} nombre {is} Hedy {print} 'genial' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    A veces el c√≥digo con un `{if}` se alarga mucho y no encaja bien en una l√≠nea. <br> tambi√©n puedes dividir el c√≥digo en dos l√≠neas, empezando la segunda l√≠nea en el `{else}` tal que as√≠:
                example_code_2: |
                    ```
                    nombre {is} {ask} '¬øcu√°l es tu nombre?'
                    {if} nombre {is} Hedy {print} 'genial'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Ejercicio
                    Intenta crear tu propio c√≥digo con `{if}` y `{else}`. Si quieres puedes usar el c√≥digo de ejemplo.
                example_code_3: |
                    ```
                    respuesta {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ '¬°Gran trabajo!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## Si‚Ä¶ Sino‚Ä¶
                    Has aprendido a repetir un bloque de l√≠neas de c√≥digo tras un comando `{repeat}`.
                    Ahora puedes usar la sangr√≠a para hacer bloques tras un comando `{if}` o `{else}`.
                    Comprueba el c√≥digo de ejemplo.

                    ### Ejercicio
                    A√±ade un comando `{else}` al c√≥digo de ejemplo. Haz un bloque de l√≠nea usando sangr√≠a. Haz esto empezando cada l√≠nea con 4 espacios.
                example_code: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre {is} Hedy
                        {print} 'Bienvenido Hedy'
                        {print} '¬°Puedes jugar en tu ordenador!'
                    ```
            9:
                story_text: |
                    En este nivel tambi√©n puedes poner un comando `{if}` dentro de otro comando `{if}`.
                example_code: |
                    ```
                    continuar = {ask} '¬øDeseas continuar?'
                    {if} continuar = s√≠
                        seguro = {ask} '¬øEst√°s seguro?'
                        {if} seguro {is} s√≠
                            {print} 'Continuamos'
                        {else}
                            {print} 'No est√°s seguro'
                    {else}
                        {print} 'No deseas continuar'
                    ```
        name: '{if} & {else}'
    in_command:
        default_save_name: comando_en
        description: Introducci√≥n al comando {in}
        levels:
            5:
                story_text: |
                    ## Listas
                    Cuando queremos comprobar si algo se encuentra en una lista, podemos usar el comando `{in}`.
                    Este c√≥digo imprime ¬°bonito! si eliges verde o amarillo, y meh en caso contrario.
                example_code: |
                    ```
                    colores_bonitos {is} verde, amarillo
                    color_favorito {is} {ask} '¬øCu√°l es tu color favorito?'
                    {if} color_favorito {in} colores_bonitos {print} '!bonito!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Ejercicio
                    Completa el c√≥digo de ejemplo rellenando los huecos en blanco con los comandos que aprendiste.
                    Cuando completes el c√≥digo, intenta crear por ti mismo un c√≥digo y usa una pregunta que se te haya ocurrido.
                example_code_2: |
                    ```
                    animales {is} perro, vaca, oveja
                    respuesta {is} {ask} '¬øCu√°l es tu animal preferido?'
                    _ respuesta _ animales _ '¬°Tambi√©n el m√≠o!'
                    _ _ 'Mis animales preferidos son perros, vacas y ovejas'
                    ```
        name: '{in}'
    is_command:
        default_save_name: comando_es
        description: introducci√≥n al comando {is}
        levels:
            2:
                story_text: |
                    ## Variables
                    Puedes nombrar una palabra con `{is}`. A esto se le llama **variable**. En este ejemplo creamos una variable llamada nombre y una variable llamada edad. Puedes usar la palabra nombre en cualquier parte de tu c√≥digo y ser√° reemplazada por Hedy, tal que as√≠:
                example_code: |
                    ```
                    nombre {is} Hedy
                    edad {is} 15
                    {print} nombre tiene edad a√±os
                    ```
                story_text_2: |
                    ### Ejercicio
                    ¬°Es hora de hacer tus propias variables!
                    En el c√≥digo de ejemplo hemos hecho un ejemplo de la variable `favorite_animal`. En la l√≠nea 1 la variable est√° establecida, y en la l√≠nea 2 usamos la variable en un comando `{print}`.
                    En primer lugar, terminar nuestro ejemplo rellenando su animal favorito en el blanco. Luego haga al menos 3 de estos c√≥digos usted mismo. Escoge una variable, y establece la variable con el comando `{is}`. Luego √∫sala con un comando `{print}`, tal como hicimos.
                example_code_2: |
                    ```
                    animal_favorito {is} _
                    {print} me gusta animal_favorito
                    ```
            6:
                story_text: |
                    ¬°Tambi√©n hacemos un cambio al almacenar una palabra en una variable! Ahora se puede utilizar `=` en lugar de `{is}` cuando almacenamos un nombre o un n√∫mero en una variable, as√≠:
                example_code: |
                    ```
                    nombre = Hedy
                    respuesta = 20 + 4
                    ```
            14:
                story_text: |
                    Vamos a aprender m√°s cosas nuevas. Quiz√° ya las conozcas de matem√°ticas, el `<` y `>`.
                    El `<` comprueba si el primer n√∫mero es menor que el segundo, por ejemplo edad `<` 12 comprueba si edad es menor que 12.
                    Si quieres comprobar si el primer n√∫mero es menor o igual que el segundo, puedes usar `<=`, por ejemplo edad `<=` 11.
                    El `>` comprueba si el primer n√∫mero es mayor que el segundo, por ejemplo puntos `>` 10 comprueba si puntos es mayor que 10.
                    Si quieres comprobar si el primer n√∫mero es mayor o igual que el segundo, puedes usar `>=`, por ejemplo puntos `>=` 11.
                    Usa estas comparaciones en un `{if}`, tal que as√≠:
                example_code: |
                    ```
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {if} edad > 12
                        {print} '¬°Eres mayor que yo!'
                    ```
                    ```
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {if} edad  < 12
                        {print} '¬°Eres m√°s joven que yo!'
                    {else}
                        {print} 'Eres mayor que yo!'
                    ```
                story_text_2: |
                    A partir de este nivel, si quieres comparar exactamente, puedes usar dos signos de igualdad. Esto es lo que hacen la mayor√≠a de los lenguajes de programaci√≥n:
                example_code_2: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre == 'Hedy'
                        {print} '¬°C√≥mo molas!'
                    ```
                story_text_3: |
                    Tambi√©n puedes comparar si algo *no* es igual a otra cosa usando `!=` tal que as√≠:
                example_code_3: |
                    ```
                    nombre = {ask} '¬øC√≥mo te llamas?'
                    {if} nombre != 'Hedy'
                        {print} 'Tu no eres Hedy'
                    ```
        name: '{is}'
    language:
        name: Idioma
        default_save_name: Idioma
        description: Practica palabras en otro idioma
        levels:
            5:
                story_text: |
                    Haz tu propio programa para practicar tu vocabulario en un nuevo idioma.

                    ### Ejercicio
                    Haz tu c√≥digo m√°s largo a√±adiendo al menos 3 palabras m√°s para que las aprenda el jugador.
                    **Extra** Por supuesto, puedes elegir un idioma distinto al franc√©s. Puedes cambiar tu c√≥digo a cualquier idioma que te gustar√≠a aprender.
                example_code: |
                    ```
                    {print} '¬°Aprende Franc√©s!'
                    gato {is} {ask} 'üê±'
                    {if} gato {is} chat {print} '¬°Muy bien!'
                    {else} {print} 'No, gato es chat'
                    rana {is} {ask} 'üê∏'
                    {if} rana {is} granillo {print} '¬°Guau! ¬°Genial!'
                    {else} {print} 'No, rana es granillo'
                    ```
            16:
                example_code: |
                    ```
                    palabras_francesas = ['bonjour', 'ordinateur', 'pomme de terre']
                    traducci√≥n = ['hola', 'computadora', 'papa']
                    puntuaci√≥n = 0
                    {for} i {in} {range} 1 {to} 3
                        respuesta = {ask} '¬øQu√© significa ' palabras_francesas[i] '?'
                        correcta = traducci√≥n[i]
                        {if} respuesta == correcta
                            {print} '¬°Correcto!'
                            puntuaci√≥n = puntuaci√≥n + 1
                        {else}
                            {print} 'No, ' palabras_francesas[i] ' significa ' traducci√≥n[i]
                    {print} 'Tuviste ' puntuaci√≥n ' respuestas correctas.'
                    ```
                story_text: "### Ejercicio\nEcha un vistazo al c√≥digo de ejemplo. Este es un programa para practicar vocabulario en franc√©s. Ahora haz tu propio programa para practicar tu vocabulario en tu nuevo idioma.\nSi no sabes ning√∫n otro idioma, puedes utilizar el traductor de Google o puedes utilizar emojis y tu idioma materno.\n"
    maths:
        name: c√°lculos
        default_save_name: c√°lculos
        description: Introducci√≥n a c√°lculos
        levels:
            6:
                story_text: |
                    En este nivel aprender√°s algo nuevo: ahora tambi√©n puedes calcular.

                    La suma es f√°cil, se escribe como en matem√°ticas: `5 + 5` por ejemplo. La resta funciona igual, es `5 - 5`.

                    La multiplicaci√≥n es un poco diferente, porque no hay s√≠mbolo de multiplicar en tu teclado. S√≥lo busca, ¬°no hay realmente!
                    Eso es por lo que multiplicamos con el asterisco cerca de la tecla ENTER: `5 * 5`. L√©elo como "5 veces 5" para recordarlo mejor.
                example_code: |
                    ```
                    {print} '5 m√°s 5 es ' 5 + 5
                    {print} '5 menos 5 es ' 5 - 5
                    {print} '5 veces 5 es ' 5 * 5
                    {print} '5 dividido por 5 es ' 5 / 5
                    ```
            12:
                story_text: |-
                    **N√∫meros decimales**
                    Hasta ahora, Hedy no permit√≠a n√∫meros decimales como 1.5, pero ahora permitimos eso. Ten en cuenta que los ordenadores usan el `.` para los n√∫meros decimales.
                example_code: |
                    ```
                    {print} 'Dos y media m√°s dos y medio es...'
                    {print} 2.5 + 2.5
                    ```
                example_code_2: |
                    ```
                    a = '¬°Hola '
                    b = 'mundo!'
                    {print} a + b
                    ```
                story_text_2: "**C√°lculos con palabras**\nEn este nivel tambi√©n puedes hacer sumas con palabras tal que as√≠:"
    music:
        name: m√∫sica
        default_save_name: m√∫sica
        description: ¬°Toca una nota!
        levels:
            2:
                story_text: |
                    ### Exercise
                    ¬°Termina las canciones! Hemos empezado los c√≥digos para algunas melod√≠as.
                example_code: |
                    ```
                    {print} El viejo Mac Donald ten√≠a una granja
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: Como ves, tambi√©n puedes usar el comando `{sleep}` para a√±adir una peque√±a pausa en la canci√≥n.
                example_code_2: |
                    ```
                    {print} Brilla Brilla Estrellita
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Crea una melod√≠a al azar!

                    ### Ejercicio
                    El codigo de ejemplo crea una melod√≠a al azar, pero es bastante corta y no usa muchas notas.
                    Agrega m√°s notas a la lista y crea una melod√≠a m√°s larga copiando la √∫ltima linea un par de veces m√°s.
                example_code: |
                    ```
                    notas {is} A4, B4, C4
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    ```
            4:
                example_code: |
                    ```
                    {print} 'Mary ten√≠a un corderito'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Corderito, corderito'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary ten√≠a un corderito'
                    {play} E
                    ```
                story_text: "¬°Utiliza el comando `{clear}` para crear una m√°quina de karaoke!\n\n### Ejercicio\nCompleta la versi√≥n de karaoke de 'Mary ten√≠a una ovejita'.\nDespu√©s, ¬°crea una versi√≥n de karaoke de cualquier canci√≥n que te gustar√≠a!\n"
            5:
                story_text: |
                    No siempre tienes que usar el comando `{play}` para reproducir una canci√≥n entera, a veces solo quieres tocar una nota.
                    Por ejemplo, si quieres hacer un cuestionario, puedes tocar una nota alta feliz si la respuesta es correcta y una nota baja triste si la respuesta es incorrecta.

                    ### Ejercicio
                    Termina la primera pregunta a√±adiendo una l√≠nea de c√≥digo que reproduzca una nota C3 si se da la respuesta incorrecta.
                    Luego piensa en 3 preguntas m√°s para agregar a este cuestionario.
                example_code: |
                    ```
                    respuesta {is} {ask} '¬øCu√°l es la capital de Zimbabwe?'
                    {if} respuesta {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    n√∫mero = {ask} 'Di un n√∫mero inical entre 1 y 67'
                    {print} n√∫mero
                    {play} n√∫mero
                    n√∫mero = n√∫mero + 1
                    {print} n√∫mero
                    {play} n√∫mero
                    n√∫mero = n√∫mero + 1
                    {print} n√∫mero
                    {play} n√∫mero
                    ```
            7:
                story_text: |
                    ¬°Utilizar el comando `{repeat}` puede hacer que tus c√≥digos para melod√≠as sean mucho m√°s cortos!

                    ### Ejercicio
                    Termina el c√≥digo de Twinkle Twinkle Little Star utilizando el comando `{repeat}`.
                    Luego vuelve a las canciones que has hecho en los niveles anteriores. ¬øPuedes acortar tambi√©n esos c√≥digos?
                example_code: |
                    ```
                    {print} 'Brilla Brilla Estrellita'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Ahora que podemos usar el comando `{repeat}` para m√∫ltiples l√≠neas, ¬°podemos hacer canciones a√∫n m√°s f√°cilmente!

                    ### Ejercicio
                    Termina la canci√≥n del Hermano Juan (Fr√®re Jacques). ¬°No olvides utilizar `{repeat}`!
                example_code: |
                    ```
                    {print} 'Hermano John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    A partir de este nivel puedes, entre otras cosas, utilizar un comando`{repeat}` dentro de otro `{repeat}`.
                    Eso hace que canciones como 'Cumplea√±os feliz' sean a√∫n m√°s cortas.

                    ### Ejercicio
                    ¬°Termina la canci√≥n!
                example_code: |
                    ```
                    primera_vez = s√≠
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} primera_vez {is} s√≠
                            {play} F
                            {play} E
                            primera_vez {is} no
                        {else}
                            _
                    ```
            14:
                example_code: |
                    ```
                    {define} alarma_incendios
                        {print} '¬°FUEGO!'
                        nota = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} nota _ 50
                                nota = nota + 5
                                {play} _
                            {else}
                                nota = 40

                    fuego = {ask} '¬øHay un incendio?'
                    {if} fuego _ 's√≠'
                        {call} alarma_incendios
                    ```
                story_text: "Puedes programar m√∫sica por diversi√≥n, pero tambi√©n puedes utilizar las notas musicales ¬°para hacer algo √∫til como una alarma de incendios!\n\n### Ejercicio\n¬°Aseg√∫rate que la alarma de incendios suena cuando hay un incendio!\n"
            12:
                example_code: "```\n{define} primera_linea\n    {play} C\n    {play} C\n    {play} G\n    {play} G\n    {play} A\n    {play} A\n    {play} G\n    {sleep}\n\n{define} segunda_linea\n    {play} F\n    {play} F\n    {play} E\n    {play} E\n    {play} D\n    {play} D\n    {play} C\n    {sleep}\n\n{define} tercera_linea\n    {play} G\n    {play} G\n    {play} F\n    {play} F\n    {play} E\n    {play} E\n    {play} D\n    {sleep}\n\n{call} _\n{call} _\n{call} _\n{call} _\n{call} _\n{call} _\n```\n"
                story_text: "'Utiliza las funciones en tus canciones! Como puedes ver en el c√≥digo de ejemplo, puedes hacer una funci√≥n por cada estrofa de Estrellita D√≥nde Est√°s. Una vez que has programado las tres primeras estrofas, todo lo que tienes que hacer es llamar a las funciones en el orden en el que quieres que suenen.\n\n### Ejercicio\nCompleta la canci√≥n Estrellita D√≥nde Est√°s.\nDespu√©s echa un vistazo a las canciones que has programado en los niveles anteriores, ¬øpuedes mejorar y acortar tambi√©n esos c√≥digos utilizando las funciones?\n"
            1:
                example_code: "```\n{play} C4\n{play} D4\n{play} E4\n{play} F4\n{play} G4\n{play} A4\n{play} B4\n{play} C5\n```"
                story_text: "¬°En este nivel aprender√°s a como utilizar el comando `{play}` para tocar una nota!\n\nEscribe `{play}` seguido de la nota que quieras tocar. La escala es C-D-E-F-G-A-B.\nComo puedes ver hay 7 letras diferentes, pero podemos tocar m√°s que solo 7 notas.\nEscribe un n√∫mero entre 0 y 9 detras de la letra para elegir la escala, por ejemplo, despu√©s de B4 viene C5.\nC0 es la nota m√°s grave que puedes tocar, B9 es la m√°s aguda.\n\n### Ejercicio\n¬°Prueba el c√≥digo de ejemplo y despu√©s juega con √©l! ¬øPuedes crear tu propia melod√≠a?\nEn el siguiente nivel aprender√°s a como tocar algunas canciones existentes."
            17:
                example_code: "```\n{define} cancion_aterradora\n    {for} i {in} {range} 1 {to} 3\n        {play} G\n    {play} E\n    {sleep} 2\n    {for} i {in} {range} 1 {to} 3\n        {play} F\n    {play} D\n\nanimo = {ask} '¬øQu√© emociones est√°s sintiendo?'\n{if} animo {is} 'miedo'\n    {call} cancion_aterradora\n{elif} _\n```\n"
                story_text: "Puedes utilizar {elif} para crear diferentes opciones.\n\n### Ejercicio\nPrimero, a√±ade los dos puntos para hacer que el c√≥digo funcione.\nDespu√©s completa el c√≥digo a√±adiendo al menos dos canciones m√°s para otros estados de √°nimo. Por ejemplo, una canci√≥n alegre y una canci√≥n furiosa.\n"
            13:
                example_code: "```\n{print} 'Yankee Doodle'\n{define} _ {with} nota_1, nota_2, nota_3\n    {play} C4\n    {play} C4\n    {play} D4\n    {play} E4\n    {play} _\n    {play} _\n    {play} _\n\n{call} linea_1 {with} 29, 31, 30\n{call} linea_1 {with} 29, 28, 0\n{call} linea_1 {with} 32, 31, 30\n\n{play} C4\n{play} B3\n{play} G3\n{play} A3\n{play} B3\n{play} C4\n{play} C4\n```\n"
                story_text: "Puedes utilizar una funci√≥n con un argumento para las canciones que tienen estrofas casi id√©nticas, pero ligeramente diferentes cada vez.\nUn ejemplo es la canci√≥n 'Yankee Doodle'. Las 4 primeras notas de las primeras estrofas son las mismas, pero cada vez van seguidas de un par de notas diferentes.\n\n### Ejercicio\n¬øPuedes completar la canci√≥n de Yankee Doodle?\n¬øPuedes pensar en otra canci√≥n para programarla de esta manera?\n"
            15:
                story_text: "**Precauci√≥n** ¬°Esta aventura puede ser extremadamente molesta!\nTambi√©n podemos utilizar el comando `{while}` para repetir una canci√≥n para siempre.\n\n### Ejercicio\nCompleta la canci√≥n interminable.\n"
                example_code: "```\n{define} cancion\n    {play} _\n\nsi_o_no = {ask} '¬øQuieres o√≠r mi canci√≥n interminable?'\n{while} si_o_no = 's√≠'\n    {call} cancion\n    {print} 'ü•≥'\n```\n"
            18:
                story_text: "### Ejercicio\n¬°Incluso en este √∫ltimo nivel de Hedy podemos hacer m√∫sica! Cuidado con toda la sintaxis que ahora es necesaria.\nEcha un buen vistazo a como se definen y se llaman las funciones en el siguiente ejemplo.\n¬°Completa la canci√≥n!\n"
                example_code: "```\n{def} linea_1():\n    {for} i {in} {range}(1, 5):\n        {play} A\n    {play} D\n    {play} F\n    {play} A\n\n{def} linea_2():\n    {for} i {in} {range}(1, 5):\n        {play} G\n    {play} C\n    {play} E\n    {play} G\n\n{def} linea_3():\n_\n\n{print} ('El marinero borracho')\n{print} ('¬øQu√© haremos con el marinero borracho?')\nlinea_1()\nlinea_2()\nlinea_3()\n{print} ('Temprano en la ma√±ana')\n```\n"
            16:
                story_text: "¬°Mejora tu c√≥digo de Viejo MacDonald!\n\n### Ejercicio\n¬°Coge tu c√≥digo de la aventura 'Canta una canci√≥n' y a√±√°dele notas musicales!\nPuedes hacer una funci√≥n por cada estrofa de la canci√≥n y llamar a esa funci√≥n despu√©s de que se imprima la estrofa.\nHemos definido la primera estrofa y la hemos llamado en el c√≥digo por ti. ¬øPuedes completar la canci√≥n completa?\n"
                example_code: "```\n{define} linea_1\n    {for} i {in} {range} 1 {to} 3\n        {play} G\n    {play} D\n    {for} i {in} {range} 1 {to} 2\n        {play} E\n    {play} D\n\nanimales = ['cerdo', 'perro', 'vaca']\nsonidos = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animales[i]\n    sonido = sonidos[i]\n    {print} 'Old MacDonald ten√≠a una granja'\n    {call} linea_1\n    {print} 'E I E I O!'\n    _\n```\n"
    parrot:
        name: Loro
        default_save_name: Loro
        description: ¬°Crea tu propia mascota loro que copiar√° lo que digas!
        levels:
            1:
                story_text: |
                    ¬°Crea tu propia mascota online, un loro que copiar√° lo que digas!
                example_code: |
                    ```
                    {print} Soy Hedy la lora
                    {ask} ¬øCu√°l es tu nombre?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Desaf√≠o
                    Copia el c√≥digo de ejemplo en tu pantalla de entrada haciendo clic al bot√≥n amarillo.
                    Haz que el p√°jaro haga una pregunta diferente. ¬°Llena los espacios en el ejemplo!
                    **Extra** Tambi√©n puedes dejar que el p√°jaro hagas mas de una pregunta . Escribe mas l√≠neas de c√≥digo debajo de tu propio c√≥digo.
                example_code_2: |
                    ```
                    {print} Soy Hedy el loro
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    En el nivel anterior has hecho un loro que repetir√° todo despu√©s de ti. En este nivel har√°s que el loro interactivo usando una variable y el comando `{ask}`.
                    Tambi√©n haremos el loro m√°s realista a√±adiendo comandos `{sleep}` despu√©s de que diga algo.
                example_code: |
                    ```
                    {print} Soy Hedy el loro
                    nombre _ _ ¬°c√≥mo te llamas?
                    {print} nombre
                    _
                    {print} graznido
                    _
                    {print} nombre
                    ```
                story_text_2: |
                    ### Ejercicio
                    Lo primero de todo, acaba la l√≠nea 2 con un comando `{is}` y un `{ask}`.
                    Despu√©s pon un comando `{sleep}` en la l√≠nea 4 y 6 para dejar al loro tranquilo durante un rato.

                    **Extra** ¬øPuedes hacer que el loro pregunte algo m√°s que tu nombre a√±adiendo m√°s l√≠neas de c√≥digo?
            3:
                story_text: |
                    Ense√±a a tu loro una nueva palabra con `{add}`.
                    ### Ejercicio
                    ¬øPuedes a√±adir el comando`{add} {to_list}` para hacer que el c√≥digo funcione?
                example_code: |
                    ```
                    palabras {is} graznido, Hedy
                    {print} ¬°Entrena a tu loro!
                    nueva_palabra {is} {ask} ¬øQu√© palabra le quieres ense√±ar?
                    _ nueva_palabra _ palabras
                    {print} üßí Di nueva_palabra, Hedy!
                    {print} ü¶ú palabras {at} {random}
                    ```
            4:
                story_text: |
                    En este nivel, tenemos que usar comillas con los comandos `{ask}` y`{print}`.
                    ### Ejercicio
                    Completa el c√≥digo poniendo comillas en los espacios.
                example_code: |
                    ```
                    palabras {is} gru√±ir, Hedy
                    {print} _ ¬°Entrena a tu loro! _
                    nueva_palabra {is} {ask} _ ¬øQu√© palabra le quieres ense√±ar? _
                    {add} nueva_palabra {to_list} palabras
                    {print} _ üßí ¬°Di _ nueva_palabra _, Hedy!_
                    {print} _ ü¶ú _ palabras {at} {random}
                    ```
            5:
                story_text: |
                    ¬°Recompensa tu loro si dice la ¬°palabra correcta!

                    ### Ejercicio
                    Finaliza el c√≥digo llenando los 4 comandos que faltan.
                example_code: |
                    ```
                    palabras {is} graznido, Hedy
                    {print} '¬°Entrena a tu lora'
                    nueva_palabra {is} {ask} '¬øQue palabra le quieres ense√±ar?'
                    {add} nueva_palabra {to_list} palabras
                    palabra_dicha {is} palabras {at} {random}
                    {print} 'üßí Di ' nueva_palabra ', Hedy!'
                    {print} 'ü¶ú ' palabra_dicha
                    _ palabra_dicha {is} nueva_palabra _ 'üßí ¬°Gran trabajo, Hedy!üç™'
                    _ _ 'üßí No, Hedy, di ' nueva_palabra
                    ```
    piggybank:
        name: Cerdito hucha
        default_save_name: Cerdito hucha
        description: ¬°Cuenta tu dinero!
        levels:
            12:
                story_text: |
                    En esta aventura aprender√°s como hacer una hucha virtual.

                    ### Ejercicio
                    Termina el c√≥digo para calcular cu√°nto dinero tienes y cuando tiempo debes ahorrar ¬°para comprar lo que quieres!
                    **Extra** ¬øQuiz√°s ya hayas ahorrado algo de dinero? R√©stalo de la cantidad que tendr√°s que ahorrar.
                example_code: |
                    ```
                    {print} '¬°La hucha virtual!'
                    deseo = {ask} '¬øQu√© quieres comprar?'
                    precio = {ask} '¬øCu√°nto cuesta?'
                    ahorrado = {ask} '¬øCu√°nto dinero tienes ahorrado?'
                    paga = {ask} '¬øCu√°nto dinero obtienes por semana?'
                    a_ahorrar = precio - ahorrado
                    semanas = a_ahorrar / paga
                    {print} 'Podr√°s comprar un ' _ ' en ' _ ' semanas.'
                    ```
            14:
                story_text: "### Ejercicio\n¬°En este nivel puedes dejar que Hedy te diga si has ahorrado suficiente dinero!\n¬°Completa el c√≥digo rellenando los huecos en blanco!\n"
                example_code: "```\n_ calcular_presupuesto {with} deseo, dinero, asignaci√≥n\n    para_ahorrar = deseo - dinero\n    semanas = para_ahorrar / asignaci√≥n\n    {if} deseo _ dinero\n        {print} '¬°Tienes que ahorrar un poco m√°s!'\n        {print} 'Necesitar√°s ' semanas ' semanas m√°s.'\n    {else}\n        {print} '¬°Genial! Tienes suficiente'\n        {print} '¬°Vayamos de compras!'\n\ndinero = {ask} '¬øCu√°nto dinero has ahorrado?'\ndeseo = {ask} '¬øCu√°nto dinero necesitas?'\nasignaci√≥n = {ask} '¬øCu√°nto dinero ahorras cada semana?'\n\n{call} _\n```\n"
    pressit:
        name: pulsaciones de teclas
        default_save_name: Presionado
        description: ¬°Intenta vincular una tecla del teclado a un comando!
        levels:
            5:
                story_text: |
                    ¬°En este nivel hay otra nueva palabra clave: `{pressed}`!
                    Con `{pressed}` puedes usar las teclas de tu teclado para controlar qu√© l√≠neas se usar√°n.

                    ### Desaf√≠o
                    Mira el ejemplo y agrega una l√≠nea m√°s de c√≥digo que reaccione al presionar una tecla.
                example_code: |
                    ```
                    {print} '¬øQuieres un final bueno (g) o malo (b)?'
                    {if} g {is} {pressed} {print} 'Vivieron felices para siempre ‚ù§'
                    {else} {print} 'El pr√≠ncipe fue comido por un hipop√≥tamo üò≠'
                    ```
                story_text_2: |
                    Tambi√©n puedes enlazar los comandos de la tortuga a teclas del teclado.

                    ### Desaf√≠o
                    Copia las l√≠neas varias veces para que as√≠ puedas hacer un dibujo m√°s grande.
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
            7:
                story_text: |
                    Ahora que ya has aprendido acerca de `{repeat}`, podemos presionar las teclas m√∫ltiples veces.
                    Puedes usarlo para hacer que la tortuga camine hacia adelante y gire.

                    ### Ejercicio
                    El c√≥digo que viste en el nivel 5 solamente comprueba la tecla una sola vez. Copia el c√≥digo de ejemplo y agr√©gale un `{repeat}`, as√≠ podr√°s presionar la tecla m√∫ltiples veces.
                    Usa este c√≥digo para dibujar algo bonito.
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
            9:
                story_text: |
                    Ahora que sabes como combinar sentencias, puedes crear una herramienta de mecanograf√≠a con `{pressed}`

                    ### Ejercicio
                    Completa el c√≥digo. Cada vez se elegir√° una letra al azar, que deber√°s pulsar. Obtienes un punto cuando presionas la tecla correcta, y una deducci√≥n de dos puntos cuando presionas una tecla equivocada.
                    **Extra** Limpia la pantalla tras cada letra, y muestra al usuario cu√°ntos puntos han obtenido.
                example_code: |
                    ```
                    puntos = 0
                    letras = a, b, c, d, e
                    {repeat} 10 {times}
                        letra = _ _ _
                        {print} 'Presiona la letra ' letra
                        {if} letra {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        default_save_name: imprimir
        description: Introducci√≥n al comando imprimir
        levels:
            1:
                story_text: |
                    ## El comando {print}
                    Puedes imprimir texto por pantalla usando el comando `{print}`.
                example_code: |
                    ```
                    {print} ¬°Hola, programador!
                    {print} ¬°Bienvenido a Hedy!
                    ```
                story_text_2: |
                    ### Ejercicio
                    En Hedy encontrar√°s ejercicios en cada aventura. Un ejercicio te permite practicar los nuevos comandos y conceptos, y te permite dar tu propio giro a los c√≥digos de ejemplo.
                    En este ejercicio ver√°s un espacio en blanco de color rosa. Tienes que rellenar algo en el lugar del espacio en blanco antes de que el c√≥digo pueda ejecutarse.

                    Rellene el comando `{print}` en el espacio en blanco y luego a√±ada cinco l√≠neas m√°s de c√≥digo. Cada l√≠nea debe comenzar con un comando `{print}`.
                    ¬°Divi√©rtete!
                example_code_2: |
                    ```
                    _ ¬°Hola!
                    ```
            18:
                story_text: |-
                    ¬°Hemos llegado a c√≥digo real de Python! Eso significa que tendremos que usar par√©ntesis con `{print}` y `{range}` de ahora en adelante.
                    Tambi√©n significa que puedes usar el c√≥digo de Hedy desde este nivel en cualquier entorno de Python mientras uses comandos en ingl√©s. Si hasta ahora no lo has hecho, puedes cambiar el interruptor en el men√∫ de comandos para hacerlo.
                example_code: |
                    ```
                    {print}('¬°Hola!')
                    {for} i {in} {range}(1, 10):
                        {print}('Esta es la l√≠nea ', i)
                    ```
                story_text_2: Si quieres imprimir m√°s de una l√≠nea, tienes que separarla por comas.
                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Hay ', temperatura, ' grados fuera')
                    ```
                    ```
                    nombre = 'Hedy'
                    {print}('Mi nombre es ', nombre)
                    ```
        name: '{print}'
    quizmaster:
        name: Presentador
        default_save_name: Presentador
        description: ¬°Haz tu propio cuestionario!
        levels:
            14:
                story_text: |
                    ### Ejercicio
                    ¬°En esta aventura puedes hacer tu propio cuestionario! Rellena los espacios vac√≠os, ¬°a√±ade m√°s preguntas y disfruta!
                    Puedes hacer un cuestionario sobre lo que quieras: una afici√≥n, tu animal favorito, tu libro favorito o ¬°cualquier otra idea que tengas!
                example_code: |
                    ```
                    {print} 'Haz tu propio cuestionario'
                    puntos_a = 0
                    puntos_b = 0
                    {print} 'Pregunta'
                    {print} 'Respuesta Opci√≥n A'
                    {print} 'Respuesta Opci√≥n A'
                    respuesta = {ask} '¬øCual es la respuesta?'
                    {if} respuesta == 'A'
                        puntos_a = puntos_a + 1
                    {if} respuesta == 'B'
                        puntos_b = puntos_b + 1
                    {print} '¬°Termin√≥ el cuestionario!'
                    {print} '¬°Veamos los resultados!'
                    {if} puntos_a > puntos_b
                        {print} '¬°Perteneces al club A!'
                    {if} puntos_b > puntos_a
                        {print} '¬°Perteneces al club B!'
                    ```
    quotation_marks:
        name: '''comillas'''
        default_save_name: comillas
        description: Introducci√≥n a las comillas
        levels:
            4:
                story_text: |
                    ## 'Comillas'
                    En el nivel 4 `{ask}` y `{print}` han cambiado.
                    Debes poner el texto que quieras imprimir entre comillas.
                    Esto es √∫til, porque puedes imprimir todas las palabras que quieras. Tambi√©n las palabras que sol√≠as almacenar algo con `{is}`.
                    La mayor√≠a de los lenguajes de programaci√≥n tambi√©n usan comillas al imprimir, as√≠ que nos estamos acercando ¬°a la programaci√≥n real!
                example_code: |
                    ```
                    {print} '¬°A partir de ahora tienes que usar las comillas!'
                    respuesta {is} {ask} '¬øQu√© tienes que usar a partir de ahora?'
                    {print} 'Tenemos que usar ' respuesta
                    ```
                story_text_2: |
                    ## Contracciones
                    Importante! Ten en cuenta que ahora que estamos usando comillas, Hedy se confundir√° cuando uses el ap√≥strofo para contracciones como I‚Äôm o What‚Äôs.
                    ¬°Aseg√∫rese de usar comillas dobles cuando se est√° utilizando un ap√≥strofe en la l√≠nea!
                    Echa un vistazo al c√≥digo de ejemplo para ver la forma incorrecta de usar ap√≥strofos.
                example_code_2: |
                    ```
                    _ Esta es la manera incorrecta de usar ap√≥strofos _
                    {print} 'I'm babysitting my sister's kids'
                    {print} '¬øQu√© es m√°s divertido que eso? '
                    _ As√≠ se resuelve el problema _
                    {print} "I'm babysitting my sister's kids"
                    {print} "¬øQu√© es m√°s divertido que eso?"
                    ``
            12:
                story_text: |
                    **Todos los textos tienen que ir entre comillas**
                    Para este nivel tambi√©n tendr√°s que usar comillas cuando almacenes un texto con `=`:
                example_code: |
                    ```
                    nombre = 'El Robot Hedy'
                    {print} 'Hola ' nombre
                    ```
                story_text_2: |
                    **Todos los objetos en las listas tambi√©n necesitan comillas**
                    Las listas son textos, as√≠ que tambi√©n necesitan comillas. Ten en cuenta que cada objeto en la lista tiene comillas.
                    Esto te permite guardar dos palabras como un objeto en la lista, por ejemplo 'Black Widow'.
                example_code_2: |
                    ```
                    superh√©roes = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superh√©roes {at} {random}
                    ```
                story_text_3: |
                    **Todos los textos tras las comparaciones `{if}` tambi√©n necesitan comillas**
                example_code_3: |
                    ```
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    {if} nombre = 'El Robot Hedy'
                        {print} '¬°Hola!'
                    ```
                story_text_4: |
                    **Los n√∫meros no necesitan comillas**
                    Para los n√∫meros, no utilizas comillas en el `=`:
                example_code_4: |
                    ```
                    puntuaci√≥n = 25
                    {print} 'Obtuviste ' puntuaci√≥n
                    ```
    random_command:
        default_save_name: comando_aleatorio
        description: introducci√≥n del comando {at} {random}
        levels:
            3:
                story_text: |
                    ## En aleatorio
                    En este nivel puedes hacer una lista usando el comando `{is}`. Puedes dejar que el ordenador elija un objeto aleatorio de esa lista. Esto se hace con `{at} {random}`.
                example_code: |
                    ```
                    animales {is} perros, gatos, canguros
                    {print} animales {at} {random}
                    ```
                story_text_2: |
                    Tambi√©n puedes usar el comando `{at} {random}` en una frase.
                example_code_2: |
                    ```
                    comida {is} s√°ndwich, trozo de pizza, ensalada, burrito
                    {print} Voy a tomar un/a comida {at} {random} para comer.
                    ```
                story_text_3: |
                    ### Ejercicio
                    Prueba el comando `{at} {random}` haciendo tu propio espect√°culo (como los de la tele) donde eliges una puerta o maleta y ¬°tendr√° un gran premio!
                    ¬øPuedes hacerlo? Ya hemos puesto las primeras l√≠neas en el c√≥digo de ejemplo.
                example_code_3: |
                    ```
                    {print} ¬°El gran espect√°culo!
                    {print} Hay 3 maletas delante tuyo...
                    elegida {is} {ask} ¬øQu√© maleta eliges?
                    premios {is} _
                    _
                    ```
            16:
                story_text_2: "Ahora que has aprendido a utilizar los corchetes en las listas, ¬°tambi√©n puedes utilizar el comando {at} {random} al estilo Python!\n¬°Simplemente escribe el nombre de tu lista con `[random]` detr√°s de ella!"
                example_code_2: "```\nfruta = ['manzana', 'pl√°tano', 'cereza']\n{print} fruta[random]\n```"
                example_code: "```\namigos = ['Ahmed', 'Ben', 'Cayden']\n{print} amigos[1] ' es el primer amigo de la lista.'\n{print} amigos[2] ' es el segundo amigo de la lista.'\n{print} amigos[3] ' es el tercer amigo de la lista.'\n#ahora emparejaremos 2 listas utilizando la variable i\nnumeros_suerte = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'El n√∫mero de la suerte de ' amigos[i] ' es ' numeros_suerte[i]\n```\n"
                story_text: "Vamos a hacer listas al estilo de Python, ¬°con corchetes alrededor de las listas! Tambi√©n mantendremos las comillas dobles alrededor de cada elemento como aprendimos en los niveles anteriores.\nUtilizamos corchetes para apuntar a un lugar de la lista. Por ejemplo: `friends[1]` es el primer nombre en la lista de amigos, como puedes ver en la primera parte del c√≥digo de ejemplo.\nLa segunda parte del c√≥digo de ejemplo muestra que tambi√©n podemos enparejar 2 listas utilizando la variable i."
        name: '{random}'
    repeat_command:
        default_save_name: comando_repetir
        description: Comando {repeat}
        levels:
            7:
                story_text: |
                    ## ¬°Repetir! ¬°Repetir! ¬°Repetir!
                    El nivel 7 a√±ade el comando `{repeat}`. `{repeat}` se puede utilizar para ejecutar una l√≠nea de c√≥digo varias veces. As√≠:

                    ### Ejercicio
                    Juega con el comando `{repeat}`. ¬øPuedes hacer la canci√≥n de cumplea√±os feliz en s√≥lo 3 l√≠neas de c√≥digo en lugar de 4 ahora?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} '¬°Hedy es divertido!'
                    ```
            8:
                story_text: |
                    ### Repetir comandos y sangr√≠a
                    En este nivel puede repetir varias l√≠neas de c√≥digo con s√≥lo 1 comando `{repeat}`.
                    Haz esto haciendo un bloque de l√≠neas que quieras repetir.
                    Las l√≠neas en este bloque necesitar√°n **sangr√≠a** .
                    Eso significa poner cuatro espacios al inicio de cada l√≠nea. Tambi√©n tendr√°s que sangrar cuando quieras crear un bloque de una sola l√≠nea.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hola a todos'
                        {print} 'Todo esto se repite 5 veces'
                    ```
            9:
                story_text: |
                    ¬°Buen trabajo! ¬°Has alcanzado otro nuevo nivel! En el nivel anterior has aprendido a utilizar m√∫ltiples l√≠neas de c√≥digo en un comando `{if}` o `{repeat}`.
                    Pero a√∫n no puedes combinar ambos...

                    Buenas noticias. En este nivel podr√°s poner un `{if}` dentro de un `{if}`, `{repeat}` dentro de un comando `{repeat}` y entre ellos.
                    ¬°Pru√©balo!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        pedido = {ask} '¬øQu√© quieres pedir?'
                        {if} pedido {is} pizza
                            {print} '¬°genial!'
                        {else}
                            {print} 'la pizza es mejor'
                    ```
        name: '{repeat}'
    repeat_command_2:
        default_save_name: comando_repetir_2
        description: '{repeat} comando 2'
        levels:
            7:
                story_text: |
                    ## Repetir con otros comandos y variables
                    Ahora has practicado el comando `{repeat}` en combinaci√≥n con el comando `{print}`, pero ¬øsab√≠as que tambi√©n puedes usar otros comandos con `{repeat}` ?
                    En este ejemplo puedes ver que `{repeat}` tambi√©n se puede usar con un comando `{ask}`, `{if}` o `{else}`.
                example_code: |
                    ```
                    {repeat} 2 {times} respuesta = {ask} '¬øSab√≠as que puedes hacer una pregunta varias veces?'
                    {if} respuesta {is} s√≠ {repeat} 2 {times} {print} '¬°Ya lo sab√≠as!'
                    {else} {repeat} 3 {times} {print} '¬°Has aprendido algo nuevo!'
                    ```
                story_text_2: |
                    Otra cosa interesante que puedes hacer con el comando `{repeat}` es usar variables para establecer las veces que algo deber√≠a repetirse. En el c√≥digo de ejemplo puedes ver que primero preguntamos a la persona qu√© edad tiene.
                    Entonces, en la l√≠nea 3, la pregunta se repite 'edad' veces. As√≠ que hemos usado la variable 'edad' con el comando `{repeat}`.
                example_code_2: |
                    ```
                    {print} '¬°Viva! ¬°Es tu cumplea√±os!'
                    edad = {ask} '¬øCu√°ntos a√±os tienes?'
                    {repeat} edad {times} {print} '¬°Hip Hip Hurra!'
                    ```
            8:
                story_text: |
                    ### ¬øEn el bloque o no?
                    En este nivel tienes que pensar con cuidado que l√≠neas de c√≥digo deben ir en el bloque y cuales no.
                    Por ejemplo: Si quieres cantar la canci√≥n *el hombre magdalena*. S√≥lo quieres que la l√≠nea con 'el hombre magdalena' se repita dos veces.
                    Esto significa que la √∫ltima l√≠nea no debe comenzar con sangr√≠a ya que no pertenece al bloque.
                    Si comienzas la √∫ltima l√≠nea con sangr√≠a la canci√≥n ser√° incorrecta.

                    ## Ejercicio
                    Cada l√≠nea en el ejemplo empieza con un espacio en blanco. Elimina los espacios en blanco e intenta averiguar qu√© l√≠nea necesita sangr√≠a y cual no para hacer la canci√≥n del hombre magdalena.
                example_code: |
                    ```
                    _ {print} '¬øConoces al hombre magdalena?'
                    _ {repeat} 2 {times}
                    _ {print} 'El hombre magdalena'
                    _ {print} '¬øConoces al hombre magdalena, que vive en la Calle Drury?'
                    ```
        name: '{repeat} 2'
    restaurant:
        name: Restaurante
        default_save_name: Restaurante
        description: Crea tu propio restaurante virtual
        levels:
            1:
                story_text: |
                    En nivel 1 puedes hacer tu propio restaurante virtual y tomar los pedidos de tus invitados.
                story_text_2: |
                    ### Ejercicio
                    Copia el c√≥digo de ejemplo en tu entrada en pantalla haciendo clic en el bot√≥n amarillo.
                    Primero, completa el comando correcto en los huecos en blanco para hacer que tu c√≥digo funcione correctamente.
                    Despu√©s a√±ade al menos 4 l√≠neas m√°s de c√≥digo al programa del restaurante.
                    Pregunta a los clientes qu√© les gustar√≠a beber y pregunta si quieren pagar en efectivo o con tarjeta.
                    Por √∫ltimo, piensa una manera adecuada de despedirte de tus clientes.
                example_code_2: |
                    ```
                    {print} Bienvenido al restaurante Hedy's
                    _ ¬øQu√© te gustar√≠a pedir?
                    {echo} As√≠ que te gustar√≠a ordenar
                    {print} ¬°Gracias por su pedido!
                    {print} ¬°Est√° en camino!
                    ```
            2:
                story_text: |
                    En el nivel 2 puedes ampliar su restaurante usando variables. En el nivel 1 Hedy s√≥lo pod√≠a `{echo}` la orden una vez y s√≥lo pod√≠a recordar lo √∫ltimo que se le pidi√≥.
                    ¬°Ahora puedes usar variables y Hedy puede recordar tanto la comida como los ingredientes!
                example_code: |
                    ```
                    {print} ¬°Bienvenido al restaurante Hedy's!
                    {print} Hoy estamos sirviendo pizza o lasa√±a.
                    comida {is} {ask} ¬øQu√© te gustar√≠a comer?
                    {print} ¬°Muy buena elecci√≥n! ¬°La comida es mi favorita!
                    cobertura {is} {ask} ¬øTe gustar√≠a carne o verduras en eso?
                    {print} ¬°La comida con cobertura est√° en camino!
                    ```
                story_text_2: |
                    ### Ejercicio
                    Copia tu propio c√≥digo del restaurante del nivel anterior a la pantalla de entrada de abajo.
                    Corrige el c√≥digo reemplazando los comandos `{ask}` y  `{echo}` y usando variables, como las que has aprendido en este nivel.

                    Ahora que tu c√≥digo funciona otra vez, es hora de a√±adir m√°s cosas.
                    Observa la √∫ltima l√≠nea de c√≥digo del ejemplo: ¬°Marchando la comida `{print}` con cobertura!
                    En esta l√≠nea se han usado 2 variables para crear un resumen de tu pedido.
                    Ahora a√±ade tu propio resumen de la comida y las bebidas pedidas por el cliente.

                    **Extra** Ahora que has aprendido a usar variables, puedes usar tantas variables como quieras en una l√≠nea de c√≥digo. ¬øPuedes a√±adir m√°s variables a tu c√≥digo, como comer aqu√≠ o para llevar, efectivo o tarjeta, con o sin pajita etc.?
            3:
                story_text: |
                    ¬øTienes problemas para decidir qu√© quieres cenar? ¬°Puedes dejar que Hedy elija por ti!
                    Simplemente agregue listas de sus favoritos (o menos favorito) comidas y Hedy puede elegir al azar su cena.
                    Tambi√©n puedes divertirte un poco, ¬°dejando que Hedy elija el precio de su cena tambi√©n! ¬øQu√© vas a conseguir?
                example_code: |
                    ```
                    platos {is} espaguetis, coles de Bruselas, hamburguesas
                    {print} ¬°Te servir√°n platos {at} {random} esta noche!
                    precio {is} 1 euro, 10 euros, 100 euros
                    {print} Ser√°n precio {at} {random} por favor.
                    ```
                story_text_2: |
                    ### Ejercicio
                    Ahora haz tu propia versi√≥n del restaurante al azar.
                    Haz t√∫ mismo una lista de entrantes, platos principales, postres, bebidas y precios.
                    Despu√©s usa los comandos `{print}` y `{at} {random}` para decirle los clientes qu√© habr√° en su men√∫ esta noche.
                example_code_2: |
                    ```
                    {print} ¬°Bienvenido a tu propio restaurante aleatorio!
                    entrantes {is} _
                    platos_principales {is} _
                    postres {is} _
                    bebidas {is} _
                    precios {is} _
                    _
                    ```
            4:
                story_text: |
                    En el restaurante tambi√©n tienes que usar las comillas cuando uses el comando `{print}` o `{ask}`.

                    ### Ejercicio
                    ¬°A√±ade las comillas a este c√≥digo para hacerlo funcionar! Ten cuidado: las variables no deben ir entre comillas.
                    Despu√©s, usa el comando `{clear}` para s√≥lo mostrar una l√≠nea cada vez en tu pantalla de salida.

                    ### Ejercicio 2
                    Vuelve al nivel anterior y copia el c√≥digo de tu restaurante. Haz que el c√≥digo funcione en este nivel a√±adiendo comillas en el lugar correcto y a√±ade varios comandos `{clear}`.
                example_code: |
                    ```
                    _ Agrega comillas a este c√≥digo_
                    {print} ¬°Bienvenido al restaurante Hedys!
                    {print} Hoy estamos sirviendo pizza o lasa√±a
                    comida {is} {ask} ¬øQu√© te gustar√≠a comer?
                    {print} ¬°Gran elecci√≥n! ¬°La comida es mi favorita!
                    cobertura {is} {ask} ¬øTe gustar√≠a carne o vegetales encima de eso?
                    {print} comida con cobertura est√° en camino!
                    bebidas {is} {ask} ¬øQu√© te gustar√≠a para beber?
                    {print} Gracias por tu orden.
                    {print} Tu comida y bebidas ya van a estar!
                    ```
            5:
                story_text: |
                    ### Ejercicio
                    El c√≥digo de ejemplo te ense√±a como podr√≠as programar que te has quedado sin una opci√≥n del men√∫ en tu restaurante.
                    Copia tu propio c√≥digo del restaurante de los niveles anteriores. Crea un problema en tu restaurante y a√±ade el c√≥digo, como el c√≥digo de ejemplo que hiciste.
                    Por ejemplo, tambi√©n puedes quedarte sin una opci√≥n del men√∫, o no aceptar tarjetas de cr√©dito, o que la m√°quina del helado est√© rota.

                    **Extra** ¬øHas programado el problema y las respuestas apropiadas? Entonces intenta a√±adir m√°s comandos `{if}` y `{else}` a tu c√≥digo.
                    ¬°Intenta a√±adir un `{if}` tras cada comando`{ask}` en tu c√≥digo para hacer el c√≥digo tan interactivo como sea posible!
                example_code: |
                    ```
                    bebidas_disponibles {is} agua, limonada, refresco de cola, zumo de naranja
                    bebida {is} {ask} '¬øQu√© quieres beber?'
                    {if} bebida {in} bebidas_disponibles {print} '¬°Una ' bebida 'de camino!'
                    {else} {print} 'Lo siento, no servimos eso'
                    ```
            6:
                story_text: |
                    En este nivel puedes usar las matem√°ticas para calcular el precio total del pedido de tus clientes, que puede hacer tu restaurante virtual m√°s realista.
                    Pero tambi√©n puedes a√±adir m√°s cosas a tu restaurante virtual, por ejemplo m√°s platos.

                    ### Ejercicio
                    Puedes a√±adir m√°s cosas a tu restaurante virtual. Por ejemplo, puedes...
                    - ¬øpreguntar cuanta gente va a venir y multiplicar el precio por esa cantidad?
                    - ¬øa√±adir otro plato?
                    - ¬øhacer un descuento cuando introduzcan un cup√≥n de descuento (secreto)?
                    - ¬øa√±adir un men√∫ infantil?
                    - ¬øpiensa en otras cosas divertidas para a√±adir?
                example_code: |
                    Puedes hacer un c√≥digo de restaurante simple, como este:
                    ```
                    {print} 'Bienvenido al restaurante Casa Hedy'
                    {print} 'Aqu√≠ est√° nuestro men√∫:'
                    {print} 'Nuestros platos principales son pizza, lasa√±a o espaguetis'
                    plato_principal = {ask} '¬øQu√© plato principal te gustar√≠a?'
                    precio = 0
                    {if} plato_principal {is} pizza precio = 10
                    {if} plato_principal {is} lasa√±a precio = 12
                    {if} plato_principal {is} espaguetis precio = 8
                    {print} 'Has pedido ' plato_principal
                    {print} 'Eso ser√° ' precio ' d√≥lares, por favor'
                    {print} '¬°Gracias, que aproveche!'
                    ```
            7:
                story_text: |
                    En este nivel aprendiste a usar el comando `{repeat}` para repetir una l√≠nea de c√≥digo un n√∫mero de veces
                    Puedes usar eso en tu restaurante para `{ask}` a varias personas qu√© les gustar√≠a ver.

                    ### Ejercicio
                    ¬øPuedes acabar el c√≥digo? Hedy necesita repetir esta pregunta tantas veces como gente haya. As√≠ que si hay 5 personas, tiene que hacer la pregunta 5 veces.
                    **Extra** Ampl√≠a tu c√≥digo con mas preguntas, por ejemplo sobre bebidas o salsas.
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Hedys!'
                    personas = {ask} '¬øCu√°ntas personas se unen a nosotros hoy?'
                    ```
            8:
                story_text: |
                    En este nivel puedes hacer tu restaurant m√°s complejo repitiendo m√∫ltiples l√≠neas de c√≥digo. As√≠:

                    ### Ejercicio
                    Este c√≥digo puede ampliarse con m√°s cosas en el men√∫, por ejemplo ofreciendo bebidas, y/o varios platos o postres. A√±ade al menos una cosa m√°s.
                    **Extra** A√±ade incluso m√°s cosas, ¬°tantas opciones como quieras!
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Casa Hedy!'
                    personas = {ask} '¬øCu√°ntas personas ser√°n hoy?'
                    {print} '¬°Genial!'
                    {repeat} personas {times}
                        comida = {ask} '¬øQue les gustar√≠a pedir?'
                        {print} comida
                    {print} '¬°Gracias por pedir!'
                    {print} '¬°Disfruten su comida!'
                    ```
            9:
                story_text: "¬°En este nivel puedes usar anidaci√≥n para hacer tu restaurant m√°s realista y divertido!\n\n### Ejercicio\nSe ha eliminado la sangr√≠a en el c√≥digo de ejemplo. \n¬øPuedes averiguar cu√°nta sangr√≠a necesita cada l√≠nea para que el c√≥digo funcione correctamente?\nSi el cliente pide pizza, Hedy no deber√≠a preguntarle al cliente qu√© salsa quiere.\n\n**Extra** Un restaurante no almacena todas las salsas. Haz una lista de las salsas disponibles y da una respuesta con cada pedido si lo vendes. <br>\n**Extra** Las pizzas tienen ingredientes. Pregunta al cliente cu√°l quieren.<br>\n**Extra** ¬øLos clientes quieren una bebida? ¬°Preg√∫ntaselo tambi√©n! <br>\n"
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Casa Hedy!'
                    personas = {ask} '¬øCu√°ntas personas se nos van a unir hoy?'
                    {print} '¬°Genial!'
                    precio = 0
                    {repeat} persona {times}
                    _ comida = {ask} '¬øQue le gustar√≠a pedir?'
                    _ {print} comida
                    _ {if} comida {is} patatas fritas
                    _ precio = precio + 3
                    _ salsa = {ask} '¬øQu√© salsa le gustar√≠a con sus patatas fritas?'
                    _ {if} salsa {is} no
                    _ {print} 'sin salsa'
                    _ {else}
                    _ precio = precio + 1
                    _ {print} 'con ' salsa
                    _ {if} comida {is} pizza
                    _ precio = precio + 4
                    {print} 'Ser√°n ' precio ' d√≥lares'
                    {print} '¬°Disfruta tu comida!'
                    ```
            10:
                story_text: |
                    En este nivel aprender√°s c√≥mo preguntar los pedidos f√°cilmente para los diferentes platos.

                    ### Ejercicio 1
                    Completa el c√≥digo con un `{ask}` en los espacios en blanco para que se le pregunte al cliente qu√© quieren comer en cada plato.
                example_code: "```\nplatos = aperitivo, principal, postre\n{for} plato {in} platos\n    {print} '¬øCu√°l es su pedido de ' platos '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Ejercicio
                    Por supuesto, ¬°tambi√©n puedes pedir para varias personas!
                    ¬øPuedes agregar la cantidad correcta de sangr√≠a a cada l√≠nea para hacer funcionar el c√≥digo correctamente?
                    Consejo: algunas l√≠neas no necesita tener sangr√≠a.
                example_code_2: |
                    ```
                    _ platos = aperitivo, plato principal, postre
                    _ nombres = Jes√∫s, G√©nesis
                    _ {for} nombre {in} nombres
                    _ {for} plato {in} platos
                    _ comida = {ask} '¬øQue te gustar√≠a ordenar como tu ' plato '?'
                    _ {print} nombre ' pedidos ' comida ' como su ' plato
                    ```
            11:
                story_text: |
                    Podemos usar el `{for}` con `{range}` para imprimir los pedidos de varios clientes de manera ordenada.

                    ### Ejercicio
                    Completa el c√≥digo del restaurante, as√≠ podr√°s preguntar el pedido a varias personas. Imprime el n√∫mero de pedido cada vez: 'Pedido 1', 'Pedido 2', etc.
                    ¬øEst√°s seguro como va esto? Echa un vistazo a tu c√≥digo del nivel 8.

                    **Extra** En el nivel 9 el restaurante tambi√©n us√≥ precios. ¬°Tambi√©n puedes a√±adir eso aqu√≠!
                example_code: |
                    ```
                    {print} '¬°Bienvenido al restaurante Hedy!'
                    personas = {ask} '¬øPara cuanta gente le gustar√≠a pedir?'
                    {print} 'As√≠ que quieres pedir para ' personas ' personas.'
                    {print} "¬°Vamos!"
                    ```
            12:
                story_text: |
                    A partir de este nivel, puedes utilizar n√∫meros decimales para que tu men√∫ sea m√°s realista.

                    ### Ejercicio
                    ¬øSe te ocurre un c√≥digo para hacer un descuento del 15% a tus amigos y familiares?
                example_code: |
                    ```
                    precio = 0.0
                    comida = {ask} '¬øQu√© te gustar√≠a pedir?'
                    bebida = {ask} '¬øQue te gustar√≠a beber?'
                    {if} comida {is} 'hamburguesa'
                        precio = precio + 6.50
                    {if} comida {is} 'pizza'
                        precio = precio + 5.75
                    {if} bebida {is} 'agua'
                        precio = precio + 1.20
                    {if} bebida {is} 'refresco'
                        precio = precio + 2.35
                    {print} 'Ser√°n ' precio ' d√≥lares, por favor'
                    ```
            13:
                story_text: |
                    En este nivel aprender√°s nuevos comandos para ampliar tu c√≥digo mucho m√°s.

                    ### Ejercicio 1
                    Coloca un `{and}` y un `{or}` en la parte l√≥gica del programa.

                    ### Ejercicio 2
                    Amplia tu restaurante con al menos un `{and}` y un `{or}` m√°s.
                    Por ejemplo, crea un cup√≥n de descuento especial que s√≥lo se aplique a la pizza, o dale una bebida gratis a tu cliente
                    con sus patatas y tortitas. ¬°O por supuesto algo completamente diferente!
                example_code: |
                    ```
                    precio = 10
                    comida = {ask} ¬øQu√© te gustar√≠a comer?
                    bebidas = {ask} ¬øQu√© quieres beber?
                    {if} comida {is} 'sandwich' _ bebida {is} 'zumo'
                        {print} 'Este es nuestro men√∫ de descuentos'
                        precio = precio - 3
                    {if} bebidas {is} 'agua' _ bebidas {is} 'zumo'
                        {print} 'Esa es una opci√≥n saludable'
                    {print} 'Eso ser√° ' precio ' d√≥lares'
                    ```
            15:
                story_text: |
                    Con el comando `{while}` puedes asegurarte que tus clientes sigan agregando ordenes hasta que gusten.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Bienvenido a McHedy'
                    m√°s = 's√≠'
                    _
                        pedido = {ask} '¬øQu√© te gustar√≠a ordenar?'
                        {print} pedido
                        m√°s = {ask} '¬øTe gustar√≠a pedir algo m√°s?'
                    {print} '¬°Gracias!'
                    ```
    rock:
        name: Piedra, papel o tijera
        default_save_name: Piedra_2
        description: Crea tu propio juego de piedra, papel y tijera
        levels:
            1:
                story_text: |
                    En el nivel 1 comenzamos el juego de piedra, papel o tijera.

                    Con `{ask}` puedes tomar una opci√≥n, y con `{echo}` puedes repetir la opci√≥n elegida.
                example_code: |
                    ```
                    {print} ¬øQu√© eliges?
                    {ask} elige piedra, papel o tijera
                    {echo} has elegido:
                    ```
                story_text_2: |
                    ### Ejercicio
                    En lugar de usar palabras, puedes tambi√©n usar emojis: ‚úä‚úã‚úå
                    ¬øPuedes hacer el c√≥digo usando emojis?
                example_code_2: |
                    ```
                    {print} ¬øQu√© escoges?
                    {ask} escoge _
                    {echo} tu elecci√≥n fue
                    ```
            2:
                story_text: |
                    En este nivel puedes practicar el uso de las variables, ¬°para poder hacer el juego de piedra, papel o tijera en el siguiente nivel!
                    ### Ejercicio
                    Termina el c√≥digo rellenando la **variable** en el espacio en blanco.
                    Este juego no es muy interactivo, ¬°pero no te preocupes! En la siguiente aventura aprender√°s a usar variables con el comando `{ask}` ¬°para hacer tu juego interactivo!
                example_code: |-
                    ```
                    opci√≥n {is} piedra
                    {print} Yo elijo _
                    ```
            3:
                story_text: |
                    ¬°Puedes usar el comando `{at} {random}` para dejar que el ordenador elija piedra, papel o tijeras!

                    ### Ejercicio
                    Completa el c√≥digo usando el comando `{at} {random}`.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijera
                    {print} opciones _
                    ```
                story_text_2: |
                    **Extra** Haz un juego de dos jugadores. Lo primero, pregunta a los dos jugadores que pongan sus nombres. Despu√©s, deja que el ordenador elija aleatoriamente sus opciones.
                example_code_2: |
                    ```
                    opciones {is} piedra, papel o tijera
                    jugador_1 {is} {ask} Nombre del jugador 1:
                    _
                    ```
            4:
                example_code: "```\nopciones {is} piedra, papel, tijeras\n{print} _El ordenador elige..._ opciones {at} {random}\n```\n"
                story_text: "En este nivel podemos seguir programando piedra, papel o tijera. Pero si quieres a√±adir texto, aqu√≠ tambi√©n tienes que usar comillas.\n### Ejercicio\nRellena los espacios en blanco con comillas. Ten en cuenta que la variable `choices` debe ir fuera de las comillas.\n"
            5:
                story_text: |
                    En este nivel podemos determinar si es un empate o no. Para ello necesitas el nuevo c√≥digo `{if}`.

                    ### Ejercicio
                    Completa el c√≥digo rellenando los huecos en blanco:
                    * Deja que el ordenador elija un opci√≥n al azar
                    * Pregunta al jugador qu√© quieren elegir
                    * Rellena las variables correctas en las l√≠neas 4 y 5
                    * Completa la l√≠nea 6 para que Hedy pueda comprobar si es un empate o no.
                example_code: |
                    ```
                    opciones {is} piedra, papel, tijeras
                    opci√≥n_ordenador {is} _
                    opci√≥n {is} _
                    {print} 'Elegiste ' _
                    {print} 'El ordenador eligi√≥ ' _
                    {if} _ {is} _ {print} '¬°empate!' {else} {print} 'no hay empate'
                    ```

                    Rellena el c√≥digo correcto en los huecos en blanco para ver si es un empate.
            9:
                story_text: "En este nivel puedes programar el juego completo de piedra, papel, tijeras anidando los comandos `{if}`. \n\n### Ejercicio\n¬øPuedes completar el c√≥digo? El programa debe decir quien ha ganado para cada combinaci√≥n.\n \n**Extra** ¬øQuieres jugar m√°s de una partida? Amplia el c√≥digo para que puedas jugar varias rondas. Incluso puedes usar un `{ask}` para preguntar al usuario cuantas rondas quieren jugar.\n"
                example_code: |
                    ```
                    opciones = piedra, papel, tijera
                    tu_opci√≥n {is} {ask} '¬øQue escoges?'
                    {print} 'Escogiste ' tu_opci√≥n
                    opci√≥n_computadora {is} opciones {at} {random}
                    {print} 'La computadora escogi√≥ ' opci√≥n_computadora
                    {if} opci√≥n_computadora {is} tu_opci√≥n
                        {print} 'Empate'
                    {if} opci√≥n_computadora {is} piedra
                        {if} tu_opci√≥n {is} papel
                            {print} '¬°Ganaste!'
                        {if} tu_opci√≥n {is} tijera
                            {print} '¬°Perdiste!'
                    # termina este c√≥digo
                    ```
            10:
                story_text: |
                    ### Ejercicio
                    En los niveles anteriores hiciste tu propio juego de piedra, papel, tijeras. ¬øPuedes completar el c√≥digo y usar el comando `{for}` adecuadamente para hacer que el juego funcione?
                example_code: |
                    ```
                    opciones = _
                    jugadores = _
                    {for} _
                    ```
            13:
                story_text: |
                    ¬°Con el comando `{and}` puedes reducir tu c√≥digo del juego de piedra, papel o tijera! Mira el ejemplo de abajo e intenta terminarlo.

                    ### Ejercicio
                    Completa tu c√≥digo de manera que siempre se elija un ganador. Ejecuta tu c√≥digo un par de veces para verificar que siempre se muestra un ganador.
                example_code: |
                    ```
                    opciones = 'piedra', 'papel', 'tijera'
                    tu_opcion = {ask} '¬øQu√© quieres escoger?'
                    opcion_computadora = opciones {at} {random}
                    {print} 'Escogiste ' tu_opcion
                    {print} 'La computadora escoge ' opcion_computadora
                    {if} opcion_computadora {is} tu_opcion
                        {print} 'Empate'
                    {if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'papel'
                        {print} 'You win!'
                    {if} opcion_computadora {is} 'piedra' {and} tu_opcion {is} 'tijera'
                        {print} '¬°La computadora gan√≥!'
                    _
                    ```
            15:
                story_text: |
                    ### Ejercicio
                    ¬°Juega hasta que le ganes a la computadora! Pero primero termina el c√≥digo de ejemplo...
                example_code: |
                    ```
                    gan√≥ = 'no'
                    opciones = 'piedra', 'papel', 'tijeras'
                    {while} gan√≥ == 'no'
                        tu_opcion = {ask} '¬øQue escoges?'
                        opcion_computadora = opciones {at} {random}
                        {print} 'Escogiste ' tu_opcion
                        {print} 'La computadora escogi√≥ ' opcion_computadora
                        {if} opcion_computadora == tu_opcion
                            {print} '¬°Empate!'
                        {if} opcion_computadora == 'roca' {and} tu_opcion == 'tijera'
                            {print} '¬°Perdiste!'
                        {if} opcion_computadora == 'roca' {and} tu_opcion == 'papel'
                            {print} '¬°Ganaste!'
                            gan√≥ = 's√≠'
                    _
                    ```
    rock_2:
        name: Piedra, papel, tijeras 2
        default_save_name: piedra_2
        description: Parte 2 de piedra, papel, tijeras
        levels:
            2:
                story_text: |
                    Ahora que has aprendido a utilizar el comando `{ask}`, ¬°tambi√©n puedes hacer que tu c√≥digo de piedra, papel o tijera sea interactivo!

                    ### Ejercicio
                    Haz que el c√≥digo de piedra, papel o tijera sea interactivo a√±adiendo el comando `{ask}` y una pregunta a tu c√≥digo de piedra, papel o tijera.
                example_code: |
                    ```
                    opci√≥n {is} _
                    {print} Yo elijo opci√≥n
                    ```
    secret:
        name: Super Esp√≠a
        default_save_name: Super Esp√≠a
        description: Haz tu propio c√≥digo esp√≠a
        levels:
            12:
                story_text: |
                    En esta aventura podr√°s crear tu propio c√≥digo secreto. Codifica un mensaje que solo la persona correcta podr√° descifrar.
                    Si el enemigo intenta descifrar el c√≥digo, obtendr√°n un mensaje falso para hacerles perder el tiempo.

                    ### Ejercicio 1
                    Crea tu propio c√≥digo secreto para tu super esp√≠a. ¬øPuedes hacer que use a√∫n m√°s variables?

                    ### Ejercicio 2
                    A√±ade un tercer componente al c√≥digo, como una prenda de ropa o un objeto.
                example_code: |
                    ```
                    nombre = {ask} ¬øCu√°l es tu nombre?
                    {if} nombre {is} _
                        a = 'Ve al aeropuerto '
                    {else}
                        a = 'Ve a la estaci√≥n de tren '
                    contrase√±a = {ask} '¬øCu√°l es la contrase√±a?
                    {if} contrase√±a {is} _
                        b = 'ma√±ana a las 02.00'
                    {else}
                        b = 'hoy a las 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Podemos simplificar el c√≥digo de superspy con `{and}`, de forma que solo necesitemos un `{if}`.

                    ### Ejercicio 1
                    Completa el c√≥digo rellenando el comando correcto en el espacio en blanco. Consejo: El superesp√≠a tiene que responder correctamente a AMBAS preguntas antes de obtener la informaci√≥n confidencial.

                    ### Ejercicio 2
                    Queremos confundir a√∫n m√°s al enemigo. Crea una lista con respuestas falsas y selecciona una al azar cuando se d√© una respuesta incorrecta.
                example_code: |
                    ```
                    nombre = {ask} '¬øCu√°l es tu nombre?'
                    contrase√±a = {ask} '¬øCu√°l es tu contrase√±a?'
                    {if} nombre {is} 'Agente007' _ contrase√±a {is} 'SUPERSECRETO'
                        {print} 'Ve al aeropuerto a las 02.00'
                    {else}
                        {print} 'Ve a la estaci√≥n de tren a las 10.00'
                     ```
    sleep_command:
        default_save_name: comando_dormir
        description: introducci√≥n al comando {sleep}
        levels:
            2:
                story_text: |
                    Otro comando nuevo en este nivel es `{sleep}`, el cual pausa tu programa durante un segundo. Si escribes un n√∫mero despu√©s del comando `{sleep}`, el programa se pausa por esa cantidad de segundos.

                    ### Ejercicio
                    Practica este nuevo comando haciendo un c√≥digo por ti mismo en que uses el comando `{sleep}` al menos 3 veces. En cada comando `{sleep}` el tiempo de pausa debe ser diferente.
                example_code: |
                    ```
                    {print} Mi color favorito es...
                    {sleep} 2
                    {print} ¬°verde!
                    ```
        name: '{sleep}'
    songs:
        name: ¬°Canta una canci√≥n!
        default_save_name: Canci√≥n
        description: Imprime una canci√≥n
        levels:
            6:
                story_text: |
                    En las canciones hay a menudo mucha repetici√≥n. Algunas veces la repetici√≥n se basa tambi√©n en contar.
                    Por ejemplo, en la canci√≥n el elefante se balancea en la tela de una ara√±a. Puedes programar esta canci√≥n con un poco de matem√°ticas.

                    Consejo: ¬°Utiliza la funci√≥n de "leer en voz alta" para que Hedy te cante la canci√≥n!

                    ### Desaf√≠o
                    Puedes repetir las l√≠neas 2 a 7 cuantas veces quieras copiando las l√≠neas.
                example_code: |
                    ```
                    verso = 99
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, p√°salo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    {sleep}
                    ```
                story_text_2: |
                    Esta canci√≥n de ni√±os cuenta desde 5 elefantes hasta un elefante.
                    ¬°Si copias las l√≠neas 2 a 7 debajo del c√≥digo, puedes cantar toda la canci√≥n!
                example_code_2: |
                    ```
                    n√∫mero = 6
                    n√∫mero = n√∫mero - 1
                    {print} n√∫mero 'peque√±os monos saltando en la cama'
                    {print} 'Uno se cay√≥ y se golpe√≥ la cabeza'
                    {print} 'Mam√° llam√≥ al doctor y el doctor dijo'
                    {print} '¬°NO M√ÅS MONOS SALTANDO EN LA CAMA!'
                    {sleep}
                    ```
            7:
                story_text: |
                    Las canciones suelen tener mucha repetici√≥n. Por ejemplo... ¬°Baby Shark! Si la cantas, dir√°s una y otra vez lo mismo:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Desaf√≠o
                    Puedes acortar Baby Shark con un `{repeat}`. Acaba el c√≥digo rellenando los espacios vac√≠os.
                    **Extra** Tras Baby Shark puedes, por supuesto, programar otras canciones. ¬°Hay muchas con repetici√≥n!
                    ¬øPuedes pensar en alguna y programarla tambi√©n?
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n"
            8:
                story_text: |
                    En un nivel anterior programamos la canci√≥n de los elefantes. Pero sin el comando `{repeat}` tuvimos que copiar los versos muchas veces.
                    En este nivel puedes repetir la canci√≥n 99 veces, simplemente a√±adiendo una l√≠nea.

                    ### Desaf√≠o
                    A√±ade el comando correcto en los espacios en blanco y sangra el c√≥digo correctamente.
                example_code: |
                    ```
                    verso = 99
                    _ 99 {times}
                    {print} verso 'botellas de cerveza en la pared'
                    {print} verso 'botellas de cerveza'
                    {print} 'Toma uno, p√°salo'
                    verso = verso - 1
                    {print} verso 'botellas de cerveza en la pared'
                    ```
            10:
                story_text: |
                    Con `{for}` puedes hacer la canci√≥n completa de baby shark (incluyendo a todos los tiburones de la familia) en solo 6 l√≠neas!

                    ### Ejercicio 1
                    Puedes hacer el c√≥digo para baby shark a√∫n mas corto usando un comando `{for}`? Termina el c√≥digo de ejemplo.
                example_code: "```\nfamilia = beb√©, mam√°, pap√°, abuela, abuelo\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Ejercicio 2
                    Escribe la canci√≥n Cinco monitos saltando en la cama. Mira el texto si no lo recuerdas.

                    **Extra** Escribe la canci√≥n El viejo MacDonald ten√≠a una granja, y aseg√∫rate que todos los animales hagan sonidos diferentes usando `{if}`.
                example_code_2: |
                    ```
                    monos = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    En este nivel, podr√°s usar el comando `{for}` con `{range}` para crear canciones que utilizan cuentas, como cinco monos.

                    ### Ejercicio 1
                    ¬°Rellena los espacios y haz que el c√≥digo funcione! Si no recuerdas la letra de la canci√≥n, ¬°b√∫scala!

                    ### Ejercicio 2
                    La √∫ltima l√≠nea de la canci√≥n es diferente de las dem√°s. Escribe esta l√≠nea dentro de `{for}`, y usa `{if}` para hacer que funcione correctamente.
                example_code: |
                    ```
                    _ monos _ _ _ 5 _ 1
                        {print} monos ' peque√±os monitos saltando en la cama.'
                        _
                    ```
            12:
                story_text: |
                    En esta canci√≥n podemos hacer a√∫n m√°s f√°cil programar 'si est√°s feliz y lo sabes, aplaude'. Porque podemos poner todas las acciones en una variable, compru√©balo:

                    ### Ejercicio
                    ¬øPuedes a√±adir la cantidad correcta de sangr√≠a a cada l√≠nea para que la canci√≥n se reproduzca correctamente?
                    Pista: No todas las l√≠neas necesitan sangr√≠a.
                example_code: |
                    ```
                    _ acciones = 'aplaude', 'mueve los pies as√≠', '¬°grita hurra!'
                    _ {for} acci√≥n {in} acciones
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'si est√°s feliz y lo sabes'
                    _ {print} acci√≥n
                    _ {print} 'Si en verdad estas contento tu sonrisa es el reflejo'
                    _ {print} 'si est√°s feliz y lo sabes'
                    _ {print} acci√≥n
                    ```
            16:
                story_text: |
                    En este nivel puedes programar una canci√≥n como OldMacDonald incluso m√°s r√°pido. Puedes conectar el animal correcto con el sonido correcto simplemente poni√©ndolos en el mismo lugar en la lista.
                    El Marinero Borracho tambi√©n se puede hacer r√°pidamente en este nivel. Solo necesitas 8 l√≠neas de c√≥digo para toda la canci√≥n, ¬°compru√©balo!

                    ### Ejercicio
                    Completa la canci√≥n Old MacDonald estableciendo la variable `animal` a `animals[i]` y `sound` a `sounds[i]`.
                example_code: |
                    ```
                    animales = ['cerdo', 'perro', 'vaca']
                    sonidos = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = _
                        sonido = _
                        {print} 'Old MacDonald ten√≠a una granja'
                        {print} 'E I E I O!'
                        {print} 'y en esa granja √©l ten√≠a ' animal
                        {print} 'E I E I O!'
                        {print} 'con un ' sonido sonido ' aqu√≠'
                        {print} 'y un ' sonido sonido ' all√≠'
                        {print} 'aqu√≠ un ' sonido
                        {print} 'all√≠ un ' sonido
                        {print} 'en todos lados un ' sonido sonido
                    ```

                    ```
                    l√≠neas = ['Qu√© haremos con el marinero borracho', 'Afeitarle el vientre con una navaja oxidada', 'Meterlo en un barco largo hasta que est√© sobrio']
                    {for} l√≠nea {in} l√≠neas
                        {for} i {in} {range} 1 {to} 3
                            {print} l√≠nea
                        {print} 'pronto por la ma√±ana'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Ella se levanta de un camino de heno'
                        {print} 'pronto por la ma√±ana'
                    ```
            18:
                story_text: |
                    En el nivel 16 hicimos canciones usando listas. Sin embargo estos programas no funcionan bien en este nivel. Los dos puntos del nivel 17 y los par√©ntesis del nivel 18 a√∫n se tienen que ser a√±adir.

                    ### Ejercicio 1
                    Se da la canci√≥n del Marinero borracho como ejemplo, pero todav√≠a no funciona.
                    ¬øPuedes asegurarte de que todo funciona de nuevo? Para ayudarte, hemos puesto _ en los lugares de _algunos_ errores.

                    ### Ejercicio 2
                    Ahora tambi√©n busca tu canci√≥n de Old MacDonald del nivel 16, y corr√≠gela.
                example_code: "```\nl√≠neas = ['Qu√© haremos con el marinero borracho', 'Afeitarle el vientre con una navaja oxidada', 'Meterlo en un barco largo hasta que est√© sobrio']\n{for} l√≠nea {in} l√≠neas _ \n    {for} i {in} {range} 1 {to} 3 _ \n        {print} _ l√≠nea _ \n    {print} 'pronto por la ma√±ana'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Ella se levanta de un camino de heno'\n    {print} 'pronto por la ma√±ana'\n```\n"
            13:
                story_text: "En la aventura anterior has aprendido a utilizar un argumento en una funci√≥n pero, ¬øsab√≠as que tambi√©n puedes combinarlos con el comando `{ask}`?\nEn este ejemplo hemos cambiado el programa 'Mi Bonnie' para hacerlo interactivo. Ahora te pregunta d√≥nde est√° Bonnie.\n"
                example_code: "```\n{define} song {with} place\n    {print} 'My Bonnie is ' place\n\nchosen_place = {ask} 'Where do you want Bonnie to be?'\nsynonym = {ask} 'What is another word for that?'\n\n{call} song {with} chosen_place\n{call} song {with} synonym\n{call} song {with} chosen_place\n```\n"
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} _

                    {call} twinkle
                    {print} 'Tan alto sobre el mundo'
                    {print} 'Como un diamante en el cielo'
                    {call} _
                    ```
                story_text: "Las canciones contienen un mont√≥n de repeticiones. ¬°Podemos capturarlas en una funci√≥n!\n### Ejercicio\nMira el c√≥digo de ejemplo con la funci√≥n. Rellena las dos l√≠neas para que se imprima la canci√≥n entera.\n"
            16:
                example_code_2: "```\nobjeto = ['ruedas', 'puertas', _]\nmovimiento = [ 'gira y gira', 'abre y cierra', _]\n```\n"
                story_text_2: "### Ejercicio 2\nAhora crea tu propio c√≥digo para la canci√≥n infantil ¬´Las ruedas del autob√∫s¬ª de la misma manera.\n"
                story_text: "### Ejercicio\n¬°Completa la canci√≥n infantil!\n"
                example_code: "```\nnumero = ['uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve', 'diez']\nobjeto = ['en su tambor', 'en su zapato', 'en su rodilla', 'en su puerta', 'en su colmena', 'en sus bastones', 'arriba en el cielo', 'en su portal', 'en su vi√±a', 'una vez m√°s']\n\n_\n    {print} 'Este viejo hombre'\n    {print} '√âl toc√≥ ' _\n    {print} '√âl toc√≥ knick-knack ' _\n    {print} 'Con un knick-knack paddywhack'\n    {print} 'Le da un hueso al can'\n    {print} 'Este viejo hombre vino rodando a casa'\n    {sleep} 8\n    {clear}\n```\n"
        default_save_name: Canci√≥n 2
        name: ¬°Canta una canci√≥n! 2
        description: Canta una canci√≥n 2
    turtle:
        name: La tortuga
        default_save_name: Tortuga
        description: Haz tu propio dibujo
        levels:
            1:
                story_text: |
                    En nivel 1 tambi√©n puedes usar Hedy para dibujar. Combinando giros y l√≠neas, ¬°puede hacer un cuadrado o una escalera!

                    Usando `{forward}` dibujas una l√≠nea hacia adelante. El numero detr√°s del comando determina qu√© tan lejos caminar√° la tortuga. `{turn} {right}` gira un cuarto de vuelta en el sentido de las agujas del reloj, `{turn} {left}` gira en sentido contrario a las agujas del reloj.

                    Si quieres ir hacia atr√°s, puedes utilizar el comando `{forward}` pero con un n√∫mero negativo. Por ejemplo `{forward} -100`
                story_text_2: |
                    ### Ejercicio
                    Este es el principio de una peque√±a escalera, ¬øPuedes hacer 5 escalones m√°s?
                example_code_2: "```\n{forward} 20\n{turn} {right}\n{forward} 20\n{turn} {left}\n{forward} 20\n```\n"
                example_code: "```\n{forward} 100\n{turn} {left}\n```\n"
            2:
                story_text: |
                    En el nivel 1 la tortuga s√≥lo pod√≠a girar a izquierda o derecha. ¬°Eso es un poco aburrido!
                    En el nivel 2 puede apuntar su nariz en todas direcciones.

                    Use 90 grados para girar un cuarto, 180 grados para girar la mitad, y un c√≠rculo completo es 360 grados.

                    ### Ejercicio
                    Este c√≥digo ahora crea la letra T. ¬øPuedes cambiarlo para que sea la letra B?

                    **Extra** Cambia la letra por una letra diferente, como la primera de tu nombre.
                    Tambi√©n puede hacer varias letras, estableciendo el color a `{color}` `{white}` entre ellas.
                story_text_2: |
                    Puedes usar variables para en la tortuga `turn`.

                    ### Ejercicio
                    Cambia el c√≥digo para que cree un tri√°ngulo. Pista: s√≥lo tienes que cambiar el c√≥digo en un sitio.
                example_code_2: |
                    ```
                    {print} Dibujando figuras
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                example_code: "```\n{forward} 80\n{turn} 90\n{forward} 50\n{turn} 180\n{forward} 100\n```\n"
            3:
                story_text: |
                    En este nivel, puedes utilizar `{at} {random}` con la tortuga que dibuja. Una elecci√≥n aleatoria hace que la tortuga camine por un camino diferente cada vez.
                    Utiliza `{at} {random}` para elegir un valor de una lista.
                    ### Ejercicio
                    ¬øPuedes copiar y pegar las l√≠neas 2 y 3 para crear un camino m√°s largo?
                example_code: |
                    ```
                    √°ngulos {is} 10, 50, 90, 150, 250
                    {turn} √°ngulos {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    En nivel 3 tienes que usar comillas con `{print}` y `{ask}`. ¬°Tambi√©n al dibujar!
                example_code: |
                    ```
                    {print} _ Dibujando figuras _
                    √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    Tambi√©n puedes cambiar los colores de las l√≠neas con el comando `{color}`. Mira el ejemplo.
                    Puedes utilizar el comando `{color} {white}` para hacer l√≠neas "invisibles". Puedes usar estas l√≠neas blancas para mover la tortuga done quieras en la pantalla antes de empezar a dibujar.
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: |
                    En nivel 5 puede elegir con `{if}`. Por ejemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Dibujando figuras'
                    figura {is} {ask} '¬øQuieres un cuadrado o un tri√°ngulo?'
                    {if} figura {is} tri√°ngulo √°ngulo {is} 120
                    {else} √°ngulo {is} 90
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    {turn} √°ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    ### Ejercicio
                    Pon los n√∫meros correctos en este c√≥digo para hacerlo funcionar.
                    Despu√©s de hacer eso, puedes intentar a√±adir la opci√≥n al rev√©s.

                    **Extra** En vez de usar 'derecha' e 'izquierda', haz el programa otra vez usando norte, sur, este, oeste.
                    De esta manera podr√°s agregar mas direcciones como suroeste, noroeste, etc.
                example_code_2: |
                    ```
                    direcci√≥n {is} {ask} 'Quieres ir a la izquierda, a la derecha o seguir derecho?'
                    {if} direcci√≥n {is} derecha {turn} _
                    {if} direcci√≥n {is} izquierda {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    En nivel 5 puede usar c√°lculos para dibujar diferentes figuras.
                    Es posible que haya aprendido en la escuela que girar un c√≠rculo completo es de 360 grados. Si no, ¬°ahora ya lo sabes!
                    Es por eso que tambi√©n usas 90 grados para un cuadrado. 360 dividido por 4 es 90.
                    Ahora que podemos hacer matem√°ticas con Hedy, ¬°podemos dibujar todas las figuras que queramos!
                example_code: |
                    ```
                    √°ngulos = {ask} '¬øCu√°ntos √°ngulos quieres?'
                    √°ngulo = 360 / √°ngulos
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    {forward} 50
                    {turn} √°ngulo
                    ```
            8:
                story_text: |
                    Ahora que podemos repetir varias l√≠neas, podemos hacer figuras mas f√°cil.
                    Solo tenemos que poner el √°ngulo una vez y usar la variable `{repeat}`.

                    ### Ejercicio 1
                    El c√≥digo de ejemplo crea un cuadrado. Cambia el c√≥digo para que cree otra figura, como un triangulo o un hex√°gono.
                    Esto requiere cambiar dos l√≠neas de c√≥digo.
                    Consejo: Un circulo completo son 360 grados.

                    ### Ejercicio 2
                    Ahora crea un dibujo que consista en m√≠nimo 2 pol√≠gonos
                example_code: |
                    ```
                    √°ngulo = 90
                    {repeat} 4 {times}
                        {turn} √°ngulo
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** Podemos mejorar el programa que dibuja diferentes figuras. Completa el c√≥digo y ¬°puedes dibujar cualquier pol√≠gono que te guste!
                example_code_2: "```\nfigura = {ask} '¬øCu√°ntos √°ngulos debo dibujar?'\n√°ngulo = 360 / figura\n{repeat} figura {times}\n    {turn} _\n    {forward} _\n```\n"
            9:
                story_text: |
                    Ahora que podemos usar un `{repeat}` dentro de otro `{repeat}`, podemos crear figuras m√°s complejas

                    ### Ejercicio 1
                    Este c√≥digo crea tres tri√°ngulos negros, c√°mbialo a cinco cuadrados rosados.

                     **Extra** Crea una figura de tu elecci√≥n que consista de al menos dos tipos diferentes de formas.
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
            10:
                story_text: |
                    En este nivel puedes hacer que la tortuga dibuje una figura.
                    La tortuga recorrer√° las distancias de la lista, una a una, dando pasos cada vez m√°s grandes.
                    ### Ejercicio 1
                    A√±ade un giro de 90 grados en el bucle, de forma que se dibuje una espiral.
                    A√±ade al menos 5 n√∫meros a la lista, para que la espiral se haga m√°s grande.
                    **(extra)** ¬øPuedes cambiar la espiral a otra forma? ¬°Experimenta con los n√∫meros para el giro!
                    ### Ejercicio 2
                    La espiral est√° dibujada hacia fuera, ¬øhaz que vaya hacia dentro?
                example_code: |
                    ```
                    {turn} 90
                    distancias = 10, 20, 30, 40, 50, 60
                    {for} distancia {in} distancias
                        {forward} distancia
                    ```
            12:
                story_text: |
                    Podemos usar funciones para dibujar figuras m√°s complejas con menos c√≥digo.
                    ### Ejercicio 1
                    Rellena la funci√≥n para que se creen tres cuadrados. Si quieres que la imagen se vea mejor, puedes hacer que las l√≠neas entre los cuadrados sean blancas.

                    ### Ejercicio 2
                    El c√≥digo se puede acortar. Pon las √∫ltimas l√≠neas en un `{repeat}` para que la figura se mantenga igual.

                    ### Ejercicio 3
                    Crea tu propio dibujo con diferentes figuras.
                    Cambia tanto el n√∫mero de figuras con el `{repeat}` como la forma de las figuras en el `{define}`
                example_code: |
                    ```
                    {define} cuadrado
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} cuadrado
                    {forward} 50
                    {call} cuadrado
                    {forward} 50
                    {call} cuadrado
                    ```
    turtle_draw_it:
        name: ¬°Dib√∫jalo!
        default_save_name: Dib√∫jalo
        description: Dibuja esta imagen con la tortuga
        levels:
            1:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                        Rect√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Cuadrado <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Escaleras <img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Tri√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Flecha <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Barco <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Tri√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Estrella <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Flecha <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Estrella coloreada <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Arcoiris <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Cuadrados anidados <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** ¬øPreparado/a para un desaf√≠o real? Aseg√∫rate que los colores de estas figuras son elegidos aleatoriamente, ¬°para que cada vez que ejecutes tus programas parezcan diferentes!

                    ```
                    colores {is} rojo, naranja, amarillo, verde, azul, morado, rosa, marr√≥n, gris, negro
                    color _
                    ```
            5:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** ¬°Haz un √∫nico c√≥digo que permita al jugador decidir qu√© letra les gustar√≠a ver! ¬øY podr√≠a a√±adir m√°s letras?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Pista:
                    ```
                    letra_elegida {is} {ask} '¬øQu√© letra te gustar√≠a ver? F, E o L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** Deja que el jugador elija de qu√© color ser√° el cuadrado.

                    ***Extra*** ¬øPdr√≠as hacer tambi√©n la primera letra de tu nombre y la bandera de tu pa√≠s?

                    <div class="w-full flex flex-row gap-2">
                    Cuadrado <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letras <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Bandera <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Pista para el cuadrado:
                    ```
                    color_elegido = {ask} _
                    ```
            7:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Hex√°gono <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Tri√°ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Ventilador <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** El n√∫mero entre los corchetes indica en cuantas l√≠neas de c√≥digo puede dibujar esta figura. ¬øPuedes hacerlo en el mismo n√∫mero de l√≠neas?

                    <div class="w-full flex flex-row gap-2">
                    Cuadrado (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Estrella coloreada aleatoriamente (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Espiral coloreada aleatoriamente (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    **Extra** El n√∫mero entre los corchetes indica en cuantas l√≠neas de c√≥digo puede dibujar esta figura. ¬øPuedes hacerlo en el mismo n√∫mero de l√≠neas?

                    **Extra** Deja elegir al jugador la bandera de qu√© pais quieren ver.

                    <div class="w-full flex flex-row gap-2">
                    Cruz (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Cuadrados anidados coloreados aleatoriamente (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Banderas <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Sugerencia para los cuadrados anidados:
                    ```
                    colores = rojo, azul, naranja, amarillo, rosa, morado, verde, marr√≥n, negro
                    distancia = 120
                    {repeat} 5 {times}
                    _
                    ```
                    Sugerencia para las banderas:
                    ```
                    pais = {ask} '¬øDe qu√© pa√≠s quieres ver la bandera?'
                    {if} pais {is} 'Pa√≠ses Bajos'
                        color_1 = rojo
                        color_2 = blanco
                        color_3 = azul
                    ```
            10:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Hex√°gono anidado <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Sem√°foro <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Sugerencia Hex√°gono anidado:
                    ```
                    distancias = 100, 80, 60, 40, 20
                    {for} distancia {in} distancias
                    _
                    ```

                    Sugerencia Sem√°foro:
                    ```
                    colores = rojo, amarillo, verde
                    {for} color_elegido {in} colores
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    Luces de Navidad <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Sugerencia Luces de Navidad:

                    Empieza moviendote al lado izquierdo de la pantalla con una l√≠nea blanca invisible. ¬°Despu√©s cuelga las luces de Navidad!
                    ```
                    {color} blanco
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colores = rojo, azul, amarillo, morado, verde, naranja, rosa
                    {for} color_elegido {in} colores
                    _
                    ```
            11:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    <div class="w-full flex flex-row gap-2">
                    Colmena (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Abanico (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Copo de nieve (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Sugerencia Colmena:
                    ```
                    {for} cantidad_de_panales {in} {range} 1 {to} _
                        {for} paredes_de_un_panael {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Sugerencia Ventilador:
                    Empieza como el ventilador que hiciste en el nivel 7. O toma una parte de la sugerencia para la colmena, porque los c√≥digos son muy parecidos.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    Primero, define una funci√≥n **por cada forma** que quieras usar en el brazalete. Despu√©s, a√±ade las formas al brazalete como este:

                    Programa de dise√±o de brazalete <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    Hint Bracelet Programa de dise√±o
                    ```
                    {define} dibujar_un_cuadrado
                    _

                    {color} blanco
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                    	{color} gris
                    	{forward} 100
                    	forma= {ask} '¬øQu√© tipo de forma le gustar√≠a a continuaci√≥n en el brazalete?'
                    	color_elegido = {ask} '¬øEn qu√© color?'
                    	{color} color_elegido 
                    	{if} forma = 'cuadrado'
                    		{call} dibujar_un_cuadrado
                    ```
            13:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear los dibujos con la tortuga!

                    Calle en diferentes tama√±os <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Calle coloreada <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Tormenta de nieve <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    La Calle de la Pista en diferentes tama√±os
                    ```
                    {define} dibuja_una_casa {with} tama√±o
                    _

                    {call} dibuja_una_casa {with} 90
                    {call} dibuja_una_casa {with} 60
                    {call} dibuja_una_casa {with} 30
                    ```

                    Calle de la Pista Coloreada
                    ```
                    {define} dibuja_una_casa {with} color_elegido
                    _
                    ```

                    Tormenta de la Pista de Nieve
                    ```
                    {define} dibujar_copo_nieve {with} longitud, color
                    	_

                    n√∫meros= 10, 20, 30
                    colores = _

                    {for} i {in} {range} 1 {to} 5
                    	n√∫mero_aleatorio = _
                    	color_aleatorio = _
                    	{call} dibujar_copo_nieve {with} n√∫mero_aleatorio , color_aleatorio
                    	{color} blanco
                    	{turn} n√∫mero_aleatorio * 5
                    	{forward} 80
                    ```
            14:
                story_text: |
                    ### Ejercicio
                    Crea un programa que pregunte al jugador cu√°ntas esquinas deber√≠a tener su figura y despu√©s crea esa figura.
                    La figura in la imagen es el resultado cuando el jugador introduzca 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calcular_angulos {with} cantidad_de_esquinas
                        _ 360 / cantidad_de_esquinas


                    {define} dibujar_figura {with} √°ngulos
                        _
                            {forward} 400/cantidad_de_esquinas
                            {turn} _

                    cantidad_de_esquinas = {ask} _
                    √°ngulos = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Ejercicio
                    ¬°Vuelve a crear estos dibujos con la tortuga!

                    Espiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Espiral
                    ```
                    distancia = 5
                    {while} distancia < 200
                        distancia = distancia + 5
                         _
                    ```
                story_text_2: |
                    Abanico <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Abanico
                    ```
                    {define} dibuja_un_cuadrado {with} lado
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Estrella <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Estrella
                    Una estrella se suele dibujar usando √°ngulos de 144 grados. Si por ejemplo lo cambias ligeramente a 143 grados y repites el patr√≥n varias veces con un bucle {while} puedes hacer esta figura.
    while_command:
        default_save_name: comando_mientras
        levels:
            15:
                story_text: |-
                    Vamos a aprender un nuevo bucle, ¬°el bucle `{while}`! Continuamos el bucle mientras la sentencia sea verdadera.
                    As√≠ que no olvides cambiar el valor en el bucle.

                    En el c√≥digo de ejemplo, continuamos hasta que se de una respuesta verdadera.
                    Si nunca se da la respuesta correcta, 'el bucle nunca termina!
                example_code: |
                    ```
                    respuesta = 0
                    {while} respuesta != 25
                        respuesta = {ask} '¬øCu√°nto es 5 veces 5?'
                    {print} 'La respuesta es correcta'
                    ```
        description: '{while}'
        name: '{while}'
    years:
        name: A√±o Nuevo
        default_save_name: Cuenta atr√°s para el A√±o Nuevo
        description: ¬°Cuenta regresiva para el a√±o nuevo!
        levels:
            11:
                story_text: |
                    En este nivel puedes usar el comando `{for}` numero `{in}` `{range}` para la cuenta regresiva al a√±o nuevo.

                    ### Ejercicio
                    ¬°Rellena los espacios en blanco y haz que el c√≥digo funcione!
                example_code: |
                    ```
                    {for} numero {in} {range} _ {to} _
                        {print} numero
                        {sleep}
                    {print} '¬°Feliz a√±o nuevo!
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Intenta acercarte lo m√°s posible a 21
        levels:
            17:
                story_text: "El Blackjack es un sencillo juego de cartas en el que tienes que acercarte lo m√°s posible a 21 puntos. Tienes dos cartas. Cada carta vale su valor num√©rico, y las cartas de la cara (Jota, Reina y Rey) valen 10 puntos.\nEl As vale 1 u 11 puntos (puedes elegir). El crupier, tu oponente, tambi√©n recibe dos cartas.\nSi quieres, puedes coger otra carta, y sus puntos se sumar√°n a tu total. El repartidor tambi√©n puede elegir coger otra carta.\nPero ten cuidado de no conseguir m√°s de 21 puntos, porque si lo haces, ¬°pierdes!\nEl jugador que se acerque m√°s a 21, sin pasarse, ¬°gana!\n\n### Ejercicio\nEn esta aventura codificamos la primera parte de nuestro juego de Blackjack. Crearemos una funci√≥n para calcular cu√°ntos puntos vale una carta.\n\n***Establezcamos las variables***\nEmpieza haciendo una lista de todas las cartas, del 2 al As. Despu√©s haz una lista de las cartas con cara, es decir, Jota, Reina y Rey. Luego elige una carta al azar de la lista de cartas para que sea card_1.\n\n***Crear una funci√≥n para calcular los puntos***\nCrea una funci√≥n que calcule cu√°ntos puntos vale una carta.\nTodas las cartas con cara valen 10 puntos, el As vale 11 y todas las dem√°s cartas valen su numeral.\nDevuelve la variable `points` al final de la funci√≥n.\n\n***Prueba de la funci√≥n\nPrueba si tu funci√≥n funciona correctamente. Primero termina el primer comanod `{print}` rellenando qu√© carta has sacado. Luego termina la segunda l√≠nea llamando a la funci√≥n con carta_1.\nEjecuta el c√≥digo un par de veces. ¬øEst√°s satisfecho con los resultados? ¬°Genial! ¬°A continuaci√≥n, puede eliminar la parte de prueba y pasar a la siguiente aventura!\n"
                example_code: "```\n{print} 'BLACKJACK'\n\n# Establece estas variables\ncard = _\nface_cards = _\ncard_1 =\n\n# Crea una funci√≥n para calcular los puntos\n{define} calculate_points {with} card:\n    {if} card {in} face_cards:\n        points = _\n    {elif} _\n        _\n    {else}:\n        _\n    _ points\n\n# Prueba tu funci√≥n\n{print} 'Tu carta es un ' _\n{print} 'Eso vale ' _ ' puntos'.\n```\n"
    blackjack_2:
        description: Blackjack parte 2
        default_save_name: Blackjack_2
        name: Blackjack 2
        levels:
            17:
                story_text: "# ## Ejercicio\nEn esta aventura codificamos la segunda parte de nuestro juego de Blackjack.\n\n***Pegue su c√≥digo de la aventura anterior***\nEn la aventura anterior, creaste una lista de variables y una funci√≥n para calcular cu√°ntos puntos vale una carta. Copia tu c√≥digo y p√©galo aqu√≠. Ten en cuenta que no necesitas la parte de prueba, as√≠ que si a√∫n no la has eliminado, hazlo ahora.\n\n***A√±adir m√°s variables***\nYa has configurado las listas `cards` y `face_cards` y la variable `card_1` . Debajo de esas variables, crea 3 variables m√°s: `card_2` , `dealer_card_1` y `dealer_card_2`. Todas estas variables est√°n configuradas con una carta aleatoria de la lista de cartas.\n\n***Suma puntos***\nPara calcular cu√°ntos puntos has conseguido, llamamos a la funci√≥n con la carta 1 y lo repetimos para la carta 2. Despu√©s sumamos ambas puntuaciones para obtener el total.\nHaz lo mismo con los puntos del crupier, pero aseg√∫rate de utilizar las cartas del crupier y no las tuyas.\n\n***2 ases***\n¬°Lo est√°s haciendo genial! Casi todas las puntuaciones se pueden calcular ahora. Solo hay una excepci√≥n: 2 ases. Si obtienes 2 ases, tu total ser√° 12 puntos y no 22 (¬°porque 22 puntos ser√≠a una p√©rdida!). Por supuesto, esto tambi√©n se aplica al crupier.\n\n***Mostrar la puntuaci√≥n***\nPor √∫ltimo, debes indicarle al programa qu√© cartas has sacado y cu√°ntos puntos tiene cada una. Luego, debes mostrarle qu√© cartas tiene el crupier y cu√°ntos puntos tiene.\n\n***Contin√∫a en la siguiente aventura***\n¬°Genial! ¬°Has terminado esta parte del juego! Copia tu c√≥digo y ve a la siguiente aventura para aprender a pedir una carta extra y declarar un ganador.\n"
                example_code: "```\n# Pega tu c√≥digo de la aventura anterior aqu√≠\n\n#A√±ade estas variables a la lista de variables\ncarta_2 = _\ncrupier_carta_1 = _\ncrupier_carta_2 = _\n\n# Sumar tus puntos\ntus_puntos_1 = {call} _ {with} carta_1\ntus_puntos_2 = _\ntu_total = _\n\n# Sumar los puntos del crupier\ncrupier_puntos_1 = _\n_\n_\n\n# 2 Ases\n{if} carta_1 == 'As' {and} _\n    tu_total = 12\n{if} crupier_carta_1 _\n    crupier_total = _\n\n# Mostrar la puntuaci√≥n\n{print} 'Has robado un ' _ ' y un ' _ '. Eso son ' _ ' puntos'\n{print} 'El crupier ha robado un ' _ ' y un ' _ '. Eso son ' _ ' puntos'\n```\n"
    tic:
        default_save_name: Tic
        description: ¬°Juega una partida de Tres en raya!
        name: Tres en raya
        levels:
            16:
                example_code: "```\n# Crea una lista llamada tablero\n_ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']\n\n# Crea una funci√≥n que imprima el tablero\n{define} imprimir_tablero\n    _\n    {print} 'TRES EN RAYA'\n    {print} tablero[1] tablero[2] tablero[3]\n    _\n    _\n\n# Llama la funci√≥n\n```\n"
                story_text: "¬°Programemos un juego de Tres en raya!\n\n### Ejercicio\nEn esta aventura comenzaremos creando un tablero vac√≠o.\n\n***Crea una lista llamada tablero*** Esta lista ser√° nuestro tablero de juego. Esta lista est√° rellena con 9 puntos, ya que todav√≠a no hay 'x' √≥ 'o' al inicio de nuestro juego.\n\n***Crea una funci√≥n que imprima el tablero*** Lo primero, limpia la pantalla para que los tableros de juego anteriores se borren. Entonces imprimimos la primera l√≠nea de nuestro tablero de Tres en raya. Esta l√≠nea consiste en las primeras 3 posiciones de nuestra lista de tablero.\nYa hemos programado esta l√≠nea por ti. Ahora completa el trablero imprimiendo las posiciones 4, 5 y 6 en la segunda fila y las posiciones 7, 8 y 9 en la tercera fila.\n\n***Llama a la funci√≥n que imprime el tablero*** Ahora llama a la funci√≥n.\n<div class=\"w-full flex flex-row gap-2\">\n\tEjecuta el c√≥digo. Tu resultado deber√≠a parecerse a esto: <img src=\"https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc\" width=\"100\">\n</div>\n\n***Continua en la siguiente aventura*** En la siguiente aventura aprender√°s a como programa el juego en s√≠.\n"
            17:
                example_code: "```\n# Pega tu c√≥digo aqu√≠ y haz que sea a prueba del nivel 17\n\n# Crea una funci√≥n que detecte si alguien ha ganado\n{define} detectar_ganador {with} tablero, signo:\n    {if} tablero[1] == tablero[2] {and} tablero[2] == tablero[3] {and} tablero[1] != '.':\n        juego_terminado = 's√≠'\n        {print} '¬°Jugador ' signo ' gana!'\n    {elif}:\n        _\n    {else}:\n        juego_terminado = 'no'\n{return} _\n```\n"
                story_text: "En el nivel anterior hemos aprendido a como hacer un juego de Tres en raya. El juego funciona, pero es bastante molesto que siga preguntando si ya has ganado.\nAhora que tenemos el comando `{elif}`, ¬°podemos dejar que el juego decida si alguien ha ganado y puede dejar de preguntarnos!\n\n### Ejercicio\n***Pega tu c√≥digo*** Pega tu c√≥digo del nivel anterior aqu√≠ y hazlo a prueba del nivel 17. En este nivel has aprendido a usar los dos puntos cada vez que creas un bloque de c√≥digo. Por favor a√±ade los dos puntos en los lugares correctos.\n\n***Crea una funci√≥n que detecte si alguien ha ganado*** Hemos comenzado la funci√≥n por ti, p√©gala debajo de la funci√≥n `print_field` y acaba la funci√≥n. Puedes ver que este primer fragmento de c√≥digo comprueba si las posiciones 1, 2 y 3 son iguales, porque si lo son tienes 3 en fila.\nTambi√©n comprueba si no son un punto, porque si lo son, en la l√≠nea podr√≠a tener los mismos s√≠mbolos en ellos, pero eso es porque todav√≠a est√° vac√≠a.\nSi se cumplen todas las condiciones, el juego se termina y se imprime al ganador.\nCompleta esta funci√≥n con todas las posibles maneras de ganar. esto significa que tiene que hacer esto para las otras 2 filas, 3 columnas y 2 diagonales.\nSi has completado todas las dem√°s posiciones, la funci√≥n deber√≠a devolver la variable `game_over` para que la podamos utilizar en nuestro juego.\n\n***Llama la funci√≥n en el juego*** Ve a la l√≠nea `game_over = {ask} 'Did you win?'` y c√°mbiala a `game_over = {call} detect_winner {with} field, sign`. ¬°Ahora la funci√≥n comprobar√° si hay un ganador y el juego no tiene que seguir pregunt√°ndolo nunca m√°s!\n\n***¬°Disfruta de tu juego!*** ¬°Gran trabajo! ¬°Has completado el juego! ¬°Disfruta jug√°ndolo!\n"
    hotel:
        name: hotel
        description: hotel
        default_save_name: hotel
        levels:
            13:
                story_text: "En la aventura anterior has aprendido a utilizar un argumento en una funci√≥n, y has aprendido a c√≥mo combinarlo con un {ask}.\nTe estar√°s preguntando por qu√© utilizar las funciones, porque en el ejemplo las funciones en el son de una l√≠nea de c√≥digo.\nAhora te mostraremos como es una funci√≥n m√°s grande y tambi√©n utilizaremos varios argumentos. Ver√°s como es mucho mejor utilizar una funci√≥n una vez que se vuelve m√°s grande.\nAqu√≠ tienes un ejemplo de una funci√≥n con argumentos combinada con comandos `{ask}`.\n"
                example_code: "```\n{define} mensaje_bienvenida {with} titulo, apellido, pais, numero_habitacion\n    {print} 'Bienvenido al Hotel Hedy, ' titulo ' ' apellido\n    buen_viaje {is} {ask} '¬øTuviste un buen viaje desde ' pais '?'\n    {if} buen_viaje {is} 's√≠'\n        {print} '¬°Maravilloso!'\n    {else}\n        {print} 'Siento oir eso.'\n        {print} 'Espero que puedas tener un buen descanso en tu habitaci√≥n'\n    {print} 'Tu n√∫mero de habitaci√≥n es ' numero_habitacion\n\n{print} 'Hola. Por favor, rellena tu informaci√≥n para registrarte.'\ntitulo = {ask} '¬øCu√°l es tu t√≠tulo (Sr., Sra., D√±a., D., etc.)?'\nnombre = {ask} '¬øC√≥mo te apellidas?'\npais_procedencia = {ask} '¬øDe qu√© pa√≠s procede?'\n\n{call} mensaje_bienvenida {with} titulo, nombre, pais_procedencia, 105\n```\n\ntitulo = {ask} '¬øCu√°l es tu t√≠tulo (Sr., Sra., D√±a., D., etc.)?'\nnombre = {ask} '¬øC√≥mo te apellidas?'\npais_procedencia = {ask} '¬øDe qu√© pa√≠s procede?'\n\n{call} mensaje_bienvenida {with} titulo, nombre, pais_procedencia, 105\n"
    calculator_2:
        name: Calculadora 2
        default_save_name: Calculadora 2
        description: Calculadora 2
        levels:
            14:
                example_code: "```\n# Utiliza tu propio c√≥digo de la aventura anterior.\n```\n"
                story_text: "### Ejercicio 2\n**Esta es la segunda parte de esta aventura.** La aventura comienza en la aventura anterior.\nPor supuesto, no quieres calcular la media de 4 pruebas. Podr√≠as querer calcular la media de 10 pruebas, o solo 2...\nPodemos solucionar este problema a√±adiendo el argumento y la variable 'candidad_de_pruebas'.\n* Empieza una nueva l√≠nea en la l√≠nea 3. Establece el argumento candidad_de_pruebas preguntando al alumno cu√°ntas pruebas ha realizado.\n* Cambia el 4 de la l√≠nea 4 por el nuevo argumento candidad_de_pruebas.\n* Por √∫ltimo, cambia el 4 en la l√≠nea 6 a candidad_de_pruebas\n\nPrueba el nuevo programa. ¬øFunciona?\n\n### Ejercicio 3\n¬øQuer√≠as mejorar a√∫n m√°s el programa? ¬°Genial! En el programa anterior solo pod√≠as calcular la nota media de una asignatura, pero ser√≠a mejor si pudieras calcular la nota media de todas las asignaturas que quisieras!\nNo te diremos c√≥mo hacerlo, pero te daremos un consejo: Empieza tu c√≥digo en la l√≠nea con: {define} calcular_nota_media {with} asignatura.\n"
    hangman:
        name: Ahorcado
        description: Adivina la palabra
        default_save_name: Ahorcado
        levels:
            17:
                story_text: "En esta aventura programamos un juego del ahorcado. Primero haremos algunos preparativos, despu√©s programaremos el juego y en tercer lugar a√±adiremos un dibujo con la tortuga.\n\n### Ejercicio\n***Establece las variables*** En este juego del ahorcado, el jugador 1 elige una respuesta y el jugador 2 tiene que adivinar las letras de esta respuesta.\nPara que el ordenador sepa todas las letras de la palabra, convertiremos la respuesta en una lista de letras. Haremos lo mismo con los intentos del jugador 2.\nComenzaremos el juego con 2 listas vac√≠as. Hemos hecho por ti una lista vac√≠a para la variable respuesta. Ahora haz tambi√©n una lista vac√≠a para letras_adivinadas.\nDespu√©s rellenamos cuantos errores han cometido. Al iniciar el juego, deber√≠a de ser 0.\nLa variable `amount_letters` nos dice cuantas letras forman la respuesta. Pregunta al jugador 1 que nos diga cu√°ntas letras tiene su palabra.\nPor √∫ltimo, le diremos al ordenador que la partida se ha terminado. Utilizamos la variable `game_over` y la establecemos a `False`.\n\n***Elegir la respuesta*** Queremos que el jugador 1 sea capaz de elegir la respuesta. Le preguntaremos tantas veces como sea neceasrio, cu√°l es la siguiente letra.\nDespu√©s a√±adiremos esa letra a la respuesta. Por √∫ltimo, a√±adimos un _ vac√≠o a la lista de letras adivinadas, as√≠ que tendremos tantos _ como letras haya en la respuesta.\n\n***Turno del jugador 2***\nDile al jugador 2 que es su turno. Entonces dile al jugador 2 cuantas letras hay en la respuesta. Por √∫ltimo, imprime la lista de `guessed_letters`.\n\n***Ir a la siguiente aventura*** Ahora que se han establecido todas las variables, podemos comenzar a programar el juego. ¬°Comprueba la siguiente pesta√±a para aprender a como hacerlo!\n"
                example_code: "```\n{print} '¬°Ahorcado!'\n\n# Establece las variables\nrespuesta = []\nletras_adivinadas = _\nerrores_cometidos = _\ncantidad_letras = {ask} _\n_ = 'Falso'\n\n# Elegir la respuesta\n{for} _\n    letra = {ask} 'Jugador 1, ¬øcu√°l es la letra ' i '?'\n    _\n    {add} '_' {to_list} _\n\n# Turno jugador 2\n{print} _\n{print} _\n{print} letras_adivinadas\n```\n"
    hangman_2:
        name: Ahorcado 2
        default_save_name: Ahorcado_2
        description: Ahorcado 2
        levels:
            17:
                example_code: "```\n# Pega tu c√≥digo aqu√≠\n\n# El juego\n{while} juego_terminado _\n    adivina = _\n    {if} _\n        {for} i {in} {range} 1 {to} cantidad_letras:\n            {if} respuesta[i] == adivina:\n                letras_adivinadas[i] = adivina\n        {print} _\n        {if} letras_adivinadas == _:\n            {print} _\n            juego_terminado = _\n    {else}:\n        {print} _\n        errores_cometidos _\n        {if} _ == 10:\n            {print} _\n            {print} _\n            _\n```\n"
                story_text: "Es momento de programar el juego del ahorcado.\n\n### Ejercicio\n\n***Pega tu c√≥digo*** Copia tu c√≥digo de la aventura anterior y p√©galo en el campo de programaci√≥n.\n\n***El juego*** Este juego continua funcionando hasta que termina la partida para el jugador 2. Rellena el comando `{while}` debidamente. Ahora, se permite que el jugador 2 adivine una letra, as√≠ que preg√∫ntale que adivine una letra.\nTenemos que comprobar que su respuesta sea correcta, as√≠ que comprueba que su `guess` se encuentra (en cualquier lugar) de la (lista) `answer`. Despu√©s dejamos que el ordenador averigue que letra(s) es la adivinada. Ya hemos programado esta parte por ti.\nDespu√©s, queremos alabar al jugador por encontrar una letra correcta y queremos imprimir la lista `guessed_letters`, para que el jugador vea su progreso.\n\nLa siguiente parte que vamos a programar es lo que ocurre cuando el jugador adivine todas las letras. As√≠, si su lista de `guessed_letters` es la misma que nuestra lista `answer`.\nSi las listas son iguales, le damos la enhorabuena al jugador 2 por su victoria y establecemos la variable `game_over` a `True`.\n\nDespu√©s, programaremos que ocurre cuando el jugador 2 falla(de ah√≠ el comando`{else}`). Primero, le decimos al jugador que ha fallado su intento. Entonces aumentamos la variable `mistakes_made` en 1.\n\nPara la √∫ltima parte programaremos que ocurre cuando el jguador 2 cometa 10 errores. Imprimiremos que el jugador 1 ha ganado el juego. Despu√©s imprimiremos la respuesta correcta. Y por √∫ltimo estableceremos la variable `game_over` a `True`, para que el juego se detenga.\n\n***Ir a la siguiente aventura*** ¬°Gran trabajo! Tu juego es jugable, pero ¬øno ser√≠a divertido que se dibujara el ahorcado cuando el jugador 2 cometa un error?\n"
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack parte 3
        levels:
            17:
                example_code: "```\n# Pega tu c√≥digo de la aventura anterior aqu√≠\n\n# Carta extra para ti\nhit = {ask} _\n{if} hit == 's√≠':\n    carta_3 = _\n    {print} _\n    {if} carta_3 _ 'As':\n        tus_puntos_3 = _\n        tu_total = _\n    {else}:\n       {if} tu_total _\n            _\n        {else}:\n            _\n    {print} _\n\n# Carta extra para el repartidor\n{if} repartidor_total < 17\n_\n```\n"
                story_text: "En las aventuras anteriores has aprendido como robar 2 cartas aleatorias para ti mismo y para el crupier y calcular cuantos puntos habeis obtenido.\nEn esta aventura a√±adimos la opci√≥n de pedir una carta adicional tanto para ti como para el crupier.\n\n### Ejercicio\n***Pega tu c√≥digo de la aventura anterior*** Lo primero, copia tu c√≥digo de la aventura anterior y p√©galo aqu√≠.\n\n***Carta adicional para ti*** Si quieres, puedes conseguir una carta adicional para conseguir un total lo m√°s cercano posible a 21. Primero pregunta al jugador si quiere una carta adicional.\nSi lo hacen, elige una carta aleatoria e imprime lo que han robado. Si la carta no es un As, puedes llamar a la funci√≥n y a√±adir los puntos a tu total.\nEn el caso de que la carta sea un As, no puedes utilizar la funci√≥n, porque el As puede valer o 1 punto o 11 puntos, dependiendo de cuantos puntos ya tuvieras.\nSi tu total es menor que 11, quieres que el As valga 11 puntos (porque es lo m√°s cercano a 21). As√≠ que a√±ades 11 puntos al total.\nSi el total es mayor o igual a 11, quieres que el As valga 1 punto (porque no quieres tener m√°s de 21 puntos). As√≠ que a√±ades 1 punto al total.\nPor √∫ltimo, imprime tu nuevo total de puntos.\n\n***Carta adicional para el crupier*** El crupier tambi√©n puede conseguir una carta extra. No hace falta preguntar al crupier, porque siempre quieren una carta extra si su total es menor a 17.\nCopia el c√≥digo 'Carta adicional para ti' y p√©galo en la secci√≥n del crupier. Despu√©s aj√∫stalo para que el crupier obtenga una carta adicional y se sumen sus puntos a su total.\n"
    blackjack_4:
        description: Blackjack parte 4
        name: Blackjack 4
        default_save_name: Blackjack_4
        levels:
            17:
                example_code: "```\n# Pega tu c√≥digo de la aventura anterior aqu√≠\n\n# Decidir un ganador\n{if} _\n    {print} '¬°Empate! ¬°Juega de nuevo!'\n{elif} _\n    {print} '¬°Ganaste!'\n{elif} _ :\n    {if} _:\n        {print} _\n    {else}:\n        {print} _\n{else}:\n    _\n```\n"
                story_text: "¬°En las √∫ltimas 3 aventuras has creado un juego de blackjack que casi funciona! ¬°Lo √∫nico que queda por hacer es decidir el ganador!\n\n### Ejercicio\n***Pega tu c√≥digo de la aventura anterior*** Empieza pegando el c√≥digo que has hecho hasta ahora en el campo de programaci√≥n.\n\n***Decidir un ganador***\nLo primero de todo, si t√∫ y el crupier teneis la misma puntuaci√≥n, es un empate.\nEn segundo lugar, si el crupier tieme m√°s de 21 puntos y t√∫ no, tu ganas.\nTercero, si tanto t√∫ como el crupier teneis menos de 22 puntos, tenemos que ver quien est√° m√°s cerca a 21. Hacemos esto comparando quien tiene la puntuaci√≥n mayor. Si tu puntuaci√≥n es mayor que la del crupier, entonces eres el ganador. Si no, el crupier gana.\nPor √∫ltimo, en cualquier otra situaci√≥n (p. ej., tu tienes m√°s de 21 puntos y el crupier no, o ambos teneis m√°s de 21 puntos) t√∫ pierdes.\n\n***¬°Disfruta del juego!***\n¬øEl juego funciona correctamente? ¬°Increible! ¬°Has hecho un gran trabajo! ¬°Disfruta de tu juego!\nSi no funciona de inmediato, no te preocupes, quiz√° hayas cometido un error. Mant√©n la calma y depura tu c√≥digo con el bot√≥n de la mariquita.\n"
    hangman_3:
        name: Ahorcado 3
        description: Ahorcado 3
        levels:
            17:
                example_code: "```\n# Crea una funci√≥n que dibuje el ahorcado\n{define} dibujar_ahorcado {with} paso:\n    {if} paso == 1:\n        {color} blanco\n        {forward} -100\n        {turn} 90\n        {forward} -50\n        {color} negro\n        {forward} 100\n        {forward} -50\n\n    {if} paso == 2:\n        _\n# Pega tu juego del ahorcado aqu√≠\n\n```\n"
                story_text: "En el juego del ahorcado, los errores se muestran dibujando una parte del ahorcado cada vez que se comete un error.\n¬°Ahora a√±adimos esos dibujos con nuestra tortuga!\n\n# ## Ejercicio\n***Crea una funci√≥n que dibuje al ahorcado*** Crea una funci√≥n que dibuje al ahorcado en 10 pasos. Ya hemos realizado el paso 1 para ti.\n\n***Prueba la funci√≥n*** Prueba la funci√≥n llam√°ndola con 10. Si est√°s conforme con la funci√≥n, elimina la l√≠nea que la llama por ahora. Llamaremos a la funci√≥n cuando el jugador cometa un error.\n\n***Pega tu juego del ahorcado debajo de tu funci√≥n*** Vuelve a la aventura anterior y copia tu juego del ahorcado. Pega el juego debajo de tu funci√≥n.\n\n***Llamar a la funci√≥n cuando el jugador comete un error*** En la l√≠nea `mistakes_made = mistakes_made + 1` llamaremos a la funci√≥n. Queremos que la tortuga d√© la misma cantidad de pasos que errores ha cometido el jugador, por lo que llamamos a la funci√≥n con `mistakes_made` como argumento.\n\n***¬°Disfruta tu juego!***\n<div class=\"w-full flex flex-row gap-2\">\n    El ahorcado podr√≠a verse as√≠: <img src=\"https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129\" width=\"100\">\n</div>\n"
        default_save_name: Ahorcado_3
    simon_2:
        default_save_name: Sim√≥n
        name: Sim√≥n dice 2
        description: Haz un juego de Sim√≥n dice
        levels:
            16:
                example_code: "```\n# Pega tu c√≥digo aqu√≠\n\n\n# Crea una funci√≥n que cree la secuencia_jugador\n{define} _\n    {for} _\n        _ '¬øCu√°l es el color n√∫mero ' i '?'\n        {add} respuesta {to_list} _\n\n# Configurar\nnivel = _\njuego_terminado = _\n{print} _\n_ 1\n_\n```\n"
                story_text: "¬°Continuaremos con nuestro juego de Sim√≥n dice!\n\n### Ejercicio\n***Pega tu c√≥digo aqu√≠*** Pega tu c√≥digo del nivel anterior aqu√≠. No olvides eliminar la parte que se utilizaba para probar las funciones.\n\n***Crea una funci√≥n que cree la secuencia_jugador*** La lista `player_sequence` se utiliza para capturar las respuestas del jugador. Primero, definimos la funci√≥n con el nivel de argumento.\nDespu√©s, preguntamos a nivel de veces qu√© color han elegido. Llamamos a esa variable `answer`. Despu√©s a√±adimos la variable `answer` a la lista secuencia_jugador.\n\n***Configurar el juego*** Antes de que programemos el juego en la siguiente aventura, necesitaremos algunas variables iniciales. Primero, estableceremos la variable `level` a 1 y la variable `game_over` a Falso.\nEntonces haremos una introducci√≥n para el juego. Imprimiremos '¬°Bienvenido a Sim√≥n dice!' y limpiaremos la pantalla tras 1 segundo.\n\n***¬°Continua a la siguiente aventura para completar el juego!*** No olvides copiar tu c√≥digo y llev√°rtelo a la siguiente aventura.\n"
    simon_3:
        default_save_name: Sim√≥n
        name: Sim√≥n dice 3
        description: Haz un juego de Sim√≥n dice
        levels:
            16:
                example_code: "```\n# Pega tu c√≥digo aqu√≠\n\n# El juego\n{while} juego_terminado _\n    {print} _\n    _\n    _\n    _ = ['vac√≠a', 'lista']\n    {remove} _\n    {remove} _\n    {call} _\n    {call} _ {with} _\n    {call} _ {with} _\n    {if} secuencia_jugador == _\n        _\n        _\n        _\n    {else}\n        _\n        juego_terminado = _\n```\n"
                story_text: "¬°En esta aventura programaremos el juego de Sim√≥n dice!\n\n### Ejercicio\n***Pega tu c√≥digo*** Copia tu c√≥digo de la aventura anterior y p√©galo aqu√≠.\n\n***Programa el juego*** Empezamos asegur√°ndonos que el juego contin√∫a mientras no se termine. Despu√©s imprimimos en qu√© nivel est√° el jugador, utilizamos la variable para ello. Solo mostramos eso durante 1 segundo y despu√©s volvemos a limpiar la pantalla.\nAhora, tenemos que crear la lista vac√≠a secuencia_jugador. Ya hemos programado como rellenar la lista, con nuestra funci√≥n `player_sequence`, pero nunca hemos hecho la propia lista. Para crear la lista utilizamos el mismo truco que hicimos en la pesta√±a anterior.\nHaremos un lista con las palabras 'vac√≠a' y 'lista' en ella, y entonces eliminamos ambas palabras. Despu√©s, llamaremos a las 3 funciones que hemos creado.\nPor √∫ltimo, tendremos que comprobar si el jugador ha dado las respuestas correctas (por lo que la secuencia_jugador y la secuencia_simon son las mismas).\nSi ese es el caso, If that's the case, elogiaremos al jugador. Espera 1 segundo y aumenta el nivel en 1.\n¬øHa dado el jugador una respuesta incorrecta? Se lo diremos y terminaremos el juego estableciendo juego_terminado a 'Verdadero'\n\n***¬°Disfruta del juego!*** ¬°Gran trabajo! ¬øNo funciona tu juego? ¬°Utiliza el bot√≥n con el icono de la mariquita para depurar tu c√≥digo!\n"
    tic_2:
        default_save_name: Tic
        description: ¬°Juega una partida de Tres en raya!
        name: Tres en raya 2
        levels:
            16:
                example_code: "```\n# Pega tu c√≥digo de la ventura anterior aqu√≠\n\n# A√±adir variables\njuego_terminado = _\nsigno = _\n\n# El juego\n{while} _\n    opcion = _ '¬øJugador ' signo '_?'\n    tablero[opcion] = _\n    _ imprimir_tablero\n    juego_terminado = {ask} _\n    {if} signo = 'o'\n        signo = _\n    _\n        signo = _\n```\n"
                story_text: "En la aventura anterior hemos aprendido a c√≥mo crear un terreno de juego. ¬°Ahora aprender√°s a c√≥mo crear el juego!\n\n### Ejercicio\n***Pega tu c√≥digo*** Empieza pegando tu c√≥digo de la aventura anterior aqu√≠.\n\n***A√±ade variables*** Debajo de tu lista llamada `field` a√±adiremos 2 variables m√°s que necesitaremos para programar el juego.\nLa variable `game_over` nos dice si el juego se ha terminado, y deber√≠a ser 'no' al inicio del juego.\nLa variable `sign` nos dice si es el turno del jugador x o del jugador o. Establece la variable a 'x'.\n\n***El juego*** Primero utiliza el comando `{while}`, para asegurar que el juego sigue en curso mientras la variable juego_terminado est√© establecida en no.\nDurante el juego, primero preguntamos al jugador que celda elige. Entonces cambiamos el campo con el n√∫mero que eligan en su signo.\nDespu√©s imprimimos el tablero de nuevo y preguntamos al jugador si ya ha ganado. Por √∫ltimo queremos cambiar a quien le toca, as√≠ que si el signo es 'x' deber√≠a cambiar a 'o' y a la inversa.\n\n***Prueba tu juego*** ¬øFunciona? Genial, ¬°divi√©rtete jugando al juego! Si no, utiliza el bot√≥n con el icono de la mariquita para depurar tu c√≥digo.\nSin embargo te habr√°s dado cuenta de un error en c√≥digo, ¬°puedes robar la celda del otro jugador! Si el otro elige la celda 1, simplemente puedes introducir 1 tras √©l y robarle su celda.\n¬°Eso no es justo! Ve a la siguiente aventura para aprender a solucionar este problema.\n"
    tic_3:
        description: ¬°Juega una partida de Tres en raya!
        default_save_name: Tic
        levels:
            16:
                example_code: "```\n# Pega tu c√≥digo aqu√≠\n\n# Utiliza esto para solucionar el error\n{if} _ = '.'\n    campo[eleccion] = signo\n{else}\n    {print} _\n    _\n```\n"
                story_text: "Habr√°s notado un error en el c√≥digo que hiciste en la aventura anterior. ¬°Puedes robar la celda de otro jugador! Si el otro jugador elige la celda 1, simplemente puedes introducir 1 tras √©l y robarle su celda.\n¬°Eso no es justo! En esta aventura arreglaremos este error.\n\n### Ejercicio\n***Pega tu c√≥digo aqu√≠*** Pega tu c√≥digo de la aventura anterior aqu√≠.\n\n***Arregla el error*** Para arreglar el error reemplazamos la l√≠nea que dice `field[choice] = sign`. Esto convierte cualquier celda que el jugador haya elegido en su signo.\nVe a la cabecera que dice 'Utiliza esto para solucionar el error' y completa el c√≥digo. Primero queremos comprobar si la celda elegida est√° todav√≠a vac√≠a, tal que `if field[choice] = '.'`. Si este es el caso, se te permite ocuparla.\nDespu√©s, hacemos un comando sino e imprimimos 'Lo sentimos, esta celda ya est√° ocupada' si la celda no est√° vac√≠a. Por √∫ltimo, a√±adimos un comando `{sleep}` , para que los jugadores puedan leer el texto antes de que se borre de nuevo.\nAhora copia este fragmento de c√≥digo y reemplaza la l√≠nea `field[choice] = sign` con este nuevo fragmento de c√≥digo.\n\n***¬°Juega a tu juego!*** ¬°Ahora el juego deber√≠a de funcionar correctamente! ¬°Buen trabajo!\nEl √∫nico defecto es que te puede molestar un poco que el juego te pregunte continuamente si ya has ganado. ¬øQuieres corregir esto? ¬°Ve al nivel 17 y lo arreglaremos!\n"
        name: Tres en raya 3
    simon:
        default_save_name: Sim√≥n
        name: Sim√≥n dice
        levels:
            16:
                example_code: "```\n# Haz 2 listas\ncolores = _\n_ = ['vac√≠a', 'lista']\n{remove} _ {from} secuencia_simon\n{remove} _\n\n# Crea una funci√≥n que a√±ada un color\n_ a√±adir_color_aleatorio\n    _\n    {add} _\n\n# Crea una funci√≥n que muestre la secuencia_simon\n{define} _\n    {for} i {in} {range} 1 {to} _\n        {print} _\n        _\n        _\n\n# Prueba tu programa\n{call} _\n{call} mostrar_secuencia_simon {with} 1\n```\n"
                story_text: "¬°Hagamos un juego de Sim√≥n dice! Sim√≥n dice es un juego de memoria en el que a cada jugador se le da un color. Ellos tienen que repetir ese color de nuevo.\nSi lo consigues correctamente se a√±ade un color a la secuencia, por lo que ahora tienen que recordar 2 colores, despu√©s 3, despu√©s 4, etc. El juego se para tan pronto como un jugador cometa un fallo.\n\n### Ejercicio\nEn esta primera parte de la aventura de Sim√≥n dice, dejaremos que el ordenador elija un color aleatorio y lo a√±ada a la lista.\n\n***Haz 2 listas*** Primero, haz una lista llamada `colors` y rellenala con los colores rojo, amarillo, verde y azul.\nDespu√©s haz una lista llamada `simon_sequence`. Esta lista se utilizar√° como la respuesta.\nAl inicio del juego, esta lista debe estar vac√≠a. Por desgracia, no podemos crear una lista vac√≠a (todav√≠a), as√≠ que primero la rellenaremos con las palabras 'vac√≠a' y 'lista' y las eliminaremos inmediatamente de la lista.\n\n***Crear una funci√≥n que a√±ada un color a la secuencia*** Ahora que tenemos una lista vacia llamada secuencia_simon, podemos empezar a rellenarla con colores aleatorios.\nEsto lo hacemos con una funci√≥n, as√≠ que podemos llamarla cada vez que haya un nivel nuevo en nuestro juego. Crea una funci√≥n llamada `add_random_color`.\nEntonces crea la variable color_aleatorio y establ√©cela a un color aleatorio. Despu√©s, a√±ade este color aleatorio a la secuencia_simon.\n\n***Crea una funci√≥n que muestre la secuencia_simon*** Empieza nombrando la nueva funci√≥n `show_simon_sequence` con `level` como argumento. Ahora queremos mostrar cuantos colores como el nivel en el que estemos (en el nivel 1 veremos 1 color, 2 colores para el nivel 2, etc.).\nAs√≠ que repetimos tantas veces `level`, para imprimir `simon_sequence[i]`. Cada vez que se muestra un color, espero 1 segundo y borra la pantalla.\n\n***Prueba tu juego*** Antes de pasar al siguiente nivel, prueba si las funciones funcionan llam√°ndolas a ambas. Si funcionan, deber√≠as ver un color aleatorio en tu pantalla de resultado.\n¬°Elimina la parte de prueba de tu c√≥digo, copia el c√≥digo y contin√∫a a la siguiente aventura para aprender m√°s sobre el juego de Sim√≥n dice!\n"
        description: Haz un juego de Sim√≥n dice
