adventures:
    story:
        name: 故事
        default_save_name: 故事
        description: 创建一个短故事
        levels:
            1:
                story_text: |
                    在第1级中你可以自己添加角色创作一个有不同主角的故事动画。

                    在第一行，使用`{ask}`，问谁是故事的主角。

                    在这第一行之后，如果需要打印这个句子，就用`{print}`开始这个句子。
                    如果你想让你的主角的名字出现在句子的末尾，你可以用`{echo}`。
                example_code: |
                    ```
                    {ask} 这个故事的主人公是（谁）
                    {print}主人公现在要到森林里去散步
                    {echo} 他们有点害怕，
                    {print} 听到到处都有疯狂的声音
                    {print} 他们害怕这是一片闹鬼的森林
                    ```
                story_text_2: |
                    ### 练习
                    现在创建至少有6行代码的你自己的故事。
                    这个故事不能与示例代码相同。
                    至少要使用一个`{ask}`和一个`{echo}`命令。
                    你可以把它写成任何你喜欢的主题。
                    如果你想不出来，可以使用我们的给你的选择：看电影、体育比赛或动物园的一天。
            2:
                story_text: |
                    在第2关，你可以让你的故事更有趣些。你的主人公的名字可以放在句子里的任何位置了。

                    为此你确实需要多写一点代码。你需要先给主人公一个名字。

                    然后就可以把名字放在句子里的任何位置。
                example_code: |-
                    ```
                    名字 {is} {ask} 主角的名字是什么？
                    {print} 名字 现在要去森林里散步了
                    {print} 名字 有点害怕
                    {print} 突然，他听到一个疯狂的声音……
                    {sleep}
                    {print} 名字 害怕这个森林里面闹鬼
                    ```
                story_text_2: |
                    ### 练习
                    现在是时候将变量添加到你在前一个关卡中创造的故事中了。
                    转到“我的程序”，寻找你的1级故事冒险并复制代码。将代码粘贴到这个关卡的输入屏幕上。

                    这段代码在本关不会起作用，因为你还没有使用变量。
                    把你代码中的`{ask}`命令和`{echo}`命令改成你在本关学到的正确形式。

                    **另外**在你的代码中添加一个`{sleep}`命令，在你的故事中建立起紧张感。
            3:
                story_text: |
                    在第3关，你可以让你的故事更有趣些。你可以随机选择怪物、动物或者其它障碍，比如：
                example_code: |
                    ```
                    动物们 {is} 🦔, 🐿, 🦉, 🦇
                    {print} 他们现在听到动物的声音 动物们 {at} {random}
                    ```
                story_text_2: |
                    你的故事也用得上`{add}`命令。
                example_code_2: |
                    ```
                    {print} 他听到一个声音
                    动物们 {is} 🐿，🦔，🦇，🦉
                    某动物 {is} {ask} 你觉得它是什么？
                    {add} 某动物 {to_list} 动物们
                    {print} 它 是 动物们 {at} {random}
                    ```
                story_text_3: |
                    这是您的故事中`{remove}`命令的一个示例

                    ### 练习
                    将您的故事从以前的关卡复制到此关卡。
                    在这个级别中，您学习了3个新命令`{at} {random}`、`{add} {to_list}`和`{remove} {from}`。
                    将新的代码行添加到您的故事中，以便所有新命令在故事中至少出现一次。
                example_code_3: |
                    ```
                    {print} 他的背包太重了。
                    {print} 包里有一瓶水，一个手电筒和一块砖。
                    包 {is} 水, 手电筒, 砖
                    扔掉的 {is} {ask} 他应该扔掉哪个东西？
                    {remove} 扔掉的 {from} 包
                    ```
            4:
                story_text: |
                    ### 练习
                    复制示例代码，并通过在第1行和第2行空白处添加引号来完成它。
                    第3行和第4行中的空白不应该用引号替换，而应该用`{sleep}`和`{clear}`命令替换。你能做到吗?

                    ### 练习2
                    回到上一个关卡，复制你的故事代码。通过在适当的位置添加引号，让代码在这个关卡中工作。
                    注意：你的故事中的变量应该在引号之外。就像示例代码的第二行一样。在这一行中，变量名放在引号之外。
                example_code: |
                    ```
                    姓名 {is} {ask} _ 你叫什么名字？ _
                    {print} _主角叫_名字
                    _
                    _
                    {print} name _ 现在要去树林里散步 _
                    {print}名字_有点害怕_
                    动物{is} 🦔、🐿、🦉、🦇
                    {print} _ 他听到 _ 动物的声音 {at} {random}
                    {print}名字_恐怕这是一个闹鬼的森林_
                    ```
            5:
                story_text: |
                    在此级别中，你可以设计不同的结局，这将使你的故事更加有趣。
                    在范例代码中，你可以看到如何设计两个不同的结局。

                    ### 练习1
                    请选择一个主题然后用至少6行代码写一个新的小故事。
                    没有灵感？可以从这些主题中选一个：超级英雄、无聊的学校生活、搁浅在荒岛上。

                    现在给玩家一个机会选择故事的结局，可以是好的结局也可以是坏的结局，就像范例代码中的那样。
                    对这两种结局进行编程。

                    ### 练习2
                    复制你在前几级自己的冒险活动-故事中创建的故事。
                    想办法给你的故事添加至少2个`{if}` 和`{else}` 命令。
                    这可以是一个好的或坏的结局，但你也可以尝试用其他的方式来加入这些命令。
                example_code: |
                    ```
                    名字 {is} {ask} '谁在森林里行走？'
                    {print} 名字 '走在森林里'
                    {print} 名字 '遇到了一头怪物'
                    结局 {is} {ask} '你想看好结局还是坏结局？'
                    {if} 结局 {is} 好 {print} 名字 '拔出了剑，怪物立即逃跑了'
                    {else} {print} '怪物吃掉了' 名字
                    ```
            7:
                story_text: "在故事里，有人会重复同一个词好几次。比如，当有人在呼救或者唱歌。\n在这一级，你可以通过`{repeat}`在故事中加入这种重复。\n \n### 练习 \n在你自己的故事中加入重复的内容。返回你保存的程序中，选择第6级的故事程序，\n找到一个包含`{print}` 的行，然后重复它！\n"
                example_code: |
                    ```
                    {print} '王子不断地呼救'
                    {repeat} 5 {times} {print} '救命啊！'
                    {print} '为什么没有人来救我？'
                    ```
            8:
                story_text: "在这一级中，你可以在你的`{if}`条件语句中使用多行，这样你就可以升级你的好的或坏的结局！\n\n### 练习1\n代码范例中显示了两种不同的结局；一种是主人公跳上时光机，另一种是没有跳上时光机。\n 每个结局都至少需要用一个句子完成空格。 \n**（额外的）**使故事更长。故事中会发生什么？您还可以添加具有不同选项的第二个 `{ask}`\n \n### 练习2\n返回你保存的程序中，从第5级选择你的故事程序。现在写一个好的和一个坏的结局，每个结局至少有三行长!\n"
                example_code: |
                    ```
                    {print} '哦，不！霸王龙来了！'
                    结局 = {ask} '你想要好结局还是坏结局？'
                    {if} 结局 {is} 好
                        {print} '理查德在千钧一发之际跳回了时光机里！'
                        {print} _
                    {else}
                        {print} '哦，不！理查德太慢了……'
                        {print} _
                    ```
            9:
                story_text: "在这一级，你可以通过嵌套，在一个 `{if}`和`{repeat}` 语句里包含其它 `{if}`和`{repeat}`语句。\n 这让你有了很多选择，极大地提高了故事地互动性。\n\n### 练习1 \n完成代码，使`{if}` 能正常工作。 \n\n### 练习2 \n 为故事中罗宾也回家的部分添加一个`{if}` 和`{else}`语句 。 \n\n### 练习3 \n回到你第8级的故事中，在另一个`{if}` 条件语句里面至少使用两个`{if}`条件语句。\n"
                example_code: |
                    ```
                    {print} '罗宾来到了市区'
                    地点 = {ask} '罗宾是要去商店还是回家？'
                    {if} 地点 {is} 商店
                        {print} '她走进了商店。'
                        {print} '罗宾发现了一本有趣的书'
                        书 = {ask} '罗宾买了这本书吗？'
                        {if} 书 {is} 是
                        {print}_ '罗宾买了这本书，回家了'
                         _{else}
                        _{print} '罗宾离开商店，回家了'
                    {else}
                        {print} '罗宾回了家'
                    ```
            10:
                story_text: |
                    在这一级，你可以在你的故事里使用 {for} 命令。这样很容易就能写出儿童书里的“棕熊，棕熊，你看到了什么”的故事。

                     ### 练习

                    请看<a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> the story</a> 如果你不知道这个故事，请确保它是按照书中的内容打印的。
                example_code: "```\n动物们 = _ , _ , _ \n{print} '棕熊，棕熊 '\n{print} '你看到了什么？'\n```\n"
            13:
                story_text: |
                    通过使用`{and}`和`{or}`命令，你可以让你的故事更通用。你可以问两个问题，然后对两个答案的组合做出回应。

                    ### 练习1
                    查看示例代码并完成它。然后再添加至少2个带有`{and}`或`{or}`的`{if}`代码。

                    ### 练习2
                    从之前的关卡中找到一个故事，并添加一个`{and}`或`{or}`。
                example_code: |
                    ```
                    {print} '我们的英雄正在穿过森林'
                    {print} '路径分两路'
                    path= {ask} '她应该选择哪条路径？'
                    武器={ask} 她画的是什么武器？'
                    {if} 路径 {is} '左' {and} 武器 {is} '剑'
                        _
                    ```
            15:
                story_text: |
                    运用`{while}`循环能让你的故事更有趣。比如，用`{while} game == 'on'`可以让游戏一直进行到结束为止。
                    或者用`{while} sword == 'lost'`来要求玩家必须先找到剑，才能继续游戏。

                    ### 练习
                    示例代码向您展示了如何在故事中使用`{while}`循环。现在**想想你自己的场景**，在这个场景中，玩家必须在继续之前找到一些东西。
                example_code: |
                    ```
                    钥匙 = '丢失'
                    {print} '你站在你的花园里，你的钥匙丢了。'
                    {print} '你想去哪里找它们？'
                    {print} '你可以选择：树、花坛、石头、邮筒'
                    {while} 钥匙 == '丢失'
                        位置 = {ask} '你想去哪里找？'
                        {if} 位置 == '花坛'
                            {print} '它们在这里！'
                            钥匙 = '找到'
                        {else}
                            {print} '没有，他们不在'位置
                    {print} '现在你可以进入房子了！'
                    ```
            18:
                story_text: |
                    我们将打印另一个故事，但是现在我们必须使用带有`{print}`的括号。

                    ### 练习1
                    写一个至少5句话的故事。你现在还不需要使用'name'。
                example_code: |
                    ```
                    {print}('欢迎来到这个故事！')
                    ```
                story_text_2: |
                    ### 练习 2
                    我们已经为您准备了一个 `{input}`。 首先，在您的故事中使用 `name` 变量。
                    然后，请添加第二个 `{ask}` 并使用该变量。
                    提示：记得文本和变量之间 `{print}` 中的逗号！
                example_code_2: |
                    ```
                    naam = {input}("你叫什么名字？")
                    {print}('欢迎来到这个故事！')
                    ```
    add_remove_command:
        default_save_name: 添加_删除_命令
        description: 简介 {add}{to_list}和{remove}{from}
        levels:
            3:
                story_text: |
                    ## 添加到
                    可以使用`{add} {to_list}`命令将项目添加到列表中。要将项目添加到列表中，可以简单地键入：`{add} penguin {to_list} animals`，或者可以像示例代码中那样使用`{ask}`命令。
                example_code: |
                    ```
                    动物 {is} 狗, 猫, 袋鼠
                    喜欢的动物 {is} {ask} 你最喜欢的动物是什么？
                    {add} 喜欢的动物 {to_list} 动物
                    {print} 我选择 动物 {at} {random}
                    ```
                story_text_2: |
                    ## 从...移除
                    如果你可以将项目添加到列表中，当然你也可以将其删除。可以使用 `{remove} {from}` 指令.
                example_code_2: |
                    ```
                    动物们 {is} 狗, 猫, 袋鼠
                    不喜欢 {is} {ask} 你不喜欢什么动物？
                    {remove} 不喜欢 {from} 动物们
                    {print} 我选择 动物们 {at} {random}
                    ```
                story_text_3: |
                    ### 练习
                    在这个虚拟餐厅中尝试新命令。将玩家想要的口味添加到列表中，并删除他们过敏的口味。
                example_code_3: "```\n{print} 神秘奶昔\n口味 {is} 草莓、巧克力、香草\n希望 {is} {ask} 您希望什么口味？\n_\n过敏 {is} {ask} 您对任何口味过敏吗？\n_\n{print} 您会得到 {at} {random} 口味的奶昔\n```\n"
        name: '{add} {to_list} & {remove} {from}'
    and_or_command:
        default_save_name: 与和或
        description: 介绍{and}和{or}
        levels:
            13:
                story_text: |-
                    我们现在要了解 `{and}`和 `{or}`!如果你想查两个语句, 你不用使用多个`{if}`，但可以使用 `{and}` 和`{or}`.

                    如果你用 `{and}`, `{and}` 连接的左右两种陈述必须都是真的。 我们也可以使用 `{or}`. 那么只需要一种陈述是对的。
                example_code: |
                    ```
                    名字 = {ask} '你叫什么名字?'
                    年龄 = {ask} '你多少岁了?'
                    {if} 名字 {is} '海蒂' {and} 年龄 {is} 2
                        {print} '你就是真的海蒂!'
                    ```
        name: '{and} & {or}'
    ask_command:
        default_save_name: 提问命令
        description: '{ask}命令介绍'
        levels:
            1:
                story_text: |
                    ## 提问命令
                    现在你可以用 `{print}`来命令, 你准备好学习新指令: `{ask}`. 用 `{ask}` 来指令, 你可以提一个问题. 试试吧:
                example_code: |
                    ```
                    {print} 你好!
                    {ask} 你叫什么名字?
                    ```
                story_text_2: |
                    ##  `{echo}` 指令
                    如果想让计算机将结果重复一遍，你可以使用 `{echo}` 命令。答案将在行尾输出，因此在本例中，结果将在 hello 之后输出。
                example_code_2: |
                    ```
                    {print} 你好!
                    {ask} 你叫什么名字?
                    {echo} 你好
                    ```
                story_text_3: |
                    ### 练习
                    尝试使用`{ask}`和 `{echo}` 命令，首先，完成填空以使该程序成功运行。
                    然后使用`{ask}`命令再问 2 个问题，在每个`{ask}`之后使用`{echo}`在屏幕上打印答案。
                example_code_3: |
                    ```
                    _ 你好吗?
                    _
                    ```
            2:
                story_text: |
                    ## 询问指令
                    现在我们可以在代码中使用**变量**，我们可以不再使用`{echo}`命令。
                    我们可以使用变量来保存问题的答案，这样我们就可以在代码中使用多个问题的答案。
                    一探究竟：

                    这样你的代码就变得具有交互性了！
                example_code: |
                    ```
                    名字 {is} {ask} 你叫什么名字?
                    {print} 你好名字
                    年龄 {is} {ask} 你多大了?
                    {print} 名字是年龄.
                    ```
                story_text_2: |
                    ### 练习
                    在之前的冒险中，您练习了使用 `{is}` 命令设置变量。
                    您至少创建了 3 个变量，并使用了 print 命令。
                    现在，我们希望您让变量具有交互性，而不是设置变量，就像我们在示例中所做的那样。

                    从之前的冒险中复制您的代码，并使用 `{ask}` 命令让变量具有交互性。
                example_code_2: |
                    ```
                    动物 {is} {ask} 你喜欢什么 动物?
                    {print} 我喜欢  动物
                    ```
            18:
                story_text: 要转换成Python代码，我们需要做的最后一个更改是替换 `{ask}` 为 `{input}`.
                example_code: |
                    ```
                    {print}('我的名称在是海蒂!')
                    名字 = {input}('你的名字是什么？')
                    {print}('所以你的名字是', 名字)
                    ```
        name: '{ask}'
    blackjack:
        name: 黑杰克
        default_save_name: 黑杰克
        description: 尽可能地接近21
        levels:
            17:
                story_text: |
                    二十一点是一种简单的纸牌游戏，你必须尽可能接近 21 分。你会得到两张牌。每张牌都有其数值，人头牌（杰克、皇后和国王）值 10 分.
                    Ace 值 1 分或 11 分（你可以选择）。庄家，也就是你的对手，也会得到两张牌。
                    如果你愿意，你可以再拿一张牌，它的分数会加到你的总分中。庄家也可以选择再拿一张牌。
                    但要注意不要超过 21 分，因为如果你超过 21 分，你就输了！
                    最接近 21 分但不超过 21 分的玩家获胜!

                    ### 练习
                    在这个冒险中，我们编写了二十一点游戏的第一部分。我们将创建一个函数来计算一张牌值多少分。

                    ***设置变量***
                    首先列出所有牌，从 2 到 Ace。接下来列出人头牌，即杰克、皇后和国王。然后从卡片列表中随机挑选一张卡片作为 card_1。

                    ***创建一个函数来计算点数***
                    创建一个函数来计算一张卡片值多少点数。
                    所有人头牌都值 10 分，Ace 值 11 分，所有其他卡片都值其数字。
                    在函数末尾返回变量“points”。

                    ***测试函数***
                    测试您的函数是否正常工作。通过填写您抽到的卡片来完成第一个打印命令。然后通过使用 card_1 调用函数来完成第二行。
                    运行代码几次。您对结果满意吗？太棒了！然后您可以删除测试部分并继续下一个冒险!
                example_code: "```\n{print} 'BLACKJACK'\n\n# Set these variables\ncards = _\nface_cards = _\ncard_1 =\n\n# 创建一个函数来计算点数\n{define} calculate_points {with} card:\n    {if} card {in} face_cards:\n        points = _\n    {elif} _\n        _\n    {else}:\n        _\n    _ points\n\n# Test your function\n{print} 'Your card is a ' _\n{print} 'That is worth ' _ ' points'.\n```\n"
    calculator:
        name: 计算器
        default_save_name: 计算器
        description: 创建一个计算器
        levels:
            6:
                story_text: |
                    现在你会做数学了，你可以自己做一个计算器！
                example_code: |
                    ```
                    数一 = {ask} '填写第一个数字：'
                    数二 = {ask} '填写第二个数字：'
                    正确答案 = 数一 * 数二
                    {print} 数一 ' 乘以 ' 数二 ' 是 ' 正确答案
                    ```
                story_text_2: |
                    ### 练习
                    上面的计算器会为你计算出答案，但你也可以编写一个程序来测试你自己的运算能力，如下所示：
                    填空使其完整！
                example_code_2: |
                    ```
                    正确答案 = 11 * 27
                    答案 = {ask} '11乘以27是多少？'
                    {if} 答案 {is} _ {print} '做得好！'
                    {else} {print} '错了！是' _
                    ```
                story_text_3: |
                    **额外** 您还可以使用`{random}`让计算机自行生成随机产品。
                example_code_3: |-
                    ```
                    数字 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    数字1 = _
                    数字2 = _
                    正确答案 = number_1 * number_2
                    我的答案 = {ask} '什么是 ' 数1 ' 乘以 ' 数2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    在上一个级别中，您创建了一个计算器。在此级别中，可以扩展该代码，以便它询问多个问题。

                    ### 练习1
                    您可以完成第10行以使代码工作吗？

                    ### 练习2
                    当玩家输入答案时给予反馈，如`{print} 'Correct!'`”或`{print} 'Wrong! The correct answer is ' correct_answer`
                example_code: |
                    ```
                    分数 = 0
                    {repeat} 10 {times}
                        一组数 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        数一 = 一组数 {at} {random}
                        数二 = 一组数 {at} {random}
                        正确答案 = 数一 * 数二
                        {print} 数一 '乘以' 数二 '是多少？'
                        答案 = {ask} '在这里输入你的答案……'
                        {print} '你的答案是' 答案
                        {if} _ {is} _
                            分数 = 分数 + 1
                    {print} '做得好！你的分数是' 分数 '分，满分是10分！'
                    ```
            11:
                story_text: |
                    使用 `{for}`你可以简化乘法运算表的程序。

                    ### 练习 1
                    改进范例代码，使其打印出一个漂亮的乘法表："1 乘以 10 是 10"、"2 乘以 10 是 20"等。

                    ### 练习 2
                    返回到你在 等级10完成的乘法运算表程序，并使用 `{for}` 和 `{range}`对其进行修改。
                example_code: |
                    ```
                    数字 = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * 数字
                    ```
            12:
                story_text: |
                    在本关，你可以编写一个可以计算小数的计算器。

                    ### 练习1
                    填空完成计算。注意小数点使用小数点而不是逗号。

                    ### 练习2
                    创建一个新的数学运行程序，但现在要使用小数。
                    创建一组数据，选择两个数字相乘让玩家回答。
                    当然你有准确的答案！**另外**通过增加生命增加难度：玩家回答错误一次失去一条命，三次回答错误后游戏结束。
                example_code: |
                    ```
                    number1 = {ask} '第一个数字是什么？'
                    number2 = {ask} '第二个数字是多少？'
                    answer =_
                    {print} number1 ' 加 ' number2 ' 是 ' _
                    ```
            13:
                story_text: |
                    ### 练习 1
                    让我们把练习计划变得更难一些。 玩家现在必须正确回答两个问题。 填空以完成该程序。

                    ### 练习 2
                    有时，计算有多个正确答案。 例如，10 可以除以 5 和 2。所以问题是“什么数可以整除 10？” 可以用2和5来回答。
                    要求有多个正确答案的计算，要求玩家回答，并使用`{or}`确定是否正确。
                    清空编程领域并创建您自己的解决方案。
                example_code: |
                    ```
                    answer1 = {ask} '10 乘以 7 是多少？'
                    answer2 = {ask} '6 乘以 7 是多少？'
                    {if} _ _ _ _ _ _ _
                         {print} _
                    ```
            14:
                story_text: |
                    在这个冒险中，你将建立一个计算器来计算你的平均成绩。如果你的计算器正常工作，你可以继续下一个冒险，这允许你添加两个额外的功能。

                    ### 练习1
                    填空使计算器工作。
                    * 从第四行开始，添加一个问题来弄清楚学生的成绩。
                    * 在第五行中，您需要计算所有成绩的总和，因此total = total + grade。
                    * 然后我们可以设置返回值。我们想要返回平均值，也就是总数除以测验次数(4)。
                    * 最后，我们通过调用第8行中的函数来完成代码。

                    你做到了吗?太棒了!你想在你的计算器里再加一些吗?**这个冒险继续在下一个标签!**。
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            {return} _ / 4

                    mean_grade = {call} _
                    {print} '你的平均成绩是' mean_grade
                    ```
            15:
                story_text: |
                    您可以添加 `{while}` 循环到您已经在上一级中学过的计算器游戏中去。 
                    这可以确保玩家在没有回答正确的情况下不能回答下一个问题。

                    ### 练习
                    在函数中添加`{while}`循环，询问玩家数1乘以数2是多少，并打印他们的答案。
                    然后`{call}`（调用）函数。
    calculator_2:
        name: 计算器2
        default_save_name: 计算器2
        description: 计算器2
        levels:
            14:
                story_text: |
                    ### 练习2
                    这是这次冒险的第二部分。**冒险从前一个选项卡开始。
                    当然，你并不总是想要计算4次测试的平均值。你可能想计算10次测试的平均值，或者只计算2次的…
                    我们可以通过添加参数和变量'amount_of_tests'来解决这个问题。
                    *在第3行开始新的一行。通过询问学生他们做了多少次测试来设置amount_of_tests参数。
                    *将第4行中的4改为新的参数amount_of_tests。
                    *最后，将第6行中的4改为amount_of_tests

                    试试你的新程序。它有用吗?

                    ### 练习3
                    你想把你的程序做得更好吗?真棒!在之前的程序中，您只能计算1个科目的平均成绩，但如果您可以计算所有科目的平均成绩，那就更好了!
                    我们不会告诉你怎么做，但我们会给你一个提示：在第1行你的代码开始处：定义带科目的calculate_mean_grade。
                example_code: |
                    ```
                    # 使用你在之前挑战中的代码。
                    ```
    clear_command:
        default_save_name: 清屏命令
        description: '{clear}命令'
        levels:
            4:
                story_text: |
                    是时候学习新命令了！ 使用`{clear}`，您可以清除输出屏幕上的所有文本。 这样您就可以防止屏幕上的文字过多。
                    小心！ 如果你使用`{clear}`命令，请记住在其上方使用`{sleep}`。 否则 海蒂 会清空你的屏幕，而不给你时间阅读，就像在例子中看到的一样！
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} '等待...'
                    {sleep} 3
                    {clear}
                    {print} '惊喜!'
                    ```
    debugging:
        name: 调试
        default_save_name: 调试
        description: 调试你的挑战
        levels:
            1:
                story_text: |-
                    欢迎来到调试冒险。 调试代码意味着消除代码中的错误。
                    这意味着在这些调试冒险中，我们将向您展示尚未运行的代码。
                    你必须找出问题所在并纠正错误。

                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {print} 我喜欢编程
                    你也喜欢编程吗？
                    {echo}
                    {print} 你的爱好是什么？
                    {echo} 你的爱好是
                    ```
            2:
                story_text: |-
                    欢迎来到调试冒险。 调试代码意味着消除代码中的错误。
                    这意味着在这些调试冒险中，我们将为您提供尚未运行的代码。
                    你必须找出问题所在并纠正错误。

                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    目的地{ask} 假期你要去哪里？
                    {print} 飞往目的地的航班于下午 3 点起飞。
                    {ask} 你托运行李了吗？
                    {echo}
                    {print} 让我为您打印您的登机牌。
                    {sleep}
                    干得好！ 旅行愉快！
                    ```
            3:
                story_text: |-
                    欢迎来到调试冒险。 调试代码意味着消除代码中的错误。
                    这意味着在这些调试冒险中，我们将为您提供尚未运行的代码。
                    你必须找出问题所在并纠正错误。

                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ````
                    可选的电影 {is} 德古拉,速度与激情,独自在家,芭比娃娃
                    选中的电影 {is} 电影 {at} {random}
                    {print} 今晚我们将观看 选定中电影
                    喜欢的电影 {ask}你喜欢那部电影吗？
                    {print} 明天我们会看别的东西。
                    {add} 选中的电影{to_list}可选的电影
                    {print} 明天我们看 明天的电影
                    明天的电影 {is} 可选的电影 {at} {random}
                    我去买爆米花！ {print}
                    ````
            4:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {print} '欢迎来到在线图书馆！
                    {ask}你喜欢什么类型的书？
                    {print} 你喜欢类型
                    作者{is} {ask}“你最喜欢的作家是谁？”
                    {print} '作者是你最喜欢的作者'
                    {print} 嗯...我想你应该尝试...书籍{at} {random}
                    ```
            5:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {print} 欢迎来到海蒂泳池！
                    class {is} {ask} '你今天来参加课程吗？'
                    {if} class yes
                    {print}'太棒了！ 你正在加入一个班级！
                    {print} {else} '您将不会参加课程'
                    discount {is} '您有折扣码吗？
                    {if} discount {is} yes
                    discount_answer {is} {ask} '您的折扣代码是什么？'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if}discount_answer {is} {in}discount_codes
                    {print} '那将是 3.50 美元'
                    '那将是 5.50 美元'
                    {print} '祝你游得愉快！'
                    ```
            6:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **提醒! 下面的代码需要修正!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### 练习
                    惊喜！ 该程序看起来更像是输出而不是代码。 然而，我们不希望您只在每行前面添加`{print}`命令。
                    当然，使用 {repeat} 命令修改此程序，将其变成童谣“Brother John (Frère Jacques)”！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    你在睡觉？
                    约翰弟兄！
                    晨钟已敲响！
                    叮、当、当！
                    ```
            8:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |-
                    **警告！ 这段代码需要调试！**
                    ```
                    {print}“欢迎来到 Hedy 的美甲和足疗”
                    bodypart = {ask} '你今天修指甲或脚趾甲了吗？ 或两者？'
                    {if} 身体部位 {is} 两者
                             {print} 那将是 25 美元'
                             价格=25
                         {else}
                             {print} 那将是 18 美元'
                             价格=18
                    color = {ask} 你想要什么颜色？
                    Sparkles = {ask} '你想要一些闪闪发光的东西吗？'
                    {if} 闪闪发光 {is} 是
                         {print} '我们为此额外收取 3 美元'
                    price = price +3
                    {else} {print} '没有闪光' {print} '所以没有额外费用'
                    {sleep} 5
                    {print} '全部完成！ 那将是$'价格'拜托！'
                    {print}'谢谢！ 再见！'
                    ```
            9:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: "**警告！ 这段代码需要调试！**\n```\n{print} '欢迎来到我们的三明治店'\n个数 “您想买多少个三明治？”\n{repeat}个数{times}\n{ask} {is} {ask} '您想要什么类型的三明治或面包？'\n面包刀种类 {is} 白面包、小麦面包、黑麦面包、大蒜面包、无麸质面包\n{if}  选中的面包  in 面包的种类 \n{print}“美妙！”\n{else}\n“抱歉我们不卖那个”\n蘸料 {is} {ask} '您想要什么类型的配料？'\n沙司{is} {ask}“您想要什么类型的酱？”\n{print} 一份 选中的面包，配上配料和酱汁。\n价格 =数量*6\n{print} '这将是' 价格 '美元'\n```\n"
            10:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    names = 穆阿德·哈桑·萨米拉·努拉
                    activities = 放风筝、游泳、徒步旅行、晒太阳
                    {for} name {is} names
                    {print} 在海滩上，名字喜欢活动 {at} {random}
                    ```
            11:
                story_text: |-
                    ### 练习
                    调试这个日历程序。 该程序的输出应该看起来像一个日期列表。
                    例如：

                    ````
                    海蒂日历
                    这是11月的所有日子
                    11 月 1 日
                    11 月 2 日
                    11 月 3 日
                    ````
                    等等。

                    请注意，您必须特别仔细地测试二月份的代码，因为这个月的天数在闰年中会发生变化。
                example_code: |
                    **警告! 这段代码需要调试!**
                    ```
                    {print} '海蒂日历'
                    每月有31天的月份 = January, March, May, July, September, October, December
                    每月有30天的月份 = April, June, August, November
                    月份 = {ask} '你想看哪个月?'
                    {if} 月份 {in} 每月有31天的月份
                        天数 = 31
                        {if} 月份 {in} 每月有30天的月份
                            天数 = 30
                    {if} 月份 = February
                         闰年 = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        年份 = {ask} '是哪年?'
                    {if} 年份 {in} 闰年
                        天数 = 29
                    {else}
                        天数 = 28

                    {print} '这是所有天 ' 飞蛾
                    {for} i {in} {range} 1 {to} 天数
                        {print} 月 i
                    ```
            12:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: "**警告！ 这段代码需要调试！**\n```\n{define} 问候\n问候语 = 'Hello', 'Hi there', 'Goodevening'\n    {print} 问候语 {at} {random}\n\n{define} 点单\n    食物 = {ask} '您想吃什么?'\n    {print} '一份食物'\n    饮料 = '您想喝什么?'\n    {print} '一份饮料' \n    更多 = {ask} '您还要点别的吗?'\n        {if} 更多 {is} ' 不'\n    {print} '好的'\n        {else}\n        {print} '和 ' 更多\n{print} '谢谢你'\n\n{print} '欢迎来到我的餐馆'\n人数 = {ask} '你们今晚有多少人?'\n{for} i {in} {range} 0 {to} 人数\n    {call} 欢迎顾客\n```\n"
            13:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {define}movie_recommendation {with} name
                        action_movies == “虎胆龙威”、“速度与激情”、“无耻混蛋”
                        romance_movies = “真爱至上”、“恋恋笔记本”、“泰坦尼克号”
                        comedy_movies ='憨豆先生' '芭比' '死侍'
                        kids_movies ='小黄人', '帕丁顿熊', 'Encanto'
                        {if} name {is} 'Camila' {or} name {is} 'Manuel'
                            recommended_movie = kids_movie {at} {random}
                        {if} name {is} 'Pedro' {or} 'Gabriella'
                                mood = {ask}'现在心情如何？'
                            {if} mood {is}  '行动'
                                recommended_movie = comedy_movies {at} {random}
                            {if} mood {is}  '浪漫'
                                recommended_movie = romance_movies
                        {if} mood {is} '喜剧'
                                recommended_movie = comedy_movies {at} {random}

                    {print} '我会推荐 ' recommended_movie ' for ' name

                    name = {ask} 谁来观看？”
                    recommendation = {ask} 您想要推荐吗？”
                    {if} recommendaion {is}“是”
                    {print} movie_recommendation {with} name
                    {else}
                    {print}“没问题！”
                    ```
            14:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {define} calculate_heartbeat
                        {print} '将指尖轻轻按在脖子一侧'
                        {print} '(就在你的下巴线下方)'
                        {print} '记录 15 秒内你感觉到的节拍数'
                        beats == {ask} '15 秒内您感觉有多少节拍?'
                        heartbeat = beats*4
                        {print} '你的心跳是' heartbeat
                        {if} heartbeat >= 60 {or} heartbeat <= 100
                            {print} '你的心跳看起来不错'
                        {else}
                            {if} heartbeat > 60
                                {print} '你的心跳似乎太低了'
                            {if} heartbeat < 100
                                {print} '你的心跳似乎太高了'
                            {print} '您可能需要联系医疗专家'

                    measure_heartbeat = {ask} '你想测量你的心跳吗?'
                    {if} measure_heartbeat = '是'
                        {call} measure_heartbeat
                    {else}
                        '没问题'
                    ```
            15:
                story_text: |-
                    ### 练习
                    调试这个随机的儿童故事。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    names = '坦尼娅'、'罗米'、'凯拉'、'奥尔德林'、'阿里'
                    verbs='步行'、'跳跃'、'骑自行车'、'驾驶'、'跑步'
                    locations = '在山顶上', '在超市里', '到游泳池'
                    hiding_spots ='树后面'、桌子下'、盒子里'
                    声音 = '喇叭声', '车祸', '雷声'
                    causes_of_noise = '电视', '放鞭炮的孩子', '神奇大象', '梦'

                    chosen_ name = names {at} {random}
                    chosen_verb = verbs {at} {random}
                    chosen_location = 'locations {at} {random}'
                    chosen_sounds = noises {at} {random}
                    chosen_spot = hiding_spots {random}
                    chosen_causes = causes_of_noise {at} {random}

                    {print} chosen_name ' 是 ' chosen_verb ' ' chosen_location
                    {print} '当他们突然随机听到类似' sounds {at} {random}
                    {print} chosen_name' 环顾四周，但他们无法发现噪音来自哪里'
                    {print} chosen_name ' 躲 ' chosen_spot'
                    {print} '他们试图环顾四周，但从那里看不到任何东西'
                    hidden = '是'
                    {while} hidden = '是'
                        {print} chosen_name '仍然没有看到任何东西'
                    answer = {ask} '是否 ' chosen_name ' 从他们的藏身之处移动?'
                        {if} answer = '是'
                            hidden == '否'
                    {print} 'chosen_name 移自' chosen_spot
                    {print} '然后他们发现这只是' chosen_cause
                    {print} chosen_name '笑着继续他们的一天'
                    {print} 结束
                    ```
            16:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                    提示: 确保您最终只能看到一次分数。
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    country = ['荷兰'，'波兰'，'土耳其'，'津巴布韦'，'泰国'，'巴西'，'秘鲁'，'澳大利亚'，'印度'，'罗马尼亚']
                    capitals = '阿姆斯特丹'、'华沙'、'伊斯坦布尔'、'哈拉雷'、'曼谷'、'巴西利亚'、'利马'、'堪培拉'、'新德里'、'布加勒斯特'
                    score = 0
                    {for} i {in} {range} 0 {to} 10
                        answer = {ask}“国家/地区的首都是多少” countries[i]
                        correct = capital[i]
                        {if} answer = correct
                            {print} 'Correct!'
                        score = score + 1
                        {else}
                            {print}'错误，'capitals[i] '是首都' countries[i]
                        {print} '你得分 ' score' 满分 10 分'

                    ```
            17:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试!**
                    ```
                    {define} food_order
                        toppings = {ask}'意大利辣香肠、金枪鱼、蔬菜还是奶酪？'
                        size = {ask}  '大、中还是小?'
                        number_of_pizza = {ask} '您想要多少个披萨？'

                        {print} '您订购了'
                        {print} number_of_pizzas ' size  ' topping ' pizza'

                    {define} drinks_order
                        drink = {ask}  '水、可乐、冰茶、柠檬水还是咖啡?'
                        number_of_drinks = {ask} '您想要多少这些饮料？'

                        {print} '您订购了'
                        {print} number_of_drinks ' ' drink

                    '欢迎来到海蒂披萨'
                    more_food = {ask} '您想订一份披萨吗？'
                    {while} more_food = '是'
                        {return} food_order
                        more_food = {ask} '您想订一份披萨吗？'
                    more_drinks = {ask} '您想点一些饮料吗？'
                    {while} more_drinks == '是'
                        {call} drink_order
                        more_drinks == {ask} '您想订购更多饮料吗？'


                    {print} '感谢订购！'
                    ```
            18:
                story_text: |-
                    ### 练习
                    从第 16 级开始调试这个 Old MacDonald 程序。祝你好运！
                example_code: "**警告！ 这段代码需要调试！**\n```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} '老麦当劳有一个农场'\n    {print} 'E I E I O!'\n    {print} '在那个农场他有一只' animal\n    {print} 'E I E I O!'\n    {print} '这里有‘sound sound\n    {print} '以及那也有' sound sound \n    {print} '这里有 ' sound\n    {print} '那也有 ' sound\n    {print} '到处有 ' sound sound\n```\n"
    default:
        name: 介绍
        default_save_name: 介绍
        description: 级别说明
        levels:
            1:
                story_text: |
                    欢迎来到海蒂!在第一级，你可逐步开始编程。

                    自己试试代码吧!黄色按钮将示例代码复制到编程字段中。
                    然后按下编程字段下的绿色“运行代码”按钮来运行代码。

                    准备好了吗?然后转到下一个选项卡学习如何制作自己的代码!
            2:
                story_text: |
                    恭喜！ 您已达到第 2 级。希望您已经编写了一些很棒的代码！
                    在第一级中，您可能已经注意到 `{echo}`命令一次只能保存一位信息。
                    例如，在餐厅冒险中，您可以回应顾客想吃什么或他们想喝什么，但不能在一句话中同时回应两者。

                    这在第 2 级中发生了变化。在第 2 级中，您将学习如何使用变量，它允许您保存多条信息并将其打印在您想要的任何位置。
                    那么让我们转到下一个选项卡！
                example_code: |
                    **警告！ 此代码不起作用！**
                    在 Hedy 中，命令有时会发生变化。 例如，`{echo}` 仅适用于级别 1。在本级别中，您将学习一种更好的方法来回显答案。
                    ```
                    {print} 欢迎来到 Hedy's
                    {ask}你想吃什么？
                    {echo}所以你想要
                    {ask}你想喝什么？
                    {echo}所以你想要
                    ```
            3:
                story_text: |
                    在上一关中，您已经了解了变量是什么以及如何使用它来使您的冒险更具互动性。
                    但是...这并不是您可以使用变量做的唯一事情！ 您还可以使用变量来创建列表。
                    您甚至可以让 Hedy 从列表中随机选择一个单词，这样您就可以制作真正的游戏！
                    快速浏览下一个选项卡！
            4:
                story_text: |
                    在前面的级别中，您一直在练习变量，但您可能遇到过这个问题。
                    您可能尝试过运行如下代码：

                    当然你想打印

                    `My name is Sophie`

                    但海蒂打印

                    `My Sophie is Sophie`.

                    在此级别中，此问题通过使用引号得到解决。
                example_code: |
                    ````
                    名字{is}苏菲
                    {print} 我的名字是 名字
                    ````
            5:
                story_text: |
                    在前面的级别中，您已经学会了使用`{at} {random}`，这使得您每次运行代码时的游戏都不同。
                    但它并不是真正的互动，玩家对游戏中发生的事情没有任何影响。

                    在本级别中，您将学习`{if}`命令，它允许您在程序中给出不同的响应。 例如，您可以通过这种方式为您的计算机设置一个无人知晓的密码。
                    现在，让我们转到下一个选项卡以获取新命令！
                example_code: |
                    ````
                    密码 {is} {ask} '正确的密码是什么？'
                    ````
            6:
                story_text: |
                    在上一级别中，您已经练习了`{ask}`和`{if}`。 例如，您可以询问客人想吃什么。
                    但您还不能做的是计算每个人晚餐的价格。

                    当前级别使您可以在程序中使用加法、减法和乘法。 通过这种方式，您可以计算餐厅的价格，但您也可以添加密码，为您的朋友和家人提供折扣。
                    当前级别的另一个选择是编写您自己的数学游戏，供您的弟弟或妹妹练习乘法。
                    你自己去看看吧！
                example_code: |
                    ```
                    food_price {is} 0
                    drink_price {is} 0
                    total_price {is} 0
                    {print}“欢迎来到麦克海蒂”
                    order {is} {ask} '你想吃什么？'
                    {if} order {is} 汉堡包 food_price {is} 5
                    {if} order{is} 薯条 food_price {is} 2
                    drink{is} {ask}“你想喝什么？”
                    {if} drink {is} 水 drink_price {is} 0
                    {else} drink_price{is} 3
                    total_price {is} food_price + drink_price
                    {print} '请付'total_price'美元'
                    ```
            7:
                story_text: |
                    做得好！ 您已经达到了下一个级别，这意味着您已经练习了`{if}`和`{else}`。 您可能已经注意到您的代码变得越来越长。
                    例如，如果您想编程“生日快乐”。

                    这是大量的代码，主要是一遍又一遍地重复相同的单词。 幸运的是，在下一个选项卡中，您将学习使用`{repeat}`命令的解决方案，该解决方案允许您多次重复一行代码。
                example_code: |
                    ```
                    {print} '祝你生日快乐'
                    {print} '祝你生日快乐'
                    {print} '亲爱的海蒂，生日快乐'
                    {print} '祝你生日快乐'
                    ```
            8:
                story_text: |
                    现在您已经学会了如何重复一行代码。 这很有用，但并不总是足够的。 有时您想一次重复多行。
                    此级别允许您对几行代码进行分组，并一次重复这一小组代码！
                example_code: |
                    ````
                    {repeat} 5 {times} {print} '在下一个选项卡中，您可以一次重复多行代码！'
                    ````
            9:
                story_text: |
                    做得好！ 您已达到另一个新水平！ 在上一级别中，您学习了如何在 {if} 或 {repeat} 命令中使用多行代码。 但你还不能将两者结合起来......
                    好消息！ 在此级别中，您将被允许将 {if} 放入 {if} 或 {repeat} 命令内。
                example_code: |
                    ````
                    回答 = {ask} '你准备好学习新东西了吗？'
                    {if} 回答 {is} 是
                         {print}'太棒了！ 您可以学习在 if 命令中使用重复命令！
                         {print}“万岁！”
                         {print}“万岁！”
                         {print}“万岁！”
                    {else}
                         {print} '也许你应该在上一关多练习一下'
            10:
                story_text: |
                    你做得很好！ 在前面的关卡中，我们仍然面临一个小问题。 您已经学会了重复台词，但如果您想稍微更改台词怎么办？
                    例如，如果您想唱“如果您快乐并且您知道”这首歌。 它看起来像这样：

                    如果您还想要下一节“跺脚”，下一节，再下一节，您就必须完全更改代码。
                    在本级别中，您将学习`{for}`命令，它允许您创建操作列表并每次使用另一个操作重复代码！
                    请看一下！
                example_code: |
                    ````
                    {repeat} 2 {times}
                         {print}'如果您开心，并且知道它会鼓掌您的手'
                    {print} '如果你很高兴并且你知道这一点并且你真的想表现出来'
                    {print} '如果你高兴并且知道的话，请拍手'
                    ````
            11:
                story_text: |
                    你已经达到11级了，你做得很好！ 在更高级别中, 海蒂 越来越专注于教您编程语言 Python。
                    Python 中没有`{repeat}`命令，但有一个类似于 {repeat} 的命令。 您是否想知道如何用 Python 语言表达`{repeat}`？ 赶紧去了解一下吧！
            12:
                story_text: |
                    也许您在餐厅冒险中尝试过使用十进制数字。 如果你这样做了，你可能会注意到海蒂还不明白它们并且总是四舍五入。
                    从这个级别开始，您可以使用十进制数字。
                example_code: |
                    ```
                    汉堡 = 5
                    饮料 = 2
                    总计 = 汉堡 + 饮料
                    print '你已购买汉堡和饮料'
                    print '总共花费' 总计 '美元'
                    ```
            13:
                story_text: |
                    在前面的级别中，您已经学习了如何将两个`{if}`命令彼此放在一起。 这工作得很好，但它确实会给你带来非常长且不方便的代码，如下所示：

                    在此系统中，您必须提供正确的用户名和密码。
                    在本级别中，您将学习`{and}`命令，这将使此代码变得更短且更易于理解！
                    一探究竟！
                example_code: |
                    ```
                    username = {ask} '您的用户名是什么？'
                    password = {ask} '你的密码是什么？'
                    {if} username {is} 'Hedy'
                         {if} password {is} '秘密'
                             {print}“欢迎海蒂！”
                         {else}
                             {print} '访问被拒绝'
                    {else}
                         {print} '访问被拒绝！'
                    ```
            14:
                story_text: |
                    使用示例代码，您可以计算您是否通过了学校的一门科目（即六年级或更高年级）。
                    您可以看到该代码效率极低，因为第 5 行的代码非常长。
                    从 1 到 5 的所有不同等级都必须单独编程。 幸运的是，在这个级别中，您将学习如何在没有这段极长代码的情况下做到这一点！
                example_code: |
                    ```
                    first_grade = {ask}'您在第一次测试中获得了什么分数？”
                    second_grade = {ask}'您在第二个测试中获得了什么分数？”
                    added= first_grade + second_grade
                    mean_grade =添加 / 2
                    {if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5
                         {print}'糟糕！你这个科目不及格...'
                    {else}
                         {print}'太棒了！ 你已经通过了这个科目！
                    ```
            15:
                story_text: |
                    在这款游戏中，我们设置了一个代码，以确保玩家可以想玩多久就玩多久。
                    但是代码既无效又太长。此外，如果玩家想玩101款游戏而不是100款游戏怎么办?
                    你不能玩到无限远?
                    在这个级别中，你将学习一个命令，使这一切变得容易得多!
                example_code: |
                    ```
                    game=“开”
                    {for} i {in} {range} 1 {to} 100
                         {if} game == '开'
                             answer = {ask} '你想继续吗？'
                             {if} answer == '不'
                                 game='结束'
                             {if} answer == '是'
                                 {print} '好的，我们继续'
                    ```
            16:
                story_text: |
                    在这个级别中，我们将更加接近真正的 Python 代码。 您还将学习如何将两个列表匹配在一起。
                    通过这种方式，您可以编写一个代码，将正确的动物与正确的声音相匹配。
                    因为下面的两段代码……完全没有道理！
                example_code: |-
                    ```
                    动物们 = '鸡', '马', '牛'
                    叫声们 = '咯咯哒', '吼', '哞'
                    {for} 某动物 {in} 动物们
                        {print} '一只' 某动物 '叫声' 叫声们 {at} {random}
                    ```
                    你可以试着让它起作用，但是....
                    ```
                    动物们 = '鸡', '马', '牛'
                    叫声们 = '咯咯哒', '吼', '哞'
                    {for} 某动物 {in} 动物们
                        {for} 某叫声{in} 叫声们
                            {print} '一只' 某动物 ' 叫 ' 某叫声
                    ```
                    注意:这些代码在这个关卡中不会这样工作。转到下一个选项卡，查看需要更正的部分。
            17:
                story_text: |
                    现在我们要稍微改变一下缩进。 每次我们需要缩进时，我们都需要在缩进之前的行添加`:`。

                    在此级别中，您还可以使用新命令：`{elif}`。 `{elif}` 是 `{else} {if}` 的缩写，当您想要创建 3 个（或更多！）选项时需要它。
                    一探究竟！
            18:
                story_text: |
                    恭喜！ 您已到达 Hedy 的最后一关！ 您在此处创建的代码可以复制到真实的 Python 环境（例如 replit 或 PyCharm），并且您可以在那里继续学习！
                    但请注意，Python 只能读取英文命令，因此如果您一直在使用其他语言，则现在需要切换到英文。
    dice:
        name: 骰子
        default_save_name: 骰子
        description: 制作你自己的骰子
        levels:
            3:
                story_text: |
                    在这一级我们可以从列表中选择。通过这种方式，我们能让电脑选择骰子哪一面朝上。
                    看看你家里柜子里的游戏。
                    有没有用骰子玩的游戏？你也可以用这段代码来复制它。
                    比如，蚯蚓游戏用的骰子上印着1到5和一条蚯蚓。

                    ![蚯蚓游戏的骰子，有1到5和一条蚯蚓](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    选项{is} 1, 2, 3, 4, 5, 蚯蚓
                    {print} 你投出了 _ {at} {random} ！
                    ```
                story_text_2: |
                    ### 练习
                    上面的例子中的骰子是一种特定游戏的骰子。你能制作普通的骰子吗？
                    或者其他不同游戏的特殊骰子？
                example_code_2: |
                    ```
                    选择 {is} _
                    ```
            4:
                story_text: |
                    在这个关卡中你也可以创造骰子。但这次您可以自己尝试，在没有示例代码的情况下!

                    ### 练习
                    在这个关卡中制作你自己的骰子。
                    提示:如果你不知道如何制作骰子。看看你之前关卡中的骰子，但不要忘记添加引号。
            5:
                story_text: |
                    我们准备添加`{if}`和`{else}`命令在你的骰子上！

                    ### 练习
                    完成示例代码，使代码显示“你可以停止投掷”，一旦你投到了蚯蚓。如果你投到了别的，它应该说“你必须再扔一次”。
                    **额外**也许你想从一个完全不同的游戏中重新创造一个骰子。那也很好!那么编写出你自己的反应。例如，6代表“yes”，“pity”表示其他东西。
                example_code: |
                    ```
                    选择 {is} 1, 2, 3, 4, 5, 蚯蚓
                    投出 {is}选择{at} {random}
                    {print} '你已经投出' 投出
                    _ 投出 {is} 蚯蚓 {print} '你可以停止投掷了。'
                    _ {print} '你必须再扔一次！'
                    ```
            6:
                story_text: |
                    你还能制作出一个地球蚯蚓骰子，但现在你还可以计算已经滚出了多少点。
                    你可能知道，蚯蚓对于地球蚯蚓游戏来说算5分。 现在，投掷后您可以立即计算出您投掷了多少分。
                    这是计算一个骰子点数的代码：

                    ### 练习
                    你能编写代码以便得到 8 个骰子的总分吗？ 为此，您必须复制并粘贴一些代码行。
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} '你投出了 ' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} '那些是 ' points '分数'
                    ```
                example_code_2: |
                    你能算出 8 个骰子的分数吗？ 这需要大量的复制和粘贴，对吗？ 我们将在第 7 级中让这一切变得更容易！
            7:
                story_text: |
                    您还可以在此级别再次掷骰子。 使用`{repeat}`代码，您可以轻松掷整手骰子。

                    ### 练习
                    尝试完成示例代码！ **额外** 想象一个您知道的游戏，其中涉及使用“{repeat}”的骰子和程序。
                example_code: |
                    ```
                    选项 = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### 练习
                    每个人都花太长时间掷骰子吗？ 在这个关卡中，你可以让 Hedy 一次性扔出所有骰子！
                    将名字更改为您朋友或家人的名字，然后完成代码，以便他们各自滚动。
                example_code: |
                    ```
                    玩家们 = 安, 约翰, 杰西
                    选项 = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} 玩家 '投出了' 选项 {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### 练习
                    在这个关卡中，你可以创建一个小游戏，在这个游戏中你必须尽可能快地投到6。
                    我们已经写好部分代码，现在由你让游戏运转!

                    首先，添加一个`{while}` 循环来检查6是否被抛出。
                    只要你还没有掷出6，就掷一个随机的数字。
                    打印哪个玩家已经投掷。
                    在尝试次数上加上一次尝试
                    在你再次投掷之前等待一秒钟，或者，在游戏结束之前——如果你投掷了一个6。
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} '尽早投出6!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} '是的！你投出6在 ' tries '次尝试。'
                    ```
    dishes:
        name: 洗碗？
        default_save_name: 洗碗
        description: 用电脑决定谁来洗碗
        levels:
            3:
                story_text: |
                    你家里是不是总是争论让谁来洗碗或者换猫砂盆？
                    那么你可以让电脑来做出公平的决定。你在这一级可以写出这个程序！
                example_code: |
                    ```
                    人们 {is} 妈妈， 爸爸， 艾玛， 苏菲
                    {print} 人们 {at} {random}来收拾碗筷。
                    ```
                story_text_2: |
                    ### 练习
                    制作你自己版本的洗碗机程序。首先列出你的家庭成员名单。
                    然后想一个需要完成的任务，让计算机用`{at} {random}`命令决定谁来做这个任务。

                    **额外的**不想洗碗？用`{remove}` `{from}` 命令将你的名字从名单上删除，从而改善程序。
            4:
                story_text: |
                    使用引号，可以使你的洗碗程序更加出色。

                    ### 练习
                    首先，在空白处填写正确的符号或命令，以使此示例程序正常工作。
                    你明白了吗？太好了！现在从上一个级别复制你自己的代码，并通过在正确的位置添加引号使其在此级别中正常工作。
                example_code: |
                    ```
                    人们 {is} 妈妈, 爸爸, 艾玛, 索菲
                    {print} _ 洗碗的人是 _
                    {sleep}
                    {print} 人们 {at} _
                    ```
            5:
                story_text: |
                    你可以用`{if}`给程序加入选项，来让它更有趣。你可以让你的程序对电脑做出的选择进行回应。
                    ### 练习
                    你能不能完成这段代码，让它在选中你的时候打印“太糟了”，其它情况下打印“好！”？
                    别忘了引号！
                example_code: |
                    ```
                    人们 {is} 妈妈, 爸爸, 艾玛, 索菲
                    洗碗的 {is} 人们 {at} {random}
                    _洗碗的 {is} 索菲 {print} _ 太糟了，轮到我洗碗 _
                    _{print} '运气真好，' _ '把碗洗了'
                    ```
            6:
                story_text: |
                    每个人洗了多少次碗？是否公平？在这一级你可以进行统计。
                example_code: |
                    ```
                    人们 = 妈妈, 爸爸, 艾玛, 索菲
                    艾玛洗碗 = 0
                    洗碗的 = 人们 {at} {random}
                    {print} '洗碗的人是' 洗碗的
                    {if} 洗碗的 {is} 艾玛 艾玛洗碗 = 艾玛洗碗 + 1
                    {print} '艾玛这周要洗' 艾玛洗碗 '次碗'
                    ```

                    现在你需要将第3到第5行复制几次（比如，复制7次表示一周）来计算一整周。
                    你能写出一整周用的代码吗？
                story_text_2: |
                    如果你运气极差，之前的节目可能会选择你洗一整周的碗！ 这不公平！
                    要创建更公平的系统，您可以使用`{remove}`命令从列表中删除所选人员。 这样，在每个人都轮到之前，您就不必再洗碗了。

                    周一和周二已经为你准备好了！ 你能添加本周剩下时间的代码吗？
                    而且……当你的列表为空时，你能想出一个解决方案吗？
                example_code_2: |
                    ```
                    人们 = 妈妈, 爸爸, 艾玛, 索菲
                    洗碗的 = 人们 {at} {random}
                    {print} '周一洗碗的是：' 洗碗的
                    {remove} 洗碗的 {from} 人们
                    洗碗的 = 人们 {at} {random}
                    {print} '周二洗碗的是：' 洗碗的
                    {remove} 洗碗的 {from} 人们
                    ```
            7:
                story_text: |
                    使用`{repeat}`您可以重复代码片段。 您可以使用它来计算谁将在多天内洗碗！
                    ### 练习
                    使用`{repeat}`命令来决定整个星期谁需要洗碗。 每一个空格都需要填写一个命令或数字！
                    **额外** 你能想到家里还有其他任务吗？ 调整代码，使其能决定三项家务。 不要忘记打印它所涉及的任务！
                example_code: |
                    ```
                    人 = 妈妈, 爸爸, 艾玛, 索菲
                    {repeat} _ _ {print} '洗碗工作将由' _ _ _完成
                    ```
            10:
                story_text: |
                    在这个级别中，您可以轻松地制定整周的日程安排！

                    ### 练习
                    添加第二个琐事，例如吸尘或整理，并确保将其分到整个星期。
                    **额外** 该计划不公平，你可能会运气不好，整个星期都在洗。 怎样才能让这个程序更加公平呢？
                example_code: |
                    ```
                    日期们 = 周一, 周二, 周三, 周四, 周五, 周六, 周日
                    名字们 = 妈妈, 爸爸, 艾玛, 索菲
                    {for} 日期 {in} 日期们
                        {print} 名字们 {at} {random} '负责在' 日期 '洗碗'
                    ```
    elif_command:
        levels:
            17:
                story_text: |
                    在这个级别中，您还可以使用一个新命令:`{elif}`。`{elif}`是关键字 `{else}`和 `{if}`的组合，当您想要创建3个(或更多!)选项时需要使用它。
                    试试看！
                example_code: |
                    ```
                    奖品 = ['一百万美元', '一个苹果派', '什么都没有']
                    你的_奖品 = 奖品[{random}]
                    {print} '你赢得' 你的_奖品
                    {if} 你的_奖品 == '一百万美元' :
                        {print} '太棒了!你是个富翁!'
                    {elif} 你的_奖品 == '一个苹果派' :
                        {print} '不错呦，一个苹果派!'
                    {else}:
                        {print} '祝你下次好运..'
                    ```
    for_command:
        description: '{for}指令'
        levels:
            10:
                story_text: |-
                    ## For
                    在这个级别中，我们学习一个名为`{for}`的新代码。 使用`{for}`，您可以创建一个列表并使用所有元素。
                    `{for}` 创建一个块，就像 `{repeat}` 和 `{if}` 一样，因此块中的所有行都需要以 4 个空格开头。
                example_code: |
                    ```
                    animals = 狗, 猫, 鱼
                    {for} animal {in} animals
                        {print} '我喜欢' animal
                    ```
            11:
                story_text: |-
                    在本关中，我们增加了一种新的`{for}`形式。在前面的关卡中，我们将`{for}`用于列表，我们也可以将`{for}`用于数字。
                    我们通过添加一个变量名，在其后面接着`{in} {range}`。然后我们写上数字来开始，`{to}`来作为数字的终点。

                    尝试这个例子，看看会发生什么! 在这一关卡中，你将需要在`{for}`语句下面的行中使用缩进。
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} '准备好了？我来了！'
                    ```
            17:
                story_text: |
                    现在我们要稍微改变一下缩进。每次需要缩进时，我们都需要在缩进前的行加上 `:`。
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} '准备好了吗？我来了！'
                    ```
    fortune:
        name: 算命
        default_save_name: 算命
        description: 让海蒂帮你算命
        levels:
            1:
                story_text: |
                    你有没有在天桥下让算命的给你算过命？或者有没有抽过签？
                    那你想必也知道，它们并不能真正预言你的未来。但是它们玩起来仍然很有趣！

                    在接下来的几级中，你会学到如何制作你自己的算命机器！
                    在第1级，一开始可以简单一些，只让海蒂介绍自己会算命，然后用`{echo}`命令让它复述玩家的回答。
                    像这样：
                example_code: |
                    ```
                    _你好，我是海蒂半仙！
                    _你叫什么？
                    _让我掐指算一算
                    _ 赵钱孙李……
                    _你的名字叫
                    ```
                story_text_2: |
                    ### 练习
                    将示例代码复制到你的输入屏幕上，并填入空白处，使代码生效。
                    **额外**改变代码，让魔法师不仅能算出你的名字，还能算出你的年龄、你最喜欢的运动队或其他关于你的事情。
            3:
                story_text: |
                    在上一级，你创造了你的第一台算命机器，但海蒂不会算任何东西，只会`{echo}`。
                    在这一级，你可以用变量和`{at} {random}`命令来真正让海蒂为你选择一个答案。比如看看这段代码：
                example_code: |
                    ```
                    {print} 我是海蒂半仙！
                    问题 {is} {ask} 你想算什么？
                    {print} 你想算：问题
                    回答 {is} 是, 否, 有可能
                    {print} 让我算一卦……
                    {sleep} 2
                    {print} 回答 {at} {random}
                    ```
                story_text_2: |
                    ### 练习
                    现在，海蒂 只能回答是、否或也许。 你能给 Hedy 更多的答案选项吗，比如“肯定”或“再问一次”。
            4:
                story_text: |
                    ### 练习
                    我们从此示例代码中删除了所有引号，您可以在所有正确的位置添加它们吗？

                    ### 练习2
                    返回到上一个级别，然后复制您的财富柜员代码。 通过在正确的位置中添加引号，使代码在此级别中起作用。
                example_code: |
                    ```
                    _ 在这段代码中添加引号 _
                    {print} 我是海蒂算命仙!
                    问题 {is} {ask} 你想知道什么？
                    {print} 这是你的问题：问题
                    答案 {is} 是、不是、也许
                    {print} 让我掐指算一算...
                    {sleep} 2
                    {print} 答案 {at} {random}
                    ```
            5:
                story_text: |
                    ### 练习
                    在示例代码中，您会看到如何制定算命程序，使您可以提高对自己有利的赔率。 这个作弊程序总是告诉您您将赢得彩票，但您的朋友将永远不会赢。

                    用它来制作你自己的程序，发挥创意！ 例如，您可以创建一个代码来预测：
                    *您最喜欢的运动队将击败所有竞争对手！
                    * 您最喜欢的电影将被选为电影之夜！
                    * 您将赢得您最喜欢的演出的门票！
                    * 你是他们当中最美丽的，就像白雪公主的魔镜一样。
                    让您的想象力发挥作用！

                    您的程序必须存在至少 10 行代码，并且需要至少有一个`{if}`和`{else}`命令。
                example_code: |
                    ```
                    friends {is} Jordan, Lucy, Dave
                    {print} '我能预测你明天买彩票能不能中奖!'
                    person {is} {ask} '你是谁?'
                    good_answer {is} 好诶！你赢了，你绝对赢！我们有了一个赢家！
                    bad_answer {is} 倒霉! 再试一次!,别人会赢, 你输了!
                    {if} person {in} friends {print} good_answer {at} {random}
                    {else} {print} bad_answer {at} {random}
                    ```
            6:
                story_text: |
                    在本级中，作为一个算命仙你可以用数学帮你算命。这使你可以编造（傻傻的）公式来算命。
                    例如，你可以算出你将来会变得多么有钱，或者你以后会有多少个孩子。



                    ### 练习
                    你能自己设计一个（傻傻的）算命机器吗？
                example_code: |
                    ```
                    {print} '我是海蒂算命仙!'
                    {print} '我能预测你将来有多少孩子!'
                    age = {ask} '你的年龄是?'
                    siblings = {ask} '你有几个兄弟姐妹?'
                    length = {ask} '你身高多少厘米?'
                    kids = length / age
                    kids = kids - siblings
                    {print} '你将有 ...'
                    {sleep}
                    {print} kids ' 孩子!'
                    ```
            7:
                story_text: |
                    ### 练习
                    完成这个程序，它会告诉你你喜欢的人是否也爱你。
                example_code: |
                    ````
                    {print} '我有一朵带有魔法花瓣的花'
                    {print} '如果你摘下花瓣，花朵就会告诉你你暗恋的人是否也爱你'
                    amount = {ask} '你想摘多少花瓣？'
                    选项=他们爱你，他们不爱你
                    _ _ _ _ 选项{at} {random}
                    ````
            8:
                story_text: |
                    在下一个示例中，您可以让算命师提出多个问题并将其打印出来！

                    ### 练习
                    你能在空白处填写正确的命令吗？
                example_code: |
                    ```
                    {print} '我是海蒂算命仙！'
                    {print} '你可以问我三个问题。
                    答案=是，否，有可能
                    _ _ _
                       问题 ={ask} '你想知道什么？
                       {print} 问题
                       {sleep}
                       {print} '我的水晶球告诉我...' 答案 {at} {random}
                    ```
            10:
                story_text: |
                    在这个关卡中，你将学习如何对游戏MASH（豪宅、公寓、棚屋、房子）进行编程。在这个游戏中，您可以同时为所有玩家预测他们的未来会是什么样子。

                    ### 练习
                    使用您已学过此级别的新命令填入空白。
                example_code: "```\n房屋=豪宅，公寓，棚屋，房子\n爱人=没有人，皇室成员，他们的邻居，他们的真爱\n宠物 = 狗、猫、大象\n名字 = Jenna、Ryan、Jim\n_\n{print} 名字 ' 住在 ' 房子 {at} {random}\n{print} 名字 ' 将会结婚与 ' 爱人 {at} {random}\n{print} 名字 ' 将得到 ' 宠物 {at} {random} ' 作为他们的宠物。'\n{sleep} \n```\n"
            12:
                story_text: |-
                    从关卡12开始，你必须在列表中使用引号，在每个列表成员之前和之后。

                    ### 练习
                    在列表中添加两个预测
                example_code: |
                    ```
                    命运 = '你会在香蕉皮上滑倒', _
                    {print} '我将在我的水晶球里看一下你的未来。
                    {print}'我看到... 我看到了......'
                    {sleep}
                    {print} 命运 {at} {random}
                    ```
    functions:
        levels:
            12:
                story_text: |
                    在这个级别中，您将学习如何使用**函数**。函数是可以轻松地多次使用的代码块。使用函数可以帮助我们组织可以反复使用的代码片段。
                    要创建一个函数，使用 `{define}`并给函数一个名称。然后将函数中需要的所有行放在`{define}`行下面的缩进块中。
                    在代码中留下一行空行，使其看起来美观整洁。太棒了!你已经创建了一个函数!

                    现在，每当我们需要这段代码时，我们只需使用<code>{call}</code>和函数名一起调用它!我们不需要再输入那块代码了。

                    看看这个扭扭游戏的示例代码。函数 'turn' 包含一段代码，用于选择哪个肢体应该去哪里。

                    ### 练习
                    通过设置两个变量chosen_limb和chosen_color来完成这段代码。
                    然后，选择要调用该函数的次数，以使捻线器旋转几次。

                    ### 练习2
                    通过添加一个名为“people”的变量来改进你的代码。使用这个变量给所有玩家在游戏中自己的命令。
                    例如:“艾哈迈德，右手绿色”或“杰西卡，左脚黄色”。
                example_code: |
                    ```
                    sides = '左', '右'
                    limbs = '手', '足'
                    colors = '红', '蓝', '绿', '黄'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' 在' chosen_color

                    {print} '让我们来玩扭扭游戏!'
                    {for} i {in} {range} 1 {to} _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                example_code: |
                    ```
                    {define} song {with} place
                        {print} '我的 Bonnie在' place '之上'

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    在前面的关卡中，你已经学习了创建函数和使用函数参数。函数的另一个重要用途是让它为你计算一些东西。
                    你可以给这个函数一个计算它会给你计算的结果。这个答案被称为**返回值**。

                    例如，在这段代码中，函数calculate_new_price将计算任何商品的新价格。它会给你一个新的价格作为返回值。

                    ### 练习
                    完成这段代码。我们已经为您制作了变量new_price，您只需要设置即可。
                    您应该通过调用计算新价格的函数来完成这行代码。
                example_code: |
                    ```
                    {define} 计算新价格 {with} 金额, 折扣
                        折扣 = 折扣 / 100
                        折扣金额 = 金额 * 折扣
                        {return} 金额 - 折扣金额

                    之前的价格 = {ask} '标价上是多少钱?'
                    打折 = {ask} '有多少百分比的折扣?'

                    新价格 = _ 计算新价格 {with} 之前的价格, _
                    {print} '新价格是' 新价格 ' 美元'
                    ```
    guess_my_number:
        name: 猜猜我的数字
        default_save_name: 猜猜我的数字
        description: 猜猜我的数字
        levels:
            14:
                story_text: |
                    在这一关你可以编程游戏“猜猜我的数字”

                    ### 练习
                    在空格上填上正确的符号，使游戏工作。
                example_code: |
                    ```
                    {print} '猜猜我的数字'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} '你猜哪个数字?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    harry_potter:
        name: 哈利·波特
        default_save_name: 哈利·波特
        description: 哈利·波特 的探险
        levels:
            10:
                story_text: |
                    ### 练习
                    我们还可以制作一个哈利波特主题的算命师。 填补空白，以便打印 9 行。
                    **额外** 将算命师的主题更改为其他内容，例如您最喜欢的书籍、电影或电视节目。
                example_code: |
                    ```
                    houses=格兰芬多、斯莱特林、赫奇帕奇、拉文克劳
                    subjects=魔药、黑魔法防御术、魔咒、变形术
                    fears=伏地魔，蜘蛛，o.w.l s考试不及格
                    names=哈利、罗恩、赫敏
                    _
                    _ {print} name ' 分入学院 ' houses {at} {random}
                    _ {print} name ' 擅长科目 ' subjects {at} {random}
                    _ {print} name '最恐惧的是' fears {at} {random}
                    ```
    haunted:
        name: 鬼屋
        default_save_name: 鬼屋
        description: 逃离鬼屋
        levels:
            1:
                story_text: |
                    在这个冒险中，你正在努力制作一个游戏，你必须通过挑选正确的门来逃离鬼屋。
                    如果你选对了门，你就能活下来，但如果没有，一个可怕的怪物可能会...

                    在第一关中，我们通过编造一个可怕的故事来开始我们的鬼屋游戏，并问玩家在鬼屋中会看到什么怪物。
                example_code: |
                    ```
                    {print} 我是怎么到这里来的?
                    {print} 我记得我的朋友叫我去那座旧豪宅……
                    {print} 突然间一切都变黑了。
                    {print} 但我是怎么倒在地板上的?
                    {print} 我的头疼得像被棒球棒打了一样!
                    {print} 那是什么声音?
                    {print} 哦，不!我觉得我不是一个人在这个房子里!
                    {print} 我要离开这里!
                    {print} 在我面前有3扇门…
                    {ask} 我该挑哪扇门?
                    {echo} 我选择门
                    {print} ...?
                    ```
                story_text_2: |
                    ### 练习
                    点击黄色按钮，将范例代码复制到你的输入屏。
                    现在通过添加至少5行代码来完成这个故事。
                    记住，每行代码都要以`{print}` 命令开始。
            2:
                story_text: |
                    在这个鬼屋里，你既可以用表情符号也可以用文字选择你会遇到的怪物。
                example_code: |
                    ```
                    怪物_1 {is} 👻
                    怪物_2 {is} 🤡
                    怪物_3 {is} 👶
                    {print} 你进入了鬼屋。
                    {print} 突然你看到 怪物_1
                    {print} 你跑进另一个房间...
                    {print} 但 怪物_2 正在那里等着你！
                    {print} 哦，不! 赶紧到厨房去。
                    {print} 但当你进入厨房时， 怪物_3 攻击了你!
                    ```
                story_text_2: |
                    ### 练习
                    在上面的例子中，怪物是预先设定好的。所以每次运行你的代码时，输出都是一样的。
                    你能不能添加`{ask}`命令来使鬼屋变得互动，让玩家选择他们遇到的怪物？
                example_code_2: |
                    ```
                    怪物_1 {is} _
                    怪物_2 {is} _
                    怪物_3 {is} _
                    {print}你进入了鬼屋。
                    {print} 突然你看到了 怪物_1
                    {print} 你跑进了另一个房间...
                    {print} 但是 怪物_2 在那里等着你！
                    {print} 哦不！快往厨房跑。
                    {print} 但是当你进入厨房后 怪物_3 攻击了你！
                    ```
            3:
                story_text: |
                    在之前的关卡中，你已经介绍了你的鬼屋游戏，但你可能已经注意到这个故事总是有一个可怕的结局。
                    在这个关卡中，你可以通过改变游戏结果让故事更具互动性;有时你会被吃掉，有时你会逃脱!
                    让海蒂随机决定吧!

                    ### 练习
                    复制示例代码并填写空格以使其工作!

                    **额外**这个故事很直接，也许你可以添加一个更刺激的故事来刺激一下。
                    而且你现在的结果非常有限，门后只有3种选择。也许你可以想到更多的怪物添加到列表中!
                example_code: |
                    ```
                    _ 逃离鬼屋!
                    _ 在你面前有3扇门……
                    _ _ _ 你选择哪扇门?
                    _ 你选了门……选择
                    怪物们_ 僵尸，吸血鬼，什么都没有发生你已经逃出来了
                    _ 你看...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    在这个关卡中，你将学习如何在游戏中使用引号。

                    ### 练习
                    你能让4级的鬼屋成功运作吗?

                    ###练习2
                    回到之前的关卡并复制你的鬼屋代码。通过在适当的位置添加引号，让代码在这个关卡中工作。
                example_code: |
                    ```
                    _给这段代码加上引号_
                    {print} 逃离鬼屋！
                    {print} _在你面前有三扇门...
                    选项{is} {ask} 你选择那扇门？
                    {print} 你选择的门 ...选项
                    怪物们{is}僵尸，吸血鬼，什么都没有你已经逃出来了
                    {print} 你看见...
                    {sleep}
                    {print} 怪物们{at} {random}
                     ```
            5:
                story_text: |
                    在这一关之前，鬼屋游戏总是要求玩家选择一扇门，但你可能已经注意到了，他们并不是真的要正确回答。
                    如果玩家填写了一个完全随机的答案，游戏仍然可以进行，玩家甚至可能会赢（尽管没有选到门）。
                    在这一关中，你只能通过选择海蒂随机挑选的那扇门来赢得游戏。

                    ### 练习
                    你能找到缺少的4个词来完成代码吗？
                example_code: |
                    ```
                    {print} '逃离鬼屋！'
                    {print} '在你面前有三扇门...'
                    门 {is} 1, 2, 3
                    怪物{is} 狼人，木乃伊，吸血鬼，僵尸
                    选择的门{is} {ask}‘你选择哪扇门？’
                    {print} ‘你选了门...'选择的门
                    {sleep}
                    正确的门{is} 门{at} {random}
                    _ _ _ _ {print} ‘干得漂亮！你成功逃出去了！’
                    {else} {print} ‘哦 不！你要被一个...'怪物 {at} {random}'吃掉了
                    ```
            9:
                story_text: |
                    在这一关中，你可以使用嵌套，这可以让你的鬼屋变得更有互动性!

                    ### 练习
                    现在要赢得这个游戏非常困难，你能让它更容易赢得吗？
                    如何改变你的代码，使它只有一个错误的门和两个正确的门，而不是一个正确的门和两个错误的门？
                    提示：这意味着将变量 正确的门 改为 错误的门 ，并切换`{if}`和`{else}`代码。
                    当然，你也可以改变故事，使其成为你自己的故事。改变怪物，或者把它变成一个你在那里可以得到一份礼物的快乐游戏节目！
                example_code: |
                    ```
                    {print} '逃离鬼屋!'
                    player = 活着
                    doors = 1, 2, 3
                    monsters = 僵尸, 吸血鬼, 大蜘蛛
                    {repeat} 3 {times}
                        {if} player {is} 活着
                            correct_door {is} doors {at} {random}
                            {print} '有3扇门在你面前...'
                            chosen_door = {ask} ' 你选哪扇门?'
                            {if} chosen_door {is} correct_door
                                {print} '这里没有怪物!'
                            {else}
                                {print} '你被吃了' monsters {at} {random}
                                player = 死亡
                        {else}
                            {print} '游戏结束'
                    {if} player {is} 活着
                        {print} '太棒了! 你活下来了!'
                    ```
            11:
                story_text: |
                    在这个关卡中，我们改变了`{for}`命令，所以我们可以告诉玩家他们在哪里。

                    ### 练习1
                    完成这个程序，让玩家知道他们在哪个房间里。

                    ### 练习2
                    通过以下步骤使程序成为一个冒险。

                    1. 制定一个选择清单（比如：战斗或逃跑）。
                    2. 确保玩家可以用`{ask}`来选择一个选项
                    3. 答案是否正确？那么他们可以进入下一个怪物。他们给出了错误的答案吗？用`{print}`让玩家知道。

                    **额外**如果你做了一个错误的选择，一个怪物仍然会被显示出来！你怎么能改变这种情况？
                example_code: |
                    ```
                    {print} '逃离鬼屋！'
                    怪物 = 僵尸, 吸血鬼, 大蜘蛛
                    _
                        {print} '房间' i
                        怪物 = 怪物们 {at} {random}
                    ```
            14:
                story_text: |
                    ### 练习
                    在这个关卡中，你可以使用 `<`和`>` 符号向游戏中引入生命。
                    确保玩家在遇到错误的怪物时失去一条生命，如果你没有生命剩下，游戏就会停止。
                example_code: |
                    ```
                    {print} '逃离鬼屋'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = '巫师', '吸血鬼', '沉睡的3头狗'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} '你选择哪扇门?'
                            {if} good_door == chosen_door
                                {print} '你选择了对的门'
                            {else}
                                {print} '你遇到了...' monster
                                {if} monster == '沉睡的3头狗'
                                    {print} '嘘...它睡着了'
                                {else}
                                    {print} '你减少了一条命'
                                    lives = _
                        {else}
                            {print} '游戏结束'
                    ```
            16:
                story_text: |
                    ### 练习
                    这个鬼屋游戏使你可以使用在这个关卡中的列表之间的联系。
                    例如:所有怪物的属性在所有列表中僵尸排名第一，女巫第二，吸血鬼第三。
                    检查代码并填入  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` 在对的空白处，使代码工作!
    hotel:
        name: 旅馆
        default_save_name: 旅馆
        description: 旅馆
        levels:
            13:
                story_text: |
                    在前面的冒险中，您已经学习了如何在函数中使用参数，以及如何将其与`{ask}`组合。
                    您可能想知道为什么要使用函数，因为示例中的函数只有一行代码。
                    现在我们将向你们展示一个更大的函数是什么样的，我们现在也将使用多个参数。你会看到，当函数变大时，使用一个函数是多么的好。
                    下面是一个将参数与`{ask}`命令组合在一起的函数示例。
                example_code: |
                    ```
                    {define} 欢迎信息 {with} 称谓, 姓氏, 国家, 房间号
                        {print} '欢迎来到海蒂旅馆, ' 称谓 ' ' 姓氏
                        好旅程 {is} {ask} '你是否有一个好旅程来自, ' 国家 '?'
                        {if} 好旅程 {is} '是'
                            {print} '棒棒哒!'
                        {else}
                            {print} '抱歉听到这些.'
                            {print} '期盼您能在您的房间里好好休息.'
                        {print} '您的房间号是' 房间号

                    {print} '您好. 请完善入住信息.'
                    称谓 = {ask} '您的称谓是什么(mr, mrs, ms, dr, etc.)?'
                    姓氏 = {ask} '您的姓氏是什么?'
                    祖国 = {ask} '您来自哪个国家?'

                    {call} 欢迎信息 {with} 称谓, 姓氏, 祖国, 105
                    ```

                    称谓 = {ask} '您的称谓是什么(mr, mrs, ms, dr, etc.)?'
                    姓氏 = {ask} '您的姓氏是什么?'
                    祖国 = {ask} '您来自哪个国家?'

                    {call} 欢迎信息 {with} 称谓, 姓氏, 祖国, 105
    if_command:
        default_save_name: if_命令
        description: 介绍{if}命令
        levels:
            5:
                story_text: |
                    ## if…else…
                    在第5级中有一些新的东西， `{if}`! 使用 `{if}`，您可以在两个不同的选项之间进行选择。
                    这段代码打印得很好如果您输入Hedy作为姓名，然后嘘!如果你输入别的东西。
                    `{ask}` 和 `{print}` 仍然可以像在第4层那样工作。
                example_code: |
                    ```
                    name {is} {ask} '你的名字是'
                    {if} name {is} Hedy {print} '好' {else} {print} '嘘!'
                    ```
                story_text_2: |
                    有时带有`{if}`的代码会变得很长，不能很好地放在一行中。你也可以把代码分成两行，第二行从`{else}`开始，像这样:
                example_code_2: |
                    ```
                    name {is} {ask} '你的名字是什么?'
                    {if} name {is} Hedy {print} '好'
                    {else} {print} '嘘!'
                    ```
                story_text_3: |
                    ### 练习
                    尝试使用`{if}`和`{else}`创建自己的代码。如果需要，可以使用示例代码。
            8:
                story_text: |
                    ## If... Else...
                    您已经学会了在`{repeat}`命令之后重复一段代码。
                    现在你也可以在`{if}`或`{else}`命令后使用缩进来生成块。
                    请查看示例代码。

                    ### 练习
                    在示例代码中添加一个`{else}`命令。用缩进制行块。您可以通过每行以4个空格开始来做到这一点。
                example_code: |
                    ```
                    name = {ask} '你的名字是什么?'
                    {if} name {is} Hedy
                        {print} '欢迎Hedy'
                        {print} '你能在你的计算机上尽情游戏!'
                    ```
            9:
                story_text: |
                    在这个级别中，您还可以将一个`{if}`命令放在另一个`{if}`命令中。
                example_code: |
                    ```
                    continue = {ask} '你想要继续嘛?'
                    {if} continue = yes
                        sure = {ask} '你确定?'
                        {if} sure {is} yes
                            {print} '我们继续'
                        {else}
                            {print} '你不确定'
                    {else}
                        {print} '你不想继续'
                    ```
    in_command:
        default_save_name: in_命令
        description: 介绍{in}命令
        levels:
            5:
                story_text: |
                    ## 列表
                    当我们想要检查某个东西是否在列表中时，我们现在可以使用`{in}`命令。
                    这段代码打印得很漂亮!如果你选择绿色或黄色，其他的我都无所谓。
                example_code: |
                    ```
                    pretty_colors {is} 绿色, 黄色
                    favorite_color {is} {ask} '什么是你最喜欢的颜色?'
                    {if} favorite_color {in} pretty_colors {print} '漂亮!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### 练习
                    用您学过的命令填充空白区域，完成示例代码。
                    当你完成代码后，试着创建一个你自己的代码，并使用一个你自己想到的问题。
                example_code_2: |
                    ```
                    animals {is} 狗, 牛, 羊
                    answer {is} {ask} '你最喜欢的动物是哪个?'
                    _ answer _ animals _ '我也是!'
                    _ _ '我最喜欢的动物是狗, 牛, 羊。'
                    ```
    is_command:
        default_save_name: is_命令
        description: 介绍 {is}命令
        levels:
            2:
                story_text: |
                    ## 变量
                    你可以用`{is}`来命名一个单词。这被称为变量。在这个例子中，我们创建了一个名为name的变量和一个名为age的变量。你可以在代码的任何地方使用name这个词，它将被Hedy替换，如下所示:
                example_code: |
                    ```
                    name {is} 海蒂
                    age {is} 15
                    {print} name  是 age  岁
                    ```
                story_text_2: |
                    ### 练习
                    是时候创建自己的变量了！
                    在示例代码中，我们创建了一个变量 `favorite_animal` 的示例。在第 1 行中设置了变量，在第 2 行中我们在 `{print}` 命令中使用该变量。
                    首先，通过在空白处填写您最喜欢的动物来完成我们的示例。然后自己创建至少 3 个这样的代码。选择一个变量，并使用 `{is}` 命令设置该变量。然后像我们一样，使用 `{print}` 命令使用它。
                example_code_2: |
                    ```
                    最喜爱的动物 {is} _
                    {print} 我喜欢  动物
                    ```
            6:
                story_text: |
                    我们还更改了在变量中存储单词的方式!当我们在变量中存储名称或数字时，你现在可以使用`=`而不是`{is}`，如下所示:
            14:
                story_text: |
                    我们将学习更多的新项目。你可能已经从数学中知道了它们，`<` 和 `>`。
                    `<`检查第一个数字是否小于第二个数字，例如age `<` 12检查age是否小于12。
                    如果要检查第一个数字是否小于或等于第二个数字，可以使用 `<=` ，例如age `<=` 11。
                    `>`检查第一个数字是否大于第二个数字，例如points `>` 10检查points是否大于10。
                    如果要检查第一个数字是否大于或等于第二个数字，可以使用`>=`，例如points `>=` 11。
                    你可以在`{if}`中使用这些比较，像这样:
                example_code: |
                    ```
                    age = {ask} '你多大了?'
                    {if} age > 12
                        {print} '你比我大!'
                    ```
                    ```
                    age = {ask} '你多大了?'
                    {if} age < 12
                        {print} '你比我小!'
                    {else}
                        {print} '你比我大!'
                    ```
                story_text_2: |
                    从这一关开始，如果你想精确地比较，你可以使用两个等号。这是大多数编程语言所做的:
                example_code_2: |
                    ```
                    name = {ask} '你叫什么?'
                    {if} name == 'Hedy'
                        {print} '你很酷!'
                    ```
                story_text_3: |
                    如果两者不相等，你也可以用`!=`像这样:
                example_code_3: |
                    ```
                    name = {ask} '你的名字是什么?'
                    {if} name != 'Hedy'
                        {print} '你不是Hedy'
                    ```
    language:
        name: 语言
        default_save_name: 语言
        description: 用外语练习单词
        levels:
            5:
                story_text: |
                    制作自己的程序来练习一门新语言的词汇。

                    ### 练习
                    通过添加至少3个单词让玩家学习，使代码更长。
                    **额外**当然，你可以选择使用不同于法语的语言。你可以把代码改成任何你想学的语言。
                example_code: |
                    ```
                    {print} '学习法语!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} '太棒了!'
                    {else} {print} '不，cat是 chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} '好极了!'
                    {else} {print} '不，青蛙是 grenouille'
                    ```
            16:
                story_text: |
                    ### 练习
                    看一下示例代码。这是一个练习法语词汇的程序。现在制定你自己的程序来练习一门新语言的词汇。
                    如果你不懂任何其他语言，你可以使用谷歌翻译，或者你可以使用表情符号和你的母语。
                example_code: |
                    ```
                    法语词汇 = ['bonjour', 'ordinateur', 'pomme de terre']
                    词语翻译 = ['hello', 'computer', 'potato']
                    得分 = 0
                    {for} i {in} {range} 1 {to} 3
                        答案 = {ask} '什么是' 法语词汇[i] ' 的含义?'
                        正确答案 = 词语翻译[i]
                        {if} 答案 == 正确答案
                            {print} '答对了!'
                            得分 = 得分 + 1
                        {else}
                            {print} '错了, ' 法语词汇[i] ' 的意思是 ' 词语翻译[i]
                    {print} '你得到' 得分 ' 个正确答案.'
                    ```
    maths:
        name: 数学
        default_save_name: 数学
        description: 介绍 数学
        levels:
            6:
                story_text: |
                    在这个关卡中，你会学到一些新东西:你现在也可以计算了。

                    加法很简单，你可以像数学一样写:例如`5 + 5`。减号也可以，是`5 - 5`。

                    乘法有点不同，因为你的键盘上没有时间符号。搜索一下，真的没有!
                    这就是为什么我们用键盘按键8上面的星号相乘:`5 * 5`。把它读成“5 × 5”，这有助于你最好地记住它。
                example_code: |
                    ```
                    {print} '5 加 5 等于 ' 5 + 5
                    {print} '5 减 5 等于 ' 5 - 5
                    {print} '5 乘 5 等于 ' 5 * 5
                    {print} '5 除以 5 等于 ' 5 / 5
                    ```
            12:
                story_text: |-
                    **十进制数字**
                    到目前为止，Hedy不允许像1.5这样的十进制数，但现在我们允许了。请注意，计算机使用`.`表示十进制数。
                example_code: |
                    ```
                    {print} '2.5加2.5是...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **单词数学**
                    在这个级别中，你还可以用这样的单词做加法:
    music:
        name: 音乐
        default_save_name: 音乐
        description: 演奏一支曲子!
        levels:
            1:
                story_text: |-
                    在本关卡中，您将学习如何使用`{play}`命令来播放曲调!

                    键入`{play}`，后跟要播放的音符。音阶是C-D-E-F-G-A-B。
                    正如你所看到的，有7个不同的字母，但我们可以演奏不止7个音符。
                    在字母后面键入0到9之间的数字来选择刻度，例如B4之后是C5。
                    C0是最低的音符，B9是最高的。

                    ### 练习
                    尝试示例代码，然后使用它!你能创造自己的旋律吗?
                    在下一关，你将学习如何播放一些现有的歌曲。
            2:
                story_text: |
                    ### Exercise
                    把歌唱完!我们已经开始为一些旋律编码。
                story_text_2: 正如您所看到的，您还可以使用`{sleep}`命令在歌曲中添加一点暂停。
                example_code_2: |
                    ```
                    {print} 闪闪的小星星
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    创造一个随机的旋律!

                    ### 练习
                    示例代码创建了一个随机旋律，但它非常短，并且没有使用很多音符。
                    在列表中添加更多的音符，并通过多次复制最后一行来创建更长的旋律。
            4:
                story_text: |
                    使用`{clear}`命令创建卡拉ok机!

                    ### 练习
                    完成卡拉ok版的“玛丽有一只小羊羔”。
                    然后，创建一个卡拉ok版本的任何你喜欢歌曲!
            5:
                story_text: |
                    你不必总是使用`{play}`命令来播放整首歌，有时你只想播放一个音符。
                    例如，如果你想做一个测试，如果答案是正确的，你可以演奏一个快乐的高音，如果答案是错误的，你可以演奏一个悲伤的低音。

                    ### 练习
                    通过添加一行代码来完成第一个问题，如果给出错误的答案，该代码将播放C3音符。
                    然后再想三个问题添加到这个测试中。
                example_code: |
                    ' ' '
                    答案 {is} {ask}'津巴布韦的首都是什么?'
                    {if} 答案 {is}哈拉雷{play} C6
                    ＿
                    ' ' '
            6:
                story_text: |
                    除了弹奏音符，你现在还可以弹奏数字。只需输入`{play} 1`表示最低音符，`{play} 70`表示最高音符，或介于两者之间的任何内容。

                    ### 练习
                    这需要音乐数学!用不同的起始数字尝试几次示例代码。
                    然后，看看你是否可以用这些数字创作一首歌。
                example_code: |
                    ```
                    number = {ask} '从1到67中间说一个开始的数字'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    使用`{repeat}`命令可以使您的旋律代码更短!

                    ### 练习
                    使用`{repeat}`命令完成“Twinkle Twinkle Little Star”的代码。
                    然后回到你在之前关卡中所创造的歌曲中。你能把这些代码也缩短吗?
            8:
                story_text: |
                    现在我们可以对多行使用`{repeat}`命令，我们可以更轻松地制作歌曲!

                    ### 练习
                    完成兄弟约翰的歌(弗拉德·雅克)。不要忘记使用`{repeat}`!
            9:
                story_text: |
                    从这个级别开始，您可以在`{repeat}`命令中使用`{repeat}`命令。
                    这使得像“生日快乐”这样的歌曲更短!

                    ### 练习
                    完成这首歌!
                example_code: |
                    ```
                    第一次= yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} 第一次 {is} yes
                            {play} F
                            {play} E
                            第一次 {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    在你的歌曲中使用函数!正如您在示例代码中看到的，您可以为Twinkle Twinkle Little Star的每一行创建一个函数。一旦您编写了前三行代码，您所要做的就是按照您想要的顺序调用函数。

                    ### 练习
                    完成《闪烁小星星》这首歌。
                    然后回头看看你之前在关卡中编写的所有歌曲，你是否也可以使用函数将这些代码变得更好更短?
            13:
                story_text: |
                    您可以使用带有参数的函数来处理歌词几乎相同但每次略有不同的歌曲。
                    一个例子是歌曲“Yankee Doodle”。 第一行的前 4 个音符是相同的，每次后面都有不同的音符。

                    ### 练习
                    你能唱完Yankee Doodle 的歌吗？
                    你能想出另一首歌以这种方式编程吗？
            14:
                story_text: |
                    你可以为音乐编程取乐，但你也可以用音符制作一些有用的东西，比如火警!

                    ### 练习
                    记得发生火灾时在拉响火警!
                example_code: |
                    ```
                    {define} 火警
                        {print} '着火了!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    着火 = {ask} '现在着火了吗?'
                    {if} 着火 _ 'yes'
                        {call} 火警
                    ```
    parrot:
        name: 鹦鹉
        default_save_name: 鹦鹉
        description: 创造属于你的在线宠物鹦鹉，它会学你说话！
        levels:
            1:
                story_text: |
                    创造属于你的在线宠物鹦鹉，它会学你说话！
                example_code: |
                    ```
                    {print} 我是 海蒂 鹦鹉
                    {ask} 你叫什么名字?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### 练习
                    点击黄色按钮，将代码范例复制到你的输入屏幕。
                    让鹦鹉问一个不同的问题。填入例子中的空白处!
                    **额外**你也可以让鹦鹉问多个问题。在你自己的代码下面再键入几行代码。
                example_code_2: |
                    ```
                    {print} 我是鹦鹉海蒂
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    在之前的关卡中，你制作了一只鹦鹉，它会跟着你重复。在这个关卡中，我们将使用一个变量和`{ask}`命令让鹦鹉进行交互。
                    我们还将通过在说话后添加`{sleep}`命令使鹦鹉更逼真。
                example_code: |
                    ```
                    {print} 我是鹦鹉海蒂
                    名字 _ _你的名字叫什么？
                    {print} 名字
                    _
                    {print} 叽叽喳喳
                    _
                    {print} 名字
                    ```
                story_text_2: |
                    ### 练习
                    首先，用`{is}`和`{ask}`命令完成第2行。
                    然后在第4行和第6行填写`{sleep}`命令，让鹦鹉安静一会儿。

                    **额外**你能通过添加更多的代码行使鹦鹉要求更多而不仅仅是你的名字吗?
            3:
                story_text: |
                    用`{add}`教你的鹦鹉一个新单词。
                    ### 练习
                    您可以添加`{add} {to_list}`命令来让代码工作吗?
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} 训练你的鹦鹉！
                    新词 {is} {ask} 你想让他们学哪个词？
                    _ 新词 _ 词汇表
                    {print} 🧒 说 新词, Hedy！
                    {print} 🦜 词汇表 {at} {random}
                    ```
            4:
                story_text: "在这一级中，我们必须在`{ask}` 和`{print}` 的命令中使用引号。\n### 练习 \n在空白处填上引号，完成代码。\n"
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} _ 训练你的鹦鹉！ _
                    新词 {is} {ask} _ 你想让他们学哪个词？ _
                    {add} 新词 {to_list} 词汇表
                    {print} _ 🧒 Say _ 新词 _, Hedy! _
                    {print} _ 🦜 _ 词汇表 {at} {random}
                    ```
            5:
                story_text: |
                    如果你的鹦鹉说对了单词就奖励它!

                    ### 练习
                    通过填写4个缺失的命令来完成代码。
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} '训练你的鹦鹉！'
                    新词 {is} {ask} '你想让他们学哪个词？'
                    {add} 新词 {to_list} 词汇表
                    说了的词 {is} 词汇表 {at} {random}
                    {print} '🧒 海蒂，说' 新词 '！'
                    {print} '🦜 ' 说了的词
                    _说了的词 {is} 新词 _ '🧒 干得好！海蒂！🍪'
                    _ _'🧒 不对，海蒂！说' 新词
                    ```
    piggybank:
        name: 小猪银行
        default_save_name: 小猪银行
        description: 数数你的零花钱吧！
        levels:
            12:
                story_text: |
                    在这次冒险中，你将学习如何制作一个数字储蓄罐。

                    ### 练习
                    完成代码来计算你有多少钱，你需要多长时间存起来买你想要的东西!
                    **额外**也许你已经存了一些钱?从你要存的钱中扣除。
                example_code: |
                    ```
                    {print} '数字存钱罐'
                    愿望 = {ask} '你想买什么？'
                    价格 = {ask} '这要花多少钱？'
                    存款 = {ask} '你已经存了多少钱？'
                    零花钱 = {ask} '你每周有多少零花钱？'
                    需要_再存 = 价格 - 存款
                    周数 = 需要_再存/ 零花钱
                    {print} '你可以在买一个' _ '在' _ '周后。'
                    ```
            14:
                story_text: |
                    ### 练习
                    在这个关卡中，你可以让海蒂告诉你是否攒够了钱!
                    通过填空来完成这段代码!
                example_code: |
                    ```
                    _ 计算预算 {with} 愿望, 金钱, 零花钱
                        尚待储蓄 = 愿望 - 金钱
                        周数 = 尚待储蓄 / 零花钱
                        {if} 愿望 _ 金钱
                            {print} '你需要存更多钱!'
                            {print} '你需要' 周数 ' 更多的周.'
                        {else}
                            {print} '太棒了，你已经存够了钱'
                            {print} '让我们去消费吧!'

                    money = {ask} '你存了多少钱?'
                    wish = {ask} '你需要多少钱?'
                    allowance = {ask} '你每周拿到多少零花钱?'

                    {call} _
                    ```
    pressit:
        name: 按键
        default_save_name: 按下
        description: 试试把键盘键和命令联系起来吧！
        levels:
            5:
                story_text: |
                    在这个关卡中还有一个新的关键字:`{pressed}`!
                    使用`{pressed}`，您可以使用键盘上的键来控制使用的行。

                    ### 练习
                    看看这个例子，再添加一行对按键作出反应的代码。
                example_code: |
                    ```
                    {print} '你想要好 (g) 还是坏 (b) 结局？'
                    {if} g {is} {pressed} {print} '从此以后，他们幸福地生活在一起了 ❤'
                    {else} {print} '王子被河马给吃了😭'
                    ```
                story_text_2: |
                    您还可以将turtle命令链接到按键。

                    ### 练习
                    复制几次路线，这样你就可以创建一个更大的图纸。
            7:
                story_text: |
                    现在您已经了解了`{repeat}`，我们可以多次按键。
                    你可以用它来让乌龟向前走和转身。

                    ### 练习
                    你在第5关看到的代码只检查一次按键。复制示例代码并添加`{repeat}`，这样您就可以多次按下这些键。
                    使用这段代码来画一些漂亮的东西。
            9:
                story_text: |
                    现在你知道了如何组合语句，你可以用`{pressed}`创建一个触摸类型工具。

                    ### 练习
                    完成代码。每次随机选择一个字母，你必须按下。按对得一分，按错扣两分。
                    **额外**在每个字母之后清除屏幕，并显示用户他们得了多少分。
                example_code: "```\n积分 = 0\n字母们 = a, b, c, d, e\n{repeat} 10{times}\n    字母 = _ _ _ \n    {print} '按下字母' 字母\n    {if} 字母{is} {pressed}\n    _\n    _\n    _\n```\n"
    print_command:
        description: 介绍print命令
        levels:
            1:
                story_text: |
                    ## print命令
                    你能使用 `{print}` 命令在屏幕上打印文本。
                example_code: |
                    ```
                    {print} 你好，程序员!
                    {print} 欢迎来到Hedy!
                    ```
                story_text_2: |
                    ### 练习
                    在海蒂中，你会在每一次冒险中找到练习。练习允许您练习新的命令和概念，并允许您对示例代码进行自己的修改。
                    在这个练习中，你会看到一个粉红色的空白区域。在运行代码之前，必须在空白处填充一些东西。

                    在空格中填写`{print}`命令，然后再添加5行代码。每行必须以`{print}`命令开头。
                    玩得开心!
                example_code_2: |
                    ```
                    _ 你好!
                    ```
            18:
                story_text: |-
                    我们得到了真正的Python代码!这意味着从现在开始我们需要使用带有括号的`{print}`和`{range}`。
                    这也意味着只要使用英文命令，就可以在任何Python环境中使用这个级别的Hedy代码。如果你现在还没有这样做，你可以在命令菜单中切换。
                example_code: |
                    ```
                    {print}('你好!')
                    {for} i {in} {range}(1, 10):
                        {print}('这是行数 ', i)
                    ```
                story_text_2: 如果要打印多个项目，则需要用逗号分隔它们。
                example_code_2: |
                    ```
                    温度 = 25
                    {print}('现在 ', ' 户外温度', 温度)
                    ```
                    ```
                    名字= 'Hedy'
                    {print}('我的名字是 ', 名字)
                    ```
    quizmaster:
        name: 测验命题人员
        default_save_name: 测验命题人员
        description: 制定专属于你自己的测验！
        levels:
            14:
                story_text: |
                    ### 练习
                    在这次冒险中，你可以做自己的测验!填空，添加更多的问题，享受你自己的测试!
                    你可以做一个关于任何你喜欢的小测验:你的爱好，你最喜欢的动物，你最喜欢的书或任何东西!
                example_code: |
                    ```
                    {print} '创建你自己的测试'
                    points_a = 0
                    points_b = 0
                    {print} '问题'
                    {print} '答案选项A'
                    {print} '答案选项B'
                    answer = {ask} '选哪个答案?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} '退出测试!'
                    {print} '让我们看看结果!'
                    {if} points_a > points_b
                        {print} '你属于A俱乐部'
                    {if} points_b > points_a
                        {print} '你属于B俱乐部'
                    ```
    quotation_marks:
        name: '''引号'''
        default_save_name: 引号
        description: 介绍引号
        levels:
            4:
                story_text: |
                    ## '引号'
                    在第4关`{ask}`和`{print}`已经改变。
                    必须将要打印的文本放在引号之间。
                    这很有用，因为现在你可以打印所有你想要的单词。还有你用来存储带有`{is}`的东西的单词。
                    大多数编程语言在打印时也使用引号，所以我们离真正的编程又近了一步!
                example_code: |
                    ' ' '
                    {print} '从现在开始，您需要使用引号!'
                    answer {is} {ask} '从现在开始我们需要使用什么?'
                    {print} '我们需要使用' answer
                    ' ' '
                story_text_2: |
                    ## 祝贺
                    重要!注意，现在我们用引号了，当你用撇号表示I'm或What's这样的缩写时，Hedy会感到困惑。
                    一定要去掉那些撇号，把拼写改成I am或What is。
                    查看示例代码，了解使用撇号的错误方式。
                example_code_2: |
                    ' ' '
                    _ 这是使用撇号的错误方法_
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ' ' '
            12:
                story_text: |
                    **所有文本需要用引号括起来**
                    对于这个级别，你还必须在使用`=`存储的文本中使用引号:
                example_code: |
                    ```
                    name = '海蒂机器人'
                    {print} '你好' name
                    ```
                story_text_2: |
                    **列表中的所有项目也需要引号**
                    列表是文本，所以它们也需要引号。请注意，清单上的每一项都有引号。
                    这允许你将两个单词保存为列表中的一个项目，例如'钢铁侠 小猪佩奇'。
                example_code_2: |
                    ```
                    超级英雄 = '蜘蛛侠', '蝙蝠侠', '钢铁 侠'
                    {print} 超级英雄 {at} {random}
                    ```
                story_text_3: |
                    **`{if}`比较后的所有文本也需要引号**
                example_code_3: |
                    ```
                    name = {ask} '你的名字是?'
                    {if} name = '海蒂机器人'
                        {print} 'Hi大家!'
                    ```
                story_text_4: |
                    **数字不需要引号**
                    对于数字，不需要在`=`后使用引号:
                example_code_4: |
                    ```
                    score = 25
                    {print} '你得到' score
                    ```
    random_command:
        default_save_name: random_命令
        description: 介绍 at random 命令
        levels:
            3:
                story_text: |
                    ## 随机 At random
                    在这个级别中，您可以使用`{is}`命令创建一个列表。您可以让计算机从该列表中随机选择一个项目。你可以使用`{at} {random}`。
                example_code: |
                    ```
                    animals {is} 狗, 猫, 袋鼠
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    您也可以在句子中使用`{at} {random}`命令。
                example_code_2: |
                    ```
                    食物 {is} sandwich, slice of pizza, salad, burrito
                    {print} 我正准备吃 食物 {at} {random} 作为午饭.
                    ```
                story_text_3: |
                    ### 练习
                    尝试`{at} {random}`命令，制作你自己的游戏秀(就像电视上的那样)，你选择一扇门或一个箱子，它包含一个很大的奖金!
                    你能做到吗?我们已经将第一行放入了示例代码中。
                example_code_3: |
                    ```
                    {print} 大型游戏表演!
                    {print} 你面前有3个箱子...
                    chosen {is} {ask} 你会选择哪个箱子？
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    我们将用Python的方式创建列表，用方括号括住列表!就像我们在之前的关卡中学到的那样。我们也会在每个项目周围加上引号。
                    我们用方括号指出列表中的位置。例如:`friends[1]`是好友列表中的第一个名字，您可以在示例代码的第一部分中看到。
                    示例代码的第二部分向您展示了我们也可以使用变量i匹配两个列表。
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' 是列表中的第一个朋友.'
                    {print} friends[2] ' 是列表中的第二个朋友.'
                    {print} friends[3] ' 是列表中的第三个朋友.'
                    #现在我们用变量i匹配两个列表
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] '的幸运号码是' lucky_numbers[i]
                    ```
                story_text_2: |-
                    现在您已经学会了在列表中使用括号，您也可以开始以Python的方式使用`{at}{random}`命令了!
                    你只需键入你的名单的名称后面加上`[random]`!
                example_code_2: |-
                    ```
                    fruit = ['苹果', '香蕉', '樱桃']
                    {print} fruit[random]
                    ```
    repeat_command:
        default_save_name: repeat_命令
        description: '{repeat}命令'
        levels:
            7:
                story_text: |
                    ## 重复!重复!重复!
                    第7级增加了`{repeat}`命令。`{repeat}`可用于多次执行一行代码。是这样的:

                    ### 练习
                    练习使用repeat命令。你能用3行代码而不是现在的4行代码来写生日快乐歌吗?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy 真有趣!'
                    ```
            8:
                story_text: |
                    ### repeat命令和缩进
                    在这个级别中，您可以重复多行代码只使用一个repeat命令。
                    您可以通过创建想要重复的块来实现这一点。
                    这个块中的行需要**缩进**。
                    这意味着在每行的开头放四个空格。当你只想创建一行的块时，你也必须缩进。
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} '大家好'
                        {print} '全部重复5遍'
                    ```
            9:
                story_text: |
                    干得好！你已经达到了另一个新水平！在上一级中，你学会了在{if}或{repeat}命令中使用多行代码。但是你还不能将两者结合起来……

                    好消息！在这个级别中，您将被允许在{if}中或{repeat}命令中放置一个{if}。将一个代码块放在另一个代码块中称为嵌套。
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        default_save_name: repeat_命令_2
        description: '{repeat} 命令 2'
        levels:
            7:
                story_text: |
                    ## 对其他命令和变量使用重复(repeat)
                    你现在已经练习了将`{repeat}`命令与`{print}`命令结合使用，但是你知道你还可以将其他命令与`{repeat}`一起使用吗?
                    在这个示例代码中，您可以看到`{repeat}`也可以与`{ask}`、`{if}`或`{else}`命令一起使用。
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} '你知道你可以多次问一个问题吗?'
                    {if} answer {is} yes {repeat} 2 {times} {print} '你已经知道了!'
                    {else} {repeat} 3 {times} {print} '你学到了新东西!'
                    ```
                story_text_2: |
                    使用`{repeat}`命令可以做的另一件有趣的事情是使用变量来设置应该重复的次数。在示例代码中，您可以看到我们首先询问这个人的年龄。
                    然后，在第3行，重复了age次。我们在`{repeat}`命令中使用了变量'age'。
                example_code_2: |
                    ```
                    {print} 'Yay!今天是你的生日!'
                    age = {ask} '你今年多大?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### 在代码块里还是不在?
                    在这个级别，您必须仔细考虑哪些代码行应该在块中，哪些不应该。
                    例如:如果你想唱《松饼人》这首歌。你只希望“松饼人”这句话重复两次。
                    这意味着最后一行不应该以缩进开始，因为它不属于块。
                    如果你在最后一行开始缩进，这首歌就会出问题。

                    ### 练习
                    示例代码中的每一行都以空白开头。去掉空格，试着找出哪一行需要缩进，哪一行不需要缩进，这样就可以让松饼人唱歌了。
                example_code: |
                    ```
                    _ {print} '你知道松饼人吗?'
                    _ {repeat} 2 {times}
                    _ {print} '松饼人'
                    _ {print} '你认识松饼人吗, 住在德鲁里巷?'
                    ```
    restaurant:
        name: 餐厅
        default_save_name: 餐厅
        description: 创建你自己的虚拟餐厅
        levels:
            1:
                story_text: |
                    在第一关中您可以编写一个你自己的虚拟餐厅并接受客人的点单。
                story_text_2: |
                    ### 练习
                    单击黄色按钮，将示例代码复制到输入框。
                    首先，在空白处填写正确的命令，使代码正常工作。
                    然后在餐厅程序中至少再添加 4 行代码。
                    询问顾客他们想喝什么，并询问他们是否愿意用现金或信用卡支付。
                    最后，想出一个与顾客说再见的好方法。
                example_code_2: |
                    ```
                    {print} 欢迎来到海蒂餐厅 🍟
                    _ 你想点什么？
                    {echo} 你想点
                    {print} 谢谢你的点单！
                    {print} 已经在做了！
                    ```
            2:
                story_text: |
                    在第 2 关你可以使用变量来扩展你的餐厅。在第 1 关 海蒂只能 `{echo}` 订单一次，并记住最后一个点的东西。
                    现在你可以使用变量来让海蒂同时记住食物和饮料！
                example_code: |
                    ```
                    {print} 欢迎来到海蒂餐厅！
                    {print} 今天我们提供披萨和千层面。
                    食物 {is} {ask} 您想吃什么？
                    {print} 选得好！这是我最爱的食物！
                    配料 {is} {ask} 您想要加肉的还是蔬菜的？
                    {print} 加了 配料 的 食物 已经在做了！
                    ```
                story_text_2: |
                    ### 练习
                    将你自己的餐厅程序从上一级复制到下面的输入框。
                    通过替换“{ask}”和“{echo}”命令并使用变量来修复代码，就像您在此级中学到的那样。

                    现在你的程序又可以运行了，是时候添加更多内容了。
                    请看代码范例的最后一行：“{print} 带有配料的食物正在路上！
                    在这一行中，2 个变量被用于创建订单概要。
                    现在让你的顾客添加食物和饮料的订单概要。

                    **另外** 现在你已经学会了如何使用变量，你可以根据需要在一行中使用任意数量的变量。你能在你的代码中添加更多变量，比如堂食或外卖，现金或银行卡支付，要或不要吸管等？
            3:
                story_text: |
                    在选择晚饭吃什么时选择困难了吗？你可以让海蒂帮你选！
                    只要将你最喜欢（或者最不喜欢）的食物加入列表，海蒂就可以随机帮你选择晚饭。
                    你也可以让海蒂帮你选择晚饭的价格，来获得更多乐趣！你会得到什么？
                example_code: |
                    ```
                    套餐 {is} 意大利面, 抱子甘蓝, 汉堡包
                    {print} 今晚有 套餐 {at} {random} ！
                    价格 {is} 1 欧元、10 欧元、100 欧元
                    {print} 餐费是 价格 {at} {random} 。
                    ```
                story_text_2: "### 练习\n现在制作你自己版本的随机菜单。\n自己制作一份包含前菜、主菜、甜点、饮料和价格的菜单。 \n然后使用 `{print}` 和 `{at} {random}` 命令告诉顾客今晚菜单的内容。\n"
                example_code_2: |
                    ```
                    {print}欢迎来到你自己的随机餐厅！
                    前菜 {is} _
                    主菜 {is} _
                    甜点 {is} _
                    饮料 {is} _
                    价格 {is} _
                    _
                    ```
            4:
                story_text: |
                    ### 练习
                    将引号添加到此代码中以使其工作!注意:变量不应该用引号括起来。
                    然后，使用`{clear}`'命令在输出屏幕中一次只显示一行。

                    ### 练习2
                    回到上一关，复制你的餐厅代码。通过在正确的位置添加引号并添加一些“`{clear}`命令，使代码在这个关卡中工作。
                example_code: |
                    ```
                    _ 在这段代码中添加引号 _
                    {print} 欢迎来到海蒂餐厅！
                    {print} 今天我们提供披萨和千层面。
                    食物 {is} {ask} 您想吃什么？
                    {print} 选得好！这是我最爱的食物！
                    配料 {is} {ask} 您想要加肉的还是蔬菜的？
                    {print} 加了 配料 的 食物 已经在做了！
                    饮料 {is} {ask} 您想喝点什么？
                    {print} 谢谢您的点单。
                    {print} 您的 食物 和 饮料 马上就来！
                    ```
            5:
                story_text: |
                    ### 练习
                    示例代码展示了如何在餐厅的菜单项用完时进行编程。
                    从前面的关卡复制你自己的餐厅代码。在您的餐厅中创建一个问题并编写代码，就像示例代码一样。
                    例如，你也可能没有菜单上的菜了，或者你不接受信用卡，或者冰淇淋机坏了。

                    **额外**你是否对问题和适当的回应进行了编程?然后尝试在代码中添加更多的`{if}`和`{else}`命令。
                    尝试在代码中的每个`{ask}`命令之后添加一个`{if}`，以使代码尽可能具有交互性!
            6:
                story_text: |
                    在这个级别中，你可以使用数学来计算顾客点餐的总价格，这可以使你的虚拟餐厅更加逼真。
                    你也可以给你的虚拟餐厅添加更多的东西，例如更多的主菜。

                    ### 练习
                    你可以添加更多的东西到你的虚拟餐厅。例如，你能……
                    -问有多少人来，然后用这个数字乘以价格?
                    -再加一道菜?
                    -当人们输入(秘密)优惠券码时给他们折扣?
                    -添加儿童菜单?
                    -想到其他有趣的东西添加?
                example_code: |
                    你可以写一段简单的餐厅代码，像这样：
                    ```
                    {print} '欢迎来到海蒂餐厅'
                    {print} '这是我们的菜单：'
                    {print} '我们的主菜有披萨、千层面、意面'
                    主菜 = {ask} '您想要哪道主菜？'
                    价格 = 0
                    {if} 主菜 {is} 披萨 价格 = 10
                    {if} 主菜 {is} 千层面 价格 = 12
                    {if} 主菜 {is} 意面 价格 = 8
                    {print} '您点了' 主菜
                    {print} '请付' 价格 '元'
                    {print} '谢谢，祝您用餐愉快！'
                    ```
            7:
                story_text: |
                    在本关中，你已经学会了如何使用`{repeat}`命令来重复一行代码一定的次数。
                    你可以在你的餐厅中使用这个命令来 `{ask}` 多人想吃什么。

                    ### 练习
                    你能完成这段代码吗？有多少人海蒂就需要重复这个问题多少次。因此，如果有5个人，这个问题需要问5次。
                    **另外**用更多的问题来扩展你的代码，例如和饮料或酱汁有关的。
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    ```
            8:
                story_text: |
                    在这一关，你可以通过重复多行代码，让你的虚拟餐厅更加细化。像这样：

                    ### 练习
                    这个代码可以用菜单上的更多项目来扩展，例如，提供饮料，和、或多道菜或甜点。至少增加一个项目。
                    **另外** 添加更多的项目，只要你喜欢，有多少选择都可以!
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                    {print} '谢谢您的点单！'
                    {print} '祝您用餐愉快！'
                    ```
            9:
                story_text: "在这一级，你可以用嵌套让你的餐厅更真实更有趣！\n\n### 练习 \n范例代码中删除了缩进。 \n你能算出每行需要多少缩进才能使代码正常工作吗？ \n如果顾客点了披萨，海蒂不应该问顾客想要哪种蘸酱。 \n\n**另外** 餐厅不会准备所有的蘸酱。列出一个可用的蘸酱的清单，并在每个订单中回复是否有存货。\n**另外** 披萨有配料。询问顾客他们想要哪一种配料。\n**另外** 顾客想喝一杯饮料吗？也问问他们！\n"
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    价格 = 0
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                        {if} 食物 {is} 薯条
                            价格 = 价格 + 3
                            蘸酱= {ask} '您的薯条要配什么酱？'
                            {if} 蘸酱 {is} 不要
                                {print} '不要酱'
                            {else}
                                价格 = 价格 + 1
                                {print} '配' 蘸酱
                        {if} 食物 {is} 披萨
                            价格 = 价格 + 4
                    {print} '一共' 价格 '元'
                    {print} '祝您用餐愉快！'
                    ```
            10:
                story_text: |
                    在本级别中，你将学习如何轻松地为不同的菜肴点单。

                    ### 练习1
                    完成代码，在空白处加一个`{ask}`，这样顾客会被问到每道菜想吃什么。
                example_code: |
                    ```
                    全餐 = 前菜, 主菜, 甜点
                    {for} 餐品 {in} 全餐
                        {print} '你点的菜是 ' 餐品 '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### 练习
                    当然，你也可以帮多个人点单！
                    您能否在每一行之前添加正确数量的缩进以使代码正常工作？
                    提示：有些行根本不需要任何缩进。
                example_code_2: |
                    ```
                    全餐 = 前菜, 主菜, 甜点
                    客人们 = 丁满, 彭彭
                    {for} 客人 {in} 客人们
                        {for} 餐品 {in} 全餐
                            食物 = {ask} 客人 '，你想要吃什么' 餐品 '？'
                            {print} 客人 '点了' 食物 '作为' 餐品
                    ```
            11:
                story_text: "我们可以用`{for}`和`{range}`来按顺序打印多个客人的订单。\n\n### 练习 \n完成餐厅的代码，这样就可以询问多个客人的订单了。每次打印订单号：'订单1'，'订单2'，等等。 \n你不确定如何去做吗？请看一下你的第8级代码吧。\n\n **另外**在第9级中，餐厅也使用了价格。你也可以在这里添加价格！\n"
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '你想为多少人点单？'
                    {print} '所以你想为'人数'人下单。'
                    {print} '开始吧！'
                    ```
            12:
                story_text: |
                    从这一级别开始，你可以使用小数点后的数字来使你的菜单更加真实。

                    ### 练习
                    你能构思出一个代码来给你的朋友和家人提供15%的折扣吗？
                example_code: |
                    ```
                    价格 = 0.0
                    食物 = {ask} '您要点什么？'
                    饮料 = {ask} '您想喝什么？'
                    {if} 食物 {is} '汉堡包'
                        价格 = 价格 + 6.50
                    {if} 食物 {is} '披萨'
                        价格 = 价格 + 5.75
                    {if} 饮料 {is} '水'
                        价格 = 价格 + 1.20
                    {if} 饮料 {is} '苏打水'
                        价格 = 价格 + 2.35
                    {print} '请付' 价格 '元'
                    ```
            13:
                story_text: |
                    在这个级别中，您将学习新的命令来进一步扩展您的代码。

                    ### 练习1
                    在程序需要逻辑判断的位置放置`{and}`和`{or}`'。

                    ### 练习2
                    用至少一个`{and}`和一个`{or}`来扩展你的餐厅代码。
                    例如，创建一个只适用于披萨的特别折扣券，或者给你的客户一杯免费饮料
                    还有薯条和煎饼。或者是完全不同的东西!
                example_code: "```\n价格 = 10\n食物 = {ask} '您想吃什么？'\n饮料 = {ask} '您想喝什么？'\n{if}食物 {is} '三明治'_ 饮料 {is} '果汁'\n          {print} '这是我们的优惠套餐'\n          价格 = 价格 - 3\n{if}饮料{is} '果汁' _饮料{is} '矿泉水'。 \n          {print} '你的选择真健康！\n {print} '一共' 价格 '元'\n```\n"
            15:
                story_text: |
                    通过`{while}`命令，你可以确保你的客人能不断追加点单，直到点完。

                    ### 练习
                    正确地将`{while}`命令添加到此代码中。
                example_code: |
                    ```
                    {print} '欢迎来到麦海蒂快餐店'
                    更多 = '是'
                    _
                        点单 = {ask} '您要点什么？'
                        {print} 点单
                        更多 = {ask} '您还要点别的吗？'
                    {print} '谢谢惠顾！'
                    ```
    rock:
        name: 石头剪刀布
        default_save_name: 石头_2
        description: 制作你自己的石头剪刀布游戏
        levels:
            1:
                story_text: |
                    在第1级，你可以开始一个石头剪刀布游戏。

                    你可以用`{ask}`做出选择，然后用`{echo}`复述这个选择。
                example_code: |
                    ```
                    {print} 你选哪一个？
                    {ask} 从石头、剪刀和布中选一个
                    {echo} 所以你选的是：
                    ```
                story_text_2: |
                    ### 挑战
                    你可以不使用文字，而是使用表情符号。✊✋✌
                    你能用表情符号创造一个代码吗？
                example_code_2: |
                    ```
                    {print} 你选择什么？
                    {ask} 从_中选择
                    {echo} 所以你的选择是：
                    ```
            2:
                story_text: |
                    在这一关中，您可以练习使用变量，以便在下一关中制作石头、剪刀、布游戏！
                    ### 练习
                    通过在空白处填写**变量**来完成代码。
                    这个游戏的互动性不强，但不用担心！在下一个选项卡中，您将学习如何使用变量和`{ask}`命令让您的游戏具有互动性！
                example_code: |-
                    ```
                    选择 {is} 石头
                    {print} 我选 _
                    ```
            3:
                story_text: |
                    您可以使用`{at} {random}`命令让计算机挑选石头、布或剪刀!

                    ### 练习
                    使用`{at} {random}`命令完成代码。
                example_code: |
                    ```
                    选择们 {is} 石头，剪刀，布
                    {print} 选择们 _
                    ```
                story_text_2: |
                    **另外**制作双人游戏。首先让两位选手填写他们的名字。然后让电脑随机挑选他们的选择。
                example_code_2: |
                    ```
                    选择们 {is} 石头、布、剪子
                    玩家1 {is} {ask} 玩家1的姓名:
                    _
                    ```
            4:
                story_text: |
                    在这一级，我们可以进一步对石头剪刀布游戏编程。但是如果你想要添加文字，你同样需要使用引号。
                    ### 练习
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
            5:
                story_text: |
                    在这一阶段，我们可以决定胜负。为此，您需要新的`{if}`代码。

                    ### 练习
                    填空完成代码:
                    *让电脑随机选择一个选项
                    *询问玩家他们想要选择什么
                    *在第4行和第5行填写正确的变量
                    * 完成第6行，这样海蒂可以检查一下是否打成平手。
                example_code: |
                    ```
                    选项 {is} 石头，剪刀，布
                    电脑选择 {is} _
                    选择 {is} _
                    {print} '你选了' _
                    {print} '电脑选了' _
                    {if} _ {is} _ {print} '平局！' {else} {print} '不是平局'
                    ```

                    在空白处填上正确的代码，来判断这是否是平局。
            9:
                story_text: |
                    在这一级，你可以用嵌套的`{if}`命令来编程石头剪刀布。你能完成这段代码吗？

                     ### 练习
                    你能完成代码吗？程序必须能判断赢家以及对应的组合是什么。

                     **另外** 想玩多玩几个游戏吗？拓展代码，以便您可以多玩几个回合。您甚至可以使用 `{ask}` 询问用户他们想玩多少回合。
            10:
                story_text: |
                    ### 练习
                    在之前的关卡中，你经常制作自己的石头剪刀布游戏。你能完成代码并正确使用`{for}`命令让游戏工作吗?
                example_code: |
                    ```
                    选项 = _
                    玩家们 =  _
                    {for} _
                    ```
            13:
                story_text: |
                    使用`{and}`命令，你可以缩短你的石头、剪刀、布代码!请查看示例代码。

                    ### 练习
                    完成代码，总有一个赢家。运行代码几次，以验证总是打印出赢家。
                example_code: |
                    ```
                    选项 = '石头', '剪刀', '布'
                    你的_选择 = {ask} '你选什么？'
                    电脑_选择= 选项 {at} {random}
                    {print} '你选了' 你的_选择
                    {print} '电脑选了' 电脑_选择
                    {if} 电脑_选择 {is} 你的_选择
                        {print} '平局'
                    {if} 电脑_选择 {is} '石头' {and} 你的_选择 {is} '布'
                        {print} '你赢了！'
                    {if} 电脑_选择 {is} '石头' {and} 你的_选择 {is} '剪刀'
                        {print} '电脑赢了！'
                    _
                    ```
            15:
                story_text: |
                    ### ；练习
                    玩到你打败电脑为止！但首先，你要补全示例代码……
                example_code: |
                    ```
                    赢 = '否'
                    选项 = '石头', '剪刀', '布'
                    {while} 赢 == '否'
                        你的_选择 = {ask} '你选择了什么？'
                        计算机_选择 = 选项 {at} {random}
                        {print} '你选择了 ' 你的_选择
                        {print} '计算机选择了' 计算机_选择
                        {if} 计算机_选择 == 你的_选择
                            {print} '平手！'
                        {if} 计算机_选择 == '石头' {and} 你的_选择 == '剪刀'
                            {print} '你输了！'
                        {if} 计算机_选择 == '石头' {and} 你的_选择 == '布'
                            {print} '你赢了！'
                            赢 = '是'
                    _
                    ```
    rock_2:
        name: 剪刀石头布 2
        default_save_name: 石头_2
        description: 剪刀石头布第2部分
        levels:
            2:
                story_text: |
                    既然你已经学会了如何使用`{ask}`命令，你就可以让你的石头、剪刀、布代码也具有互动性了!

                    ### 练习
                    通过在剪刀、石头、布代码中添加`{ask}`命令提一个问题，使剪刀、石头、布代码具有互动性。
                example_code: |
                    ```
                    选项 {is} _
                    {print} 我选 选项
                    ```
    secret:
        name: 超级间谍
        default_save_name: 超级间谍
        description: 编写你自己的间谍代码
        levels:
            12:
                story_text: |
                    在这个冒险中，你可以创建自己的超级间谍代码。编码一条信息，让只有合适的特工才能破译。
                    如果敌人试图破解密码，他们会得到一些错误的信息来浪费时间。

                    ### 练习1
                    为你的超级间谍制作你自己的密码，并只将这两个部分归还给真正的间谍。

                    ### 练习2
                    向代码中添加第三个组件，比如一件衣服或一个对象。
                example_code: |
                    ```
                    名字 = {ask} '你的名字是什么？'
                    {if} 名字 {is}  _
                        a = '去机场'
                    {else}
                        a = '去火车站'
                    密码 = {ask} '密码是什么？'
                    {if} 密码 {is} 'TOPSECRET'
                        b = '明天02.00'
                    {else}
                        b = '今天10.00'
                    {print} a + b
                    ```
            13:
                story_text: |
                    我们可以用`{and}`来简化超级间谍代码，这样我们就只需要一个`{if}`。

                    ### 练习1
                    通过在空白处填写正确的命令来完成代码。提示:超级间谍必须正确回答这两个问题，才能获得机密信息!

                    ### 练习2
                    我们要令敌人更加迷惑! 创建一个假答案列表，当给出错误答案时随机选择一个。
                example_code: |
                    ```
                    名字 = {ask} '你的名字是什么？
                    密码 = {ask} '你的密码是什么？'
                    {if} 名字 {is} '特工007' _密码{is} 'TOPSECRET'
                        {print} '02.00去机场'
                    {else}
                        {print} '10.00去火车站'
                    ```
    sleep_command:
        default_save_name: sleep_命令
        description: 介绍 {sleep} 命令
        levels:
            2:
                story_text: |
                    这个级别的另一个新命令是`{sleep}`，它可以暂停程序一秒钟。如果您在`{sleep}`命令后面键入一个数字，程序将暂停相应的秒数。

                    ### 练习
                    通过编写自己的代码来练习这个新命令，在代码中至少使用3次`{sleep}`令。对于每个`{sleep}`命令，暂停时间应该不同。
                example_code: |
                    ```
                    {print} 我最喜欢的颜色是...
                    {sleep} 2
                    {print} 绿色!
                    ```
    songs:
        name: 唱支歌！
        default_save_name: 歌
        description: 打印一首歌
        levels:
            6:
                story_text: "歌曲中通常包含大量重复。有时重复是基于计数的。\n比如那首著名的歌曲“啤酒瓶”中。你可以用一点数学知识来为这首歌编程。 \n \n提示：使用朗读功能，让海蒂把歌曲唱给你听! \n\n### 练习 \n现在你可以通过复制第2至第7行的内容来重复这几行歌词，你想要重复几次就可以重复几次。\n"
                example_code: |
                    ```
                    歌词 = 99
                    {print} 歌词 '瓶啤酒在墙上'
                    {print} 歌词 '瓶啤酒'
                    {print} '取下一瓶传下去'
                    歌词 = 歌词 - 1
                    {print} 歌词 '瓶啤酒在墙上'
                    {sleep}
                    ```
                story_text_2: |
                    这首儿童歌曲从5只小猴子倒数到1只猴子。
                    如果你复制第2-7行并粘贴在代码下面，你就可以唱出整首歌了！
                example_code_2: |
                    ```
                    数字 = 6
                    数字 = 数字 - 1
                    {print} 数字 ' 小猴子在床上跳来跳去'
                    {print} '有一只掉下来，撞到了头'
                    {print} '妈妈叫来了医生，医生说'
                    {print} '不能再有猴子在床上跳了！'
                    {sleep}
                    ```
            7:
                story_text: "歌曲经常包含大量的重复。例如...小鲨鱼!如果你唱这首歌，其实你就是一直在唱同一句歌词：\n\n小鲨鱼图图图杜杜\n小鲨鱼图图图杜杜\n小鲨鱼图图图杜杜\n小鲨鱼\n\n### 练习 \n你可以用`{repeat}` 来打印歌曲《小鲨鱼》吗？ 完成代码替换空白处。 \n**另外** 在《小鲨鱼》之后，你当然还可以为其他歌曲编程。很多歌曲都有重复的句子！\n你能再想出一首歌曲并打印出来吗？\n"
                example_code: |
                    ```
                    {repeat} _ _{print} '小鲨鱼图图图杜杜'
                    {print} '小鲨鱼'
                    ```
            8:
                story_text: |
                    在上一级中，你已经为歌曲 "啤酒瓶"编写了程序。但由于没有`{repeat}` ，你不得不多次复制一段歌词。
                    在这一级中，你只需要简单地增加一行代码，就能重复这首歌99次！

                    ### 练习
                    在空白处添加正确的命令，并正确缩进代码。
                example_code: |
                    ```
                    歌词 = 99
                    _ 99 {times}
                        {print} 歌词 '瓶啤酒在墙上'
                        {print} 歌词 '瓶啤酒'
                        {print} '取下一瓶传下去'
                        歌词 = 歌词 - 1
                        {print} 歌词 '瓶啤酒在墙上'
                    ```
            10:
                story_text: |
                    使用`{for}`，你只需6行即可打印整首小鲨鱼的歌曲（包括家庭中的所有其他鲨鱼）！

                    ### 练习 1
                    你能使用 `{for}` 命令使小鲨鱼这首歌的代码更简短吗？请完成代码范例。
                example_code: "```\n家庭成员 = 宝宝, 妈妈, 爸爸, 奶奶, 爷爷\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### 练习2
                    打印歌曲《5只小猴子们在床上跳来跳去》。如果你不记得了，就查查文本。

                    **额外**打印歌曲《老麦当劳》，并确保所有的动物都发出不同的声音，使用`{if}`条件语句 。
                example_code_2: |
                    ```
                    猴子们 = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    在这一级，你可以同时使用`{for}` 和`{range}`命令 ，做一些使用计数的歌曲，如5只小猴子们。

                    ### 练习1
                    填空使代码生效！如果你不记得歌曲的内容，可以自己去查。

                    ### 练习2
                    这首歌的最后一行与其他的不同。将这一行打印在`{for}`语句里面 ，并使用`{if}`命令使其正确工作。
                example_code: |
                    ```
                    猴子们 _ _ 5 _ 1
                        {print} 猴子们 ‘小猴子们在床上跳来跳去’
                        _
                    ```
            12:
                story_text: "在这首歌中，我们可以更轻松地编写“如果你很高兴并且你知道的话，请拍手”。 因为我们可以将所有操作放入一个变量中，所以请检查一下：\n\n### 练习\n您能否为每行添加适量的缩进以使歌曲正确播放？\n提示：并非所有行都需要缩进。\n"
                example_code: |
                    ```
                    _一组动作 = '拍拍手', '跺跺脚', '喊万岁!'
                    _ {for} 动作 {in} 一组动作
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} '如果你很高兴，你意识到它'
                    _ {print}动作
                    _ {print} '如果你很高兴，你意识到它，你真的想表现出来'
                    _ {print} '如果你快乐并意识到它'
                    _ {print} 动作
                    ```
            13:
                story_text: |
                    在前面的冒险中，您已经学习了如何在函数中使用参数，但是你知道你也可以将它们与`{ask}`命令结合使用吗?
                    在这个例子中，我们改变了“我的邦妮”程序，使其具有互动性。你现在要问的是邦妮在哪里。
            16:
                story_text: |
                    在这个关卡中，你可以更快地编写一首像OldMacDonald这样的歌曲。你可以把正确的动物和正确的声音联系起来，只要把它们放在列表的同一位置。
                    醉酒的水手也是在这个关卡中快速制作出来的。整首歌只需要8行代码，看看吧!

                    ### 练习
                    通过将变量`animal`设置为`animals[i]`，将变量`sound`设置为`sounds[i]`，完成Old MacDonald歌曲。
                example_code: |
                    ```
                    动物们 = ['猪', '狗', '牛']
                    声音们 = ['哼哼', '汪汪', '哞']
                    {for} i {in} {range} 1 {to} 3
                        动物 = _
                        声音 = _
                        {print} '老麦当劳有一个农场'
                        {print} '咦啊咦啊欧！'
                        {print} '在那个农场里，他有一个' 动物
                        {print} '咦啊咦啊欧！'
                        {print} '这里有一个'声音'的声音'
                        {print} '和一个'声音'的声音那里'
                        {print} '这里有一个'声音
                        {print} '那里有一个'声音
                        {print} '到处都是一个'声音 声音
                    ```

                    ```
                    句子们 = ['我们该如何对待醉酒的水手', '用生锈的剃须刀刮光他的胡子', '把他放在大船上直到他清醒']
                    {for} 句子 {in} 句子们
                        {for} i {in} {range} 1 {to} 3
                            {print} 句子
                        {print} '一大清早'
                        {for} i {in} {range} 1 {to} 3
                            {print} '头昏脑涨的睁开眼'
                        {print} '一大清早'
                    ```
            18:
                story_text: |
                    在第16关，我们使用列表制作歌曲。然而，这些程序在这个级别不再正常工作。仍然需要添加第17关的冒号和第18关的括号。

                    ### 练习1
                    醉酒水手歌是作为示例代码给出的，但还不能工作。
                    你能确保一切正常吗?为了帮助你，我们在一些错误的地方加上了_。

                    ### 练习2
                    现在也看看你的老麦克唐纳歌曲从16级，并纠正它。
                example_code: |
                    ```
                    一些行 = ['我们应该如何处理醉酒的水手'，'用生锈的剃刀剃他的肚子'，'让他躺在船上醒酒']
                    {for} 行 {in} 一些行 _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ 行 _
                         {print} '凌晨'
                         {for} i {in} {range} 1 {to} 3
                             {print} 'way hay and up she rises'
                         {print} '凌晨'
                    ```
    songs_2:
        name: 唱首歌! 2
        default_save_name: 歌曲 2
        description: 唱首歌 2
        levels:
            12:
                story_text: |
                    歌曲中有很多重复。我们可以用一个函数捕获它!
                    ### 练习
                    请看带有该函数的示例代码。填写这两行，这样整首歌就打印出来了。
                example_code: |
                    ```
                    {define} 闪亮
                        {print} '闪亮'
                        {print} _

                    {call} 闪亮
                    {print} '高高地在天空上'
                    {print} '好像一颗钻石'
                    {call} _
                    ```
    turtle:
        name: 海龟
        default_save_name: 海龟
        description: 创作自己的绘画作品
        levels:
            1:
                story_text: |
                    你也可以用海蒂来画画。通过结合旋转和画线，你可以画出一个正方形或楼梯!

                    使用`{forward}`你可以向前画一条线。它后面的数字决定了海龟会走多远。`{turn} {right}`是顺时针转四分之一圈，`{turn} {left}`是逆时针转。

                    如果你想向后退，你可以使用`{forward}`命令，但要用一个负数。因此，比如说`{forward} -100`
                story_text_2: |
                    ### 练习
                    让我们开始画一个小楼梯。你能使它有5个台阶吗？
            2:
                story_text: |
                    在第 1 级中，乌龟只能向左或向右转。这有点无聊！
                    在第 2 级中，他可以将鼻子指向所有方向。

                    使用 90 度旋转四分之一，180 度旋转一半，一整圈是 360 度。

                    ### 练习
                    此代码现在创建字母 T。你能改变它来制作字母 B 吗？

                    **额外**将字母更改为不同的字母，例如你名字的第一个字母。
                    你还可以通过将颜色设置为 `{color}` `{white}` 来制作多个字母。 
                story_text_2: |
                    您可以使用变量来让乌龟 `turn`. 

                    ### 练习
                    更改代码，使其创建一个三角形。提示：您只需在一个地方更改代码。
                example_code_2: |
                    ```
                    {print} 绘制图形
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
            3:
                story_text: |
                    在这个级别中，您可以将 `{at} {random}` 与海龟绘图一起使用。使用随机选择使乌龟每次走不同的路径。
                    使用 `{at} {random}` 从列表中选择一个值。
                    ### 练习
                    您可以复制并粘贴第 2 行和第 3 行以创建更长的随机路径。
                example_code: |
                    ```
                    角度 {is} 10, 50, 90, 150, 250
                    {turn} 角度 {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    在第4级，你必须在`{print}`和`{ask}`语句中使用引号。在画画时也一样！
                example_code: |
                    ```
                    {print} _ '正在画图'_
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                story_text_2: |
                    你也可以用命令`{color}` ，改变线条的颜色。请看这个例子。
                    你还可以用命令`{color} {white}`来制作 "看不见的 "线条。你可以用这些白线在开始绘图前将乌龟移到屏幕的任何地方。
            5:
                story_text: |
                    在第5级，你可以用`{if}`来做出选择。比如选择不同类型的图案。
                example_code: |
                    ```
                    {print} '正在画图'
                    图形 {is} {ask} '你想要正方形还是三角形？'
                    {if} 图形 {is} 三角形 角度 {is} 120
                    {else} 角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                story_text_2: |
                    ### 练习
                    在此代码中输入正确的数字使其工作。
                    完成后，您可以尝试向后添加选项。

                    **额外** 请勿使用“左”和“右”，而是用北、东、南和西重新制作程序。
                    这样您就可以添加更多方向，例如东北和西南等。
                example_code_2: |
                    ```
                    方向 {is} {ask} '你想向左走、向右走还是一直向前走？'
                    {if} 方向 {is} 左 {turn} _
                    {if} 方向 {is} 右 {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    在这一级，你可以使用算术来绘制不同的图形。
                    你可能在学校里学过，旋转一圈是360度。如果没学过，那你现在知道了！
                    这就是为什么你可以用90度来画方形。360除以4是90。
                    现在我们可以用海蒂做数学，我们就能画出所有想要的图形！
                example_code: |
                    ```
                    边 = {ask} '你想要画几边形？'
                    角度 = 360 / 边
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    ```
            8:
                story_text: "现在我们能重复多行了，可以更容易地画图。\n我们只需要设置一下角度，然后在`{repeat}`中使用这个变量。\n\n### 练习1 \n用这个代码范例画了一个正方形。改变代码，使其画另一个图形，如一个三角形或一个六边形。 \n这需要对两行代码进行修改。\n 提示：一个完整的圆是360度。\n \n ### 练习2 \n现在画一个至少由两个多边形组成的图形。\n"
                example_code: |
                    ```
                    角度 = 90
                    {repeat} 4 {times}
                        {turn} 角度
                        {forward} 50
                    ```
                story_text_2: |
                    **另外**我们现在还可以改进之前的能画不同图案的程序。完成这段代码，你就能画出任何你想要的多边形！
            9:
                story_text: |
                    我们现在可以在 `{repeat}`中使用 `{repeat}`了，我们可以创建更复杂的图形了。

                    ### 练习1
                    这段代码能画三个黑色的三角形，把它改成能画出五个粉红色方块。

                    **（另外）** 你自己编码画出一个的至少由两种不同图形类型组成的图形。
            10:
                story_text: |
                    在这个关卡中，你可以让乌龟画一个图形。
                    海龟会沿着列表中的距离，一个接一个地走，每一步都比前一步走得远。
                    ### 练习1
                    在循环中增加一个90度的转弯，这样就画出了一个螺旋。
                    至少向列表中添加5个数字，这样螺旋就会变大。
                    **另外**你能把这个螺旋形变成另一种形状吗?尝试不同的转弯数字!
                    ### 练习2
                    螺旋向外旋转，怎么让它向内?
                example_code: |
                    ```
                    {turn} 90
                    距离们 = 10, 20, 30, 40, 50, 60
                    {for} 距离 {in} 距离们
                        {forward} 距离
                    ```
            12:
                story_text: |
                    我们可以用更少的代码使用函数来绘制更复杂的图形。
                    ### 练习1
                    填充函数以创建三个正方形。如果你想让图像看起来更好看，你可以把正方形之间的线设为白色。

                    ### 练习2
                    代码还可以更短。将最后几行放入`{repeat}`中，图形将保持不变。

                    ###练习3
                    用不同的图形创建您自己的绘图。
                    使用`{repeat}`更改图形的数量，并使用`{define}`更改图形的形状。
    turtle_draw_it:
        name: 绘画!
        default_save_name: 绘画
        description: 用小海龟画图
        levels:
            1:
                story_text: |
                    ### 练习
                    用小海龟重新完成绘画作品!

                    <div class="w-full flex flex-row gap-2">
                        长方形 <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        正方形 <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        楼梯<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    <div class="w-full flex flex-row gap-2">
                    三角形 <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    箭头 <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    船 <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    用小海龟重画图画!

                    <div class="w-full flex flex-row gap-2">
                    三角形 <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    星星 <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    箭头 <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    <div class="w-full flex flex-row gap-2">
                    彩色的星星 <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    彩虹 <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    嵌套的正方形 <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **额外**准备迎接真正的挑战吗?确保这些图形的颜色是随机选择的，这样每次运行程序时它们看起来就会不同!

                    ' ' '
                    颜色们 {is} 红、橙、黄、绿、蓝、紫、粉、棕、灰、黑
                    颜色_
                    ' ' '
            5:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    **额外**只制作一个代码让玩家决定他们想要看到哪个字母!你还能加上更多的字母吗?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    提示:
                    ```
                    选择的字母 {is} {ask} '您想看哪个字母? F, E 或 L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    **额外**让玩家决定正方形的颜色。

                    **额外**你能做出你自己名字的字母和你自己国家的国旗吗?

                    <div class="w-full flex flex-row gap-2">
                    正方形 <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    字母 <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    旗帜 <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    正方形的提示:
                    ```
                    选择的颜色 = {ask} _
                    ```
            7:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    <div class="w-full flex flex-row gap-2">
                    六边形 <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    三角形 <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    扇形 <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    **额外**括号中的数字表示可以绘制多少行代码。你能用同样的行数来做吗?

                    <div class="w-full flex flex-row gap-2">
                    正方形 (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    随机颜色的星星(5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    随机颜色的螺旋线 (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    **额外**括号中的数字表示可以绘制多少行代码。你能用同样的行数来做吗?

                    **额外**让玩家选择他们想要看到哪个国家的国旗。

                    <div class="w-full flex flex-row gap-2">
                    叉子 (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    随机颜色的层叠正方形(8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    旗子 <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    嵌套方块的提示:
                    ```
                    colord = 红色, 蓝色, 橙色, 黄色, 粉色, 紫色, 绿色, 棕色,黑色
                    距离 = 120
                    {repeat} 5 {times}
                    _
                    ```
                    标志提示:
                    ```
                    country = {ask} '您想看到哪个国家的国旗?'
                    {if} country {is} '荷兰'
                         coler_1 = 红色
                         coler_1 = 白色
                         coler_1 = 蓝色
                    ```
            10:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    <div class="w-full flex flex-row gap-2">
                    嵌套的六边形 <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    红绿灯  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    嵌套六边形的提示:
                    ```
                    距离列表 = 100, 80, 60, 40, 20
                    {for} 距离 {in} 距离列表
                    _
                    ```

                    交通灯的提示:
                    ```
                    颜色列表 = red, yellow, green
                    {for} 选择的颜色 {in} 颜色列表
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    圣诞灯 <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    圣诞灯的提示:

                    首先用一条看不见的白线移动到屏幕的左侧。然后挂上圣诞彩灯!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    <div class="w-full flex flex-row gap-2">
                    蜂巢 (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    扇形 (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    蜂巢的提示:
                    ```
                    {for} 巢的个数 {in} {range} 1 {to} _
                        {for} 一个巢的墙 {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    扇形的提示:
                    仿照你在第7关制作的扇形开始。或者看一下蜂巢的提示，因为代码非常相似。

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### 练习
                    用乌龟重新绘制图画！

                    首先，为您想要在手环上使用的每种形状**定义一个函数。 然后，将形状添加到手镯中，如下所示：

                    手链设计程序 <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500"> 
                example_code: |
                    提示手链设计程序
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} '接下来您想要手镯的形状是什么?'
                        chosen_color = {ask} '选择哪个颜色?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    不同大小的街道 <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    彩色的街道  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    不同大小的街道的提示
                    ```
                    {define} 画一栋房子 {with} 大小
                    _

                    {call} 画一栋房子 {with} 90
                    {call} 画一栋房子 {with} 60
                    {call} 画一栋房子 {with} 30
                    ```

                    彩色的街道的提示
                    ```
                    {define} 画一栋房子 {with} 选定的颜色
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### 练习
                    创建一个程序，询问玩家他们的图形应该有多少个角，然后创建那个图形。
                    图像中的图形是玩家填充10时的输出。

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} 计算度数 {with} 角的数量
                        _ 360 / 角的数量


                    {define} 画出图形 {with} 角度
                        _
                            {forward} 400/角的数量
                            {turn} _

                    角的数量 = {ask} _
                    角度 = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### 练习
                    用小海龟重画图画!

                    螺旋 <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    螺旋
                    ```
                    距离 = 5
                    {while} 距离 < 200
                        距离 = 距离 + 5
                         _
                    ```
                story_text_2: |
                    扇形 <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    扇形
                    ```
                    {define} 画一个正方形{with} 边长
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    星星 <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    星星
                    星星通常是用144度旋转来画的。例如，如果您将其稍微更改为143度，并使用`{while}`循环重复该模式多次，则可以得到此图。
    while_command:
        default_save_name: while_命令
        levels:
            15:
                story_text: |-
                    我们将学习一个新的循环，`{while}`循环!只要语句为真，就继续循环。
                    所以不要忘记在循环中更改值。

                    在示例代码中，我们继续，直到给出正确答案。
                    如果没有给出正确答案，这个循环就永远不会结束!
                example_code: |
                    ```
                    答案 = 0
                    {while} 答案 != 25
                        答案 = {ask} '5乘以5是多少?'
                    {print} '一个正确的回答给出'
                    ```
    years:
        name: 新年
        default_save_name: 新年倒计时
        description: 新年倒计时!
        levels:
            11:
                story_text: |
                    在此级别中，您可以使用 `{for}` 数字 `{in}` `{range}` 命令倒计时到新年。

                    ### 练习
                    填空并使代码正常工作！
                example_code: |
                    ```
                    {for} 数字{in} {range} _{to} _
                        {print} 数字
                        {sleep}
                    {print} '新年快乐！'
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack part 2
