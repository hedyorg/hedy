adventures:
    story:
        name: Verhaal
        default_save_name: Verhaal
        description: Maak een interactief verhaal
        levels:
            1:
                story_text: |
                    In level 1 kun je een verhaal maken met steeds een andere hoofdpersoon die je zelf invoert.

                    Gebruik als eerste regel `{ask}` en vraag wie de hoofdpersoon van jouw verhaal wordt.

                    Na die eerste regel begin je met `{print}` als de zin moet worden geprint.
                    Je gebruikt `{echo}` als je wilt dat jouw hoofdpersoon op het einde van de zin komt.
                example_code: |
                    ```
                    {ask} De hoofdpersoon van dit verhaal is
                    {print} De hoofdpersoon gaat nu in het bos lopen
                    {echo} Hij is wel een beetje bang, die
                    {print} Overal hoort hij gekke geluiden
                    {print} Hij is bang dat dit een spookbos is
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak nu je eigen verhaal van minstens 6 regels code.
                    Dit verhaaltje mag niet hetzelfde zijn als de voorbeeldcode.
                    Gebruik minstens een `{ask}` en een `{echo}` commando.
                    Je mag zelf een onderwerp kiezen.
                    Geen inspiratie? Kies dan een van onze onderwerpen: naar de bioscoop, een sportwedstrijd of een dagje naar de dierentuin.
            2:
                story_text: |
                    In level 2 kun je je verhaal leuker maken. De naam van je hoofdpersoon kan nu overal in de zin staan.

                    Je moet daar wel een klein beetje extra voor programmeren. Je moet je hoofdpersoon nu eerst een naam geven.

                    Die naam kun je dan overal in een zin neerzetten.
                example_code: |-
                    ```
                    naam {is} {ask} Hoe heet de hoofdpersoon?
                    {print} naam gaat nu in het bos lopen
                    {print} naam is wel een beetje bang
                    {print} ineens hoort zij een vreemd geluid
                    {sleep} 2
                    {print} naam is bang dat dit een spookbos is
                    ```
                story_text_2: |
                    ### Opdracht
                    Het is tijd om variabelen toe te voegen aan jouw eigen verhaal, dat je in level 1 hebt geschreven.
                    Ga naar 'Mijn programma's', zoek jouw level 1 verhaal avontuur op en kopieer de code. Plak de code daarna in het invoerscherm hier in dit level.

                    Deze code werkt nog niet, omdat je nog geen variabelen gebruikt hebt.
                    Verander de `{ask}` en `{echo}` commando's in jouw code naar de juiste vorm, die je in dit level geleerd hebt.

                    **Extra** Voeg een `{sleep}` commando toe aan jouw code om spanning in het verhaal op te bouwen.
            3:
                story_text: |
                    In dit level kun je iets willekeurigs aan je verhaal toevoegen. Een willekeurig monster, dier of ander obstakel. Dat gaat zo:
                example_code: |
                    ```
                    dieren {is} ü¶á, üêø, ü¶â, ü¶î
                    {print} Ze hoort nu het geluid van een dieren {at} {random}
                    ```
                story_text_2: |
                    Het `{add}`commando kun je misschien ook in je verhaal gebruiken.
                example_code_2: |
                    ```
                    {print} Ze hoort een geluid...
                    dieren {is} üêø, ü¶î, ü¶á, ü¶â
                    dier {is} {ask} Wat denk jij dat het is?
                    {add} dier {to_list} dieren
                    {print} het was een dieren {at} {random}
                    ```
                story_text_3: |
                    Dit is een voorbeeld van het `{remove}` commando in jouw verhaal

                    ### Oefening
                    Kopieer jouw verhaal uit het vorige levels in dit level.
                    In dit level leerde je 3 nieuwe commando's: `{at} {random}` , `{add} {to_list}` en `{remove} {from}`.
                    Voeg nieuwe regels code toe aan jouw verhaal, zodat alle nieuwe commando's ieder ten minste 1 keer gebruikt worden in jouw verhaal.
                example_code_3: |
                    ```
                    {print} Zijn rugzak is veel te zwaar...
                    {print} In de rugzak zitten een fles water, een zaklamp en een baksteen.
                    tas {is} water, zaklamp, baksteen
                    weggooien {is} {ask} Welk ding zal onze held weggooien?
                    {remove} weggooien {from} tas
                    ```
            4:
                story_text: |
                    ### Opdracht
                    Kopieer de voorbeeldcode en maak hem kloppend door aanhalingstekens in te vullen op de lijntjes.
                    Op de lijntjes van regel 3 en 4 moeten geen aanhalingstekens komen, maar een `{sleep}` en een `{clear}` commando. Lukt het jou om het programma te laten werken?

                    ### Opdracht 2
                    Ga terug naar het vorige level en kopieer je eigen verhaalcode. Maak de code nu kloppend voor dit level door er aanhalingstekens aan toe te voegen op de goede plekken.
                    Let op: De variabelen die je in jouw eigen verhaal gebruikt moeten buiten de aanhalingstekens. Net als bij de tweede regel van de voorbeeldcode. Daar staat de variabele naam ook buiten de aanhalingstekens.
                example_code: |
                    ```
                    naam {is} {ask} _Hoe heet de hoofdpersoon_
                    {print} _De hoofdpersoon heet _ naam
                    _
                    _
                    {print} naam _ gaat nu in het bos lopen_
                    {print} naam _ is wel een beetje bang_
                    dieren {is} ü¶î, ü¶â, üêø, ü¶á
                    {print} _Hij hoort het geluid van een _ dieren {at} {random}
                    {print} naam _ is bang dat dit een spookbos is_
                    ```
            5:
                story_text: |
                    In dit level kun je je verhaal nog leuker maken door verschillende eindes te programmeren.
                    In de voorbeeldcode zie je dat er twee verschillende eindes zijn geprogrammeerd.

                    ### Opdracht 1
                    Schrijf een kort verhaaltje van minstens 6 regels over een zelfgekozen onderwerp.
                    Geen inspiratie? Kies dan een van onze onderwerpen: een superheld, een saaie dag op school, gestrand op een onbewoond eiland.

                    Geef de speler nu de kans om te kiezen uit een goed of een slecht einde, net als in de voorbeeldcode.
                    Programmeer beide eindes.

                    ### Opdracht 2
                    Kopieer jouw verhaal van de vorige levels.
                    Voeg minstens 2 `{if}` en `{else}` commando's toe aan het verhaal.
                    Je kunt dit doen door een goed en een slecht einde te programmeren, zoals bij opdracht 1, maar je kunt ook andere manieren zoeken om deze commando's toe te voegen.
                example_code: |
                    ```
                    naam {is} {ask} 'Wie loopt er in het bos?'
                    {print} naam ' loopt door het bos'
                    {print} naam ' komt een monster tegen'
                    einde {is} {ask} 'Wil je een goed of slecht einde?'
                    {if} einde {is} goed {print} naam ' pakt haar zwaard en het monster rent snel weg'
                    {else} {print} 'Het monster eet ' naam ' op'
                    ```
            8:
                story_text: |
                    Soms zegt iemand in een verhaal iets meerdere keren. Bijvoorbeeld als iemand om hulp roept, of een liedje zingt.
                    Dat kun je nu in je verhaal zetten met `{repeat}`.

                    ### Opdracht
                    Kun jij ook herhaling in jouw verhaal gebruiken? Zoek een van jouw verhaalprogramma's uit een vorig level op en kies minstens
                    √©√©n `{print}` regel om te herhalen.
                example_code: |
                    ```
                    {print} 'De prins riep steeds om hulp'
                    {repeat} 5 {times} {print} 'Help!'
                    {print} 'Waarom helpt niemand me nou toch?'
                    ```
            9:
                story_text: "In dit level kun jij jouw verhaal √©cht interactief maken! In dit level is het `{if}` commando namelijk veranderd, waardoor je er meerdere regels mee kunt printen. Zo kun je de lezer van je verhaal een keuze laten maken. Na de keuze gaat het verhaal verder op basis van die keuze. Kijk maar naar het voorbeeld.\n\n### Opdracht 1\nIn de voorbeeldcode zie je hoe je twee verschillende verhalen kunt maken; eentje waarbij je op het geluid afgaat en eentje waarbij jij je verstopt. \nVul zelf lege plekken in! \n**Extra** Maak het verhaal nog langer. Wat gebeurt er verder? Je kan ook een tweede `{ask}` toevoegen met een tweede keuze.\n\n### Opdracht 2\nOefen met het inspringen. Ga terug naar level 5, zoek je verhaalprogramma op. Maak dan je goede √©n slechte einde ieder minstens drie regels.\n"
                example_code: |
                    ```
                    hoofdpersoon = {ask} 'Hoe heet de hoofdpersoon in dit verhaal?'
                    {print} hoofdpersoon ' loopt door het bos'
                    {print} hoofdpersoon ' hoort plotseling een geluid!'
                    dapper = {ask} 'Gaat 'hoofdpersoon ' op het geluid af?'
                    {if} dapper {is} ja
                        {print} 'Dapper stapt ' hoofdpersoon ' op het geluid af'
                        {print} _
                    {else}
                        {print} 'Snel zoekt ' hoofdpersoon ' een verstopplek'
                        {print} _
                    ```
            10:
                story_text: "In dit level kun je `{if}` and `{repeat}` commando's in andere `{if}` en `{repeat}` commando's stoppen. \nHierdoor krijg je nog meer mogelijkheden om je verhaal echt interactief te maken!\n\n### Opdracht 1\nMaak de code af op de streepjes zodat de `{if}` het doet.\n\n### Opdracht 2\nVoeg een `{if}` en een `{else}` toe aan het gedeelte van het verhaal waar Robin naar huis gaat.\n\n### Opdracht 3\nGa terug naar je verhaal van level 8 en gebruik ook minstens twee keer een `{if}` in een `{if}`.\n"
                example_code: |
                    ```
                    {print} 'Robin loopt door de stad'
                    locatie = {ask} 'Gaat Robin een winkel in of gaat ze naar huis?'
                    {if} locatie {is} winkel
                        {print} 'Ze stapt de winkel binnen'
                        {print} 'Robin ziet een interessant boek.'
                        boek = {ask} 'Koopt Robin het boek?'
                        {if} boek {is} ja
                    _ {print} 'Robin koopt het boek en gaat naar huis'
                    _ {else}
                    _ {print} 'Robin verlaat de winkel en gaat naar huis'
                    {else}
                        {print} 'Robin gaat naar huis'
                    ```
            11:
                story_text: "In dit level kun je het commando `{for}` in je verhaal gebruiken. Op deze manier kun je gemakkelijk het kinderboek 'Beertje bruin, wat zie jij daar?' programmeren.\n\n### Opdracht \n\nKijk naar <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> het verhaal</a>, als je het niet kent, en zorg dat dit hele verhaal wordt uitgeprint.\n"
                example_code: |
                    ```
                    dieren = _ , _ , _
                    {print} 'Bruintje beer, bruintje beer'
                    {print} 'Wat zie je?'
                    ```
            16:
                story_text: |
                    In dit level kun je de `{while}` loop gebruiken om je verhaaltjes nog interessanter te maken. Zo kun je `{while} spelletje == 'aan'` gebruiken om het spel te laten werken totdat je game over bent.
                    Of je kunt `{while} zwaard == 'kwijt'` gebruiken, zodat de speler niet verder kan totdat hij/zij het zwaard gevonden heeft.
                    ### Opdracht
                    De voorbeeldcode laat zien hoe je  `{while}` in een verhaal kunt gebruiken. Bedenk nu je **eigen scenario** waarin de speler iets moet vinden voordat hij/zij door kan spelen.
                example_code: |
                    ```
                    sleutels = 'kwijt'
                    {print} 'Je staat in de voortuin en bent je sleutels kwijt.'
                    {print} 'Waar ga je zoeken?'
                    {print} 'kies uit: boom, steen, bloembed, brievenbus'
                    {while} sleutels == 'kwijt'
                        locatie = {ask} 'Waar wil je zoeken?'
                        {if} locatie == 'bloembed'
                            {print} 'Hier zijn ze!'
                            sleutels = 'gevonden'
                        {else}
                            {print} 'Helaas, ze liggen niet bij de ' locatie
                    {print} 'Nu kun je het huis in!'
                    ```
            13:
                story_text: |
                    We gaan weer een verhaal printen, maar we moeten daarbij steeds haakjes gebruiken bij de `{print}`.

                    ### Opdracht 1
                    Maak een verhaal van minstens 5 zinnen. Je hoeft `naam` nog niet te gebruiken.
                example_code: |
                    ```
                    {print}('Welkom bij dit verhaal!')
                    ```
                story_text_2: |
                    ### Opdracht 2
                    We hebben al een `{input}` voor jou klaargezet. Gebruik eerst de variabele `naam` in je verhaal.
                    Voeg daarna een tweede `{ask}` toe en gebruik die variabele ook.
                    Tip: Denk aan de komma's in een `{print}` tussen tekst en variabelen!
                example_code_2: |
                    ```
                    naam = {input}('Hoe heet jij?')
                    {print}('Welkom bij dit verhaal!')
                    ```
    add_remove_command:
        description: 'Introduceren van: {add} {to_list} (toevoegen aan to_list) en {remove} {from} (verwijderen uit from)'
        levels:
            3:
                story_text: |
                    ### Toevoegen
                    Je kunt items aan een lijst toevoegen met het `{add} {to_list}` commando. Om iets aan een lijst toe te voegen typ je bijvoorbeeld: `{add} pingu√Øn {to_list} dieren`. Je kunt het ook gebruiken in combinatie met `{ask}` zoals in het voorbeeld.
                example_code: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    leuk {is} {ask} Welk dier vind jij leuk?
                    {add} leuk {to_list} dieren
                    {print} Ik kies dieren {at} {random}
                    ```
                story_text_2: "### Verwijderen \n Als je items aan een lijstje kunt toevoegen, kun je natuurlijk ook items verwijderen. Dat doe je met`{remove} {from}`.\n"
                example_code_2: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    niet_leuk {is} {ask} Welk dier vind jij niet leuk?
                    {remove} niet_leuk {from} dieren
                    {print} Ik kies dieren {at} {random}
                    ```
                story_text_3: |
                    ### Opdracht
                    Probeer de nieuwe codes uit. Voeg de smaak die de speler graag wil toe aan het lijstje en haal de smaken waar diegene allergisch voor is van het lijstje af.
                example_code_3: |
                    ```
                    {print} Verrassingsmilkshake
                    smaken {is} aardbei, chocolade, vanille
                    hoop {is} {ask} Welke smaak hoop je dat het wordt?
                    _
                    allergie {is} {ask} Voor welke smaak ben je allergisch?
                    _
                    {print} Je krijgt een {at} {random} milkshake
                    ```
    ask_command:
        default_save_name: vraag_commando
        description: Introductie {ask} (vraag) commando
        levels:
            1:
                story_text: |
                    ## Het vraag commando
                    Nu je het `{print}` commando onder de knie hebt, is het tijd voor een nieuw commando: `{ask}`. Met het `{ask}` commando kun je een vraag stellen. Kijk maar:
                example_code: |
                    ```
                    {print} Hallo!
                    {ask} Wat is jouw naam?
                    ```
                story_text_2: |
                    ## Het `{echo}` commando
                    Als je wilt dat de computer jouw antwoord herhaalt, kun je het `{echo}` commando gebruiken. Let op: jouw antwoord wordt herhaald aan het einde van de zin. In dit voorbeeld komt jouw antwoord dus na Hoi.
                example_code_2: "```\n{print} Hallo!\n{ask} Hoe heet je? \n{echo} Hoi\n```\n"
                story_text_3: "### Opdracht \nProbeer het`{ask}`commando en het`{echo}` commando uit. Vul eerst een goede code in op de plek van het streepje, om het programma aan de praat te krijgen.\nStel daarna nog twee vragen door het `{ask}` commando te gebruiken. Gebruik na elke `{ask}` ook een `{echo}` om het antwoord op het scherm te tonen.\n"
                example_code_3: |
                    ```
                    _ Hoe gaat het?
                    _
                    ```
            2:
                story_text: "## Het vraag commando\nNu we **variabelen** in onze codes kunnen gebruiken, hebben we het `{echo}` commando niet langer nodig.\nWe kunnen variabelen gebruiken om antwoorden in op te slaan. Hierdoor kunnen we antwoorden op meerdere vragen gebruiken in onze codes. \nKijk maar eens naar het voorbeeld:\n\nOp deze manier worden je programma's steeds interactiever!\n"
                example_code: |
                    ```
                    naam {is} {ask} Wat is je naam?
                    {print} Hoi naam
                    leeftijd {is} {ask} Hoe oud ben je?
                    {print} naam is leeftijd jaar oud
                    ```
                story_text_2: "### Opdracht\nJe hebt in het vorige avontuur al geleerd hoe je variabelen kunt instellen met het`{is}` commando.\nDaar heb je minstens 3 variabelen gemaakt en ze gebruikt met een print commando.\nNu gaan we de variabelen interactief maken in plaats van ze in te stellen, zoals we deden in ons voorbeeld. \n\nKopieer je code van het vorige avontuur en maak de variabelen interactief door `{ask}` commando's te gebruiken.\n"
                example_code_2: |
                    ```
                    lievelingsdier {is} {ask} Wat is je lievelingsdier?
                    {print} Ik hou van lievelingsdier
                    ```
            13:
                story_text: Als laatste veranderen we het woord dat je moet gebruiken voor `{ask}`. Vanaf nu noemen we vraag `{input}`.
                example_code: |
                    ```
                    {print}('Mijn naam is Hedy!')
                    naam = {input}('Hoe heet je?')
                    {print}('Dus jouw naam is ', naam)
                    ```
    blackjack:
        description: Probeer zo dicht mogelijk bij 21 te komen
        levels:
            16:
                story_text: |
                    Blackjack is een simpel kaartspelletje waarbij je zo dicht mogelijk bij 21 punten moet komen. Je krijgt twee kaarten. Elke kaart is het getal waard dat erop staat, en de kaarten met plaatjes (Boer, Vrouw, Heer) zijn 10 punten waard.
                    De Aas is 1 of 11 punten waard (dat mag je zelf kiezen). De dealer, jouw tegenstander, krijgt ook twee kaarten.\nAls je wil, mag je een derde kaart pakken en die punten worden bij jouw score opgeteld. De dealer mag ook een extra kaart pakken.
                    Maar pas op dat je nooit over de 21 punten heengaat, want dan verlies je!
                    De speler die het dichtst bij de 21 punten komt, zonder eroverheen te gaan, wint!

                    ### Opdracht

                    In dit avontuur programmeren we het eerste deel van een potje Blackjack. We maken een functie waarmee we kunnen berekenen hoeveel punten een kaart waard is.

                    ***Stel de variabelen in***
                    Begin met het maken van een lijst met daarin alle kaarten van 2 tot Aas. Maak daarna een lijstje met alle plaatjeskaarten, oftewel Boer, Heer en Vrouw. Kies daarna een willekeurige kaart uit het lijstje kaarten en noem die kaart_1.

                    ***Maak een functie om punten te berekenen***
                    Maak een functie die berekent hoeveel punten een kaart waard is.
                    Alle plaatjeskaarten zijn 10 punten waard, de Aas is 11 punten ward en alle andere kaarten zijn evenveel waard als erop staat.
                    Aan het einde van de geeft de functie je de variabele `punten`.

                    ***Test de functie***
                    Test of je functie naar behoren werkt. Maak de eerste regel in dit onderdeel af door in te vullen welke kaart er gepakt is. Maak de volgende regel af door de functie op te roepen met `kaart_1`.
                    Voer de code een aantal keer uit. Ben je blij met het resultaat? Super! Dan kun je dit testgedeelte weer verwijderen en door naar het volgende onderdeel op het volgende avontuur.
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Stel de variabelen in
                    kaarten = _
                    plaatjes = _
                    kaart_1 =

                    # Maak een functie om punten te berekenen
                    {define} bereken_punten {with} kaart:
                        {if} kaart {in} plaatjes:
                            punten = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ punten

                    # Test de functie
                    {print} 'Jouw kaart is een ' _
                    {print} 'Dat is ' _ ' punten waard'.
                    ```
    blackjack_2:
        levels:
            16:
                story_text: |
                    ### Opdracht
                    In dit avontuur programmeren we het tweede gedeelte van het Blackjack spel.

                    ***Plak je code van het vorige avontuur***
                    In het vorige avontuur heb je een lijstje gemaakt met variabelen en heb je een functie gemaakt om te berekenen hoeveel een kaart waard is. Kopieer die code en plak hem hier. Let op! Je hebt ook een stuk code gemaakt om je functie te testen, dat heb je nu niet nodig. Heb je dat gedeelte nog niet verwijderd, verwijder het dan nu.

                    ***Voeg meer variabelen toe***
                    Je hebt de lijstjes `kaarten` en `plaatjes` gemaakt en de variabele `kaart_1`. Onder deze variabelen, maak je nog 3 variabelen, namelijk: `kaart_2`, `dealer_kaart_1` en `dealer_kaart_2`. Deze kaarten worden ook random getrokken uit het lijstje `kaarten`.

                    ***Tel de punten op***
                    Om te berekenen hoeveel punten je hebt behaald, roepen we de functie op met kaart_1 en doen we dat nogmaals met kaart_2. Daarna voeg je die twee scores samen om je totaal aantal punten te krijgen.
                    Doe daarna hetzelfde voor de punten van de dealer. Let daarbij op dat je wel de kaarten van de dealer gebruikt en niet die van de speler!

                    ***2 Azen***
                    Lekker bezig! Bijna alle scores kunnen nu berekend worden. Er geldt nog √©√©n uitzondering: 2 Azen. Als je 2 Azen trekt, dan is je totaal aantal punten 12 en niet 22 (want bij 22 punten zou je af zijn!). Dit geldt natuurlijk ook voor de dealer.

                    ***Toon de score***
                    Tot slot wil je dat het programme je vertelt welke kaarten je hebt getrokken en hoeveel punten dat waard is. Toon ook welke kaarten de dealer heeft en hoeveel punten dat is.

                    ***Ga door naar het volgende avontuur***
                    Super! Je hebt dit gedeelte af! Kopieer je spel en ga door naar het volgende avontuur om te leren hoe je een extra kaart kunt krijgen en een winnaar kunt uitroepen.
                example_code: |
                    ```
                    # Plak hier je code van het vorige avontuur

                    # Voeg deze variabelen toe aan het rijtje variabelen
                    kaart_2 = _
                    dealer_kaart_1 = _
                    dealer_kaart_2 = _

                    # Tel jouw punten op
                    jouw_punten_1 = {call} _ {with} kaart_1
                    jouw_punten_2 = _
                    jouw_totaal = _

                    # Tel de punten van de dealer op
                    dealer_punten_1 = _
                    _
                    _

                    # 2 Azen
                    {if} kart_1 == 'Aas' {and} _
                        jouw_totaal = 12
                    {if} dealer_kaart_1 _
                        dealer_totaal = _

                    # Toon de scores
                    {print} 'Jij hebt een ' _ ' en een ' _ '. Dat is ' _ ' punten.'
                    {print} 'De dealer heeft een ' _ ' en een ' _ '. Dat is ' _ ' punten.'
                    ```
    blackjack_3:
        levels:
            16:
                story_text: |
                    In het vorige avontuur heb je geleerd om 2 kaarten te trekken voor jezelf en voor de dealer en om de totaalscores te berekenen.
                    In dit avontuur programmeer je hoe jij en de dealer een extra kaart kunnen krijgen.

                    ### Opdracht
                    ***Plak je code van het vorige avontuur hier*** Kopieer je code van het vorige avontuur en plek het hier.

                    ***Een extra kaart voor jou*** Als je wil, kun je een extra kaart krijgen om zo dichtbij mogelijk de 21 te komen. Vraag eerst aan de speler of die een extra kaart wil.
                    Als dat zo is, kies een willekeurige kaart en print welke kaart er getrokken is. Als de kaart geen Aas is, kun je de functie oproepen om de punten te berekenen.
                    Is de nieuwe kaart wel een Aas, dan kun je deze functie niet gebruiken, gezien de Aas zowel 1 als 11 punten kan zijn (afhankelijk van hoeveel punten je al hebt).
                    Is je totaal minder dan 11, dan wil je dat de Aas 11 punten waard is (want dan kom je het dichtsbij 21). Dus dan voeg je 11 punten toe aan je totaal.
                    Is je totaal minder dan of gelijk aan 11, dan wil je dat de Aas maar 1 punt waard is (anders ga je over de 21 punten heen). Dus dan voeg je maar 1 punt toe aan je totaal.
                    Tot slot wil je je nieuwe totaal printen.

                    ***Extra kaart voor de dealer*** De dealer mag ook een extra kaart pakken. Dat hoef je niet aan de dealer te vragen, want die krijgt altijd een extra kaart als diens puntenaantal minder dan 17 is.
                    Kopieer het stuk code dat je net hebt gemaakt bij 'extra kaart voor jou' en plak het bij de dealers sectie. Pas het stukje coded daarna aan om het kloppend te maken voor de dealer als die een extra kaart pakt.
                example_code: |
                    ```
                    # Plak je code van het vorige avontuur hier

                    # Extra kaart voor jou
                    hit = {ask} _
                    {if} hit == 'ja':
                        kaart_3 = _
                        {print} _
                        {if} kaart_3 _ 'Ace':
                            jouw_punten_3 = _
                            jouw_totaal = _
                        {else}:
                           {if} jouw_totaal _
                                _
                            {else}:
                                _
                        {print} _

                    # Extra kaart voor de dealer
                    {if} dealer_totaal < 17
                    _
                    ```
    blackjack_4:
        levels:
            16:
                story_text: |
                    In de afgelopen avonturen heb je al bijna een werkend blackjack spel gemakat! Het enige wat we nog nodig hebben is een manier om de winnaar uit te roepen!

                    ### Opdracht
                    ***Plak je code van het vorige avontuur hier***

                    ***Een winnaar bepalen***
                    Ten eerste is er sprake van gelijkspel, als jij en de dealer evenveel punten hebben.
                    Ten tweede ben jij de winnaar, als de dealer meer dan 21 punten heeft en jij niet.
                    Ten derde moeten we kijken wie het dichtstbij 21 punten is gekomen, als zowel jij als de dealer minder dan 21 punten hebben.  Dat doen we door te vergelijken wie de hoogste score heeft behaald. Is jouw totaal hoger dan dat van de dealer? Dan heb jij gewonnen. Zo niet, dan heeft de dealer gewonnen.
                    Tot slot heb je in alle andere scenario's verloren. Bijvoorbeeld als je meer dan 21 punetn hebt en de dealer niet, of als jullie allebei meer dan 21 punten hebben.

                    ***Spelen maar!***
                    Werkt je spel helemaal? Geweldig! Dat heb je fantastisch gedaan! Veel speelplezier!
                    Werkt het spel nog niet naar behoren? Geen zorgen, waarschijnlijk heb je ergens een foutje gemaakt. Kijk rustig naar je code en debug je code met de lieveheersbeestjesknop.
                example_code: |
                    ```
                    # Plak je code van het vorige avontuur hier

                    # Een winnaar bepalen
                    {if} _
                        {print} 'Gelijkspel! Doe nog een potje'
                    {elif} _
                        {print} 'Je wint!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Rekenmachine
        default_save_name: Rekenmachine
        description: Maak een rekenmachine
        levels:
            7:
                story_text: |
                    Nu je kunt rekenen, kun je ook een programma maken om sommetjes te oefenen. Je kunt de sommen zelf verzinnen, bijv zo:
                example_code: |
                    ```
                    nummer_1 = {ask} 'Geef het eerste nummer:'
                    nummer_2 = {ask} 'Geef het tweede nummer:'
                    goede_antwoord = nummer_1 * nummer_2
                    {print} nummer_1 ' keer ' nummer_2 ' is ' goede_antwoord
                    ```
                story_text_2: |
                    ### Opdracht
                    De rekenmachine hierboven rekent het antwoord voor je uit, maar je kunt ook een programma maken om je eigen rekenvaardigheid te testen, zoals deze:
                    Vul de streepjes in om het af te maken!
                example_code_2: |
                    ```
                    goed_antwoord = 11 * 27
                    antwoord = {ask} 'Hoeveel is 11 keer 27?'
                    {if} antwoord {is} _ {print} 'goed gedaan!'
                    {else} {print} 'Helaas! Het was ' _
                    ```
                story_text_3: |
                    **Extra** Je kunt ook de computer zelf willekeurige sommen laten maken met `{random}`.
                example_code_3: |-
                    ```
                    nummers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    nummer_1 = _
                    nummer_2 = _
                    goed_antwoord = nummer_1 * nummer_2
                    gegeven_antwoord = {ask} 'Wat is ' nummer_1 ' keer ' nummer_2 '?'
                    {if} _
                    {else} _
                    ```
            10:
                story_text: |
                    In dit level kunnen we de rekenmachine van een vorig level uitbreiden en meerdere sommen achter elkaar vragen.

                    ### Opdracht 1
                    Kun jij regel 10 afmaken zodat het programma werkt?

                    ### Opdracht 2
                    Geef de speler feedback over een goed en over een fout antwoord, zoals `{print} 'Super!'` of `{print} 'Helaas! Het goede antwoord is ' goede_antwoord`.
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        getal_1 = getallen {at} {random}
                        getal_2 = getallen {at} {random}
                        goede_antwoord = getal_1 * getal_2
                        {print} 'Hoeveel is ' getal_1 ' keer ' getal_2 '?'
                        antwoord = {ask} 'Vul hier het antwoord in:'
                        {print} 'Jouw antwoord is ' antwoord
                        {if} _ {is} _
                            score = score + 1
                    {print} 'Je score is ' score ' van 10!'
                    ```
            11:
                story_text: |
                    Oefen de tafelsommen met dit programma!
                    ### Opdracht
                    Vul de lege plekken in. We willen dat het programma deze vragen stelt aan de speler:
                    ```
                    Wat is 1 keer 1?
                    Wat is 1 keer 2?
                    Wat is 1 keer 3?
                    Wat is 2 keer 1?
                    Wat is 2 keer 2?
                    Wat is 2 keer 3?
                    Wat is 3 keer 1?
                    Wat is 3 keer 2?
                    Wat is 3 keer 3?
                    _
                    ```
                example_code: |
                    ```
                    getallen = 1, 2, 3
                    {for} _
                        {for} _
                            antwoord = {ask} _
                            correct = getal_1 * getal_2
                            {if} antwoord {is} correct
                                {print} 'Fantastisch!'
                            {else}
                                {print} 'Fout! Het antwoord is ' correct
                    ```
            15:
                story_text: |
                    In dit avontuur leer je een rekenmachine bouwen die het gemiddelde cijfer voor jou berekent. Als je de rekenmachine aan de praat krijgt, kun je doorgaan naar het volgende avontuur. Daar leer je hoe je extra functies toevoegt aan je rekenmachine.

                    ### Oefening 1
                    Vul de lege lijntjes in om de rekenmachine aan de praat te krijgen.
                    * Start op regel 4, voeg een vraag toe om uit te vinden welk cijfer de leerling heeft gekregen.
                    * Op regel 5 wil je vervolgens het totaal berekenen van alle cijfers, dus totaal = totaal + cijfer.
                    * Daarna zorgen we voor een return value. We willen het gemiddelde als return value, dus het totaal gedeeld door de hoeveelheid toetsen (oftewel gedeeld door 4).
                    * Tot slot roepen we de functie op in regel line 8.

                    Heb je het voor elkaar gekregen? Geweldig! Wil je nog meer opties bouwen voor de rekenmachine? **Kijk in het volgende avontuur, daar gaat het avontuur verder!**
                example_code: |
                    ```
                    {define} bereken_gemiddelde_cijfer
                        totaal = 0
                        {for} i {in} {range} 1 {to} 4
                            cijfer = {ask} _
                            totaal = totaal + _
                            {return} _ / 4

                    gemiddelde_cijfer = {call} _
                    print 'Je staat gemiddeld een ' gemiddelde_cijfer
                    ```

                            totaal = totaal + _
                            {return} _ / 4

                    gemiddelde_cijfer = {call} _
                    print 'Je staat gemiddeld een ' gemiddelde_cijfer
            16:
                story_text: |
                    In het rekenspelletje dat je een aantal levels terug hebt leren maken, kun je de `{while}` loop toevoegen.
                    Hierdoor mag de speler pas door naar de volgende vraag als het goede antwoord gegeven is.

                    ## Opdracht
                    Voeg een `{while}` toe aan de functie, vraag de speler wat nummer_1 keer nummer_2 is en print hun antwoord.
                    Gebruik daarna `{call}` om de functie op te roepen.
                example_code: |
                    ```
                    {define} nieuwe_vraag
                        nummers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nummer_1 = nummers {at} {random}
                        nummer_2 = nummers {at} {random}
                        correct = nummer_1 * nummer_2
                        antwoord = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Geef 10 goede antwoorden om te winnen!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'Je hebt gewonnen!'
                    ```
    calculator_2:
        name: Rekenmachine 2
        levels:
            15:
                story_text: |
                    ### Oefening 2
                    **Dit is het vervolg op het vorige avontuur.** Het avontuur begint in het vorige avontuur.
                    Natuurlijk wil je niet altijd het gemiddelde berekenen van 4 toetsen. Soms wil je het gemiddelde van wel 10 toetsen, of soms maar 2...
                    We kunnen dit probleem oplossen door het argument en de variabele 'hoeveelheid_toetsen' toe te voegen.
                    * Begin een nieuwe regel op regel 3. Stel daar de variabele hoeveelheid_toetsen in, door te vragen hoeveel toetsen de speler heeft gehad.
                    * Verander de 4, in regel 4, naar 'hoeveelheid_toetsen'
                    * Verander tot slot de 4, in regel 6, in hoeveelheid_toetsen.

                    Probeer je nieuwe programma uit. Werkt het?

                    ### Oefening 3
                    Wil je het programma nog beter maken? Super! In het vorige programma kon je het gemiddelde cijfer berekenen van 1 vak, maar het zou beter zijn als dat voor meerdere vakken kon.
                    We verklappen niet hoe je dit kunt bouwen, maar we geven je wel een tip: Begin je code in regel 1 met: definieer (define) bereken_gemiddelde_cijfer met (with) vak.
                example_code: |
                    ```
                    # Gebruik je eigen code van het vorige avontuur
                    ```
    clear_command:
        description: '{clear} commando'
        levels:
            4:
                story_text: |
                    Tijd voor nog een nieuw commando! Met de code `{clear}` wis je alle tekst van je scherm. Zo kun je voorkomen dat je uitvoerscherm te vol raakt.
                    Let op! Bij het `{clear}` commando moet je bedenken of je ook een `{sleep}` wil gebruiken. Gebruik je geen `{sleep}`, dan wist Hedy je scherm zo vlug dat je de tekst amper gezien hebt zoals in het voorbeeld!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'even wachten...'
                    {sleep} 3
                    {clear}
                    {print} 'VERRASSING!'
                    ```
    debugging:
        levels:
            1:
                story_text: |-
                    Welkom bij het debugging avontuur. Een code debuggen betekent dat je alle fouten eruit gaat halen.
                    In deze debugging avonturen laten we je dus code zien die nog niet werkt.
                    Jij moet uitzoeken wat er mis is en de fouten verbeteren.

                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    {print} Ik vind programmeren leuk
                    Vind jij programmeren ook leuk?
                    {echo}
                    {print} Wat zijn je hobbies?
                    {echo} Jouw hobbies zijn
                    ```
            2:
                story_text: |-
                    Welkom bij het debugging avontuur. Een code debuggen betekent dat je alle fouten eruit gaat halen.
                    In deze debugging avonturen laten we je dus code zien die nog niet werkt.
                    Jij moet uitzoeken wat er mis is en de fouten verbeteren.

                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    bestemming {ask} Waar ga je naartoe op vakantie?
                    {print} De vlucht naar bstemming vertrekt om 15:00 uur.
                    {ask} Heb je jouw bagage al ingecheckt?
                    {echo}
                    {print} Ik ga nu je vliegticket printen.
                    {sleep}
                    Alsjeblieft! Goede reis!
                    ```
            3:
                story_text: |-
                    Welkom bij het debugging avontuur. Een code debuggen betekent dat je alle fouten eruit gaat halen.
                    In deze debugging avonturen laten we je dus code zien die nog niet werkt.
                    Jij moet uitzoeken wat er mis is en de fouten verbeteren.

                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    film_keuzes {is} dracula, fast and furious, home alone, barbie
                    gekozen_film {is} films {at} {random}
                    {print} Vanavond gaan we gekozen_films kijken
                    leuk {ask} Vind je dat een leuke film?
                    {print} Morgen zullen we iets anders gaan kijken.
                    {add} gekozen_film {to_list} film_keuzes
                    {print} Morgen zullen we film_morgen gaan kijken
                    film_morgen {is} film_keuzes {at} {random}
                    Ik ga de popcorn pakken! {print}
                    ```
            4:
                story_text: |-
                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    {print} 'Welkom bij de online bibliotheek!
                    {ask} Welk genre boeken vind je leuk?
                    {print} Jij houdt van het genre
                    auteur {is} {ask} 'Wie' is je favoriete auteur?'
                    {print} 'auteur is jouw favoriete auteur'
                    {print} Hmmm... ik denk dat je boeken {at} {random} leuk zou vinden
                    ```
            6:
                story_text: |-
                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    {print} Welkom bij Zwembad Hedy!
                    les {is} {ask} 'Wil je vandaag een zwemles volgen?'
                    {if} les ja
                    'Mooi! Jij gaat meedoen aan een les!'
                    {print} {else} 'Je gaat geen zwemles volgen'
                    korting {is} {ask} 'Heb je een kortingscode?'
                    {if} korting {is} ja
                    korting_antwoord {is} {ask} 'Welke kortingscode heb je?'
                    kortingscode = Senior4231, Student8786, NewMember6709
                    {if} korting_antwoord {is} {in} kortingscode
                    {print} 'Dat wordt dan ‚Ç¨3,50'
                    {else} 'Die code is niet geldig
                    {else} 'Dat wordt dan ‚Ç¨5,50'
                    {print} 'Veel plezier!'
                    ```
            7:
                story_text: |-
                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    {print} 'Snackautomaat'
                    gekozen_product = {ask} 'Maak een keuze'
                    1_euro_producten = cola sinas sap water
                    2_euro_producten = chocolade, koekje, museli reep
                    3euro_prodcuten = chips, gezouten nootjes, bananenbrood
                    {if} gekozen {is} {in} 1_euro_producten
                    prijs = 1
                    {if} gekozen_product {is} 2_euro_producten
                    prijs = 2
                    {else} gekozen_product {in} 3_euro_producten
                    prijs = 3
                    aantal_producten = '{ask} Hoeveel  ' gekozen_product wilt u hebben?'
                    totaall = prijs + aantal producten
                    {print} 'Dat wordt dan ‚Ç¨' prijs 'alstublieft'
                    ```
            8:
                story_text: "### Oefening\nVerassing! Het programma lijkt meer op een uitvoer van een programma dan programma-code. Toch willen we niet zomaar `{print}` commando's voor alle regels plaatsen. \nVerbeter de code zodat deze het Engelse slaapliedje 'Brother John (Fr√®re Jaques)' zingt. Gebruik hiervoor het {repeat} commando!"
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    Are you sleeping?
                    Brother John!
                    Morning bells are ringing!
                    Ding, dang, dong!
                    ```
            9:
                story_text: |-
                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |-
                    **Pas op! Deze code bevat fouten!**
                    ```
                    {print} 'Welkom bij de manicure- en pedicuresalon'
                    bodypart = {ask} 'Komt u voor uw vingernagels, teennagels of beide?'
                    {if} lichaamsdelen {is} beide
                            {print} Dat wordt dan ‚Ç¨25'
                            prijs = 25
                        {else}
                            {print} Dat wordt dan ‚Ç¨18'
                            prijs = 18
                    kleur = {ask} Welke kleur wilt u?
                    glitter = {ask} 'Met glitters?'
                    {if} glitter {is} ja
                        {print} 'Dat kost ‚Ç¨3 extra'
                    prijs = prijs + 3
                    {else} {print} 'Geen glitter' {print} 'U hoeft niet bij te betalen'
                    {sleep} 5
                    {print} 'Klaar! Dat wordt dan ‚Ç¨' prijs ' alstublieft!'
                    {print} 'Bedankt en tot ziens!'
                    ```
            10:
                story_text: |-
                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    {print} 'Welkom bij onze broodjeszaak'
                    aantal 'Hoeveel broodjes wilt u bestellen?'
                    {repeat} aantal {times}
                    {ask} {is} {ask} 'Welk soort brood wilt u?'
                    soorten_brood {is} wit, bruin, rogge, knoflook, glutenvrij
                    {if} gekozen_brood in soorten_brood
                    {print} 'Super!'
                    {else}
                    'Sorry, dat hebben we niet'
                    extras {is} {ask} 'Wilt u daar nog extra's op?'
                    saus {is} {ask} 'Welke saus wilt u?'
                    {print} Een gekozen_brood met extras en saus.
                    prijs = aantal * 6
                    {print} 'Dat wordt dan 'prijs euro' alstublieft'
                    ```
            11:
                story_text: |-
                    ### Opdracht
                    Debug deze code. Succes!
                example_code: |
                    **Pas op! Deze code bevat fouten!**
                    ```
                    namen = Muad Hasan Samira Noura
                    activiteiten = vliegeren, zwemmen, wandelen, baden in de zon
                    {for} naam {is} namen
                    {print} Op het strand vindt naam het leuk om to activiteit {at} {random}
                    ```
        name: Debugging
        default_save_name: Debugging
        description: Debugging avontuur
    dice:
        name: Dobbelsteen
        default_save_name: Dobbelsteen
        description: Maak je eigen dobbelsteen
        levels:
            3:
                story_text: |
                    In dit level kunnen we kiezen uit een lijst. Daarmee kunnen we de computer een kant van de dobbelsteen laten kiezen.
                    Kijk eens bij de spelletjes die je thuis in de kast hebt staan.
                    Zitten daar spelletjes tussen met een (speciale) dobbelsteen? Die kun je ook namaken met deze code.
                    Bijvoorbeeld de dobbelsteen van het spelletje Regenwormen met daarop de getallen 1 tot en met 5 en een regenworm.
                    ![Dobbelsteen van regenwormen met 1 tot en met 5 en een regenworm erop](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    {print} Jij gooit _ {at} {random} !
                    ```
                story_text_2: |
                    ### Opdracht
                    De dobbelsteen in het voorbeeld hierboven zijn voor het spelletje regenwormen. Kun jij ook normale dobbelstenen maken? Of andere speciale dobbelstenen van een ander spel?
                example_code_2: |
                    ```
                    keuze {is} _
                    ```
            4:
                story_text: |
                    Ook in dit level kun je een dobbelsteen maken. Maar nu mag je het zelf proberen, zonder voorbeeld!

                    ### Opdracht
                    Programmeer een dobbelsteen. Tip: Weet je niet hoe? Spiek dan bij jouw dobbelsteen uit het vorige level, maar vergeet de aanhalingstekens niet.
            5:
                story_text: |
                    Je kunt ook in dit level weer een dobbelsteen maken en daarbij de `{if}` en `{else}` gebruiken.
                    ### Opdracht
                    Maak de code af zodat de code zegt 'Je mag stoppen met gooien' als je een regenworm hebt gegooid. Hij moet 'je moet nog een keer gooien' antwoorden als je iets anders hebt gegooid dan een regenworm.
                    **Extra** Maar misschien wil jij wel een dobbelsteen uit een heel ander spel namaken. Dat is natuurlijk ook goed. Verzin dan zelf een reactie. Bijv 'yes' bij 6 en 'jammer' bij iets anders.
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    worp {is} _ {at} {random}
                    {print} 'je hebt ' _ ' gegooid'
                    _ worp {is} regenworm {print} 'Je mag stoppen met gooien.'
                    _ {print} 'Je moet nog een keer hoor!'
                    ```
            7:
                story_text: |
                    Je kunt nu weer een regenwormendobbelsteen maken, maar nu kun je ook uitrekenen hoeveel punten er gegooid zijn.

                    Je weet misschien dat de worm bij Regenwormen telt voor 5 punten. Nu kun je een worp gooien, en dan meteen uitrekenen hoeveel punten je dan hebt gegooid. Zo doe je dat voor 1 dobbelsteen:

                    ### Opdracht
                    Kun jij de code nu zo maken dat je de totaalscore krijgt voor 8 dobbelstenen? Daarvoor moet je sommige stukken van de code knippen en plakken.
                example_code: |
                    ```
                    keuzes = 1, 2, 3, 4, 5, regenworm
                    punten = 0
                    worp = keuzes {at} {random}
                    {print} 'je gooide ' worp
                    {if} worp {is} regenworm punten = punten + 5
                    {else} punten = punten + worp
                    {print} 'dat zijn dan ' punten ' punten'
                    ```
                example_code_2: |
                    Is het gelukt om de score te berekenen voor 8 dobbelstenen? Dat kostte een hoop knip-en-plakwerk, he? In het volgende level leer je een simpelere manier om dit voor elkaar te krijgen!
            8:
                story_text: |
                    Je kunt ook in dit level weer een dobbelsteen maken. Met de `{repeat}` code kun je makkelijk een heel handje dobbelstenen rollen.

                    ### Opdracht
                    Probeer de voorbeeldcode maar eens af te maken!  Op de streepjes moeten meerdere commando's en tekens komen. **Extra** Kun jij een ander spel met dobbelstenen maken? Gebruik wel `{repeat}`!
                example_code: |
                    ```
                    keuzes = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            11:
                story_text: |
                    ### Opdracht
                    Treuzelen je medespelers altijd bij het gooien van de dobbelstenen en duurt je spel te lang? In dit level kun je Hedy in een keer laten gooien voor alle spelers!
                     Verander de namen in jouw eigen vrienden of je familie, en maak de code af zodat iedereen met de dobbelsteen dobbelt.
                example_code: |
                    ```
                    spelers = Anne, Jonneke, Jessie, Ilona
                    keuzes = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} speler ' gooit ' keuzes {at} {random}
                        {sleep}
                    ```
            16:
                story_text: |
                    ### Opdracht
                    In dit level kun je een klein spelletje maken waarbij je zo snel mogelijk 6 moet gooien.
                    We hebben al een beginnetje gemaakt aan je code, jij moet hem nog af zien te maken!

                    Allereerst moet je een `{while}`loop toevoegen, die controleert of er al 6 is gegooid.
                    Als dat niet zo is, gooi je de dobbelsteen op een random nummer.
                    Print daarna wat de speler gegooid heeft.
                    Tel een poging op bij het aantal pogingen dat je al gedaan hebt.
                    Wacht een seconde voordat er weer gegooid wordt, of voordat het spel eindigt in het geval dat je 6 hebt gegooid.
                example_code: |
                    ```
                    opties = 1, 2, 3, 4, 5, 6
                    {print} 'Gooi 6 in zo min mogelijk beurten!'
                    gegooid = 0
                    pogingen = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Hoera! Je hebt 6 gegooid in ' pogingen ' pogingen.'
                    ```
    dishes:
        name: Afwas?
        default_save_name: Afwas
        description: Gebruik de computer om te kijken wie de afwas doet (Start op level 2)
        levels:
            3:
                story_text: |
                    Heb jij altijd onenigheid thuis over wie vandaag de afwas moet doen of de kattenbak moet verschonen?
                    Dan kun je de computer heel eerlijk laten kiezen. Dat kun jij nu programmeren in dit level!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    {print} mensen {at} {random} doet de afwas!
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak je eigen versie van het afwasprogramma. Maak eerst een lijst van jouw gezinsleden.
                    Daarna bedenk je een taak die gedaan moet worden en laat je de computer kiezen wie de taak moet doen met het `{at} {random}` commando.

                    **Extra** Heb jij geen zin om de afwas te doen? Hack dan het programma door jouw naam van het lijstje te halen met `{remove}`.
            4:
                story_text: |
                    Met aanhalingstekens kun je je afwasprogramma beter maken.

                    ### Opdracht
                    Vul eerst de lege plekken in de voorbeeldcode in om hem aan de praat te krijgen.
                    Is dat gelukt? Fantastisch! Dan kun je nu je eigen code van het vorige level kopi√´ren en werkend maken in dit level door aanhalingstekens toe te voegen op de juiste plekken.
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    {print} _ de afwas wordt gedaan door _
                    {print} mensen {at} _
                    ```
            5:
                story_text: |
                    Met de `{if}` kun je jouw programma nu nog leuker maken. Je kan je programma laten reageren op de keuze.
                    ### Opdracht
                    Maak jij de code af zodat het 'chips' {print} als jij aan de beurt bent, en anders 'yes!'?
                    Vergeet de aanhalingstekens niet!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    afwasser {is} mensen {at} {random}
                    _ afwasser {is} Sophie {print} _ chips ik moet de afwas doen _
                    _ {print} ' gelukkig geen afwas want ' _ ' wast al af'
                    ```
            7:
                story_text: |
                    Hoe vaak gaat iedereen eigenlijk afwassen? Is dat wel eerlijk? Dat kun je nu tellen.

                    Nu kun je regels 3 t/m 5 een paar keer (bijv 7 keer voor een hele week) kopi√´ren om weer voor een hele week vooruit te rekenen.
                    Maak jij de code voor de hele week?
                example_code: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    emma_wast_af = 0
                    afwasser = mensen {at} {random}
                    {print} 'De afwasser is ' afwasser
                    {if} afwasser {is} Emma emma_wast_af = emma_wast_af + 1
                    {print} 'Emma gaat deze week ' emma_wast_af ' keer afwassen'
                    ```
                story_text_2: |
                    Als je heel veel pech hebt moet je bij het vorige afwasprogramma misschien wel de hele week afwassen! Dat is niet eerlijk!
                    Daarom kun je ook het `{remove}` commando gebruiken om de gekozen afwasser uit het lijstje te halen. Zo hoeft de afwasser pas weer af te wassen als iedereen geweest is.
                    De code voor maandag en dinsdag staat klaar, maak jij de rest van de week af?
                    En kan jij een oplossing bedenken voor als het lijstje leeg is...?
                example_code_2: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    afwasser = mensen {at} {random}
                    {print} 'Maandag is de afwasser: ' afwasser
                    {remove} afwasser {from} mensen
                    afwasser = mensen {at} {random}
                    {print} 'Dinsdag is de afwasser: ' afwasser
                    {remove} afwasser {from} mensen
                    ```
            8:
                story_text: |
                    Met de `{repeat}` kun je stukjes code herhalen. Daarmee kun je dan voor meerdere dagen uitrekenen wie er aan de beurt is voor de afwas.
                    ### Opdracht
                    Print voor 7 dagen uit wie er moet afwassen door `{repeat}` te gebruiken. Op ieder streepje moet een ander commando of getal komen.
                    **Extra** Er zijn nog meer klusjes in huis! Verander je programma zo dat het voor drie taakjes een rooster maakt. Print er ook bij voor welke taakjes het is.
                example_code: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    {repeat} _ _ {print} 'De afwasser is ' _ _ _
                    ```
            11:
                story_text: |
                    In dit level kun je je afwasrooster nog makkelijker programmeren en het rooster netjes voor de hele week uitprinten.

                    ### Opdracht
                    Voeg nog een tweede klusje toe, bijvoorbeeld afdrogen, opruimen of stofzuigen, en zorg dat dat ook voor iedere dag toegewezen wordt.
                    <br> **Extra** Het programma is nu niet zo eerlijk, je kan zomaar pech hebben en heel vaak moeten afwassen. Hoe zou je het eerlijk kunnen maken zodat niemand meer dan twee keer afwast?
                example_code: |
                    ```
                    dagen = maandag, dinsdag, woensdag, donderdag, vrijdag, zaterdag, zondag
                    namen = mama, papa, Emma, Sophie
                    {for} dag {in} dagen
                        {print} 'Op ' dag ' doet ' namen {at} {random} ' de afwas.'
                    ```
    elif_command:
        default_save_name: alsanders
        levels:
    for_command:
        default_save_name: voor
        description: '{for} commando'
        levels:
            11:
                story_text: |-
                    **Voor elk item op mijn lijstje**
                    In dit level leren we een nieuwe code, de code `{for}`. Met `{for}` kun je alle dingen in een lijstje gebruiken.
                    `{for}` mag meerdere regels gebruiken, net zoals de `{repeat}` en `{if}`, dus alle regels eronder moeten met spaties beginnen.
                example_code: |
                    ```
                    dieren = hond, kat, papegaai
                    {for} dier {in} dieren
                      {print} dier ' is een leuk dier!'
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak het liedje af door `{for} actie {in} acties` toe te voegen op regel 2.
                example_code_2: |
                    ```
                    acties = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' actie
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' actie
                        {sleep} 3
                    ```
            13:
                story_text: |
                    Tot slot maken we echte Python code van `{for} i {in} {range} 1 {to} 5` door rondje haakjes te gebruiken en afscheid te nemen van {to} en daarvoor in de plaats een komma te gebruiken tussen het begin en eindgetal. Op deze manier:
    fortune:
        name: Waarzegger
        default_save_name: Waarzegger
        description: Laat Hedy jouw toekomst voorspellen
        levels:
            1:
                story_text: |
                    Heb je ooit op de kermis jouw toekomst laten voorspellen door een waarzegger? Of heb je ooit met magische biljartbal gespeeld?
                    Dan weet je waarschijnlijk dat zij niet echt de toekomst kunnen voorspellen, maar dat maakt de voorspelling niet minder leuk!

                    Ook Hedy kunnen we omtoveren in een waarzeggersmachine! In level 1 beginnen we makkelijk, met het voorstellen van Hedy de Waarzegger en het herhalen van de antwoorden van de speler met {echo}.
                    Kijk maar naar het voorbeeld:
                example_code: |
                    ```
                    _ Hoi, ik ben Hedy de waarzegger!
                    _ Wie ben jij?
                    _ Ik voorspel... Ik voorspel...
                    _ Jouw naam is
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm met de gele knop en vul de commando's in op de lijntjes om de code te laten werken.
                    **Extra** Pas de code aan en laat de waarzegger niet alleen je naam voorspellen, maar ook iets anders. Zoals je leeftijd, woonplaats, favoriete sportteam of iets anders over jezelf.
            3:
                story_text: |
                    In het vorige level heb je een begin gemaakt aan de waarzegger, maar echt voorspellingen waren er nog niet.
                    In dit level kun je een variabele gebruiken en het `{at} {random}` commando om Hedy antwoorden te laten kiezen op je vraag.
                    Kijk maar naar dit voorbeeld:
                example_code: |
                    ```
                    {print} Hoi Ik ben Hedy de Waarzegger
                    vraag {is} {ask} Wat wil je weten?
                    {print} vraag
                    antwoorden {is} ja, nee, misschien
                    {print} Mijn glazen bol zegt...
                    {sleep} 2
                    {print} antwoorden {at} {random}
                    ```
                story_text_2: |
                    ### Opdracht
                    Er zijn nu maar 3 antwoordopties waar Hedy uit kan kiezen, kun jij er meer toevoegen? Bijvoorbeeld: zeker weten, geen idee of probeer het nog eens!
            4:
                story_text: |
                    ### Opdracht
                    We hebben alle aanhalingstekens uit het voorbeeld verwijderd. Kun jij ze toevoegen om de code aan de praat te krijgen?

                    ### Opdracht 2
                    Kopieer je eigen waarszeggerscode van het vorige level en voeg aanhalingstekens toe om de code ook in dit level te laten werken.
                example_code: |
                    ```
                    _ Voeg aanhalingstekens toe aan deze code _
                    {print} Hoi ik ben Hedy de Waarzegger!
                    voorspelling {is} {ask} Wat wil je weten?
                    {print}  Dit is je vraag:  voorspelling
                    antwoorden {is} ja, nee, misschien
                    {print} Mijn glazen bol zegt...
                    {sleep} 2
                    {print} antwoorden {at} {random}
                    ```
            6:
                story_text: |
                    ### Opdracht
                    In dit level leer je hoe je er (stiekem) voor kunt zorgen dat Hedy altijd goede voorspellingen voor jou heeft.

                    Gebruik deze kennis in een eigen programma, wees creatief! Je zou bijvoorbeeld code kunnen schrijven die voorspelt dat:
                    * Jouw favoriete sportteam wint van de tegenstander!
                    * Jouw favoriete film vanavond gekozen wordt!
                    * Jij tickets wint voor jouw favoriete show!
                    * Jij bent de mooiste van het land, zoals Sneeuwwitjes magische spiegel

                    Schrijf minimaal 10 regels door in ieder geval `{if}` en `{else}` te gebruiken.
                example_code: |
                    ```
                    vrienden {is} Kyan, Angel, Selena
                    {print} 'Ik kan voorspellen of jij de lotterij morgen wint!'
                    persoon {is} {ask} 'Wie ben jij?'
                    goed_antwoord {is} Hoera! Jij wint!, Jij gaat zeker winnen!, We hebben een WINNAAR!
                    fout_antwoord {is} Helaas! probeer nog eens!, Een ander wint!, Verliezer!
                    {if} persoon {in} vrienden {print} goed_antwoord {at} {random}
                    {else} {print} fout_antwoord {at} {random}
                    ```
            7:
                story_text: |
                    In dit level kun je rekenen met Hedy, waardoor je "magische" formules kunt gebruiken in je voorspellingen!
                    Zo kun je berekenen hoe rijk je wordt of hoeveel kinderen je later zult krijgen, aan de hand van de formule in het voorbeeld:



                    ### Opdracht
                    Kun jij je eigen (gekke) waarzegmachine maken?
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de Waarzegger!'
                    {print} 'Ik kan voorspellen hoeveel kinderen je later krijgt!'
                    leeftijd = {ask} 'Hoe oud ben je?'
                    brusjes = {ask} 'Hoeveel broers/zussen heb je?'
                    lengte = {ask} 'Hoe lang ben je (in cm)?'
                    kinderen = lengte / leeftijd
                    kinderen = kinderen - brusjes
                    {print} 'Jij krijgt later... '
                    {sleep} 2
                    {print} kinderen ' kinderen!'
                    ```
            8:
                story_text: |
                    ### Opdracht
                    Maak het programma af zodat het je vertelt of de ander ook verliefd op jouw is.
                example_code: |
                    ```
                    {print} 'Ik heb een bloem met tover-blaadjes'
                    {print} 'Als je de blaadjes plukt, vertelt de bloem of jouw geliefde ook verliefd op jou is.'
                    aantal = {ask} 'Hoeveel blaadjes wil je plukken?'
                    opties = ook verliefd op jou, niet verliefd op jou
                    _ _ _ _ 'Jouw geliefde is ' opties {at} {random}
                    ```
            9:
                story_text: |
                    In het volgende voorbeeld kan Hedy na een vraag meteen een antwoord printen, omdat je nu een heel stuk code mag herhalen.

                    ### Opdracht
                    Voeg het juiste commando toevoegen op de streepjes?
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de waarzegger!'
                    {print} 'Je mag 3 vragen stellen!'
                    antwoorden = ja, nee, misschien
                    _ _ _
                        vraag = {ask} 'Wat wil je weten?'
                        {print} vraag
                        {sleep}
                        {print} antwoorden {at} {random}
                    ```
            11:
                story_text: "In dit level kun je met een druk op de knop het hele leven voorspellen van al je vrienden tegelijk!\n\n### Opdracht \nVul de lege plekken op met code die je in dit level geleerd hebt.\n"
                example_code: |
                    ```
                    huizen = villa, appartement, krot, rijtjeshuis
                    liefdes = niemand, een prins(es), zomaar iemand, je ware liefde
                    huisdieren = hond, cavia, olifant
                    namen = Jenna, Ryan, Jim
                    _ _ _ _
                        {print} naam ' woont in een ' huizen {at} {random}
                        {print} naam ' trouwt met ' liefdes {at} {random}
                        {print} naam ' krijgt een ' huisdieren {at} {random} ' als huisdier'
                        {sleep} 2
                    ```
    functions:
        name: Functies
        levels:
            12:
                story_text: |
                    In dit level leer je hoe je **functies** gebruikt. Een functie is een blokje code dat je meerdere keren kunt gebruiken. Functies helpen je de code te ordenen.
                    Om een functie te maken, gebruik je `{define}` en geef je de functie een naam. Daarna zet je er regels code onder in een ingesprongen blokje onder de {define} regel.
                    Sla daarna een regel over om je code mooi en overzichtelijk te houden. Goed werk! Je hebt een functie gemaakt!

                    Als je nu dit blokje wil gebruiken, dan gebruik je  <code>{call}</code>  en de naam van de functie. Zo hoeven we de code niet vaker te typen.

                    Kijk maar eens naar ons Twistervoorbeeld. De functie 'draai' bevat een blok code dat een kleur en een ledemaat kiest.

                    ### Opdracht
                    Maak de code af door de 2 variabelen gekozen_ledemaat en gekozen_kleur in te stellen.
                    Kies daarna hoe vaak je wil dat er gedraaid wordt aan de spinner.

                    ### Opdracht 2
                    Maak de code nog beter door er een variabele aan toe te voegen. Gebruik de variabele 'mensen' om iedereen een eigen commando te geven.
                    Bijvoorbeeld: 'Ahmed, rechterhand op groen' of 'Jessica, linkervoet op geel'.
                example_code: |
                    ```
                    kanten = 'linker', 'rechter'
                    ledematen = 'hand', 'voet'
                    kleuren = 'rood', 'blauw', 'groen', 'geel'

                    {define} draai
                        gekozen_kant = kanten {at} {random}
                        gekozen_ledemaat = ledematen _
                        gekozen_kleur = kleuren _
                        {print} gekozen_kant gekozen_ledemaat ' op ' gekozen_kleur

                    {print} 'Klaar voor een potje Twister?'
                    {for} i {in} {range} 1 {to} _
                        {call} draai
                        {sleep} 2
                    ```
            15:
                story_text: |
                    Nu je hebt geleerd om functies te gebruiken, leer je dit level hoe je functies kunt gebruiken met argumenten.
                    Een **argument** is een variabele die in een functie gebruikt wordt. Het wordt daarbuiten niet gebruikt.

                    In deze code hebben we bijvoorbeeld het eerste stukje van het liedje 'My Bonnie is over the ocean' geprogrammeerd.
                    In dit voorbeeld hebben we het argument 'plek' gebruikt. Plek is een variabele die alleen in de functie gebruikt wordt, een argument dus.
                    Om 'plek' te gebruiken hebben we `{with} plek` achter `{define} lied` gezet.
                    Als de functie aangeroepen wordt vervangt de computer het argument 'plek' met de tekst die na `{call} lied {with}` staat.

                    ### Opdracht
                    Het volgende couplet gaat zo:

                    ```not_hedy_code
                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead
                    ```

                    Kun jij dat programmeren?
                example_code: |
                    ```
                    {define} lied {with} plek
                        {print} 'My Bonnie is over the ' plek

                    {call} lied {with} 'ocean'
                    {call} lied {with} 'sea'
                    {call} lied {with} 'ocean'
                    ```
                story_text_2: |
                    In de vorige levels heb je geleerd om functies met argumenten te maken. Je kunt functies ook goed gebruiken om iets uit te rekenen.
                    Je kunt de functie een som geven en de functie geeft jou dan het antwoord. Dit antwoord noem je de **return value**.

                    Bijvoorbeeld, in deze code geeft de functie bereken_nieuwe_prijs de nieuwe prijs van een item. Het geeft je de nieuwe prijs als return value.

                    ### Opdracht
                    Maak deze code af. We hebben de nieuwe variabele nieuwe_prijs al voor je gemaakt, maar jij moet hem nog instellen.
                    Maak de regel af door de functie te roepen en de nieuwe prijs te berekenen.
                example_code_2: |
                    ```
                    {define} bereken_nieuwe_prijs {with} bedrag, percentage
                        percentage = percentage / 100
                        korting_bedrag = bedrag * percentage
                        {return} bedrag - korting_bedrag

                    oude_prijs = {ask} 'Wat staat er op het prijskaartje?'
                    korting = {ask} 'Hoeveel procent korting krijg je?'

                    nieuwe_prijs = _ bereken_nieuwe_prijs {with} oude_prijs, _
                    {print} 'De nieuwe prijs is ' nieuwe_prijs ' euro'
                    ```
                story_text_3: |
                    Laten we functies ook op de Python-manier maken! Om een functie te maken gebruiken we niet langer:


                    `{define} naam_functie {with} argument_1, argument_2:`

                    Maar we gebruiken nu:

                    `{def} naam_functie(argument_1, argument_2):`.


                    Als je geen argumenten wil gebruiken dan laat je de ruimte tussen de haakjes leeg.
                    Om een functie op te roepen hoef je geen `{call}` meer te gebruiken, maar typ je gewoon de naam van de functie.
                example_code_3: |
                    ```
                    {def} bereken_score(antwoord, goede_antwoord):
                        {if} antwoord == goede_antwoord:
                            score = 1
                        {elif} antwoord == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    antwoord = {input} ('Waar staat de Eiffeltoren?')
                    goede_antwoord = 'Parijs'
                    score = bereken_score(antwoord, goede_antwoord)
                    {print} ('Je score is... ', score)
                    ```
    guess_my_number:
        name: Raad mijn getal
        levels:
    hangman:
        name: Galgje
        levels:
            16:
                story_text: |
                    In dit avontuur leer je een potje galgje programmeren. We moeten eerst wat voorbereidingen treffen, daarna kunnen we het spel programmeren en tot slot laten we de tekenturtle de galg tekenen.

                    ### Opdracht
                    ***Stel de variabelen in*** In dit potje galgje kiest Speler 1 het antwoord en Speler 2 raadt het woord door letters te kiezen.
                    Om de computer te vertellen welke letters in het antwoord zitten, maken we het antwoord een lijstje van letters. Dit doen we ook voor de letters die speler 2 geraden heeft.
                    We beginnen het spel met 2 lege lijstjes, want er is nog geen antwoord gekozen en nog geen letters geraden. Wij hebben de lege lijst `antwoord` alvast voor je gemaakt. Maak nu zelf een lege lijst voor `geraden_letters`.
                    Dan stellen we in hoeven fouten er al gemaakt zijn. Aan het begin van het spel is dat natuurlijk 0.
                    De variabele `aantal_letters` vertelt ons hoeveel letters er in het antwoord zitten. Vraag Speler 1 hoeveel letters in het antwoord zitten.
                    Tot slot vertellen we de computer of het spel al over is of niet. We gebruiken de variabele `game_over` en stellen hem in op `False` (dat betekent niet waar).

                    ***Antwoord kiezen*** We willen dat Speler 1 het antwoord kan kiezen. We vragen de speler om de volgende letter in te vullen, zo vaak als nodig is.
                    Daarna voegen we die letter toe aan de lijst `antwoord`. Tot slot voegen we lege streepjes _ toe aan de lijst van geraden letters. We hebben evenveel streepjes nodig als het aantal letters in het antwoord.

                    ***De beurt van Speler 2***
                    Zeg dat Speler 2 aan de beurt is. Vertel Speler 2 dan hoeveel letters er in het antwoord zitten. Print daarna de lijst `geraden_letters`.

                    ***Ga naar het volgende avontuur*** Nu je alle variabelen hebt ingesteld kun je het spelletje zelf gaan programmeren. Kijk snel in het volgende avontuur om te leren hoe dat moet!
                example_code: |
                    ```
                    print 'Galgje!'

                    # Stel de variabelen in
                    antwoord = []
                    geraden_letters = _
                    aantal_fouten = _
                    aantal_letters = {ask} _
                    _ = 'False'

                    # Antwoord kiezen
                    {for} _
                        letter = {ask} 'Speler 1, wat is letter ' i '?'
                        _
                        {add} '_' {to} _

                    # De beurt van Speler 2
                    print _
                    print _
                    print geraden_letters
                    ```
    hangman_2:
        name: Galgje 2
        levels:
            16:
                story_text: |
                    Tijd om het spelletje te programmeren!

                    ### Opdracht
                    ***Plak je code*** Kopieer je code vanuit het vorige avontuur en plak het in het invoerscherm.

                    ***Het spel*** Het spel blijft doorgaan totdat je game over bent. Vul het `{while}` commando in. Speler 2 mag nu een letter raden, dus vraag aan Speler 2 welke letter die wil raden.
                    We moeten nu checken of hun geraden letter ergens in het (lijstje) `antwoord` zit. Is dat zo, dan moeten de computer nog checken waar in het antwoord de letter zich bevindt. Dat stukje code hebben wij alvast voor je gemaakt.
                    Vervolgens willen we de speler een complimentje geven voor het vinden van de juiste letter en we willen het lijstje `geraden_letters` printen, zodat de speler kan zien welke letters die tot nu toe geraden heeft.

                    In het volgende onderdeel gaan we programmeren wat er gebeurt als de speler alle letters van het antwoord heeft geraden. Dus wanneer het lijstje `geraden_letters` hetzelfde is als het lijstje `antwoord`.
                    Als de lijstjes hetzelfde zijn, feliciteer Speler 2 met diens overwinning en zet de variabele `game_over` op 'True' (dat betekent waar).

                    Daarna programmeren we wat er gebeurt als Speler 2 een foute gok doet (dus het `{else}` commando). Vertel de speler allereerst dat diens gok fout was. Verhoog daarna de variabele `aantal_fouten` met 1.

                    Als laatste programmeren we wat er gebeurt als Speler 2 10 fouten heeft gemaakt en dus verliest. We printen dat Speler 1 gewonnen heeft. Daarna printen we het juiste antwoord. Tot slot zetten we de `game_over` variabele op `True` (waar) om het spel te stoppen.

                    ***Ga naar het volgende avontuur*** Fantastisch! Je hebt een speelbaar spelletje gemaakt! Maar zou het niet veel leuker zijn als de galg ook daadwerkelijk getekend wordt als Speler 2 een fout maakt...?
                example_code: |
                    ```
                    # Plak je code hier

                    # Het spel
                    {while} game_over _
                        gok = _
                        {if} _
                            {for} i {in} {range} 1 {to} aantal_letters:
                                {if} antwoord[i] == gok:
                                    geraden_letters[i] = gok
                            {print} _
                            {if} geraden_letters == _:
                                {print} _
                                game_over = _
                        {else}:
                            {print} _
                            aantal_fouten _
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Galgje 3
        levels:
            16:
                story_text: |
                    In een potje galgje wordt bij elke fout geraden letter een stukje galg bijgetekend.
                    Dat gaan we nu onze tekenturtle laten doen!

                    ### Opdracht
                    ***Maak een functie die de galg tekent*** Maak een functie die de galg tekent in 10 stapjes. We hebben stap 1 al voor je gemaakt.

                    ***Test je functie*** Voordat je verder gaat, is het slim om je functie even te testen met 10. Ben je blij met de functie, verwijder dan de regel die de functie oproept weer. We zullen de functie later oproepen als de speler een fout maakt.

                    ***Plak je galgje spel onder de functie*** Ga terug naar het vorige avontuur en kopieer het spel dat je gemakat hebt. plak je spel onder de functie.

                    ***Roep de functie op als de speler een fout maakt*** Onder de regel `aantal_fouten = aantal_fouten + 1` roepen we de functie op. We willen dat de turtle zoveel stapjes tekent als de hoeveelheid fouten die de speler gemaakt heeft, dus roepen we de functie op met `aantal_fouten` als argument.

                    ***Spelen maar!***
                    <div class="w-full flex flex-row gap-2">
                        Heir zie je een voorbeeld van hoe je de galg eruit kan laten zien <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Maak een functie die de galg tekent
                    {define} teken_galg {with} stap:
                        {if} stap == 1:
                            {color} wit
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} zwart
                            {forward} 100
                            {forward} -50

                        {if} stap == 2:
                            _
                    # Plak je galgje spel hier

                    ```
    harry_potter:
        description: Harry Potter avonturen
        levels:
            11:
                story_text: |
                    ### Opdracht
                    We kunnen ook een waarzegger maken in Harry Potter thema. Vul het juiste in op de plek van het streepje zodat er 9 regels geprint worden.
                    **Extra** Verander het thema van de waarzegger ook eens in iets anders! Zoals jouw eigen favoriete (sport)club, boek of show
                example_code: |
                    ```
                    afdelingen = Griffoendor, Zwadderich, Huffelpuf, Ravenklauw
                    vakken = toverdranken, verdediging tegen de zwarte kunsten, bezweringen, transfiguratie
                    angsten = Voldemort, spinnen, je S.L.I.J.M.B.A.L.len niet halen
                    namen = Harry, Ron, Hermelien
                    _
                    _ {print} naam ' wordt geplaatst in ' afdelingen {at} {random}
                    _ {print} naam ' is goed in ' vakken {at} {random}
                    _ {print} naam 's grootste angst is ' angsten {at} {random}
                    ```
    haunted:
        name: Spookhuis
        default_save_name: Spookhuis
        description: Ontsnap uit het spookhuis
        levels:
            1:
                story_text: |
                    In dit avontuur leer je een echte spookhuis game maken, waarbij de spelers moeten ontsnappen uit jouw spookhuis door je juiste deur te kiezen.
                    Als je de goede deur kiest overleef je het, maar anders...

                    In level 1 beginnen we ons spookhuisspel door een spannend verhaal te verzinnen en de speler te vragen welk monster ze tegenkomen in het spookhuis.
                example_code: |
                    ```
                    {print} Hoe ben ik hier terechtgekomen?
                    {print} Ik herinner me dat ik mijn vrienden vertelde over die verlaten villa..
                    {print} en toen werd ineens alles zwart.
                    {print} Maar waarom lig ik hier nu op de grond...?
                    {print} ik heb knallende hoofdpijn, alsof ik een harde klap heb gehad.
                    {print} Huh? Wat is dat geluid?
                    {print} Oh nee! Volgens mij ben ik niet alleen in dit huis!
                    {print} Ik moet maken dat ik wegkom!
                    {print} Er staan drie deuren voor me, maar welke moet ik kiezen?
                    {ask} Welke deur kies ik?
                    {echo} Ik kies deur
                    {print} _
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Maak het spookverhaal zelf af door minstens 5 regels aan het verhaal toe te voegen.
                    Begin elke regel met een `{print}` commando.
            2:
                story_text: |
                    In dit spookhuis kun je je monsters kiezen met emojis. Al kun je natuurlijk ook gewoon woorden gebruiken.
                example_code: |
                    ```
                    monster1 {is} üëª
                    monster2 {is} ü§°
                    monster3 {is} üë∂
                    {print} Je stapt het oude verlaten spookhuis binnen
                    {print} Meteen hoor je het geluid van een monster1
                    {print} Dus snel ren je naar de volgende kamer.
                    {print} Maar daar word je opgewacht door een monster2
                    {print} HELP!
                    {print} Je rent naar de keuken, maar wordt daar aangevallen door een monster3
                    ```
                story_text_2: |
                    ### Opdracht
                    In het voorbeeldje hierboven is van tevoren bepaald welk monster er achter de deur staat. Dus elke keer als je het programma start, heb je dezelfde uitkomst.
                    Kun jij het `{ask}` commando gebruiken om het spookhuis interactief te maken, zodat de spelers kunnen kiezen welke monsters ze tegenkomen?
                example_code_2: |
                    ```
                    monster1 {is} _
                    monster2 {is} _
                    monster3 {is} _
                    {print} Je stapt het oude verlaten spookhuis binnen
                    {print} Meteen hoor je het geluid van een monster1
                    {print} Dus snel ren je naar de volgende kamer.
                    {print} Maar daar word je opgewacht door een monster2
                    {print} HELP!
                    {print} Je rent naar de keuken, maar wordt daar aangevallen door een monster3
                    ```
            3:
                story_text: |
                    In het vorige level heb je een spannende intro bedacht voor je spookhuis, maar een echt spel is het nog niet: Het loopt namelijk altijd hetzelfde af.
                    In dit level kun je je verhaal interactiever maken door verschillende eindes te bedenken: soms word je opgepeuzeld door een verschrikkelijk monster en soms ontsnap je!
                    Hedy kiest willekeurig of je overleeft of niet...
                example_code: |
                    ```
                    _ Ontsnap uit het spookhuis!
                    _ Er zijn drie deuren voor je neus...
                    _ _ _ Welke deur kies jij?
                    _ Je opent deur ... keuze
                    monsters _ een zombie, een vampier, LEEG JE BENT ONTSNAPT
                    _ Daar zie je...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    In dit level heb je geleerd hoe je aanhalingstekens moet gebruiken.

                    ### Opdracht 1
                    Kun jij de voorbeeldcode afmaken door de streepjes in te vullen?

                    ### Opdracht 2
                    Kopieer je eigen spookhuiscode van het vorige level en voeg aanhalingstekens toe om de code ook in dit level te laten werken.
                example_code: |
                    ```
                    _ Voeg aanhalingstekens toe aan deze code _
                    {print} Ontsnap uit het spookhuis!
                    {print} Voor je staan drie deuren...
                    keuze {is} {ask} Welke deur kies je?
                    {print} Je koos deur keuze
                    monsters {is} een zombie, een vampier, NIKS JE ONTSNAPT
                    {print} Jij ziet...
                    {sleep}
                    {print} monsters {at} {random}
                    ```
            5:
                story_text: |
                    Tot nu toe werd er in je spookhuisspel wel altijd aan de speler gevraagd welke deur geopend moest worden, maar zoals je misschien al gemerkt hebt, maakte het niet uit wat voor antwoord de speler gaf.
                    De speler kon netjes een deur kiezen, maar als de speler een verkeerd antwoord gaf, zoals 'pannenkoek!', dan zou de speler het spel nog steeds kunnen winnen (ook al is er niet eens een deur gekozen!).
                    In dit level kun je alleen winnen als je dezelfde deur kiest als Hedy heeft gekozen en maakt het dus echt uit welk antwoord je invult!

                    ### Opdracht
                    Kun jij de 4 missende woorden invullen op de streepjes?
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    {print} 'Voor je staan 3 deuren...'
                    deuren {is} 1,2,3
                    monsters {is} weerwolf, mummy, vampier, zombie
                    gekozendeur {is} {ask} 'Welke deur kies je?'
                    {print} 'Jij kiest deur...' gekozendeur
                    {sleep}
                    goededeur {is} deuren {at} {random}
                    _ _ _ _ {print} 'Hoera! Je ontsnapt!'
                    {else} {print} 'Oh nee! Je wordt opgepeuzeld door een...' monsters {at} {random}
                    ```
            10:
                story_text: |
                    In de vorige levels heb je geleerd hoe je hele stukken code meerdere keren kunt herhalen. Hierdoor kun je levels maken in je spookhuisgame!
                    In de lagere levels hoefde je maar een kamer door voordat je ontsnapt was, maar in dit level moet je wel 3x uit een kamer vluchten voordat je ontsnapt bent.
                    Dat maakt het spel een stuk lastiger om te winnen, kijk maar...

                    ### Opdracht
                    Je spel is nu wel heel lastig te winnen... Kun jij je spel zo aanpassen dat er maar √©√©n foute deur is om te kiezen, in plaats van twee?
                    Tip: Je moet goede_deur veranderen in foute_deur, en de `{if}` en `{else}` code omdraaien.
                    En natuurlijk mag je ook je eigen draai aan het verhaal geven. Andere monsters, of juist cadeautjes?
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    speler = levend
                    deuren = 1, 2, 3
                    monsters = zombie, vampier, mummy, reuzespin
                    {repeat} 3 {times}
                        {if} speler {is} levend
                            goede_deur {is} deuren {at} {random}
                            {print} 'Voor je staan drie deuren...'
                            gekozen_deur = {ask} 'Welke deur kies je?'
                            {if} gekozen_deur {is} goede_deur
                                {print} 'Gelukkig! Geen monster!'
                            {else}
                                {print} 'Je wordt opgegeten door een... ' monsters {at} {random}
                                speler = dood
                        {else}
                            {print} 'GAME OVER'
                    {if} speler {is} levend
                        {print} 'Hoera! Je bent ontsnapt!'
                    ```
            14:
                story_text: |
                    ### Opdracht
                    Deze spookhuisgame gebruikt de connectie tussen de verschillende lijstjes, die je in dit level kunt gebruiken.
                    Bijvoorbeeld: alle eigenschappen die bij de zombie horen staan als eerste in alle lijstjes, de heks als tweede en de vampier derde.
                    Kijk maar naar de code en vul een van deze variabelen in op de lege plekken: `wapens[i]`, `monsters[i]`, `goedlot[i]`, `noodlot[i]`, `hint[i]`
                example_code: |
                    ```
                    getallen = [1, 2, 3]
                    i = getallen[{random}]
                    hint = ['gegrom', 'kakelende lach', 'vleermuis gefladder']
                    monsters = ['zombie', 'heks', 'vampier']
                    noodlot = ['Je brein wordt opgepeuzeld', 'Je wordt vervloekt', 'Je wordt gebeten']
                    goedlot = ['Je gooit de ham naar de zombie die er lekker aan begint te knagen.', 'Je zet de gordijnen in de fik. De heks vlucht, bang voor het vuur', 'De vampier haat knoflook en vlucht weg']
                    wapens = ['rauwe ham', 'aansteker', 'knoflook']
                    {print} 'Je staat bij een oude verlaten villa'
                    {print} 'Iets is hier niet pluis...'
                    {print} 'Je hoort ' _
                    {print} 'Je gaat op ontdekking'
                    {print} 'Je stapt de keukendeur binnen en ziet daar een aansteker, een rauwe ham en een knoflook'
                    jouw_wapen = {ask} 'Wat neem je mee?'
                    {print} 'Met je ' jouw_wapen ' loop je door naar de woonkamer'
                    {print} 'Daar zie je een ' _
                    benodigde_wapen = _
                    {if} jouw_wapen == benodigde_wapen
                        {print} 'Je gebruikt je ' jouw_wapen
                        {print} _
                        {print} 'Jij wint!'
                    {else}
                        {print} 'Je hebt helaas het verkeerde wapen'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        levels:
            13:
                story_text: |
                    In het vorige avontuur heb je geleerd om een argument te gebruiken bij een functie, en hoe je dit kan combineren met een `{ask}`.
                    Je hebt je wellicht afgevraagd waarom je deze functie zou gebruiken, want de functies zijn steeds maar een regel of een paar regeltjes code.
                    In dit voorbeeld laten we je zien hoe een grotere functie eruit ziet en we zullen meerdere argumenten gebruiken. Je zult zien hoe fijn het dan is om een functie te kunnen gebruiken.
                    Hier is een voorbeeld van een functie met argumenten en een {ask} commando.
                example_code: |
                    ```
                    {define} welkomstbericht {with} titel, achternaam, afkomst, kamernummer
                        {print} 'Welkom in Hotel Hedy, ' titel ' ' achternaam
                        fijne_reis {is} {ask} 'Heeft u een fijne reis gehad vanaf ' afkomst '?'
                        {if} fijne_reis {is} 'ja'
                            {print} 'Mooi!'
                        {else}
                            {print} 'Wat naar voor u.'
                            {print} 'Hopelijk kunt u lekker tot rust komen op uw kamer.'
                        {print} 'Uw kamernummer is ' kamernummer

                    {print} 'Hallo. Vul uw gegevens in om in te checken.'
                    titel = {ask} 'Wat is uw aanspreekvorm (dhr, mevr, dr, etc.)?'
                    naam = {ask} 'Wat is uw achternaam?'
                    afkomst = {ask} 'Waar komt u vandaan?'

                    {call} welkomstbericht {with} titel, naam, afkomst, 105
                    ```

                    titel = {ask} 'Wat is uw aanspreekvorm (dhr, mevr, dr, etc.)?'
                    naam = {ask} 'Wat is uw achternaam?'
                    afkomst = {ask} 'Waar komt u vandaan?'

                    {call} welkomstbericht {with} titel, naam, afkomst, 105
    if_command:
        default_save_name: als
        description: introduceert het {if} commando
        levels:
            5:
                story_text: |
                    In dit level is er iets nieuws, de `{if}`! Met de `{if}` kun je een keuze maken tussen twee verschillende opties.
                    Deze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.
                example_code: |
                    ```
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk' {else} {print} 'minder leuk!'
                    ```
                story_text_2: |
                    Soms wordt code met een `{if}` erg lang en past het niet meer goed in het tekstvlak. Je mag dan een enter gebruiken en de code over twee regels verdelen. Begin dan de tweede regel met een `{else}`:
                example_code_2: |
                    ```
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!'
                    ```
                story_text_3: |
                    ### Opdracht
                    Probeer je eigen code te maken met `{if}` en `{else}`. Je kunt het voorbeeld gebruiken als je dat wilt.
                example_code_3: |
                    ```
                    antwoord {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Goedzo!'
                    _ _ 'Nee 2 + 2 = 4'
                    ```
            9:
                story_text: |
                    ## Als... Anders...
                    Je hebt al geleerd hoe je een blok aan regels code kunt herhalen met`{repeat}`.
                    Je kunt nu ook inspringen na het `{if}` of `{else}` commando om zo'n blok te vormen.
                    Kijk maar naar het voorbeeld.

                    ### Opdracht
                    Voeg een `{else}` commando toe aan de voorbeeldcode. Maak een blok van de regels code door in te springen. Inspringen doe je door de regel te starten met 4 spaties.
                example_code: |
                    ```
                    naam = {ask} 'Hoe heet je?'
                    {if} naam {is} Hedy
                        {print} 'Welkom Hedy'
                        {print} 'Jij mag computeren!'
                    ```
            10:
                story_text: |
                    In dit level kun je een `{if}` commando in een ander `{if}` commando stoppen.
                example_code: |
                    ```
                    doorgaan = {ask} 'Wil je doorgaan?'
                    {if} doorgaan = ja
                        zeker = {ask} 'Weet je het zeker?'
                        {if} zeker {is} ja
                            {print} 'We gaan door'
                        {else}
                            {print} 'Je bent niet zeker'
                    {else}
                        {print} 'Je wil niet doorgaan'
                    ```
    in_command:
        default_save_name: in
        description: introduceert het {in} commando
        levels:
            6:
                story_text: |
                    **Lijstjes**
                    Om te kijken of iets in een lijst zit, kun je nu ook gebruik maken van `{in}`.
                    Deze code print mooi als je geel of rood antwoordt, en anders mwah!
                example_code: |
                    ```
                    mooie_kleuren {is} geel, rood
                    lievelingskleur {is} {ask} 'Wat is jouw lievelingskleur?'
                    {if} lievelingskleur {in} mooie_kleuren {print} 'mooi!'
                    {else} {print} 'mwah'
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak de voorbeeldcode af door de juiste codes op de streepjes te zetten.
                    Ben je klaar? Probeer dan een eigen code te verzinnen.
                example_code_2: |
                    ```
                    dieren {is} koe, schaap, varken
                    antwoord {is} {ask} 'Wat is je lieverlingsdier?'
                    _ antwoord _ dieren _ 'Mijne ook!'
                    _ _ 'Mijn lievelingsdieren zijn koeien, schapen en varkens'
                    ```
    is_command:
        levels:
            2:
                story_text: |
                    ## Variabelen
                    Je kunt een waarde in een woord opslaan met het commando `{is}`. Deze waarde noemen we een **variabele**. In dit voorbeeld hebben we een variabele gemaakt die 'naam' heet en een variabele 'leeftijd'. Je kunt een variabele plaatsen overal in de zin waar je wil en Hedy vervangt de variabele dan voor de waarde. Kijk maar:
                example_code: |
                    ```
                    naam {is} Hedy
                    leeftijd {is} 15
                    {print} naam is leeftijd jaar oud
                    ```
                story_text_2: |
                    ### Opdracht
                    Tijd om je eigen variabelen te maken!
                    In het voorbeeld hebben we de variabele `lievelingsdier` gemaakt. In regel 1 wordt de variabele 'ingesteld', en in regel 2 gebruiken we de variabele met een `{print}`.
                    Maak eerst ons voorbeeld af door jouw lievelingsdier in te vullen op de plek van het streepje. Bedenk daarna zelf minstens 3 van zulk soort codes. Kies daarbij een variabele en stel hem in met het `{is}` commando. Gebruik daarna de variabele in een zin met een `{print}` commando, zoals wij in het voorbeeld hebben gedaan.
                example_code_2: |
                    ```
                    lievelingsdier {is} _
                    {print} Ik hou van lievelingsdier
                    ```
            7:
                story_text: |
                    We veranderen ook hoe je een woord opslaat in een variabele! Je mag hierbij vanaf nu een `=` in plaats van een `{is}` gebruiken. Kijk maar:
                example_code: |
                    ```
                    naam = Hedy
                    antwoord = 20 + 4
                    ```
    language:
        name: Woordjes leren
        default_save_name: Woordjes leren
        description: Maak je eigen programma om woordjes te leren in een vreemde taal
        levels:
            5:
                story_text: "Maak een programma om woordjes mee te leren in een andere taal.\n \n### Opdracht\nVoeg minstens 3 nieuwe woorden om te leren toe aan het programma.\n **Extra** Je kunt natuurlijk ook een andere taal kiezen dan Frans. Verander de code in de taal die jij graag zou willen leren. \n"
                example_code: |
                    ```
                    {print} 'Leer Frans!'
                    kat {is} {ask} 'üê±'
                    {if} kat {is} chat {print} 'Goedzo!'
                    {else} {print} 'Helaas, kat is chat'
                    kikker {is} {ask} 'üê∏'
                    {if} kikker {is} grenouille {print} 'Super!'
                    {else} {print} 'Helaas, kikker is grenouille'
                    ```
            15:
                story_text: |
                    ### Opdracht
                    Kijk naar de voorbeeldcode. Dit programma is gemaakt om Franse woordjes te leren. Maak nu je eigen programma om een vreemde taal te leren.
                    Als je geen andere taal spreekt, kun je Google Translate gebruiken of je kunt emojis en Nederlands gebruiken.
                example_code: |
                    ```
                    franswoord = ['bonjour', 'ordinateur', 'pomme de terre']
                    vertaling = ['hallo', 'computer', 'aardappel']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        antwoord = {ask} 'Wat betekent ' franswoord[i] '?'
                        correct = vertaling[i]
                        {if} antwoord == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Fout, ' franswoord[i] ' betekent ' vertaling[i]
                    {print} 'Je hebt ' score ' goede antwoorden gegeven.'
                    ```
    maths:
        name: Rekenen
        default_save_name: rekenen
        description: introduceert rekenen
        levels:
            6:
                story_text: |
                    In level 6 is er iets nieuws: je kunt nu ook rekenen. De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.
                    De keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!
                    Daarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als "5 keer 5", dan onthoud je dat het makkelijkst. Ook leer je hoe je moet delen, namelijk met een schuine streep: `5 / 5`.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 min 5 is ' 5 - 5
                    {print} '5 keer 5 is ' 5 * 5
                    {print} '5 gedeeld door 5 is ' 5 / 5
                    ```
    music:
        name: Muziek
        default_save_name: muziek
        description: Speel een deuntje
        levels:
            1:
                story_text: |-
                    In dit level leer je het `{play}` commando te gebruiken om een muzieknoot te spelen!

                    Type `{play}` en daarna de noot die jij wil afspelen. De toonladder gaat zo: C-D-E-F-G-A-B.
                    Zoals je ziet zijn er 7 verschillende letters, maar er zijn veel meer dan 7 muzieknoten.
                    Type een getal tussen 0 en 9 achter de letter om een toonladder te kiezen. Zo komt na de noot B4 de noot C5.
                    C0 is de laagste noot die je kunt spelen en B9 is de hoogste.

                    ### Opdracht
                    Test de voorbeeldcode en speel er maar mee! Kun jij een melodietje maken?
                    In het volgende level leer je enkele bestaande nummer spelen.
            2:
                story_text: |
                    ### Opdracht
                    Maak de liedjes af! We hebben al een beginnetje voor je gemaakt.
                story_text_2: |
                    Zoals je kunt zien kun je het `{sleep}` commando gebruiken om een pauze toe te voegen in je liedje.
            3:
                story_text: |
                    Maak een random deuntje!

                    ### Opdracht
                    De voorbeeldcode maakt een random deuntje, maar het is erg kort en bevat nog niet veel noten.
                    Voeg meer noten toe aan de lijst en maak een langere melodie door de laatste regel een paar keer te kopi√´ren.
                example_code: |
                    ```
                    noten {is} A4, B4, C4
                    {play} noten {at} {random}
                    {play} noten {at} {random}
                    {play} noten {at} {random}
                    ```
            4:
                story_text: |
                    Gebruik het `{clear}` commando om een karaoke machine te maken!

                    ### Opdracht
                    Maak de karaoke versie van 'Mieke heeft een lammetje'.
                    Bedenk daarna een karaoke versie van een zelfgekozen liedje.
                example_code: |
                    ```
                    {print} 'Mieke heeft een lammetje'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'lammetje, lammetje'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mieke heeft een lammetje'
                    {play} E
                    ```
            5:
                story_text: |
                    Je kunt het `{play}` commando gebruiken om een lied te maken, maar je kunt het natuurlijk ook gebruiken voor √©√©n enkele noot.
                    Bijvoorbeeld als je een quiz wil maken en je een vrolijke hoge toon wil afspelen bij een juist antwoord en een sippe lage toon bij een fout antwoord.
                    ### Opdracht
                    Maak de eerste vraag af door een regel code toe te voegen die de noot C3 speelt bij een fout antwoord.
                    Bedenk daarna nog 3 vragen en voeg ze toe aan de quiz.
                example_code: |
                    ```
                    antwoord {is} {ask} 'Wat is de hoofdstad van Zimbabwe?'
                    {if} antwoord {is} Harare {play} C6
                    _
                    ```
            7:
                story_text: |
                    In plaats van noten zoals 'C5' of 'B8', kun je nu ook getallen spelen. Type bijvoorbeeld `{play} 1` voor de laagste noot, `{play} 70` voor de hoogste noot of elk willekeurig getal er tussenin.

                    ### Opdracht
                    Dit vraagt om muzikale berekeningen! Probeer de voorbeeldcode een paar keer uit met verschillende startgetallen.
                    Componeer daarna je eigen muziek door getallen te gebruiken!
                example_code: |
                    ```
                    getal = {ask} 'Noem een getal tussen 1 en 67:'
                    {print} getal
                    {play} getal
                    getal = getal + 1
                    {print} getal
                    {play} getal
                    getal = getal + 1
                    {print} getal
                    {play} getal
                    ```
            8:
                story_text: |
                    Met het `{repeat}` commando kun je de codes voor de liedjes een hoop inkorten!

                    ### Opdracht
                    Maak de code voor 'Altijd is Kortjakje ziek' af met het `{repeat}` commando.
                    Kijk daarna terug op de liedjes die je hebt gemaakt in de voorgaande levels. Kun je die ook inkorten?
                example_code: |
                    ```
                    {print} 'Altijd is Kortjakje ziek'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            9:
                story_text: |
                    Nu we ook meerdere regels kunnen herhalen met `{repeat}, kunnen we de liedjes nog makkelijker programmeren!

                    ### Opdracht
                    Maak het liedje 'Vader Jacob' af. Vergeet `{repeat}` niet te gebruiken!
                example_code: |
                    ```
                    {print} 'Vader Jacob'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            10:
                story_text: |
                    Vanaf dit level kun je - naast andere dingen- een {repeat} commando nesten in een ander `{repeat}` commando.
                    Dat maakt liedjes als 'Happy Birthday' een stuk korter!

                    ### Opdracht
                    Maak het liedje af!
                example_code: |
                    ```
                    eerste_keer = ja
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} eerste_keer {is} ja
                            {play} F
                            {play} E
                            eerste_keer {is} nee
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Gebruik functies in je liedjes! Zoals je kunt zien in de voorbeeldcode, kun je een functie maken voor elke regel uit Altijd is Kortjakje ziek. Zodra je de 3 zinnen hebt geprogrammeerd, hoef je alleen nog maar de functies in de juiste volgorde op te roepen.
                    ### Opdracht
                    Maak het liedje 'Altijd is Kortjakje ziek' af.
                    Kijk daarna terug naar liedjes die je geprogrammeerd hebt in voorgaande levels. Kun je die liedjes inkorten en verbeteren door functies te gebruiken?
                example_code: |
                    ```
                    {define} eerste_regel
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} tweede_regel
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} derde_regel
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            15:
                story_text: |
                    Je kunt een functie met een argument gebruiken bij liedjes die steeds bijna hetzelfde zijn, maar een heel klein verschilletje bevatten.
                    Een voorbeeld van zo'n liedje is het Engelse deuntje 'Yankee Doodle'. De eerste 4 noten van elke regel zijn steeds gelijk, maar het einde verschilt steeds.

                    ### Voorbeeldcode
                    Kun jij Yanklee Doodle afmaken?
                    Kun je een ander liedje programmeren op deze manier?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} noot_1, noot_2, noot_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} regel_1 {with} 29, 31, 30
                    {call} regel_1 {with} 29, 28, 0
                    {call} regel_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
                story_text_2: |
                    Je kunt natuurlijk voor de lol een liedje programmeren, maar de muzieknoten kunnen ook nuttig ingezet worden, zoals bij dit brandalarm!

                    ### Opdracht
                    Zorg dat het brandalarm afgaat als er brand is!
                example_code_2: |
                    ```
                    {define} brandalarm
                        {print} 'BRAND!'
                        noot = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} noot _ 50
                                noot = noot + 5
                                {play} _
                            {else}
                                noot = 40

                    brand = {ask} 'Is er brand?'
                    {if} brand _ 'ja'
                        {call} brandalarm
                    ```
            16:
                story_text: |
                    **Waarschuwing** Dit avontuur kan behoorlijk irritant worden!
                    We kunnen het `{while}` commando inzetten om een liedje eeuwig te blijven herhalen.

                    ### Opdracht
                    Maak dit liedje zonder einde af.
                example_code: |
                    ```
                    {define} lied
                        {play} _

                    ja_of_nee = {ask} 'Wil je mijn liedje zonder einde horen?'
                    {while} ja_of_nee = 'ja'
                        {call} lied
                        {print} 'ü•≥'
                    ```
            14:
                story_text: |
                    Upgrade je Old MacDonald code!

                    ### Opdracht
                    Neem je code van het Zinge een lied avontuur en voeg muzieknoten toe!
                    Je kunt een functie maken voor elke regel van het lied en die functie oproepen zodra die regel geprint is.
                    We hebben de eerste regel alvast voorgedaan. Kun jij het hele lied afmaken?
                example_code: |
                    ```
                    {define} regel_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old MacDonald had a farm'
                        {call} regel_1
                        {print} 'E I E I O!'
                        _
                    ```
    parrot:
        name: Papegaai
        default_save_name: Papegaai
        description: Maak je eigen online papegaai die je napraat!
        levels:
            1:
                story_text: |
                    Maak je eigen online papegaai die je napraat!
                example_code: |
                    ```
                    {print} Ik ben papegaai Hedy
                    {ask} Wie ben jij?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Laat de papegaai nu een andere vraag stellen dan in het voorbeeld. Vul de vraag in op het lijntje.
                    **Extra** Je kunt de papegaai ook meerdere vragen laten stellen. Typ onder jouw code nog meer regels code.
                example_code_2: |
                    ```
                    {print} Ik ben Hedy de papegaai
                    {ask} _
                    {echo}
                    {echo}
                    ```
            2:
                story_text: |
                    In het vorige level heb je een papegaai gemaakt die jou napraatte. In dit level maken we die papegaai interactief met een variabele en het `{ask}` commando.
                    We voegen ook nog `{sleep}` toe om het wat echter te laten lijken.
                example_code: |
                    ```
                    {print} Ik ben papegaai Hedy
                    naam _ _ Wie ben jij?
                    {print} naam
                    _
                    {print} koppie krauw
                    _
                    {print} naam
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak eerst regel 2 af met `{is}` en `{ask}` commando's.
                    Vul daarna `{sleep}` commando's op andere regels zodat de papegaai soms ook even stil is.

                    **Extra** Je kunt variabelen gebruiken om de papegaai meer te laten zeggen dat alleen je naam. Kun jij deze code afmaken?
            3:
                story_text: |
                    Leer je papegaai nieuwe woordjes met het `{add}` commando!
                    ### Opdracht
                    Kun jij de code laten werken door `{add} {to_list}` toe te voegen?
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} Train je papegaai!
                    nieuw_woord {is} {ask} Welk woord moet je papegaai leren?
                    _ nieuw_woord _ woorden
                    {print} üßí: Zeg nieuw_woord , Hedy!
                    {print} ü¶ú: woorden {at} {random}
                    ```
            4:
                story_text: |
                    In dit level gebruiken we aanhalingstekens bij de commando's `{ask}` en `{print}`.
                    ### Opdracht
                    Maak de code af door aanhalingstekens toe te voegen op de lijntjes.
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} 'Train je papegaai!'
                    nieuw_woord {is} {ask} _ Welk woord moet je papegaai leren? _
                    {add} nieuw_woord {to_list} woorden
                    {print} _ üßí: Zeg _ nieuw_woord _ , Hedy! _
                    {print} _ ü¶ú: _ woorden {at} {random}
                    ```
            5:
                story_text: |
                    Beloon je papegaai als hij het nieuwe woordje zegt!

                    Maak de code af door de juiste commando's in te vullen op de lijntjes.
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} 'Train je papegaai!'
                    nieuw_woord {is} {ask} 'Welk woord moet je papegaai leren?'
                    {add} nieuw_woord {to_list} woorden
                    {print} 'üßí Zeg ' nieuw_woord ', Hedy!'
                    gezegd_woord {is} woorden {at} {random}
                    {print} 'ü¶ú ' gezegd_woord
                    _ gezegd_woord {is} nieuw_woord _ 'üßí Goedzo! üç™'
                    _ _ 'üßí Nee! Zeg ' nieuw_woord
                    ```
    piggybank:
        name: Spaarvarken
        default_save_name: Spaarvarken
        description: Tel je zakgeld!
        levels:
            7:
                story_text: |
                    In dit avontuur kun je een digitaal spaarvarkentje maken.

                    ### Opdracht
                    Maak de code af zodat je jouw zakgeld kunt tellen en kunt berekenen hoe lang het duurt voordat je iets kunt kopen!
                    **Extra** Misschien heb je al wat geld gespaard? Trek dat gespaarde bedrag af van wat je nog moet sparen.
                example_code: |
                    ```
                    {print} 'Het digitale spaarvarken'
                    wens = {ask} 'Wat zou je graag willen hebben?'
                    prijs = {ask} 'Hoeveel kost dat?'
                    zakgeld = {ask} 'Hoeveel zakgeld krijg je per week?'
                    weken = prijs / zakgeld
                    {print} 'Je kunt over ' _ ' weken een ' _ ' kopen!'
                    ```
            15:
                story_text: |
                    ### Opdracht
                    In dit level kun je Hedy laten vertellen of je al genoeg geld hebt gespaard of niet!
                    Maak de code af door de lege plekken in te vullen!
                example_code: |
                    ```
                    _ bereken_budget {with} wens, geld, zakgeld
                        sparen = wens - geld
                        weken = sparen / zakgeld
                        {if} wens _ geld
                            {print} 'Helaas even doorsparen!'
                            {print} 'Je moet nog ' weken ' weken.'
                        {else}
                            {print} 'Hoera, je hebt genoeg!'
                            {print} 'Op naar de winkel!'

                    geld = {ask} 'Hoeveel geld heb je al gespaard?'
                    wens = {ask} 'Hoeveel geld heb je nodig?'
                    zakgeld = {ask} 'Hoeveel zakgeld krijg je per week?'

                    {call} _
                    ```
    pressit:
        name: Toetsaanslag
        default_save_name: Toetsaanslag
        description: Koppel een toets aan code
        levels:
            6:
                story_text: "In dit level leren we nog een commando: `{pressed}`.\nMet `{pressed}` kun je toetsen op het toetsenbord gebruiken om te bepalen welken stukjes code er worden uitgevoerd.\n\n### Opdracht\n Bekijk het voorbeeld en voeg nog een regel toe die op toetsen reageert. \n"
                example_code: |
                    ```
                    {print} 'Wil je een goed (g) of slecht (a) einde?'
                    {if} g {is} {pressed} {print} 'Ze leefden nog lang en gelukkig ‚ù§'
                    {else} {print} 'De prins werd opgegeten door een nijlpaard üò≠'
                    ```
                story_text_2: |
                    Je kan iedere code koppelen aan een toets, ook de tekenschildpad.

                    ### Opdracht
                    Kopieer de regels code zodat je een grotere tekening kan maken.
            8:
                story_text: |
                    Nu je `{repeat}` hebt geleerd kunnen we meerdere keren kijken of er een toets is ingedrukt. 
                    Je kunt dit gebruiken om de schildpad te besturen.

                    ### Opdracht
                    De voorbeeldcode kijkt √©√©n keer of er een toets is ingedrukt. 
                    Pas de code aan door {repeat} toe te voegen en maak daar een mooie tekening mee.
            10:
                story_text: |
                    We kunnen nu met `{pressed}` een programma maken om typen te oefenen.

                    ### Opdracht
                    Maak de code af. Er moet steeds een willekeurige letter worden gekozen. Doe je het goed dan krijg je een punt erbij, bij een foute toets gaan er twee punten af!
                    **Extra** Maak het scherm weer leeg na iedere letter en toon de gebruiker hoeveel punten hij heeft gescoord.
                example_code: |
                    ```
                    punten = 1
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Typ de letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        description: Introductie print commando
        levels:
            1:
                story_text: |
                    ## Het print commando
                    Je kunt tekst laten verschijnen in je scherm met het `{print}` commando.
                example_code: |
                    ```
                    {print} Hey, programmeur!
                    {print} Welkom bij Hedy!
                    ```
                story_text_2: |
                    ### Opdracht
                    In Hedy vind je bij elk avontuur opdrachten. Hier oefen je nieuwe commando's en concepten en kun je voorbeeldcodes omtoveren tot je eigen programma.
                    In deze opdracht zie je een roze streepje. Op dit streepje moet jij zelf een regel code invullen voordat je de code kunt uitvoeren.

                    Vul in dit geval het `{print}` commando in op de plek van het streepje en voeg daarna nog 5 regels code toe. Elk van die regels moet starten met een `{print}` commando.
                    Veel plezier!
                example_code_2: |
                    ```
                    _ Hallo!
                    ```
            13:
                story_text: |-
                    We gaan nu echte Python code programmeren! Dat betekent dat we vanaf nu haakjes moeten gebruiken bij `{print}` en `{range}`.
                     Het betekent ook dat je nu in andere Python omgevingen kunt gaan programmeren met Hedy code. Je moet hierbij dan wel de Engelse commando's gebruiken. Als je de Engelse commando's nog niet gebruikte, dan kun je nu de schakelaar omzetten in het commandomenu.
                example_code: |
                    ```
                    {print}('Hallo!')
                    {for} i {in} {range}(1, 10):
                        {print}('Dit is regel ', i)
                    ```
                story_text_2: Als je meer dan √©√©n regel wilt printen, dan moet je die scheiden met een komma.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                    ```
                    naam = 'Hedy'
                    {print}('Mijn naam is ', naam)
                    ```
    quizmaster:
        description: Maak je eigen quiz!
        levels:
    quotation_marks:
        name: '''Aanhalingstekens'''
        default_save_name: haakjes
        description: introduceert haakjes in Hedy
        levels:
            4:
                story_text: |
                    ## 'Aanhalingstekens'
                    In level 4 zijn `{ask}` en `{print}` anders.

                    Je moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.

                    Dat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `{is}`.

                    De meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!
                example_code: |
                    ```
                    {print} 'Vanaf nu gebruik je aanhalingstekens!'
                    antwoord {is} {ask} 'Wat gebruiken we vanaf nu?'
                    {print} 'We gebruiken ' antwoord ' vanaf nu'
                    ```
                story_text_2: |
                    ## Hoge komma's
                    Let op! Omdat we nu aanhalingstekens gebruiken, raakt Hedy in de war als je een hoge komma wil gebruiken in woorden zoals: Auto's.
                    Als je een hoge komma wil gebruiken, moet je dus dubbele aanhalingstekens gebruiken.
                    In het voorbeeldje hieronder zie je wat er gebeurt als je de hoge komma's wel gewoon blijft gebruiken.
                example_code_2: |
                    ```
                    _ Let op dit voorbeeld laat zien hoe het NIET moet_
                    {print} 'Daar rijden twee oma's in hun auto's '
                    {print} 'Zouden zij liever 's middags of 's avonds rijden?'
                    _ Dit is hoe het WEL moet _
                    {print} "Daar rijden twee oma's in hun auto's"
                    {print} "Zouden zij liever 's middags of 's avonds rijden?"
                    ```
    random_command:
        default_save_name: willekeurig
        description: introduceert het op willekeurig commando
        levels:
            3:
                story_text: |
                    ## Maak een lijstje!
                    In level 3 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `{at} {random}`.
                example_code: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    {print} dieren {at} {random}
                    ```
                story_text_2: |
                    Je kunt {at} {random} ook in een zin gebruiken.
                example_code_2: |
                    ```
                    eten {is} broodje, pizza, salade, burrito
                    {print} Ik ga een eten {at} {random} lunchen.
                    ```
                story_text_3: |
                    ### Opdracht
                    Probeer het `{at} {random}` commando uit door je eigen gameshow te maken (zoals Miljoenenjacht op tv). De kandidaat kiest een koffer of een deur waarachter een grote prijs verstopt kan zitten!
                    Lukt het jou om zo'n programma te maken? De eerste regels zijn alvast te vinden in het voorbeeld
                example_code_3: |
                    ```
                    {print} Win een prijs!
                    {print} Voor je staan 3 koffers...
                    gekozen {is} {ask} Welke koffer kies je?
                    prijzen {is} _
                    _
                    ```
            14:
                story_text: |-
                    We zijn aangekomen bij de laatste paar Hedy levels. We komen dus steeds dichter bij echte Python code.
                    In dit level gaan we leren hoe je lijsten maakt op de Python-manier. Dat werkt met vierkante haakjes zetten om lijstjes, dat zijn deze: `[` en `]`.
                    Als we woorden in de lijst willen zetten, moeten we om de woorden ook enkele aanhalingstekens zetten. Bij getallen hoeft dat niet.
                    We kunnen in dit level ook met een getal plekken in lijstjes aanwijzen.
                example_code: |
                    ```
                    vrienden = ['Ahmed', 'Ben', 'Cayden']
                    {print} vrienden[1] ' is de eerste vriend op mijn lijstje'
                    {print} vrienden[2] ' is de tweede vriend op mijn lijstje'
                    {print} vrienden[3] ' is de derde vriend op mijn lijstje'
                    #nu matchen we 2 lijstjes door de variabele i te gebruiken
                    geluksgetallen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                       {print} 'het geluksgetal van ' vrienden[i]
                       {print} 'is ' geluksgetallen[i]
                    ```
                story_text_2: |-
                    Nu je hebt geleerd om de rechte haken te gebruiken bij je lijstjes, kun je ook `{at} {random}` leren gebruiken op de Python-manier!
                    Je typt simpelweg de naam van de lijst en typt er `[random]` achter.
                example_code_2: |-
                    ```
                    fruit = ['appel', 'banaan', 'kers']
                    {print} fruit[random]
                    ```
    repeat_command:
        default_save_name: herhaal
        description: '{repeat} commando'
        levels:
            8:
                story_text: |
                    In level 7 leer je het `{repeat}` commando. Met `{repeat}` kan je een regel code meerdere keren laten uitvoeren. Zoals dit:

                    ### Opdracht
                    Probeer het `{repeat}` commando uit. Kan jij het happy birthday liedje in 3 regels code opschrijven in plaats van 4?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is leuk!'
                    ```
            9:
                story_text: |
                    `{ask}` en `{print}` werken nog steeds zoals je gewend bent. Maar bij  `{if}`, `{else}`, `{pressed}` en `{repeat}` is er iets veranderd!
                    Je kunt vanaf dit level meerdere regels samen uitvoeren. Daarvoor moet je deze regels *inspringen*, dat betekent dat ze moeten beginnen met vier spaties.
                    Ook als je maar √©√©n regel in een blok wilt zetten, moet je inspringen!
                example_code: |
                    Zo werkt het `{repeat}` commando vanaf nu:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo allemaal'
                        {print} 'Dit wordt allemaal 5 keer herhaald'
                    ```
                    Dit is hoe `{if}` en `{else}` vanaf nu werken:
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} Hedy
                        {print} 'Welkom, Hedy'
                        {print} 'Je kan nu spelen op je computer!'
                    {else}
                        {print} 'INDRINGER!'
                        {print} 'Je kunt deze computer niet gebruiken!'
                    ```
            10:
                story_text: |
                    In dit level kun je niet alleen meerdere regels gebruiken bij `{if}` en `{repeat}`, maar je kunt ze ook nog eens in elkaar zetten!
                    Hiernaast zie je evoorbeeldje.

                    Je mag het ook en een `{if}` in een `{if}` en een `{repeat}` in een `{repeat}` plaatsen.
                    Probeer het maar eens!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        eten = {ask} 'Wat wil je bestellen?'
                        {if} eten {is} pizza
                            {print} 'lekker'
                        {else}
                            {print} 'pizza is lekkerder'
                    ```
    repeat_command_2:
        default_save_name: herhaal2
        description: '{repeat} commando 2'
        levels:
            8:
                story_text: |
                    Je hebt nu geoefend met het `{repeat}` commando in combinatie met het `{print}` commando, maar wist je dat je `{repeat}` ook met andere commando's kunt combineren?
                    In deze voorbeeldcode kun je zien hoe `{repeat}` ook met `{ask}`, `{if}` of `{else}` gebruikt kan worden.
                example_code: |
                    ```
                    {repeat} 2 {times} antwoord = {ask} 'Wist je al dat je een vraag ook kunt herhalen?'
                    {if} antwoord {is} ja {repeat} 2 {times} {print} 'Daar was jij al achter!'
                    {else} {repeat} 3 {times} {print} 'Je hebt weer iets nieuws geleerd!'
                    ```
                story_text_2: |
                    Met `{repeat}` kun je ook variabelen gebruiken om in te stellen hoe vaak iets herhaald moet worden. In het voorbeeld zie je dat we eerst vragen hoe oud iemand is met de variabele leeftijd.
                    Daarna, in regel 3, wordt 'Hieperdepiep Hoera!' net zo vaak herhaald als diegene oud is geworden. Zo hebben we dus de variabele leeftijd gebruikt samen met het `{repeat}` commando.
                example_code_2: |
                    ```
                    {print} 'Yes! Je bent jarig!'
                    leeftijd = {ask} 'Hoe oud ben je geworden?'
                    {repeat} leeftijd {times} {print} 'Hieperdepiep Hoera!'
                    ```
            9:
                story_text: |
                    ### In het blok of niet?
                    In dit level moet je goed nadenken over welke regels code in het blok moeten staan en welke niet.
                    Bijvoorbeeld: Als je Hedy het liedje *de mosselman* wil laten zingen. Je wil dan dat het zinnetje 'de mosselman' wordt herhaald.
                    Dat betekent dat de laatste regel niet moet worden herhaald en dus ook niet in het blok mag staan.
                    Het liedje klopt niet als je de laatste regel ook laat inspringen.

                    ### Opdracht
                    Elke regel code start met een streepje. Verwijder het streepje en laat de regels waar nodig inspringen om het liedje af te maken.
                example_code: |
                    ```
                    _ {print} 'Zeg ken jij de mosselman?'
                    _ {repeat} 2 {times}
                    _ {print} 'de mosselman'
                    _ {print} 'Zeg ken jij de mosselman? Hij woont in Scheveningen'
                    ```
    restaurant:
        description: Maak een virtueel restaurant
        levels:
            1:
                story_text: |
                    Je kunt met Hedy ook een virtueel restaurant bouwen en de bestellingen van je klanten opnemen!
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Vul allereerst het goede commando in op het streepje om de code te laten werken.
                    Voeg daarna zelf minstens 4 regels code toe aan het restaurantprogramma.
                    Vraag de klanten wat ze willen drinken en vraag of ze willen pinnen.
                    Bedenk tot slot een aardige manier om de klant gedag te zeggen.
                example_code_2: |
                    ```
                    {print} Welkom bij McHedy! üçü
                    _ Wat wilt u bestellen?
                    {echo} Dus u wilt graag
                    {print} Bedankt voor uw bestelling!
                    {print} Het komt eraan!
                    ```
            2:
                story_text: |
                    In level 2 kun je variabelen gebruiken om je restaurant interactiever te maken! Kijk maar naar het voorbeeld.
                example_code: |
                    ```
                    {print} Welkom bij Hedy's restaurant!
                    {print} Vandaag serveren we pizza of lasagne.
                    eten {is} {ask} Wat wilt u eten?
                    {print} Heerlijk! eten is ook mijn favoriet!
                    topping {is} {ask} Met groente of vlees?
                    {print} eten met topping komt eraan!
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer jouw restaurantcode van het vorige level naar het invoerscherm hier beneden.
                    Maak de code kloppend door de `{ask}` en `{echo}` commando's te vervangen door variabelen zoals je in dit level geleerd hebt.

                    Nu je code weer werkt is het tijd om er iets aan toe te voegen.
                    Kijk naar de laatste zin van de voorbeeldcode `{print} eten met topping komt eraan!`
                    In deze regel zijn 2 variabelen in 1 regel gebruikt om een opsomming te maken van de bestelling.
                    Voeg nu in jouw code ook zo'n opsomming toe van het eten en het drinken dat de klant heeft besteld.

                    **Extra** Nu je variabelen hebt leren gebruiken, kun je zoveel variabelen als je wil toevoegen aan √©√©n regel. Kun jij nog meer variabelen toevoegen aan je regel, zoals: hier opeten of meenemen, pinnen of cash, met of zonder rietje etc.?
            3:
                story_text: |
                    Vind jij het moeilijk om te kiezen wat je wil eten? Je kunt Hedy voor je laten kiezen!
                    Je maakt gewoon een lijst van je favoriete eten en Hedy kiest dan een willekeurig menu voor je uit.
                    Je kan het extra grappig maken, door Hedy ook de prijs van je eten te laten kiezen. Wat zal het worden vandaag?
                example_code: |
                    ```
                    gerechten {is} spaghetti, spruitjes, hamburgers
                    {print} Jij eet vanavond gerechten {at} {random}!
                    prijzen {is} 1 euro, 10 euro, 100 euro
                    {print} Dat wordt dan prijzen {at} {random}, alstublieft.
                    ```
                story_text_2: |
                    ### Opdracht
                    Nu ga je zelf een random restaurant maken.
                    Maak nu zelf lijstjes van voorgerechten, hoofdgerechten, toetjes, drinken en prijzen.
                    Gebruik dan het `{print}` en het `{at} {random}` commando om de klant te vertellen wat hij vanavond voorgeschoteld krijgt.
                example_code_2: |
                    ```
                    {print} Welkom in restaurant de Willekeur
                    voorgerechten {is} _
                    hoofdgerechten {is} _
                    toetjes {is} _
                    drinken {is} _
                    prijzen {is} _
                    _
                    ```
            4:
                story_text: "Ook in het restaurant moet je aanhalingstekens gebruiken bij de commando's `{print}` en `{ask}` .\n\n### Opdracht\nKun jij de voorbeeldcode aan de praat krijgen door aanhalingstekens toe te voegen? Let op: variabelen moeten niet binnen de aanhalingstekens staan. \nVoeg daarna `{clear}` commando's toe om steeds maar 1 regel tekst in je uitvoerscherm te hebben.\n\n### Opdracht 2\nKopieer je eigen restaurantcode van het vorige level en zet aanhalingstekens op de juiste plaats. Voeg ook `{clear}` commando's toe.\n"
                example_code: |
                    ```
                    _ Voeg aanhalingstekens toe aan deze code _
                    {print} Welkom bij Hedys restaurant!
                    {print} Vandaag serveren we pizza of lasagna.
                    eten {is} {ask} Wat wil je eten?
                    {print} Goede keuze!  eten  is mijn favoriet!
                    topping {is} {ask} wil je er vlees of groenten bij?
                    {print} eten  met  topping  wordt gemaakt!
                    drank {is} {ask} Wat wil je erbij drinken?
                    {print} Bedankt voor de bestelling.
                    {print} Jouw  eten  en  drank  komen er zo aan!
                    ```
            6:
                story_text: |
                    ### Opdracht
                    De voorbeeldcode laat zien wat je kunt doen als een gerecht op is.
                    Pak jouw eigen restaurant code van een vorig level en bedenk een probleem en lost het op zoals in het voorbeeld.
                    Je kunt bijvoorbeeld ook een gerecht hebben dat op is, geen creditkaart accepteren, of een kapote ijsmachine hebben.

                    **Extra** Klaar? Programmeer nog meer `{if}` en `{else}` commando's in jouw programma.
                    Probeer een `{if}` toe te voegen na ieder `{ask}` commando, waardoor jouw programma zo interactief mogelijk wordt.
                example_code: |
                    ```
                    drank_voorraad {is} water, limonade, cola, sinaasappelsap
                    drank {is} {ask} 'Wat wilt u drinken?'
                    {if} drank {in} drank_voorraad {print} 'Een ' drank 'komt eraan!'
                    {else} {print} 'Sorry, dat hebben we niet'
                    ```
            7:
                story_text: |
                    In dit level kun je in jouw restaurant prijzen toevoegen en berekenen, dat maakt het veel echter!
                    Maar je kunt natuurlijk nog veel meer toevoegen zoals b.v. meer gerechten.

                    ### Opdracht
                    Je kunt nog meer toevoegen, denk maar eens aan...
                    * vragen hoeveel personen er komen en het bedrag daarmee vermenigvuldigen
                    * nog meer gerechten toevoegen
                    * geef mensen korting als ze een (geheime) code hebben
                    * voeg een kindermenu toe
                    * bedenk zelf nog meer leuke toevoegingen
                example_code: |
                    Je kunt een simpel restaurant maken:
                    ```
                    {print} 'Welkom bij McHedy'
                    {print} 'U kunt kiezen uit een hamburger, een kroket of een kaassouffle'
                    {print} 'U krijgt frietjes en drinken bij uw bestelling. '
                    eten = {ask} 'Wat wilt u bestellen?'
                    prijs = 0
                    {if} eten {is} hamburger prijs = 8
                    {if} eten {is} kroket prijs = 6
                    {if} eten {is} kaassoufle prijs = 5
                    {print} 'U heeft een ' eten ' besteld'
                    {print} 'Dat is dan ' prijs ' euro, alstublieft!'
                    {print} 'Bedankt en eet smakelijk!'
                    ```
            8:
                story_text: |
                    In dit level heb je geleerd hoe je `{repeat}` gebruikt om een regel code een aantal keren te herhalen.
                    Nu kun je dit commando gebruiken om een `{ask}` aan meerdere klanten te stellen om hun bestelling op te nemen.

                    ### Opdracht
                    Kun jij de code afmaken? Hedy moet de vraag zo vaak herhalen als dat er klanten zijn. Dus als je 5 antwoordt, moet er 5 keer een vraag gesteld worden.
                    **Extra** Maak de code nog langer door niet alleen 5 keer naar eten, maar ook naar drinken of saus te vragen.
                example_code: |
                    ```
                    {print} 'Welkom bij restaurant Hedy'
                    mensen = {ask} 'Met hoeveel personen bent u?'
                    ```
            9:
                story_text: |
                    In dit level kun je meerdere regels code herhalen, wat betekent dat je meerdere mensen kunt vragen wat ze willen eten en drinken en dat ook nog kunt printen.
                    Kijk maar naar het voorbeeld!

                    ### Opdracht
                    Breid je code uit met meer dingen op het menu. Bijvoorbeeld: vragen of ze drinken willen, of toetjes. Voeg minstens nog een extra vraag toe. **Extra** Voeg alles toe aan het menu dat je kan verzinnen, zoveel dingen als je wil!
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy!'
                    {print} 'U kunt hier uw bestelling doorgeven'
                    mensen = {ask} 'Voor hoeveel personen wilt u bestellen?'
                    {repeat} mensen {times}
                        eten = {ask} 'Wat wilt u eten?'
                        {print} eten
                    {print} 'Bedankt voor uw bestelling.'
                    {print} 'Eet smakelijk!'
                    ```
            10:
                story_text: |
                    In dit level kun je het restaurant nog beter maken.

                    ### Opdracht
                    Alle inspringcode is verdwenen! Kan jij het repareren?
                    Het restaurant moet zo werken dat als de klant friet bestelt, moet Hedy vraagt welke saus de klant daarbij wil, maar niet bij pizza.

                    **Extra** Een restaurant heeft natuurlijk niet alles op voorraad. Maak een lijstje met sauzen en zeg bij iedere bestelling of je die saus wel verkoopt. <br>
                    **Extra** Op een pizza kan ook van alles! Vraag de klant bij een pizza wat voor beleg hij wil.<br>
                    **Extra** Willen de klanten ook wat drinken? Vraag dat ook.<br>
                example_code: |
                    ```
                    {print} 'Welkom bij restaurant Hedy'
                    mensen = {ask} 'Met hoeveel mensen bent u vanavond?'
                    {print} 'Mooi, welkom allemaal'
                    prijs = 0
                    {repeat} mensen {times}
                    _ eten = {ask} 'Wat wilt u bestellen?'
                    _ {print} eten
                    _ {if} eten {is} friet
                    _ prijs = prijs + 3
                    _ saus = {ask} 'Welke saus wilt u daarbij?'
                    _ {if} saus {is} geen
                    _ {print} 'zonder saus'
                    _ {else}
                    _ prijs = prijs + 1
                    _ {print} 'met ' saus
                    _ {if} eten {is} pizza
                    _ prijs = prijs + 4
                    {print} 'Dat is dan ' prijs ' euro'
                    {print} 'Eet smakelijk!'
                    ```
            11:
                story_text: |
                    In dit level kun je gemakkelijk de bestelling opnemen van gasten voor verschillende gangen.

                    ### Opdracht 1
                    Voeg op de streepjes een `{ask}` in, zodat er om de bestelling gevraagd wordt en print de bestelling uit in een mooie zin.
                example_code: |
                    ```
                    gangen = voorgerecht, hoofdgerecht
                    {for} gang {in} gangen
                        {print} 'Wat wilt u voor ' gang '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### Opdracht 2
                    Dit kun je uiteraard ook voor meerdere mensen toepassen!
                    Kun jij elke regel inspringen met de goede hoeveelheid spaties?
                    Tip: Sommige regels hebben geen spaties nodig.
                example_code_2: |
                    ```
                    _ gangen = voorgerecht, hoofdgerecht
                    _ namen = Timon, Onno
                    _ {for} naam {in} namen
                    _ {for} gang {in} gangen
                    _ eten = {ask} naam ', Wat wil jij bestellen als ' gang '?'
                    _ {print} naam ' bestelt ' eten ' als ' gang
                    ```
            12:
                story_text: |
                    In dit level kun je kommagetallen gebruiken op je menukaart, kijk maar!
                    ### Opdracht
                    Kun jij een manier bedenken om je vrienden en familie 15% korting te geven?
                example_code: |
                    ```
                    prijs = 0.0
                    eten = {ask} 'Wat wil je eten?'
                    drinken = {ask} 'Wat wil je drinken?'
                    {if} eten {is} 'hamburger'
                        prijs = prijs + 6.50
                    {if} eten {is} 'pizza'
                        prijs = prijs + 5.75
                    {if} drinken {is} 'water'
                        prijs = prijs + 1.20
                    {if} drinken {is} 'frisdrank'
                        prijs = prijs + 2.35
                    {print} 'Dat wordt dan ' prijs ' euro, alsjeblieft'
                    ```
            16:
                story_text: |
                    Met de `{while}` kun je zorgen dat je klanten kunnen blijven bestellen tot ze klaar zijn.
                    ### Opdracht
                    Voeg het `{while}` commando op de juiste wijze toe aan deze code.
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy'
                    meer = 'ja'
                    _
                        bestelling = {ask} 'Wat wil je bestellen?'
                        {print} bestelling
                        meer = {ask} 'Wilt u nog iets bestellen?'
                    {print} 'Bedankt!'
                    ```
    rock:
        name: Steen, papier, schaar
        default_save_name: Steen
        description: Maak jouw eigen steen, papier, schaar spel
        levels:
            1:
                story_text: |
                    In level 1 kun je een begin maken met een steen, papier, schaar spel.

                    Met `{ask}` kun je een keuze maken en met `{echo}` kan je die keuze herhalen.
                example_code: |
                    ```
                    {print} Wat kies jij?
                    {ask} Kies uit steen, papier of schaar
                    {echo} Dus jouw keuze was:
                    ```

                    Je kunt in plaats van woorden natuurlijk ook emoji's gebruiken: ‚úä‚úã‚úå
                story_text_2: |
                    ### Opdracht
                    In plaats van woorden kun je ook emojis gebruiken: ‚úä‚úã‚úå
                    Kun jij de code maken met emojis?
                example_code_2: |
                    ```
                    {print} Wat kies jij?
                    {ask} kies uit: _
                    {echo} Dus jouw keuze was :
                    ```
            2:
                story_text: |
                    In dit level kun je variabelen gebruiken om alvast een stukje van het spelletje te programmeren. In het volgende level leer je het spelletje maken.
                    ### Opdracht
                    Maak de code af door de **variabele** in te vullen op de lege plek.
                    Dit spel is nog niet echt interactief, maar wees gerust, in het volgende avontuur leer je `{ask}` gebruiken met variabelen.
                example_code: |-
                    ```
                    keuze {is} steen
                    {print} ik kies _
                    ```
            3:
                story_text: |
                    Je kunt het `{at} {random}` commando gebruiken om de computer steen, papier of schaar te laten kiezen!

                    ### Opdracht
                    Maak de code af door het `{at} {random}` commando te gebruiken.
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    {print} keuzes _ _
                    ```
                story_text_2: |
                    **Extra** Maak hier een spel voor meer spelers van. Kun jij met behulp van vraagcommando's (en natuurlijk variabelen) vragen naar de namen van de spelers? Laat de computer daarna hun keuze kiezen.
                example_code_2: |
                    ```
                    keuzes {is} steen, papier, schaar
                    speler_1 {is} {ask} Naam van speler 1:
                    _
                    ```
            4:
                story_text: |
                    In dit level kunnen we steen, papier, schaar verder programmeren. Maar als je er tekst bij wilt, moet je ook hier nu aanhalingstekens gebruiken.
                    ### Opdracht
                    Vul aanhalingstekens in op de streepjes. Let op, de variabele `keuzes` moet buiten de aanhalingstekens blijven.
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    {print} _De computer kiest..._ keuzes {at} {random}
                    ```
            5:
                story_text: |
                    In dit level kunnen we gaan bepalen of het gelijkspel is. Daarvoor heb je de nieuwe `{if}` code nodig.

                    ### Opdracht
                    Maak de codes af door de lijntjes in te vullen.
                    * Laat de computer een willekeurige keuze maken
                    * Vraag naar de keuze van de speler
                    * Vul de juiste variabelen in op regel 4 en 5.
                    * Programmeer regel 6 zodat er gecheckt wordt of het gelijkspel is.
                example_code: |
                    ```
                    opties {is} steen, papier, schaar
                    computerkeuze {is} _
                    keuze {is} _
                    {print} 'jij koos ' _
                    {print} 'computer koos ' _
                    {if} _ {is} _ {print} 'gelijkspel!' {else} {print} 'geen gelijkspel'
                    ```

                    Vul op de streepjes eerst de goede code aan om te kijken of het gelijkspel is.
            10:
                story_text: |
                    In dit level kun je het hele steen, papier, schaar programma maken door de `{if}` commando's in elkaar te zetten!

                    ### Opdracht
                    Maak de code af zodat het programma bij iedere combinatie vertelt wie er heeft gewonnen.

                    **Extra** Is √©√©n potje voor jou niet genoeg? Breid de code uit zodat je meerdere potjes kan spelen. Je kan zelfs met een `{ask}` beginnen en
                    vragen hoeveel potjes er gespeeld gaan worden.
                example_code: |
                    ```
                    keuzes = steen, papier, schaar
                    jouw_keuze = {ask} 'Wat kies jij?'
                    computer_keuze = keuzes {at} {random}
                    {print} 'Jij kiest ' jouw_keuze
                    {print} 'De computer kiest ' computer_keuze
                    {if} computer_keuze {is} jouw_keuze
                        {print} 'Gelijkspel'
                    {if} computer_keuze {is} steen
                        {if} jouw_keuze {is} papier
                            {print} 'Jij wint!'
                        {if} jouw_keuze {is} schaar
                            {print} 'De computer wint!'
                    # Maak deze code af
                    ```
            11:
                story_text: |
                    ### Opdracht
                    In de vorige levels heb je vaak jouw eigen steen, papier, schaar spel gemaakt. Kun jij het spel nu afmaken met het `{for}` commando zodat het netjes werkt?
                example_code: |
                    ```
                    keuzes = _
                    spelers = _
                    {for} _
                    ```
            16:
                story_text: |
                    ### Opdracht
                    Speel tot je de computer verslaat! Maar maak eerst de voorbeeld code af...
                example_code: |
                    ```
                    gewonnen = 'nee'
                    opties = 'steen', 'papier', 'schaar'
                    {while} gewonnen == 'nee'
                        jouw_keuze = {ask} 'Wat kies jij?'
                        computer_keuze = opties {at} {random}
                        {print} 'jij koos ' jouw_keuze
                        {print} 'de computer koos ' computer_keuze
                        {if} computer_keuze == jouw_keuze
                            {print} 'Gelijkspel!'
                        {if} computer_keuze == 'steen' {and} jouw_keuze == 'schaar'
                            {print} 'Je verliest!'
                        {if} computer_keuze == 'steen' {and} jouw_keuze == 'papier'
                            {print} 'Je wint!'
                            gewonnen = 'ja'
                    _
                    ```
    rock_2:
        name: Steen, papier, schaar 2
        default_save_name: Steen2
        description: Deel 2 van steen, papier schaar
        levels:
            2:
                story_text: |
                    Nu je `{ask}` hebt geleerd te gebruiken, kun je de steen, papier, schaar code ook interactief maken!

                    ### Opdracht
                    Maak de steen, papier, schaarcode interactief met het `{ask}` commando.
                example_code: |
                    ```
                    keuze {is} _
                    {print} Ik kies keuze
                    ```
    secret:
        name: Geheim agent
        default_save_name: Geheim agent
        description: Maak je eigen spionnencode
        levels:
            12:
                story_text: "In dit avontuur kun je jouw eigen geheim agent code maken. Maak een bericht dat alleen de juiste agent kan ontcijferen.\nAls je vijand probeert de code te kraken krijgen ze valse informatie om hun tijd te verspillen.\n \n### Opdracht 1\nMaak je eigen code voor jouw geheime agent. Laat beiden onderdelen zien aan de echte spion.\n### Opdracht 2\nVoeg nog een derde vraag toe en maak jouw wachtwoord langer met bijv een kledingstuk of een voorwerp!                 \n"
                example_code: |
                    ```
                    naam = {ask} 'Hoe heet je?'
                    {if} naam {is} _
                        plek = 'Ga naar het vliegveld '
                    {else}
                        plek = 'Ga naar het treinstation '
                    wachtwoord = {ask} 'Wat is het wachtwoord?'
                    {if} wachtwoord {is} _
                        tijd = 'morgen om 02:00'
                    {else}
                        tijd = 'vandaag om 10:00'
                    {print} _ _
                    ```
            10:
                story_text: |
                    We kunnen door `{and}` te gebruiken, nu met maar √©√©n `{if}` bekijken of het programma gebruikt wordt door de geheim agent.

                    ### Opdracht 1
                    Maak de code af door het lege stukje te vullen. Let op: de superspion moet beide antwoorden goed hebben, voordat hij de juiste geheime informatie krijgt.

                    ### Opdracht 2
                    We willen de vijand extra verwarren! Maak een lijst met nepantwoorden en kies, bij een fout antwoord, iets uit de lijst. (**(extra)** Voeg een extra vraag toe zoals in level 12)
                example_code: |
                    ```
                    naam = {ask} 'Hoe heet je?'
                    wachtwoord = {ask} 'Wat is het wachtwoord?'
                    {if} naam {is} 'Agent007' _ wachtwoord {is} 'TOPSECRET'
                        {print} 'Ga naar het vliegveld om 02:00'
                    {else}
                        {print} 'Ga naar het treinstation om 10:00'
                    ```
    simon:
        levels:
            14:
                story_text: |
                    Tijd voor een potje 'Simon Says'! Simon Says is een geheugenspelletje waarbij de speler een kleur krijgt te zien. De speler moet de juiste kleur terugzeggen.
                    Doe je het goed? Dan komt er steeds een kleur bij en wordt de reeks die je moet onthouden dus steeds langer. Het spel stopt zodra je een fout maakt.

                    ### Opdracht
                    In dit eerste deel van het Simon Says avontuur laten we de computer een random kleur kiezen en zetten we die op een lijstje.

                    ***Maak 2 lijstjes***
                    We maken eerst het lijstje `kleuren` en vullen dat lijstje met de kleuren rood, geel, groen en blauw.
                    Dan maken we een lijstje genaamd `simon_reeks`. Dit lijstje wordt het lijstje met het goede antwoord.
                    Aan het begin van het spel is het lijstje nog leeg. Helaas kunnen we (nog) geen lege lijstje maken, dus vullen we het lijstje met 'leeg' en 'lijstje' en halen we die twee woorden daarna meteen weer van het lijstje af.

                    ***Maak een functie die en kleur toevoegt aan de reeks*** Nu we een leeg lijstje hebben voor het goede antwoord, kunnen we het lijstje gaan vullen met random kleuren.
                    Dit doen we met een functie. Zo kunnen we de functie elk keer als er een nieuw level is weer gebruiken om weer een nieuwe kleur toe te voegen. Noem je functie `random_kleur_toevoegen`
                    Maak daarna de variabele `random_kleur` en kies een willekeurige kleur. Voeg de gekozen random kleur toe aan de simon_reeks.

                    ***Maak een functie die de simon_reeks toont*** Noem de nieuwe functie `toon_simon_reeks` met `level` als argument. Nu willen we zoveel kleuren laten zien als het level waar we inzitten (in level 1, dus 1 kleur en in level 2, 2 kleuren etc).
                    Dus `simon_reeks[i]` moet `level` keer worden geprint. Elke keer als er een kleur wordt geprint, moet de code even 1 seconde wachten en het scherm daarna wissen.

                    ***Test het programma*** Voordat je doorgaat naar het volgende avontuur, kun je even testen of je functies het wel goed doen. Als de functies werken, zou je een willekeurige kleur in beeld moeten krijgen.
                    Verwijder dit testgedeelte van je code zodra je tevreden bent en kopieer de rest van je code om verde te gaan in het volgende avontuur.
                example_code: |
                    ```
                    # Maak 2 lijstjes
                    kleuren = _
                    _ = ['leeg', 'lijstje']
                    {remove} _ {from} simon_reeks
                    {remove} _

                    # Maak een functie die een kleur toevoegt aan de reeks
                    _ random_kleur_toevoegen
                        _
                        {add} _

                    # Maak een functie die de simon_reeks toont
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test het programma
                    {call} _
                    {call} toon_simon_reeks {with} 1
                    ```
    simon_2:
        levels:
            14:
                story_text: |
                    We werken verder aan de Simon Says game!

                    ### Opdracht
                    ***Plak je code hier*** Plak hier je code vanuit het voorgaande avontuur. Vergeet niet om het testgedeelte te verwijderen, dat heb je nu namelijk niet nodig.

                    ***Maak een functie voor de speler_reeks***  De lijst `speler_reeks` gebruiken we om de antwoorden van de speler in op te slaan. Allereerst definieren we de functie met het argument level.
                    Daarna vragen we level keer welke kleur de speler wil kiezen. Die variabele noemen we `antwoord`. Vervolgens voegen we de variabele `antwoord` toe aan het lijstje speler_reeks.

                    ***Voorbereidingen voor het spel*** Voordat we het spel programmeren in het volgende avontuur, moeten we nog wat startvariabelen maken. Eerst zetten we de variabele `level` op 1 en game_over op False (false betekent niet waar).
                    Daarna introduceren we ons spelletje. We printen 'Welkom bij Simon Says' en wissen het scherm weer na 1 seconde.

                    ***Ga door naar het volgende avontuur om het spel af te maken!*** Vergeet niet eerst je code te kopi√´ren.
                example_code: |
                    ```
                    # Plak je code hier

                    # Maak een functie voor de speler_reeks
                    {define} _
                        {for} _
                            _ 'Wat is kleur ' i '?'
                            {add} antwoord {to} _

                    # Voorbereidingen voor het spel
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        levels:
            14:
                story_text: |
                    In dit avontuur maken we het spel af!

                    ### Opdracht
                    ***Plak je code hier*** Kopieer je code van het vorige avontuur en plak het hier.

                    ***Programmeer het spel*** Eerst programmeren we dat het spel door blijft gaan zolang je niet game over bent. Daarna printen we op welk level de speler nu is, waarvoor we de variabele level natuurlijk gebruiken. Na √©√©n seconde wissen we het scherm weer.
                    Nu moeten we de lijst speler_reeks maken. We hebben net al een functie gemaakt om die lijst te vullen, maar we hadden het lijstje zelf nog niet gemaakt.
                    We maken weer een lege lijst met hetzelfde trucje als eerst. We maken een lijst met 'leeg' en 'lijstje' in de lijst en verwijderen deze twee woorden daarna weer meteen van de lijst.
                    Daarna roepen we alle drie de functies op die we net gemaakt hebben.
                    Tot slot checken we of de speler de juiste antwoorden geeft of niet (dus of het lijstje speler_reeks overeenkomt met simon_reeks).
                    Als dat zo is, dan geven we een compliment aan de speler. De wachten 1 seconde en verhogen het level met 1.
                    Had de speler een fout antwoordn, dan be√´indigen we het spel door de variabele game_over op True (dat betekent waar) te zetten.

                    ***Veel speelplezier!*** Goed gedaan! Werkt je spel toch niet helemaal zoals het zou moeten? Debug je code dan met de lieveheersbeestjesknop.
                example_code: |
                    ```
                    # Plak je code hier

                    # Het spel
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['leeg', 'lijstje']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} speler_reeks == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        default_save_name: slaap
        description: introduceert het {sleep} commando
        levels:
            2:
                story_text: |
                    Nog een nieuw commando in dit level is `{sleep}`, waarmee je het programma een tijdje kunt pauzeren. Als je een getal achter {sleep} zet, wacht het programma zoveel seconden.

                    ### Opdracht
                    Ga met dit nieuwe commando oefenen door je eigen code te schrijven waarin je 3 keer het {sleep} commando gebruikt. Bij elk {sleep} commando moet de wachttijd verschillend zijn.
                example_code: |
                    ```
                    {print} Mijn favoriete kleur is...
                    {sleep} 2
                    {print} groen!
                    ```
    songs:
        name: Zing een liedje!
        default_save_name: Liedje
        description: Print een liedje
        levels:
            6:
                story_text: |
                    In liedjes zit vaak veel herhaling. Soms wordt er in die herhaling ook geteld.
                    Bijvoorbeeld in het welbekende potje met vet. Dat kan je met een beetje rekenen zelf programmeren.

                    Tip: gebruik de voorleesfunctie om Hedy het liedje te laten zingen!

                    ### Opdracht
                    Je kunt nu regel 2 t/m 9 zo vaak herhalen als je wil door de regels te kopi√´ren en plakken.
                example_code: |
                    ```
                    couplet = 1
                    {print} 'Ik heb het potje met vet'
                    {print} 'al op de tafel gezet'
                    {print} 'Ik heb het'
                    {print} 'potje, potje, potje, potje... '
                    {print} 'veh heh het'
                    {print} 'al op de tafel gezet'
                    couplet = couplet + 1
                    {print} 'Door naar het ' couplet 'e couplet'
                    {sleep}
                    ```
                story_text_2: "Dit kinderliedje telt van 10 visjes naar 1 visje. \nKopieer regel 2 tot en met 7 om het hele lied te maken!\n"
                example_code_2: |
                    ```
                    nummer = 11
                    nummer = nummer - 1
                    {print} nummer ' kleine visjes zwommen naar de zee'
                    {print} 'Moeder zei ik ga niet mee! '
                    {print} 'Ik blijf liever in de vieze oude sloot want in de zee daar zwemmen haaien en die bijten je'
                    {print} 'BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB'
                    {sleep}
                    ```
            8:
                story_text: |
                    In liedjes zit vaak veel herhaling. Denk maar aan Baby Shark! Ze zingen steeds hetzelfde:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Opdracht

                    Kan jij Baby Shark printen met een `{repeat}`? Maak de code af door de streepjes in te vullen. **(extra)**
                    Na Baby Shark kun je natuurlijk ook nog andere liedjes programmeren. Er zijn veel liedjes met herhaling erin! Kun jij er nog eentje verzinnen en printen met code?
            9:
                story_text: |
                    Nu kun je meerdere regels herhalen, wat heel fijn is in liedjes!

                    ### Opdracht
                    Zet het juiste commando op de streepjes, en zorg dat de code op de juiste manier inspringt.

                    **(extra)** Is Billie Boem gelukt? Probeer dan 10 kleine visjes.
                example_code: |
                    ```
                    _ 3 {times}
                    dier = {ask} 'Welk dier kies je?'
                    {print} 'En wie rijdt er op zijn ' dier ' door de prairie?'
                    {print} 'Dat is cowboy Billie Boem, door de boeven zeer gevreesd!'
                    {print} 'Er is nooit in het Wilde Westen een cowboy geweest, die zo dapper was als Cowboy Billie Boem.'
                    {print} 'Van je hotsie knotsie knetter!'
                    {print} 'Van je jippie jippie jeej!'
                    {print} 'Maar zijn ' dier ' was zeer vermoeid en die kon niet langer mee'
                    {print} 'Maar hij moest de boeven vangen, dus koos hij een ander beest'
                    {print} 'en nu mag je zelf bedenken wat voor beest dat is geweest!'
                    ```
            11:
                story_text: "Ook in dit level kunnen we weer liedjes zingen, bijv. Baby Shark. Met `{for}` kunnen we het liedje met maar 6 regels code printen. \n\n### Opdracht 1\nKun jij baby shark printen met een `{for}`? Vul de streepjes in en maak de codes verder af.\n"
                example_code: "```\nfamilie = baby, mama, papa, opa, oma\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Opdracht 2
                    Print het liedje 10 kleine visjes. Zoek de tekst op als je die niet kent.

                    **Extra** Print het liedje Old MacDonald had a farm. Zoek de tekst op als je die niet kent, en zorg dat alle dieren ook het goede geluid maken, met een `{if}`.
                example_code_2: |
                    ```
                    visjes = 10, 9, 8, 7, 6, 5, 4, 3, 2
                    ```
            18:
                story_text: |
                    In level 16 hebben we liedjes met lijsten gemaakt. Maar, deze codes doen het nu niet meer goed. De dubbele punten uit level 17 en de haakjes uit level 18 moeten er nog bij.

                    ### Opdracht 1
                    De dronken zeeman van level 16 staat hier als voorbeeldcode. Die is dus fout in dit level.
                    Zorg jij dat alles weer werkt? Om je te helpen hebben we op de plekken van _sommige_ fouten een _ neergezet.

                    ### Opdracht 2
                    Zoek nu ook je OldMacDonald lied op uit level 16, en verbeter dat.
                example_code: |
                    ```
                    coupletten = ['wat zullen we doen met de dronken zeeman?', 'hang hem aan de mast om uit te waaien', 'stop hem met zijn kop in een emmer water', 'dat zullen we doen met de dronken zeeman']
                    {for} couplet {in} coupletten _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ couplet _
                        {print} 's morgens in de vroegte'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'HELA HUP! daar gaat ie!'
                        {print} 's morgens in de vroegte'
                    ```
    songs_2:
        name: Zing nog een lied!
        levels:
            12:
                story_text: |
                    Liedjes bevatten vaak veel herhaling. We kunnen daarvoor een functie gebruiken!
                    ### Opdracht
                    Kijk naar de voorbeeldcode met de functie. Vul het lied aan tot het compleet is.
                example_code: |
                    ```
                    {define} slaap
                        {print} 'Slaap kindje slaap'
                        {print} _

                    {call} slaap
                    {print} 'Een schaap met witte voetjes'
                    {print} 'die drinkt zijn melk zo zoetjes'
                    {call} _
                    ```
            11:
                story_text: |
                    ### Opdracht
                    Maak het liedje af door de ontbrekende regels en variabelen in te vullen. Vul daarna de lijsten aan met nog meer dieren die iets doen, zoals leeuwen die samen geeuwen, koeien die bootje roeien of...?
                example_code: |
                    ```
                    dieren = ['beren', 'apen', 'bijen', _]
                    lijdend_voorwerp = ['broodjes', 'lekker', 'auto', _]
                    werkwoord = ['smeren', 'slapen', 'rijden', _]
                    _
                        {print} 'Ik zag twee ' dieren[i] ' ' lijdend_voorwerp[i] ' ' werkwoord[i]
                        {print} 'Oh het was een wonder'
                        {print} 'Het was een wonder, boven wonder'
                        {print} 'Dat die ' _ ' ' _ ' konden'
                        {print} 'Hi hi hi'
                        {print} 'Ha ha ha'
                        {print} 'Ik stond erbij en ik keek er naar'
                        {sleep} 5
                        {clear}
                    ```
                story_text_2: |
                    ### Opdracht 2
                    Maak nu op dezelfde manier je eigen code voor het liedje 'de wielen van de bus'!
                example_code_2: |
                    ```
                    voorwerp = ['wielen', 'deuren', _]
                    movement = [ 'rond en rond', 'open en dicht', _]
                    ```
    tic:
        name: Boter-kaas-en-eieren
        levels:
            14:
                story_text: |
                    Tijd voor een potje boter-kaas-en-eieren!

                    ### Opdracht
                    In dit avontuur leren we eerst een leeg speelveld programmeren.

                    ***Maak een lijst genaamd veld*** Deze lijst wordt ons speelveld. De lijst bestaat uit 9 lege plekken, punten, aangezien er aan het begin van het spel nog geen plekken gevuld zijn met rondjes of kruisjes.

                    ***Maak een functie die het veld print*** Begin met een `{clear}` commando, zodat de oude speelvelden verwijderd worden. Daarna printen we de eerste regel van ons boter-kaas-en-eieren veld. Deze regel bestaat uit de eerste drie plekken van de lijst.
                    We hebben deze regel alvast voor je geprogrammeerd. Maak nu zelf de tweede regel (plek 4, 5 en 6) en derde regel (plek 7, 8 en 9) af.

                    ***Roep de functie op die het veld print*** Roep de functie nu op.
                    <div class="w-full flex flex-row gap-2">
                        Voer de code uit. Je uitvoer zou er zo uit moeten zien (al staat er bij jou boter-kaas-en-eieren in plaats van het Engelse TIC TAC TOE): <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Ga door naar het volgende avontuur*** In het volgende avontuur leer je de logica van het spelletje programmeren.
                example_code: |
                    ```
                    # Maak een lijst genaamd veld
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Maak een functie die het veld print
                    {define} print_veld
                        _
                        {print} 'Boter-kaas-en-eieren'
                        {print} veld[1] veld[2] veld[3]
                        _
                        _

                    # Roep de functie op
                    ```
            15:
                example_code: "```\n# Plak hier jouw code en maak het \"level 17\" waardig\n\n# Creeer een functie zodat deze detecteert dat iemand heeft gewonnen\n{define} detect_winner {with} field, sign:\n    {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':\n        game_over = 'yes'\n        {print} 'Player ' sign 'wins!'\n    {elif}:\n        _\n    {else}:\n        game_over = 'no'\n{return} _\n```\n"
                story_text: "In het vorige level heb je geleerd hoe je een boter-kaas-en-eieren spel maakt. Het spel werkt, maar is behoorlijk irritant omdat het je steeds vraagt of je al gewonnen hebt.\nNu we de '{elif}' opdracht hebben, kunnen we het spel laten beslissen of iemand gewonnen heeft. Het spel hoeft ons dan niet meer om informatie te vragen!\n\n### Opdracht\n***Plak je code*** Plak je code van het vorige level hier en maak het level 17 proof. In dit level heb je geleerd om een `:` te gebruiken elke keer dat je een codeblok maakt. Voeg de dubbele punten toe op de juiste plekken.\n\n***Maak een functie die detecteert of iemand gewonnen heeft*** We hebben de functie voor je gestart, plak deze onder de functie `print_field` en voltooi de functie. Je ziet dat dit eerste stukje code controleert of plek 1, 2 en 3 hetzelfde zijn, want als dat zo is, heb je er 3 op een rij.\nHet controleert ook of ze geen punt zijn, want als dat zo is, kan de lijn dezelfde symbolen bevatten, maar dat komt alleen omdat deze nog leeg is.\nAls aan al deze voorwaarden is voldaan, is het spel afgelopen en wordt de winnaar afgedrukt.\nVoltooi deze functie met alle mogelijke manieren om te winnen. Dit betekent dat je dit moet doen voor de andere 2 rijen, 3 kolommen en 2 diagonalen.\nAls je alle andere opties hebt voltooid, moet de functie de variabele `game_over` retourneren, zodat we deze in ons spel kunnen gebruiken.\n\n***Roep de functie aan in het spel*** Ga naar de regel`game_over = {ask} 'Heb je gewonnen?'` en verander het in `game_over = {call} detect_winner {with} field, sign`. Nu controleert de functie of er een winnaar is en hoeft het spel niet dat niet meer te vragen!\n\n***Geniet van je spel!*** Goed gedaan! Je hebt het spel geprogrammeerd! Veel plezier met spelen!\n"
    tic_2:
        name: Boter-kaas-en-eieren 2
        levels:
            17:
                story_text: |
                    In het vorige avontuur heb je geleerd om het speelveld te printen. Nu leer je het spelletje te programmeren!

                    ### Opdracht
                    ***Plak je code hier*** Plak je code van het vorige avontuur hier.

                    ***Voeg meer variabelen toe*** Onder je lijstje `veld` moeten nog 2 variabelen toegevoegd worden.
                    De variabele `game_over` vertelt je of het spel al over is. Stel deze variabele in op 'nee'.
                    De variabele `teken` vertelt je of het rondje of het kruisje aan de beurt is. Stel deze variabele in op 'x'.

                    ***Het spel*** Gebruik een `{while}` commando om te zorgen dat het spel door blijft gaan, totdat de speler game over is. Dus `{while} game_over == 'nee'`. 
                    Tijdens het spelen laten we de speler kiezen op welk plekje ze hun teken willen plaatsen. Dan veranderen we dat plekje in hun teken.
                    Vervolgens printen we het speelveld opnieuw en vragen we de speler of die al gewonnen heeft. Tot slot is het de beurt van de ander, dus veranderen we het teken van 'x' naar 'o' of andersom.

                    ***Test je spel*** Werkt alles? Geweldig, veel speelplezier! Is er nog iets mis? Gebruik dan de knop met het lieveheersbeestje om je code te debuggen.
                    Je hebt misschien ook wel gemerkt dat je er een fout in het spel zit: Je mag namelijk het plekje van de andere speler stelen! Als de ene speler plek 1 heeft gekozen, mag de tweede speler daarna ook gewoon plekje 1 inpikken.
                    Dat is natuurlijk niet eerlijk! Wil je dit oplossen, ga dan naar het volgende avontuur.
                example_code: |
                    ```
                    # Plak je code hier

                    # Voeg meer variabelen toe
                    game_over = _
                    teken = _

                    # Het spel
                    {while} _
                        keuze = _ 'Speler ' teken '_?'
                        veld[keuze] = _
                        _ print_veld
                        game_over = {ask} _
                        {if} teken = 'o'
                            teken = _
                        _
                            teken = _
                    ```
    tic_3:
        name: Boter-kaas-en-eieren 3
        levels:
            17:
                story_text: |
                    Je hebt misschien al gemerkt dat er een fout in het spel zit: Je mag namelijk het plekje van de andere speler stelen! Als de ene speler plek 1 heeft gekozen, mag de tweede speler daarna ook gewoon plekje 1 inpikken.
                    Dat is natuurlijk niet eerlijk! Wil je dit nu oplossen.

                    ### Opdracht
                    ***Plak je code hier*** Plak je code van het vorige avontuur hier.

                    ***Los het probleem op*** Om het probleem op te lossen moet je de regel `veld[keuze] = teken` aanpassen. Deze regel verandert namelijk het gekozen plekje in het teken van de speler, zonder te controleren of dat wel mag.
                    Ga naar het kopje 'Gebruik dit om het probleem op te lossen' en maak de code af. We willen eerst checken of het plekje wel leeg is, voordat iemand het in mag nemen, dus we programmeren `{if} veld[keuze] = '.'`. Is het plekje nog leeg, dan mag de speler het innemen.
                    Vervolgens maken we een {else} commando, voor als het plekje al bezet is, en we printen daar 'Sorry, deze plek is al bezet'. Om te zorgen dat de spelers ook de kans krijgen om deze tekst te lezen, voordat hij gewist wordt, voegen we een {sleep} commando toe.
                    Vervang nu de regel `veld[keuze] = teken` in je spel met dit nieuwe stukje code.

                    ***Speel je spel!*** Hoera! Nu werkt het spel helemaal zoals het hoort! Goed gedaan!
                    Het enige onhandige aan dit spel is dat je steeds moet invullen of je gewonnen hebt of niet. Wil je dat verhelpen? Neem dan een kijkje in het volgende level!
                example_code: |
                    ```
                    # Plak je code hier

                    # Gebruik dit om het probleem op te lossen
                    {if} _ = '.'
                        veld[keuze] = teken
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Tekenen
        default_save_name: Schildpad
        description: Maak jouw eigen tekening
        levels:
            1:
                story_text: |
                    In level 1 kun je ook beginnen met een programmeer-tekening! Door lijnen te combineren met draaien kun je bijvoorbeeld een
                    vierkant maken of een trapje.

                    Met `{forward}` ga je naar voren. Het getal erna bepaalt hoe ver naar voren. Met `{turn} {right}` draai je een kwartslag, met de klok mee. `{turn} {left}` draait tegen de klok in.

                    Wil je naar achteren? Gebruik dan het `{forward} ` commando met een negatief getal. Dus bijvoorbeeld `{forward} -100`.
                story_text_2: |
                    ### Opdracht
                    Dit is het begin van een klein trappetje. Kun jij de code aanvullen tot de trap 5 treden heeft?
            2:
                story_text: |
                    In level 1 kon de schildpad alleen linkom of rechtsom draaien. Dat is een beetje saai!
                    In level 2 kun je de neus van de schildpad naar elke richting laten wijzen. 

                    Gebruik 90 graden om een kwartslag te draaien, 180 graden voor omkeren, of 360 om een heel rondje te draaien. 
                                 
                    ### Opdracht
                    De voorbeeldcode maakt de letter T. Verander de code zodat er een B wordt getekend.

                    **Extra** Kies nog een letter en teken die, bijvoorbeeld de eerste letter van je naam. 
                    Je kan ook meerdere letters maken, door `{color}` `{white}` tussen het tekenen te zetten. 
                story_text_2: |
                    In dit level kun je variabelen gebruiken in de teken-schildpad code. 

                    ### Opdracht
                    Verander de code zodat er een driehoek in beeld komt. Tip: Je hoeft maar een stukje code te veranderen.
                example_code_2: |-
                    ```
                    {print} Figuren tekenen!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
            3:
                story_text: |
                    Ook bij je teken-schildpad kun je `{at} {random}` gebruiken! Dan loopt hij steeds een ander pad.
                    Kies met `{at} {random}` een hoek uit een lijstje. Als je regels 2 en 3 een paar keer herhaalt, krijg je een langere tekening.

                    ### Opdracht
                    Kun jij regel 2 en 3 kopi√´ren en plakken om een langere random code te maken?
                example_code: |
                    ```
                    hoeken {is} 10, 50, 90, 150, 250
                    {turn} hoeken {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    In dit level moet je aanhalingstekens gebruiken bij `{print}` en `{ask}`. Ook bij het tekenen dus!
                example_code: |
                    ```
                    {print} 'Figuren tekenen'
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                story_text_2: |
                    Je kunt de lijn ook van kleur laten wisselen met `{color}`. Kijk maar eens naar het voorbeeld.
                    Je kunt het commando `{color} {white}` gebruiken om onzichtbare lijnen te tekenen. Je kunt die witte lijnen bijvoorbeeld gebruiken om ergens anders op het scherm te beginnen met tekenen.
            5:
                story_text: |
                    In dit level kun je met `{if}` een keuze maken. Bijvoorbeeld tussen verschillende soorten figuren.
                example_code: |
                    ```
                    {print} 'Figuren tekenen'
                    figuur {is} {ask} 'Wil je een driehoek of een vierkant?'
                    {if} figuur {is} driehoek hoek {is} 120
                    {else} hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                story_text_2: |
                    ### Opdracht
                    Vul je juiste getallen in om de code aan de praat te krijgen.
                    Probeer daarna om de optie 'achteruit' toe te voegen.

                    **Extra**  Maak het programma opnieuw en gebruik daarbij Noord, Oost, Zuid en West in plaats van links en rechts.
                    Op deze manier kun je nog meer richtingen gebruiken, zoals Noordoost en Zuidwest.
                example_code_2: |
                    ```
                    richting {is} {ask} 'Wil je links, rechts of rechtdoor?'
                    {if} richting {is} links {turn} _
                    {if} richting  {is} rechts {turn} _
                    {forward} 100
                    ```
            7:
                story_text: |
                    In dit level kun je gaan rekenen en kun je daarmee verschillende figuren tekenen.
                    Misschien heb je op school al geleerd dat een heel rondje rond draaien 360 graden is. Zo niet, dan weet je het nu!
                    Daarom gebruik je voor een vierkant ook 90 graden. 360 gedeeld door 4 is 90.
                    Nu we met Hedy kunnen rekenen, kunnen we alle figuren tekenen die we maar willen!
                example_code: |
                    ```
                    hoeken = {ask} 'Hoeveel hoeken krijgt dit figuur?'
                    hoek = 360 / hoeken
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    ```
            9:
                story_text: "Nu we meerdere regels kunnen herhalen, kunnen we makkelijker figuren maken.\nWant we hoeven maar √©√©n keer in te stellen wat de hoek is, en die variabele steeds gebruiken in de `{repeat}`.\n\n### Opdracht 1\n De voorbeeldcode tekent een vierkant. Verander dat in een ander figuur zoals een driehoek of zeshoek. Je moet daarvoor twee regels veranderen!\nTip: een heel rondje is 360 graden.                   \n\n### Opdracht 2\nMaak nu een tekening naar je eigen inzicht, met minstens twee verschillende veelhoeken.\n"
                example_code: |
                    ```
                    hoek = 90
                    {repeat} 10 {times}
                        {turn} hoek
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** We kunnen nu het programma verbeteren dat verschillende figuren tekent. Maak de code af en je kunt iedere veelhoek tekenen.
                example_code_2: |
                    ```
                    kanten = {ask} 'Hoeveel hoeken krijgt dit figuur?'
                    hoek = 360 / kanten
                    {repeat} kanten {times}
                        {turn} _
                        {forward} _
                    ```
            10:
                story_text: |
                    We kunnen met een `{repeat}` in een `{repeat}` complexere figuren maken.

                    ### Opdracht 1
                    De voorbeeldcode tekent drie zwarte driehoeken, verander dat in vijf roze vierkanten.

                     **Extra** Maak je eigen figuur bestaande uit minstens twee verschillende vormen.
            11:
                story_text: "In dit level kun je de teken-schildpad een figuur laten tekenen. \nDe schildpad volgt de afstanden in de lijst √©√©n voor √©√©n, waarbij de stappen steeds groter worden.\n### Opdracht 1\nVoeg een `{turn} ` van 90 graden toe aan de code om een spiraal te tekenen.\nVoeg ten minste 5 getallen toe aan de lijst, zodat de spiraal steeds groter wordt.\n **(extra)** Kan jij de spiraal in een andere vorm veranderen? Probeer verschillende getallen met `{turn}`!\n### Opdracht 2\nDe spiraal wordt nu van binnen naar buiten getekend, kun jij dit omdraaien?\n"
                example_code: |
                    ```
                    {turn} 90
                    afstanden = 10, 20, 30, 40, 50, 60
                    {for} afstand {in} afstanden
                        {forward} afstand
                    ```
            12:
                story_text: |
                    We kunnen functies gebruiken om complexere figuren te tekenen met minder code.
                    ### Opdracht 1
                    Vul de functie in zodat er drie vierkanten getekend worden. Als je wil dat het plaatje mooier wordt, kun je de lijntjes tussen de vierkanten in wit maken.

                    ### Opdracht 2
                    De code kan zelfs nog korter. Vul de laatste regels aan met een `{repeat}`, zodat het figuur dezelfde vorm behoudt.

                    ### Opdracht 3
                    Maak je eigen tekening met verschillende figuurtjes.
                    Verander het aantal figuren met `{repeat}` en de vorm van het figuur met `{define}`
                example_code: |
                    ```
                    {define} vierkant
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} vierkant
                    {forward} 50
                    {call} vierkant
                    {forward} 50
                    {call} vierkant
                    ```
    turtle_draw_it:
        name: Teken het!
        default_save_name: Teken het
        description: Teken dit figuur met de schildpad
        levels:
            1:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    <div class="w-full flex flex-row gap-2">
                        Rechthoek <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Vierkant <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Trap <img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    <div class="w-full flex flex-row gap-2">
                    Driehoek <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Pijl <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boot <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    <div class="w-full flex flex-row gap-2">
                    Driehoek <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Ster <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Pijl <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    <div class="w-full flex flex-row gap-2">
                    Gekleurde ster <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Regenboog <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Geneste vierkanten <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Klaar voor een uitdaging? Zorg dat de kleuren van de figuren willekeurig geselecteerd worden, zodat ze er steeds anders uitzien als je je code uitvoert!

                    ```
                    kleuren {is} {red}, {orange}, {yellow}, {green}, {blue}, {purple}, {pink}, {brown}, {gray}, {black}
                    {color} _
                    ```
            5:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    **Extra** Maak maar √©√©n code die de speler laat kiezen welke letter verschijnt! En kan je nog meer letters toevoegen?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    gekozen_letter {is} {ask} 'Welke letter wil je graag zien? F, E of L?'
                    {if} _
                    ```
            7:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    **Extra** Laat de speler kiezen welke kleur het vierkant moet krijgen.

                    ***Extra*** Kan je ook de eerste letter van je voornaam maken? En de vlag van jouw land?

                    <div class="w-full flex flex-row gap-2">
                    Vierkant <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Vlag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint voor het vierkant:
                    ```
                    gekozen_kleur = {ask} _
                    ```
            8:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    <div class="w-full flex flex-row gap-2">
                    Zeshoek <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Driehoek <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Waaier <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            9:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    **Extra** De cijfers tussen haakjes geven aan met hoeveel regels code dit figuur getekend kan worden. Kan jij het met net zoveel regels?

                    <div class="w-full flex flex-row gap-2">
                    Vierkant (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Ster met willekeurige kleur (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Spiraal met willekeurige kleur (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            10:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    **Extra** De cijfers tussen haakjes geven aan met hoeveel regels code dit figuur getekend kan worden. Kan jij het met net zoveel regels?

                    **Extra** Laat de speler kiezen van welk land hij de vlag wil zien.

                    <div class="w-full flex flex-row gap-2">
                    Kruis (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Geneste vierkanten met willekeurige kleur (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Vlaggen <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint voor de geneste vierkanten:
                    ```
                    kleuren = red, blue, orange, yellow, pink, purple, green, brown, black
                    afstand = 120
                    {repeat} 5 {times}
                    _
                    ```
                    Hint voor de vlaggen:
                    ```
                    land = {ask} 'Van welk land wil je de vlag zien?'
                    {if} land {is} 'Nederland'
                        kleur_1 = red
                        kleur_2 = white
                        kleur_3 = blue
                    ```
            11:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    <div class="w-full flex flex-row gap-2">
                    Geneste zeshoek <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Stoplicht <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint voor de geneste zeshoek:
                    ```
                    afstanden = 100, 80, 60, 40, 20
                    {for} afstand {in} afstanden
                    _
                    ```

                    Hint voor het stoplicht:
                    ```
                    kleuren = red, yellow, green
                    {for} kleur {in} kleuren
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    Kerstverlichting <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint voor de kerstverlichting:

                    Begin door naar de linkerkant van het scherm te bewegen met een onzichtbare witte lijn. Hang dan de kerstverlichting op!
                    ```
                    {color} {white}
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    kleuren = {red}, {blue}, {yellow}, {purple}, {green}, {orange}, {pink}
                    {for} kleur {in} kleuren
                    _
                    ```
            12:
                story_text: |
                    ### Opdracht
                    Maak een code om armbanden te ontwerpen!

                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500"> 
                example_code: |
                    Hint voor het ontwerpen van armbanden. Definieer eerst een functie **voor elke vorm** die je wilt gebruiken op de armband. Voeg daarna op deze manier vormen aan de armband toe:
                    ```
                    {define} teken_een_vierkant
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        gekozen_vorm = {ask} 'Wat voor vorm wil je op de armband?'
                        gekozen_kleur = {ask} 'In welke kleur?'
                        {color} gekozen_kleur
                        {if} gekozen_vorm = 'vierkant'
                            {call} teken_een_vierkant
                    ```
            14:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    Straat met huizen van verschillende groottes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Gekleurde straat <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Sneeuwstorm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint voor de straat met huizen van verschillende groottes
                    ```
                    {define} teken_een_huis {with} grootte
                    _

                    {call} teken_een_huis {with} 90
                    {call} teken_een_huis {with} 60
                    {call} teken_een_huis {with} 30
                    ```

                    Hint voor de gekleurde straat
                    ```
                    {define} teken_een_huis {with} gekozen_kleur
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} teken_sneeuwvlok {with} lengte, kleur
                        _

                    getallen = 10, 20, 30
                    kleuren = _

                    {for} i {in} {range} 1 {to} 5
                        random_getal = _
                        random_kleur = _
                        {call} teken_sneeuwvlok {with} random_getal, random_kleur
                        {color} wit
                        {turn} random_getal * 5
                        {forward} 80
                    ```
            15:
                story_text: |
                    ### Opdracht
                    Maak een code die de speler vraagt hoeveel hoeken een figuur moet hebben, en dan dat figuur tekent.
                    Het plaatje toont het figuur wanneer de speler 10 invult.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} bereken_graden {with} aantal_hoeken
                        _ 360 / aantal_hoeken


                    {define} teken_figuur {with} graden
                        _
                            {forward} 400 / aantal_hoeken
                            {turn} _

                    aantal_hoeken = {ask} _
                    graden = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            16:
                story_text: |
                    ### Opdracht
                    Maak de figuren na met de schildpad!

                    Spiraal <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiraal
                    ```
                    afstand = 5
                    {while} afstand < 200
                        afstand = afstand + 5
                         _
                    ```
                story_text_2: |
                    Waaier <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Waaier
                    ```
                    {define} teken_een_vierkant {with} zijde
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i {is} i - 3
                    ```
                story_text_3: |
                    Ster <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Ster
                    Een ster wordt meestal getekend met hoeken van 144 graden. Als je dit een beetje verandert naar bijvoorbeeld 143 graden en het patroon herhaalt met {while} kan je dit figuur maken.
    while_command:
        default_save_name: zolang
        description: '{while} commando'
        levels:
            16:
                story_text: |-
                    Nu gaan we een nieuwe loop leren: De `{while}` loop!
                    We gaan door zo lang het statement dat we hebben waar is.
                    Vergeet dus niet in de loop de waarde te veranderen.

                    Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven.
                    Als er nooit een goed antwoord wordt gegeven, dan stopt de loop nooit!
                example_code: |
                    ```
                    antwoord = 0
                    {while} antwoord != 25
                        antwoord = {ask} 'Wat is 5 keer 5?'
                    {print} 'Je hebt een correct antwoord gegeven'
                    ```
    years:
        name: Oud en Nieuw
        default_save_name: Oud en Nieuw
        description: Aftellen naar het nieuwe jaar
