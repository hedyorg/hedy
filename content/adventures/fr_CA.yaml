adventures:
    story:
        name: Histoire
        default_save_name: Histoire
        description: Histoire
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux faire une histoire avec un personnage principal dont tu auras choisi le nom toi-même.

                    À la première ligne, utilise `{ask}` pour demander le nom du personnage de ton histoire.

                    Après la première ligne, commence avec `{print}` si la phrase a besoin d'être affichée.
                    Ou utilise `{echo}` si tu veux que le nom de ton personnage principal soit ajouté à la fin de la phrase.
                example_code: |
                    ```
                    {ask} Le nom du personnage principal de cette histoire est
                    {print} Le personnage principal est en train de marcher dans la forêt
                    {echo} Il a un peu peur,
                    {print} Il entend de drôles de bruits tout autour
                    {print} Il craint que cette forêt soit hantée
                    ```
                story_text_2: |
                    ### Défi
                    Crée maintenant ta propre histoire à l'aide d'au moins 6 lignes de code.
                    Cette histoire doit être différente de celle proposée dans le code d'exemple.
                    Utilise au moins une commande `{ask}` et une commande `{echo}`.
                    Tu peux choisir n'importe quel sujet.
                    Si tu n'as pas d'idée, tu peux parler de l'un des sujets suivants : un film, un match ou une journée au zoo.
            2:
                story_text: |
                    Dans le niveau 2 tu peux créer une histoire plus drôle. Le nom de ton personnage principal peut être à n'importe quel endroit de la phrase

                    Tu vas devoir programmer un petit supplément pour ça. Maintenant, tu dois commencer par donner un nom à ton personnage principal.

                    Tu peux ensuite mettre ce nom n'importe où dans une phrase.
                example_code: |-
                    ```
                    nom {is} {ask} Quel est le nom du personnage principal ?
                    {print} nom va courir dans les bois
                    {print} nom a un peu peur
                    {print} Soudain, il entend un bruit étrange…
                    {sleep}
                    {print} nom craint que cette forêt soit hantée
                    ```
                story_text_2: |
                    ### Exercice
                    Il est maintenant temps d'ajouter des variables à l'histoire que tu as créée au niveau précédent.
                    Va dans « Mes programmes », recherche ton histoire créée au niveau 1 et copie le code. Colle le code dans la zone de programmation de ce niveau.

                    Ce code ne fonctionne pas à ce niveau, parce que tu n'as pas encore utilisé de variables.
                    Change les commandes `{ask}` et `{echo}` dans ton code en utilisant la bonne formulation que tu as appris dans ce niveau.

                    **Bonus** Pour ajouter du suspens à ton histoire, ajoute une commande `{sleep}`.
            3:
                story_text: |
                    Au niveau 3, tu peux rendre ton histoire plus amusante. Tu peux tirer au hasard un monstre, un animal ou un autre obstacle, comme ceci :
                example_code: |
                    ```
                    animaux {is} 🦔, 🐿, 🦉, 🦇
                    {print} Maintenant il entend des cris de animaux {at} {random}
                    ```
                story_text_2: |
                    La commande `{add}` peut aussi être pratique pour ton histoire.
                example_code_2: |
                    ```
                    {print} Il entend un bruit
                    animaux {is} un 🐿, un 🦔, une 🦇, une 🦉
                    animal {is} {ask} C'est quoi à ton avis ?
                    {add} animal {to_list} animaux
                    {print} C'était animaux {at} {random}
                    ```
                story_text_3: |
                    Ceci est un exemple de la commande `{remove}` dans ton histoire.

                    ### Exercice
                    Copie ton histoire des niveaux précédents dans celui-ci.
                    Dans ce niveau, tu as appris 3 nouvelles commandes `{at} {random}`, `{add} {to_list}` et `{remove} {from}`.
                    Ajoute de nouvelles lignes de code à ton histoire de manière à ce que ces nouvelles commandes apparaissent au moins une fois.
                example_code_3: |
                    ```
                    {print} Son sac à dos est beaucoup trop lourd.
                    {print} Il y a dedans une bouteille d'eau, une lampe torche et une brique.
                    sac_à_dos {is} eau, torche, brique
                    jeté {is} {ask} Quel objet devrions-nous jeter ?
                    {remove} jeté {from} sac_à_dos
                    ```
            4:
                story_text: |
                    ### Exercice
                    Copie l’exemple et ajoute des guillemets à la place des espaces vides aux lignes 1 et 2 pour le faire fonctionner.
                    Les espaces vides en ligne 3 et 4 ne doivent pas être remplacés par des guillemets, mais par une commande `{sleep}` et une commande `{clear}`. Peux-tu faire marcher tout l'exemple ?

                    ### Exercice 2
                    Rends-toi au niveau précédent et copie le code de ton histoire. Fais marcher ton code à ce niveau en ajoutant des guillemets aux bons endroits.
                    Attention : les variables de ton histoire ne doivent pas être entre guillemets, comme le montre la seconde ligne de l'exemple. Dans cette ligne, le nom de la variable n'est pas entre guillemets.
                example_code: |
                    ```
                    nom {is} {ask} _ Comment t'appelles-tu ? _
                    {print} _ Le personnage principal s'appelle _ nom
                    _
                    _
                    {print} nom _ va se promener dans les bois _
                    {print} nom _ a un peu peur _
                    animaux {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Il entend des bruits de _ animaux {at} {random}
                    {print} nom _ craint que la forêt ne soit hantée _
                    ```
            5:
                story_text: |
                    À ce niveau, différentes fins peuvent être programmées afin de rendre ton histoire encore plus amusante.
                    Le code exemple te montre comment réaliser deux fins différentes.

                    ### Exercice 1
                    Écris une nouvelle histoire courte du sujet de ton choix.
                    En panne d'inspiration ? Choisie l'un des sujets suivants : un super-héros, une journée d'école ennuyeuse, une île déserte.

                    Maintenant, donne la possibilité au joueur de choisir une fin heureuse ou non, comme indiqué dans le code exemple.
                    Programme les deux fins.

                    ### Exercice 2
                    Copie l'histoire créée aux niveaux précédents.
                    Trouve le moyen d'ajouter au moins deux commandes `{if}` et `{else}` à ton histoire.
                    La fin peut être heureuse ou non. Tu peux également trouver d'autres moyens d'inclure ces commandes.
                example_code: |
                    ```
                    nom {is} {ask} "Qui se promène en forêt ?"
                    {print} nom " se promène en forêt"
                    {print} nom " rencontre un monstre"
                    fin {is} {ask} "Voudrais-tu une fin triste ou heureuse ?"
                    {if} fin {is} heureuse {print} nom " sort son épée et le monstre s'enfuie à toutes jambes"
                    {else} {print} "Le monstre mange " nom
                    ```
            8:
                story_text: |
                    Dans une histoire, on se répète parfois. Par exemple, quand une personne appelle à l'aide ou chante une chanson.
                    À ce niveau, tu peux écrire ces répétitions dans ton histoire, avec `{repeat}`.

                    ### Exercice
                    Ajoute une répétition à ta propre histoire. Retourne en arrière dans tes programmes sauvegardés, choisi une histoire que tu as programmée à un niveau précédent, trouve une ligne contenant `{print}` et répète là !
                example_code: |
                    ```
                    {print} "Le prince appelait à l'aide sans arrêt"
                    {repeat} 5 {times} {print} 'Au secours !'
                    {print} "Pourquoi personne ne vient m'aider ?"
                    ```
            9:
                story_text: |
                    À ce niveau tu peux utiliser plusieurs lignes dans une commande `{if}`, ainsi tu peux améliorer la fin heureuse et la fin triste !

                    ### Exercice 1
                    L'exemple de code montre deux fins différentes, une ou les personnages sautent dans une machine à voyager dans le temps et une où ce n'est pas le cas.
                    Complète les espaces vide avec, au moins, une phrase pour chaque fin.
                    **Bonus** Fait une histoire plus longue. Que se passe-t-il dans l'histoire ? Tu peux aussi ajouter une seconde commande `{ask}` avec des options différentes.

                    ### Exercice 2
                    Recherche dans tes programmes sauvegardés et choisi une histoire du niveau 5. Maintenant écrit une fin triste et une fin heureuse d'au moins trois lignes de long pour chacune !
                example_code: |
                    ```
                    {print} "OH NON ! Le T-rex se rapproche !"
                    fin = {ask} "Voulez-vous une fin triste ou heureuse ?"
                    {if} fin {is} heureuse
                    …{print} "Juste à temps, Richard retourne d'un saut dans la machine à voyager dans le temps !"
                    …{print} _
                    {else}
                    …{print} "Oh non ! Richard est trop lent…"
                    …{print} _
                    ```
            10:
                story_text: |
                    À ce niveau tu peux utiliser les commandes `{if}` et `{repeat}` à l'intérieur d'autres commandes `{if}`et `{repeat}`.
                    Cela te donne de nombreuses options et t'aide vraiment à rendre ton histoire interactive.

                    ### Exercice
                    Termine le code pour que les `{if}` fonctionnent correctement.

                    ### Exercice 2
                    Ajoute aussi un `{if}`et `{else}` pour la partie de l'histoire où Robin rentre à la maison.

                    ### Exercice 3
                    Retourne chercher ton histoire du niveau 8 et utilise au moins deux `{if}` à l'intérieur d'un `{if}` existant.
                example_code: |
                    ```
                    {print} "Robin se promène en ville"
                    choix = {ask} "Est-ce que Robin entre dans un magasin ou rentre-t-il à la maison ?"
                    {if} choix {is} magasin
                        {print} "Il entre dans un magasin"
                        {print} "Robin trouve un livre qui a l'air intéressant"
                        achète = {ask} "Est-ce que Robin achète le livre ?"
                        {if} achète {is} oui
                        _ {print} "Robin achète le livre et rentre à la maison"
                        _ {else}
                        _ {print} "Robin quitte le magasin et rentre à la maison"
                    {else}
                        {print} "Robin rentre à la maison"
                    ```
            11:
                story_text: |
                    À ce niveau, tu peux utiliser la commande {for} dans ton histoire. Par exemple, tu peux facilement programmer le livre pour enfant « Ours brun, dis-moi ce que tu vois ? »

                    ### Exercice

                    Regarde <a href="https://fr.slideshare.net/smt786/our-brun-dismoi">l'histoire</a> si tu ne la connais pas et assure-toi ensuite de la programmer comme dans le livre.
                example_code: "```\nanimaux = _ , _ , _ \n{print} \"Ours brun, Ours brun\"\n{print} \"Que vois-tu ?\"\n```\n"
            16:
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them ?'
                    {print} 'You can choose : tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look ?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are !'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house !'
                    ```
            13:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercice 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Bienvenue dans cette histoire!')
                    ```
                story_text_2: |
                    ### Exercice 2
                    Nous avons déjà préparé ce  `{input}` pour toi. D'abord, utilise cette variable `name` dans ton histoire.
                    Puis, ajoute un second `{ask}` et utilise cette variable également.
                    commentaire : N'oublie pas la virgule dans un `{print}` entre un texte et une variable !
                example_code_2: |
                    ```
                    naam = {input}("Quel est votre nom?")
                    {print}('Bienvenue dans cette histoire!')
                    ```
    add_remove_command:
        description: Introduction {add} {to_list} et {remove} {from}
        levels:
            3:
                story_text: |
                    ## Ajouter à
                    Tu peux ajouter des éléments à une liste avec la commande `{add} {to_list}`. Pour ajouter un élément à une liste, tu peux simplement écrire : `{add} pingouin {to_list} animaux` ou tu peux utiliser la commande `{ask}` comme dans le code d'exemple.
                example_code: |
                    ```
                    animaux {is} chien, chat, kangourou
                    préféré {is} {ask} Quel est ton animal préféré ?
                    {add} préféré {to_list} animaux
                    {print} Je choisis animaux {at} {random}
                    ```
                story_text_2: |
                    ## Supprimer d'une liste
                    Si tu peux ajouter des éléments à une liste, tu peux aussi en retirer bien sûr. Cela se fait avec la commande `{remove} {from}`
                example_code_2: |
                    ```
                    animaux {is} chien, chat, kangourou
                    mal_aimé {is} {ask} Quel animal n'aimes-tu pas ?
                    {remove} mal_aimé {from} animaux
                    {print} Je choisis animaux {at} {random}
                    ```
                story_text_3: |
                    ### Exercice
                    Essaye les nouvelles commandes dans ce restaurant virtuel. Ajoute le parfum que le joueur désire à la liste et supprime le parfum auxquels il est allergique.
                example_code_3: |
                    ```
                    {print} Le milkshake mystérieux
                    parfums {is} fraise, chololat, vanille
                    désiré {is} {ask} Quelle parfum désires-tu ?
                    _
                    allergie {is} {ask} Es-tu allergique à un parfum ?
                    _
                    {print} Voici un milkshake parfums {at} {random}
                    ```
    ask_command:
        description: Introduction à la commande {ask}
        levels:
            1:
                story_text: |
                    ## La commande `{ask}`
                    Maintenant que tu sais utiliser la commande `{print}`, passons à la commande suivante : `{ask}`. Avec la commande `{ask}`, tu peux poser une question. Fais un essai :
                example_code: |
                    ```
                    {print} Salut !
                    {ask} Quel est ton nom ?
                    ```
                story_text_2: |
                    ## La commande `{echo}`
                    Si tu veux que l'ordinateur te répète ta réponse, tu peux utiliser la commande `{echo}`. La réponse sera ajoutée à la fin de la phrase, soit dans cet exemple, après Salut.
                example_code_2: |
                    ```
                    {print} Salut !
                    {ask} Quel est ton nom ?
                    {echo} Salut
                    ```
                story_text_3: |
                    ### Exercice
                    Essaie les commandes `{ask}` et `{echo}`. Tout d'abord, complète les espaces vides pour faire fonctionner ce programme.
                    Ensuite pose 2 autres questions avec la commande `{ask}`, après chaque `{ask}` utilise `{echo}` pour afficher la réponse à l'écran.
                example_code_3: |
                    ```
                    _ Comment vas-tu ?
                    _
                    ```
            2:
                story_text: |
                    ## La commande `{ask}`
                    Maintenant que l'on peut utiliser les **variables** dans nos codes, la commande `{echo}` n'est plus utile.
                    On peut utiliser les variables pour stocker les réponses à nos questions et ainsi utiliser la réponse à plusieurs questions dans nos codes.
                    Fais un essai :

                    De cette façon ton code devient interactif !
                example_code: |
                    ```
                    nom {is} {ask} Quel est ton nom ?
                    {print} Bonjour nom
                    âge {is} {ask} Quel âge as-tu ?
                    {print} nom a âge ans.
                    ```
                story_text_2: |
                    ### Exercice
                    Dans l'onglet précédent, tu t'es entraîné à attribuer des valeurs aux variables avec la commande `{is}`.
                    Tu as créé au moins 3 variables et les a utilisées avec la commande d'affichage.
                    Maintenant, au lieu de simplement définir les variables, nous voulons les rendre interactives, comme dans l'exemple.

                    Copie le code de l'onglet précédent et rend les variables interactives en utilisant la commande `{ask}`.
                example_code_2: |
                    ```
                    animal_préféré {is} {ask} Quel est ton animal préféré ?
                    {print} J'aime les animal_préféré
                    ```
            13:
                story_text: Le changement final que nous devons faire pour avoir du code Python c'est de remplacer `{ask}` par `{input}`.
                example_code: |
                    ```
                    {print}("Mon nom est hedy !")
                    nom = {input}("quel est ton nom ?")
                    {print}("Ainsi ton nom est ", nom)
                    ```
    calculator:
        name: Calculatrice
        default_save_name: Calculatrice
        description: Créer une calculatrice
        levels:
            7:
                story_text: |
                    Maintenant que tu peux faire des maths, tu peux te faire une calculatrice !
                example_code: |
                    ```
                    nombre_1 = {ask} "Saisir le premier nombre :"
                    nombre_2 = {ask} "Saisir le deuxième nombre :"
                    bonne_réponse = nombre_1 * nombre_2
                    {print} nombre_1 " fois " nombre_2 " fait " bonne_réponse
                    ```
                story_text_2: |
                    ### Exercice
                    La calculatrice ci-dessus calcule les réponses pour toi, mais tu peux aussi faire un programme pour tester tes propres compétences en calcul, comme ceci :
                    Complète les espaces vides pour que ça marche !
                example_code_2: |
                    ```
                    bonne_réponse = 11 * 27
                    réponse = {ask} "Combient font 11 fois 27 ?"
                    {if} réponse {is} _ {print} "bon boulot !"
                    {else} {print} "Faux ! c'était " _
                    ```
                story_text_3: |
                    **Bonus** Tu peux également demander à l'ordinateur de faire des multiplications aléatoirement en utilisant `{random}`.
                example_code_3: |-
                    ```
                    nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    nombre_1 = _
                    nombre_2 = _
                    bonne_réponse = nombre_1 * nombre_2
                    réponse_donnée = {ask} "Combiens font " nombre_1 " fois " nombre_2 " ?"
                    {if} _
                    {else} _
                    ```
            10:
                story_text: |
                    Au niveau 6 tu as créé une calculatrice, à ce niveau, tu peux étendre ce code pour qu'il pose plusieurs questions.

                    ### Exercice
                    Peux-tu terminer la ligne 10 pour faire fonctionner le programme ?

                    ### Exercice 2
                    Donne au joueur ou à la joueuse un retour quand il ou elle répond bien ou mal. Pour y parvenir, étant ton programme avec un `{else}`.
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        nombre1 = nombres {at} {random}
                        nombre2 = nombres {at} {random}
                        bonne_réponse = nombre1 * nombre2
                        {print}"Combien font " nombre1 " fois " nombre2 " ?"
                        tentative = {ask} "Quel est ta réponse ?"
                        {print} "Ta réponse est " tentative
                        {if} _ {is} _
                            score = score + 1
                    {print} "Bon travail ! Ton score est… " score " sur 10 !"
                    ```
            15:
                story_text: |
                    Dans cette aventure, tu vas construire une calculatrice qui va calculer ta note moyenne pour toi. Si tu réussis à faire marcher ta calculatrice, tu peux continuer vers la prochaine aventure, ce qui te permet d'ajouter deux fonctionnalités supplémentaires.

                    ### Exercice 1
                    Remplis les blancs pour faire marcher la calculatrice.
                    * Commence avec la quatrième ligne, ajoute une question pour trouver la note qu'a eu l'étudiant.
                    * Dans la cinquième ligne, tu vas avoir besoin de calculer la somme de toutes les notes, donc total = total + note.
                    * Ensuite, nous devons fixer la valeur de retour. Nous voulons retourner la moyenne, donc le total divisé par le nombre de tests (4).
                    * Enfin, nous achevons le code en appelant la fonction dans la ligne 8.

                    Tu y arrives ? Génial ! Veux-tu ajouter davantage de fonctions à ta calculatrice ? **Cette aventure se poursuit dans l'onglet suivant !**
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
    calculator_2:
        name: Calculatrice 2
        default_save_name: Calculatrice 2
        description: Calculatrice 2
        levels:
            15:
                example_code: |
                    ```
                    # Utilise ton code de l'aventure précédente.
                    ```
    clear_command:
        description: La commande {clear}
        levels:
            4:
                story_text: |
                    C'est le moment d'apprendre une nouvelle commande ! Avec `{clear}` tu peux effacer tout le texte de l'écran d'affichage. De cette manière, tu peux éviter que ton écran ne soit trop rempli de texte.
                    Attention ! Quand tu utilises une commande `{clear}`, il se peut que tu aies besoin d'utiliser un `{sleep}` juste avant. Sinon Hedy effacera ton écran sans te laisser le temps de le lire comme tu peux le voir dans cet exemple !
                example_code: |
                    ```
                    {print} "3"
                    {clear}
                    {print} "2"
                    {clear}
                    {print} "1"
                    {clear}
                    {print} "Attendez..."
                    {sleep} 3
                    {clear}
                    {print} "SURPRISE !"
                    ```
    debugging:
        name: débugage
        default_save_name: débugage
        description: adventure de débugage
        levels:
            1:
                story_text: |-
                    Bienvenue à l'aventure de débugage. Débuguer un code signifie éliminer toutes les erreurs dans le code.
                    Cela signifie que dans ces aventures de débugage, nous allons te montrer du code qui ne marche pas.
                    Tu devras trouver ce qui ne va pas et corriger les erreurs.

                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} J'aime la programmation
                    Aimes-tu la programmation aussi ?
                    {echo}
                    {print} Quels sont tes loisirs ?
                    {echo} Tes loisirs sont
                    ````
            2:
                story_text: |-
                    Bienvenue à l'aventure de débugage. Débuguer un code signifie éliminer toutes les erreurs dans le code.
                    Cela signifie que dans ces aventures de débugage, nous allons te montrer du code qui ne marche pas.
                    Tu devras trouver ce qui ne va pas et corriger les erreurs.

                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    destination {ask} Où vas-tu partir en vacances ?
                    {print} L'avion pour dstination décolle à 15h00
                    {ask} as-tu déjà enregistré tes bagages ?
                    {echo}
                    {print} Permets-moi d'imprimer ta carte d'embarquement.
                    {sleep}
                    Voila ! Fait un bon voyage !
                    ```
            3:
                story_text: |-
                    Bienvenue à l'aventure de débugage. Débuguer un code signifie éliminer toutes les erreurs dans le code.
                    Cela signifie que dans ces aventures de débugage, nous allons te montrer du code qui ne marche pas.
                    Tu devras trouver ce qui ne va pas et corriger les erreurs.

                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggué !**
                    ```
                    choix_films {is} dracula, fast and furious, maman j'ai raté l'avion, barbie
                    film_choisi {is} films {at} {random}
                    {print} Ce soir nous allons regarder film_choisi
                    aime {ask} aimes-tu ce film ?
                    {print} Demain, nous regarderons autre chose.
                    {add} film_choisi {to_list} choix_films
                    {print} Demain nous regarderons film_pour_demain
                    film_pour_demain {is} choix_films {at} {random}
                    Je vais chercher le popcorn ! {print}
                    ```
            4:
                story_text: |-
                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} "Bienvenue à la bibliothèque en ligne !
                    {ask} Quel genre de livre aimes-tu ?
                    {print} Tu aimes le genre
                    nom {is} {ask} "Quel est ton auteur ou ton autrice préférée ?"
                    {print} "C'est nom que tu préfères"
                    {print} Hmmm… je pense que tu devrais essayer de lire… livres {at} {random}
                    ```
            6:
                story_text: |-
                    ### Exercice
                    Débug ce code. Bonne chance !
                example_code: |
                    **Attention ! Ce code doit être débuggé !**
                    ```
                    {print} Bienvenue à la piscine Hedy !
                    cours {is} {ask} "Es-tu ici pour un cours de natation ?"
                    {if} cours oui
                    {print} "Génial ! Tu as cours !
                    {print} {else} "Tu n'as pas cours"
                    réduction {is} {ask} "As-tu un code de réduction ?"
                    {if} réduction {is} oui
                    réponse_reduction {is} {ask} "Quel est ton code de réduction ?"
                    codes_reduction = Senior4231, élève8786, NouveauMembre6709
                    {if} réponse_reduction {is} {in} codes_reduction
                    {print} "Ça fera 3,50 €"
                    {else} "Ça fera 5,50 €"
                    {print} "Bonne baignade !"
                    ```
    dice:
        name: Dé
        default_save_name: Dé
        description: Fais ton propre dé
        levels:
            3:
                story_text: |
                    À ce niveau, nous pouvons choisir dans une liste. Avec ça, nous pouvons demander à l'ordinateur de choisir une face d'un dé.
                    Regarde dans les jeux que tu as dans ton placard à la maison.
                    Y a-t-il des jeux avec un dé (spécial) ? Tu peux refaire ce dé avec ce code.
                    Par exemple, le dé du jeu Earthworms avec les chiffres de 1 à 5 et un ver de terre sur la dernière face.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    choix {is} 1, 2, 3, 4, 5, ver de terre
                    {print} Tu as obtenu un _ {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Le dé de l'exemple ci-dessus est le dé d'un jeu en particulier. Peux-tu faire un dé normal ?
                    Ou le dé spécial d'un autre jeu ?
                example_code_2: |
                    ```
                    choix {is} _
                    ```
            4:
                story_text: |
                    À ce niveau, tu peux aussi créer un dé. Mais cette fois, tu peux essayer par toi-même sans exemple de code !

                    ### Exercice
                    Fais ton propre dé à ce niveau.
                    Astuce : si tu manques d'idée sur comment faire un dé. Jette un œil au dé que tu as fait au niveau d'avant, mais n'oublie pas d'ajouter les guillemets.
            5:
                story_text: |
                    Nous allons ajouter les commandes `{if}` et le `{else}` à notre dé !

                    ## Exercice
                    Complète le code exemple pour qu'il dise « Tu peux arrêter de lancer » une fois que tu as obtenu un ver de terre.
                example_code: |
                    ```
                    choix {is} 1, 2, 3, 4, 5, ver
                    lancé {is} choix {at} {random}
                    {print} "Tu as obtenu un " lancé
                    _ lancé {is} ver {print} "Tu peux arrêter de lancer."
                    _ {print} "Tu dois relancer !"
                    ```
            7:
                story_text: |
                    Tu peux aussi faire à nouveau un dé Earthworm a ce niveau-ci, mais maintenant tu peux aussi calculer combien de points tu as obtenu.
                    Tu sais peut-être que le ver vaut pour 5 points. Donc, après un lancé, tu peux immédiatement calculer combien de points tu as totalisé.
                    Voici le code pour calculer les points avec un seul dé :

                    ### Exercice
                    Peux-tu faire le code pour totaliser le score de 8 dés ? Pour faire ça, tu dois copier et coller certaines des lignes de code.
                example_code: |
                    ```
                    choix = 1, 2, 3, 4, 5, ver
                    points = 0
                    lancé = choix {at} {random}
                    {print} "Tu as obtenu " lancé
                    {if} lancé {is} ver points = points + 5 {else} points = points + lancé
                    {print} "Cela fait un total de " points " points"
                    ```
                example_code_2: |
                    As-tu réussi à calculer le score pour 8 dés ? Cela nécessite beaucoup de copier-coller, n'est-ce pas ? Nous allons rendre ça plus facile au niveau 7 !
            8:
                story_text: |
                    Tu peux aussi faire encore un dé à ce niveau. Avec le code `{repeat}` tu peux facilement jeter une pleine poignée de dés.

                    ### Exercice
                    Essaie de terminer le code d'exemple !  **Bonus** Pense à un jeu que tu connais qui nécessite un dé et programme-le en utilisant un `{repeat}`.
                example_code: |
                    ```
                    choix = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            11:
                story_text: |
                    ### Exercice
                    Est-ce que quelqu'un met trop de temps pour lancer les dés ? À ce niveau, tu peux demander à Hedy de lancer tous les dés en même temps !
                    Change les noms par les noms de tes amis ou de ta famille, et termine le code pour qu'ils fassent tous un lancer.
                example_code: |
                    ```
                    joueurs = Anne, Jean, Jeanne
                    choix = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} joueur " obtient un " choix {at} {random}
                        {sleep}
                    ```
    dishes:
        name: Vaisselle ?
        default_save_name: Vaisselle
        description: Utilisez l'ordinateur pour voir qui fait la vaisselle
        levels:
            3:
                story_text: |
                    Est-ce que tu n'es jamais d'accord, à la maison, de qui doit laver la vaisselle ou changer la litière du chat ?
                    Alors, tu peux demander à l'ordinateur de choisir très équitablement. Voilà ce que tu peux programmer à ce niveau !
                example_code: |
                    ```
                    personnes {is} maman, papa, Emma, Sophie
                    {print} personnes {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Fait ta propre version du programme lave-vaisselle. Commence par faire la liste des membres de ta famille.
                    Ensuite, pense à une tâche qui doit être faite, et demande à l'ordinateur de décider qui doit faire la tâche avec la commande `{at} {random}`.

                    **Bonus** Pas envie de faire la vaisselle ? Hack le programme en retirant ton nom de la liste avec la commande `{remove}` `{from}`.
            4:
                story_text: |
                    Avec les guillemets, tu peux rendre le programme de la vaisselle encore mieux.

                    ### Exercice
                    D'abord, remplace les blancs avec les bons symboles ou commandes pour que cet exemple fonctionne.
                    As-tu saisi ? Génial ! Maintenant, copie le code que tu as fait au niveau précédent et fais le fonctionner à ce niveau en ajoutant les guillemets aux bons endroits.
                example_code: |
                    ```
                    personnes {is} maman, papa, Emma, Sophie
                    {print} _ la vaisselle sera faite par _
                    {sleep}
                    {print} personnes {at} _
                    ```
            5:
                story_text: |
                    Avec le `{if}` tu peux maintenant t'amuser à faire des choix dans ton programme. Tu peux faire que ton programme réponde au choix fait par l'ordinateur.
                    ### Exercice
                    Peux-tu finir le code pour qu'il affiche « pas de bol » quand c'est ton tour et sinon « yes ! » ?
                    N'oublie pas les guillemets !
                example_code: |
                    ```
                    personnes {is} maman, papa, Emma, moi
                    laveur {is} personnes {at} {random}
                    _ laveur {is} moi {print} _ pas de bol, je dois faire la vaisselle _
                    _ {print} "Quelle chance, pas de vaisselle parce que " _ " est en train de la faire"
                    ```
            7:
                story_text: |
                    Combien de fois chaque personne va faire la vaisselle ? est-ce équitable ? Tu peux le compter à ce niveau.
                example_code: |
                    ```
                    personnes = maman, papa, Emma, Sophie
                    vaiselles_emma = 0
                    personne_désignée = personnes {at} {random}
                    {print} "La personne désignée pour faire la vaisselle est " personne_désignée
                    {if} personne_désignée {is} Emma vaiselles_emma = vaiselles_emma + 1
                    {print} "Emma fera " vaiselles_emma " fois la vaiselle cette semaine "
                    ```

                    Maintenant, tu peux copier les lignes 3 à 5 quelques fois (e.g. 7 fois) pour calculer pour la semaine entière.
                    As-tu fait le code pour la semaine entière ?
                story_text_2: |
                    Si tu as vraiment beaucoup de malchance, le programme précédent pourrait te choisir pour toute la semaine ! Ce n'est pas juste !
                    Pour faire un système équitable, tu peux utiliser la commande `{remove}` pour supprimer la personne choisie de la liste. De cette façon tu ne seras pas obligé de faire la vaisselle une fois de plus tant que tout le monde n'aura pas eu son tour.

                    Lundi et mardi ont déjà été faits pour toi ! Peux-tu ajouter le reste de la semaine ?
                    Et… peux-tu trouver la solution pour quand la liste est vide ?
                example_code_2: |
                    ```
                    personnes = maman, papa, Emma, Sophie
                    personne_désignée = personnes {at} {random}
                    {print} "Lundi la vaiselle sera faite par " personne_désignée
                    {remove} personne_désignée {from} personnes
                    personne_désignée = personnes {at} {random}
                    {print} "Mardi la vaiselle sera faite par " personne_désignée
                    {remove} personne_désignée {from} personnes
                    ```
            8:
                story_text: |
                    Avec le `{repeat}` tu peux répéter des morceaux de code. Tu peux l'utiliser pour calculer qui fera la vaisselle plusieurs jours à l'avance !
                    ### Exercice
                    Utilise la commande `{repeat}`pour décider qui devra faire la vaiselle pour une semaine entière. Chaque espace vide doit être remplacé par une commande ou un nombre !
                    **Bonus** Peux-tu penser à d'autres taches à la maison ? Adapte le code pour qu'il décide pour trois autres corvées de ménage. N'oublie pas d'affiche quelle tache est concernée !
                example_code: |
                    ```
                    personnes = maman, papa, Emma, Sophie
                    {repeat} _ _ {print} "La vaisselle sera faite par " _ _ _
                    ```
            11:
                story_text: |
                    À ce niveau, tu peux faire le programme d'une semaine entière d'une façon plus simple !

                    ### Exercice
                    Ajoute une deuxième corvée, comme passer l'aspirateur ou ranger, et assure-toi qu'elle est aussi répartie sur toute la semaine.
                    <br>**Bonus** Le programme n'est pas équitable, tu pourrais jouer de malchance et faire la vaisselle toute la semaine. Comment pourrais-tu modifier le programme pour le rendre plus juste ?
                example_code: |
                    ```
                    jours = Lundi, Mardi, Mercredi, Jeudi, Vendredi, Samedi, Dimanche
                    noms = maman, papa, Emma, Sophie
                    {for} jour {in} jours
                        {print} jour ", la vaisselle sera faite par " noms {at} {random}
                    ```
    elif_command:
        levels:
    for_command:
        default_save_name: pour
        description: La commande {for}
        levels:
            11:
                story_text: |-
                    ## `{for}`
                    Dans ce niveau, nous apprenons une nouvelle commande appelée `{for}`. Avec `{for}`, tu peux répéter quelque chose pour tous les éléments d'une liste.
                    La commande `{for}` crée un bloc, comme `{repeat}` et `{if}`. Il faut donc ajouter 4 espaces devant toutes les lignes du bloc.
                example_code: |
                    ```
                    animaux = chiens, chats, méduses
                    {for} animal {in} animaux
                        {print} "J'aime les " animal
                    ```
    fortune:
        name: La voyante
        default_save_name: La voyante
        description: Demandons à Hedy de prédire le futur
        levels:
            1:
                story_text: |
                    As-tu déjà été à une fête foraine et eu ton futur prédit par une voyante ? Ou as-tu déjà joué avec une boule de cristal ?
                    Alors tu sais probablement qu'elles ne peuvent pas réellement prédire ton futur, mais que c'est quand même amusant d'y jouer !

                    Dans les niveaux à venir tu pourras apprendre comment créer ta propre machine à prédire l'avenir.
                    Au niveau 1 tu peux commencer en douceur en laissant Hedy se présenter elle-même comme une voyante qui `{echo}` les réponses qu'on lui donne.
                    Comme ceci :
                example_code: |
                    ```
                    _ Bonjour, je suis Hedy la voyante
                    _ Qui es-tu ?
                    _ Laisse-moi regarder dans ma boule de cristal
                    _ Je vois… Je vois…
                    _ Ton nom est
                    ```
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation et complète les espaces vides pour faire marcher le code.
                    **Bonus** Change le code pour que la voyante prédise non seulement ton nom, mais aussi ton âge, ton équipe de sport favorite ou quelque chose d'autre à ton sujet.
            3:
                story_text: |
                    Au niveau précédent, tu as créé ta première machine de voyance, mais Hedy ne pouvait pas vraiment prédire quelque chose, seulement répéter avec la commande `{echo}`.
                    À ce niveau, tu peux utiliser une variable et la commande `{at} {random}` pour vraiment laisser Hedy choisir une réponse pour toi. Prends ce code par exemple :
                example_code: |
                    ```
                    {print} Je suis Hedy la voyante
                    question {is} {ask} Que veux-tu savoir ?
                    {print} Voici ce que tu veux savoir : question
                    réponses {is} oui, non, peut-être
                    {print} Ma boule de cristal dit...
                    {sleep} 2
                    {print} réponses {at} {random}
                    ```
                story_text_2: |
                    ### Exercice
                    Bon, Hedy peut seulement répondre oui, non ou peut-être. Peux-tu donner à Hedy plus de réponses possibles, comme « certainement », ou « peux-tu répéter la question ? ».
            4:
                story_text: |
                    ### Exercice
                    Nous avons retiré toutes les guillemets de cet exemple, peux-tu les remettre partout où c'est nécessaire ?

                    ### Exercice 2
                    Retourne au niveau précédent et copie ton code de la voyante. Fais fonctionner le code dans ce niveau en ajoutant les guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Je suis Hedy la voyante !
                    question {is} {ask} Que voudrais-tu savoir ?
                    {print} Voici ta question : question
                    réponses {is} oui, non, peut-être
                    {print} Ma boule de cristal dit…
                    {sleep} 2
                    {print} réponses {at} {random}
                    ```
            6:
                story_text: |
                    ### Exercice
                    Dans l'exemple tu peux voir comment faire pour que le programme de la voyante te permette de faire pencher la balance en ta faveur. Ce programme triche et te dit toujours que tes amis ont gagné à la loterie, alors que les inconnues ne gagneront jamais.

                    Utilise ça pour faire ton propre programme, soit une personne créative ! Par exemple, peux-tu créer un code qui prédit que :
                    * Ton équipe préférée va gagner tous ses matches !
                    * Ton film préféré sera choisi pour la nuit du cinéma !
                    * Tu gagnes des tickets pour aller voir ton spectacle préféré !
                    * Tu es la plus belle de toutes, comme le dit le miroir magique de Blanche-Neige.
                    Laisse ton imagination faire le travail !

                    Ton programme doit avoir au moins 10 lignes de code et doit avoir au moins une commande `{if}` et `{else}`.
                example_code: |
                    ```
                    amis {is} Jonathan, Lucile, David
                    {print} "Je peux prédire si tu vas gagner à la loterie demain !"
                    personne {is} {ask} "Qui es-tu ?"
                    bonnes_réponses {is} Hourra ! Tu as gagné !, Tu vas certainement gagner !, Nous avons un gagnant !
                    mauvaises_réponses {is} Pas de chance ! Essaye encore !, C'est une autre personne qui gagnera, Tu as perdu !
                    {if} personne {in} amis {print} bonnes_réponses {at} {random}
                    {else} {print} mauvaises_réponses {at} {random}
                    ```
            7:
                story_text: |
                    À ce niveau tu peux utiliser les maths dans tes prédictions en tant que voyante. Cela te permettra de fabriquer de (folles) formules pour calculer le futur.
                    Par exemple, tu pourrais calculer ta future fortune ou combien d'enfants tu auras quand tu seras une grande personne.



                    ### Exercice
                    Peux-tu imaginer ta propre machine (folle) de voyance ?
                example_code: |
                    ```
                    {print} "Je suis Hedy la voyante !"
                    {print} "Je peux prédire combien tu auras d'enfants quand tu seras une grande personne !"
                    âge = {ask} "Quel âge as-tu ?"
                    frères_et_soeurs = {ask} "Combien as-tu de frères et soeur ?"
                    hauteur = {ask} "Combien mesures-tu en centimètres ?"
                    enfants = hauteur / âge
                    enfants = enfants - frères_et_soeurs
                    {print} "Tu auras…"
                    {sleep}
                    {print} enfants " enfants !"
                    ```
            8:
                story_text: |
                    ### Exercice
                    Termine ce programme qui te dit si la personne que tu aimes t'aime aussi en retour ou pas.
                example_code: |
                    ```
                    {print} "J'ai une fleur avec des pétales magiques"
                    {print} "Si tu détaches les pétales, la fleur te dira si la personne que tu aimes t'aime en retour"
                    quantité = {ask} "Combien de pétales veux-tu détacher ?"
                    réponses = elle t'aime, elle ne t'aime pas
                    _ _ _ _ réponses {at} {random}
                    ```
            9:
                story_text: |
                    Avec l'exemple suivant, tu peux faire demander à la voyante plusieurs questions et les afficher !

                    ### Exercice
                    Peux-tu remplire les espaces vides avec les bonnes commande ?
                example_code: |
                    ```
                    {print} "Je suis Hedy la voyante !"
                    {print} "Tu peux me poser 3 questions."
                    réponses = oui, non, peut-être
                    _ _ _
                        question = {ask} "Que veux-tu savoir ?"
                        {print} question
                        {sleep}
                        {print} "Ma boule de cristal dit… " réponses {at} {random}
                    ```
            11:
                story_text: |
                    À ce niveau, tu vas apprendre comment programmer le jeu MASH. Dans ce jeu, tu peux prédire pour tous les joueurs, quel sera leur avenir.

                    ### Exercice
                    Complète l'espace vide en utilisant la nouvelle commande que tu viens d'apprendre à ce niveau.
                example_code: |
                    ```
                    habitations = un manoir, un appartement, une cabane, une maison
                    amours = personne, une célébrité, son voisin, son véritable amour
                    annimaux = chien, chat, éléphant
                    noms = Jeanne, Salomon, Mohamed
                    _
                        {print} nom " habitera " habitations {at} {random}
                        {print} nom " se marira avec " amours {at} {random}
                        {print} nom " aura un " annimaux {at} {random} " comme animal de compagnie"
                        {sleep}
                    ```

    functions:
        name: fonctions
        default_save_name: fonctions
        description: fonctions
        levels:
            12:
                story_text: |
                    À ce niveau, tu vas apprendre comment utiliser les **fonctions**. Une fonction est un bloc de code que tu peux facilement réutiliser. Utiliser les fonctions nous aide à organiser du code que nous pouvons réutiliser encore et encore.
                    Pour créer une fonction, utilise `{define}` et donne un nom à la fonction. Ensuite, ajoute toutes les lignes que tu veux dans la fonction dans un bloc indenté, sous la ligne du `{define}`.
                    Laisse une ligne vide après le bloc pour rendre ton code beau et propre. Bon travail ! tu as créé une fonction !

                    Maintenant, quand nous aurons besoin de ce bloc de code, nous pourrons juste appeler la fonction avec `{call}` suivi du nom de la fonction ! Nous n'aurons plus besoins d'écrire ce bloc a nouveau.

                    Regarde cet exemple de code du jeu Twister. La fonction « joue_un_tour » contient un bloc de code qui choisi quel membre doit aller où.

                    ### Exercice
                    Termine ce code en complétant les lignes des deux variables `membre_choisi` et `couleur_choisi`.
                    Ensuite, choisi combien de fois tu veux appeler la fonction pour faire des tours de Twister.

                    ### Exercice 2
                    Améliore ton code en ajoutant une variable « personnes ». Utilise la variable pour distribuer aux joueurs et joueuses leur instruction de jeu personnelle.
                    Par exemple : « Ahmed, main droit`{define}`e sur vert » ou « Jessica, pied gauche sur jaune ».
                example_code: |
                    ```
                    cotés = "gauche", "droit(e)"
                    membres = "main", "pied"
                    couleurs = "rouge", "bleu", "vert", "jaune"

                    {define} joue_un_tour
                        coté_choisi = cotés {at} {random}
                        membre_choisi = membres _
                        couleur_choisie = couleurs _
                        {print} membre_choisi " " coté_choisi " sur " couleur_choisie

                    {print} "Jouons au Twister !"
                    {for} i {in} {range} 1 to _
                        {call} joue_un_tour
                        {sleep} 2
                    ```
    guess_my_number:
        name: Devine le nombre
        default_save_name: devine le nombre
        description: devine le nombre
        levels:
    harry_potter:
        description: Les aventures d'Harry Potter
        levels:
            11:
                story_text: |
                    ### Exercice
                    On peut aussi faire une voyante sur le thème de Harry Potter. Complète les espaces vides pour écrire 9 lignes de prédictions.
                    **Bonus** Donne un autre sujet à la voyante, comme ton livre préféré, un film ou une émission de télé.
                example_code: |
                    ```
                    maisons = Gryffondor, Serpentard, Poufsouffle, Serdaigle
                    sujets = potions, défense contre les forces du mal, charmes, transfiguration
                    peurs = Voldemort, les araignées, d'échouer à son examen de BUSE
                    noms = Harry, Ron, Hermione
                    _
                    _ {print} nom ' est membre de ' maisons {at} {random}
                    _ {print} nom ' est fort en ' sujets {at} {random}
                    _ {print} "La plus grande peur de " nom " est " peurs {at} {random}
                    ```
    haunted:
        name: La maison hantée
        default_save_name: La maison hantée
        description: Échappe-toi de la maison hantée
        levels:
            1:
                story_text: |
                    Dans cette aventure, tu vas essayer de faire un jeu dans lequel tu dois t'échapper d'une maison hantée en choisissant la bonne porte.
                    Si tu choisis la bonne porte, tu survivras, sinon un terrible monstre pourrait…

                    Au premier niveau, on commence notre jeu de la maison hantée en créant une histoire d'épouvante et en demandant à la joueuse ou au joueur quel monstre doit apparaître dans cette maison.
                example_code: |
                    ```
                    {print} Qu'est-ce que je fais ici ?
                    {print} Je me souviens de mon ami me disant d'entrer dans ce vieux manoir…
                    {print} et soudain, tout est devenu noir.
                    {print} Mais comment est-ce que j'ai atterri sur le sol… ?
                    {print} Ma tête me fait mal comme si j'avais pris un coup de batte de baseball !
                    {print} Quel est ce bruit ?
                    {print} Oh non ! J'ai l'impression qu'il n'y a pas que moi dans cette maison !
                    {print} Il faut que je m'échappe d'ici !
                    {print} Il y a 3 portes devant moi…
                    {ask} Quel porte choisis-tu ?
                    {echo} Je choisis la porte
                    {print} … ?
                    ```
                story_text_2: |
                    ### Exercice
                    Copie le code d'exemple dans la zone de programmation en cliquant sur le bouton jaune.
                    Maintenant finis l'histoire en ajoutant au moins 5 lignes de code.
                    Rappelle-toi de commencer chaque ligne de code avec la commande `{print}`.
            2:
                story_text: |
                    Dans cette maison hantée tu peux choisir tes monstres avec des emojis. Bien sûr tu peux aussi utiliser des mots.
                example_code: |
                    ```
                    monstre_1 {is} 👻
                    monstre_2 {is} 🤡
                    monstre_3 {is} 👶
                    {print} Tu entres dans la maison hantée.
                    {print} Soudain, tu vois un monstre_1
                    {print} Tu cours dans une autre pièce…
                    {print} Mais un monstre_2 t'y attend !
                    {print} Oh non ! Sauve-toi dans la cuisine.
                    {print} Mais, alors que tu y entres, monstre_3 t'attaque !
                    ```
                story_text_2: |
                    ### Exercice
                    Dans l'exemple ci-dessus, les monstres sont prédéterminés. Donc, à chaque fois que tu exécutes ton code, l'histoire est la même
                    Peux-tu ajouter la commande `{ask}` pour rendre la maison hantée interactive et permettre au joueur de choisir les montres qu'il rencontre ?
                example_code_2: |
                    ```
                    monstre_1 {is} _
                    monstre_2 {is} _
                    monstre_3 {is} _
                    {print} Tu entres dans la maison hantée.
                    {print} Soudain, tu vois un monstre_1
                    {print} Tu cours dans une autre pièce…
                    {print} Mais un monstre_2 t'y attend !
                    {print} Oh non ! Sauve-toi dans la cuisine.
                    {print} Mais, alors que tu y entres, monstre_3 t'attaque !
                    ```
            3:
                story_text: |
                    Au niveau précédent, nous avons écrit une introduction à ton jeu de maison hantée, mais comme tu l'as peut-être remarqué, l'histoire avait toujours la même fin horrible.
                    À ce niveau, tu peux rendre ton histoire plus interactive en changeant l'issue du jeu ; parfois tu te feras manger, parfois tu réussiras à t'échapper !
                    Laissons Hedy décider aléatoirement !

                    ## Exercice
                    Copie l'exemple de code et rempli les espace vide pour le faire marcher !

                    **Bonus** Cette histoire est assez simple, tu peux peut-être la rendre un peu effrayante en racontant plus de choses.
                    Et aussi, les fins possibles sont pour l'instant très limitées, il n'y a que 3 options possibles pour ce qui est derrière la porte. Peut-être peux-tu ajouter de nouveaux monstres à la liste !
                example_code: |
                    ```
                    _ Comment sortir de la maison hantée ?
                    _ Il y a trois portes devant toi…
                    _ _ _ Quelle porte choisis-tu ?
                    _ Tu as choisi la porte… choix
                    monstres _ un zombie, un vampire, RIEN DU TOUT ET TU T'ÉCHAPPES PAR LA SORTIE
                    _ Tu vois…
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    Dans ce niveau, tu vas apprendre comment utiliser les guillemets dans tes jeux.

                    ### Exercice
                    Peux-tu écrire ta maison hantée pour le niveau 4 ?

                    ### Exercice 2
                    Reviens au niveau précédent et copie ton code de la maison hantée. Fais fonctionner le code dans ce niveau en ajoutant des guillemets aux bons endroits.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Echappe toi de la maison hantée !
                    {print} Il y a 3 portes devant toi…
                    choix {is} {ask} Quelle porte choisis-tu ?
                    {print} Tu as choisi la porte… choix
                    monstres {is} un zombie, un vampire, RIEN DU TOUT ET TU T'ÉCHAPPES PAR LA SORTIE
                    {print} Tu vois...
                    {sleep}
                    {print} monstres {at} {random}
                     ```
            5:
                story_text: |
                    Jusqu'à ce niveau, le jeu de la maison hantée demandait au joueur de choisir une porte, mais, comme tu l'as peut-être remarqué, il n'était pas vraiment obligé de répondre correctement.
                    Si le joueur donnait une réponse complètement au hasard, le jeu continuait de fonctionner et le joueur pouvait même gagner (sans même avoir choisi une porte).
                    À ce niveau, tu ne peux gagner qu'en choisissant la même porte que celle choisie par Hedy au hasard.
                example_code: |
                    ```
                    {print} "Échapes toi de la maison hantée !"
                    {print} "Il y a 3 portes devant toi…"
                    portes {is} 1, 2, 3
                    monstre {is} un loup-garou, ta maman, un vampire, un zombie
                    porte_choisie {is} {ask} "Quelle porte choisis-tu ?"
                    {print} "Tu as choisi la porte " porte_choisie
                    {sleep}
                    porte_correcte {is} portes {at} {random}
                    _ _ _ _ {print} "Bravo ! Tu t'échappes"
                    {else} {print} "Tu as été mangé par… " monstre {at} {random}
                    ```
            10:
                story_text: |
                    À ce niveau tu peux utiliser l'imbrication, ce qui te permet de rendre la maison hantée encore plus interactive !

                    ### Exercice
                    Maintenant, c'est vraiment dur de gagner à ce jeu. Pourrais-tu le rendre plus facile à gagner ?
                    Change ton code pour qu'il n'y ai qu'une seule mauvaise porte et deux bonnes plutôt qu'une correcte et deux mauvaises.
                    Indice : il te faudra changer la variable `bonne_porte` en `mauvaise_porte`, et échanger les blocs du `{if}` et du `{else}`.
                example_code: |
                    ```
                    {print} "S'échapper de la maison hantée !"
                    santé = vivant
                    portes = 1, 2, 3
                    monstres = un zombie, un vampire, une araignée géante
                    {repeat} 3 {times}
                        {if} santé {is} vivant
                            bonne_porte {is} portes {at} {random}
                            {print} "Il y a trois portes devant toi…"
                            porte_choisie = {ask} "Quelle porte choisis-tu ?"
                            {if} porte_choisie {is} bonne_porte
                                {print} "Aucun monstre ici !"
                            {else}
                                {print} "Tu est mangé par " monstres {at} {random}
                                santé = mort
                        {else}
                            {print} "GAME OVER"
                    {if} santé {is} vivant
                        {print} "Génial ! tu as survécu"
                    ```
    hotel:
        name: hôtel
        default_save_name: hôtel
        description: hôtel
        levels:
            15:
                story_text: |
                    Dans l'aventure précédente, vous avez appris à utiliser un argument dans une fonction et à le combiner avec un {ask}.
                    Vous vous êtes peut-être demandé pourquoi vous utiliseriez des fonctions, car les fonctions de l'exemple ne représentaient qu'une seule ligne de code.
                    Nous allons maintenant vous montrer à quoi ressemble une fonction plus grande et nous utiliserons également plusieurs arguments. Vous verrez à quel point il est préférable d’utiliser une fonction une fois qu’elle devient plus grande.
                    Voici un exemple de fonction avec des arguments combinés avec des commandes {ask}.
    if_command:
        description: Introduction à la commande `{if}`
        levels:
            5:
                story_text: |
                    ## Si… sinon…
                    Au niveau 5 il y a quelque chose de nouveau, le `{if}` ! Avec le `{if}` tu peux choisir entre deux options différentes.
                    Ce code écrit « bien » si tu réponds « Hedy » comme nom, et « bouuu ! » si tu réponds quelque chose d'autre.
                    `{ask}` et `{print}` continuent de fonctionner de la même manière qu'au niveau 4.
                example_code: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien" {else} {print} "bouu !"
                    ```
                story_text_2: |
                    Parfois, le code avec un `{if}` devient vraiment long et ne tient plus très bien sur la ligne.
                    Tu peux écrire le code sur deux lignes en commençant la seconde ligne avec le `{else}` comme ceci :
                example_code_2: |
                    ```
                    nom {is} {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy {print} "bien"
                    {else} {print} "bouuu !"
                    ```
                story_text_3: |
                    ### Exercice
                    Essaye de créer ton propre code avec `{if}` et `{else}`. Tu peux utiliser l'exemple de code si tu veux.
                example_code_3: |
                    ```
                    réponse {is} {ask} "2 + 2 = ?"
                    _ _ _ 4 _ "Bon travail !"
                    _ _ "Non, 2 + 2 = 4"
                    ```
            9:
                story_text: |
                    ## Si… Sinon…
                    Tu as appris à répéter un bloc de ligne de code après une commande `{repeat}`.
                    Maintenant, tu peux aussi utiliser l'indentation pour faire un bloc après une commande `{if}` ou `{else}`.
                    Regarde l'exemple de code.

                    ### Exercice
                    Ajoute une commande `{else}` à l'exemple. Fait un bloc de lignes en utilisant l'indentation. Tu le fais en commençant chaque ligne par 4 espaces.
                example_code: |
                    ```
                    nom = {ask} "Quel est ton nom ?"
                    {if} nom {is} Hedy
                        {print} "Bienvenue Hedy"
                        {print} "Tu peux jouer sur ton ordinateur !"
                    ```
            10:
                story_text: |
                    Dans ce niveau, tu peux aussi mettre une commande `{if}` à l'intérieur d'une autre commande `{if}`.
                example_code: |
                    ```
                    continuer = {ask} "Veux-tu continuer ?"
                    {if} continuer = oui
                        sûr = {ask} "Es-tu sûr ?"
                        {if} sûr {is} oui
                            {print} "Nous allons continuer"
                        {else}
                            {print} "Tu n'es pas sûr"
                    {else}
                        {print} "Tu ne veux pas continuer"
                    ```
    in_command:
        description: Introduction de la commande `{in}`
        levels:
            6:
                story_text: |
                    ## Listes
                    Quand nous voulons vérifier si quelque chose est dans une liste, nous pouvons maintenant utiliser la commande `{in}`.
                    Ce code écrit « joli ! » si tu choisis vert ou jaune, et « bof » sinon.
                example_code: |
                    ```
                    jolies_couleurs {is} vert, jaune
                    couleur_préférée {is} {ask} "Quelle est ta couleur préférée ?"
                    {if} couleur_préférée {in} jolies_couleurs {print} "jolie !"
                    {else} {print} "bof"
                    ```
                story_text_2: |
                    ### Exercice
                    Termine l'exemple de code en remplissant les espace vides avec les commandes que tu as apprises.
                    Quand tu auras fini, essaye de créer ton propre code et utilise une question que tu auras trouvée toi-même.
                example_code_2: |
                    ```
                    animaux {is} chien, vache, mouton
                    réponse {is} {ask} "Quel est ton animal préféré ?"
                    _ réponse _ animaux _ "c'est aussi le mien !"
                    _ _ "mes animaux préférés sont chien, vache et mouton"
                    ```

                    couleur_préférée {is} {ask} "Quelle est ta couleur préférée ?"
                    {if} couleur_préférée {in} jolies_couleurs {print} "jolie !"
                    {else} {print} "bof"
    is_command:
        default_save_name: command_est
        description: Introduction de la commande {is}
        levels:
            2:
                story_text: |
                    ## Les variables
                    Tu peux donner une valeur à un mot avec `{is}`. C'est ce que l'on appelle une **variable**. Dans cet exemple, nous avons défini une variable qui s'appelle « nom » et une variable qui s'appelle « âge ». Tu peux utiliser le mot « nom » n'importe où dans ton code et il sera remplacé par « Hedy », comme ceci :
                example_code: |
                    ```
                    nom {is} Hedy
                    âge {is} 15
                    {print} nom a âge ans
                    ```
                story_text_2: |
                    ### Exercice
                    Il est temps de faire tes propres variables !
                    Dans le code d'exemple, nous avons défini la variable `animal_préféré`. En ligne 1, la variable reçoit une valeur, et en ligne 2 nous avons utilisé la variable dans une commande `{print}`.
                    Pour commencer, termine notre exemple en remplissant l'espace vide avec le nom de ton animal préféré. Ensuite, essaye d'écrire 3 autres codes toi-même. Choisi un nom de variable, donne-lui une valeur avec la commande `{is}`. Ensuite, utilise ta nouvelle variable dans une commande `{print}`, comme dans l'exemple.
                example_code_2: |
                    ```
                    animal_préféré {is} _
                    {print} J'aime les animal_préféré
                    ```
            7:
                story_text: |
                    Nous avons aussi un changement pour l'enregistrement dans une variable ! Tu peux maintenant utiliser `=` à la place de `{is}` quand tu enregistres un mot ou nombre dans une variable, comme ceci :
                example_code: |
                    ```
                    nom = Hedy
                    réponse = 20 + 4
                    ```
    language:
        name: Langage
        description: Pratique des mots dans une langue étrangère
        levels:
            5:
                story_text: |
                    Fait ton propre programme pour t'entraîner à apprendre des mots dans nouvelle langue.

                    ## Exercice
                    Écrit un code plus long en ajourant au moins 3 autres mots à apprendre.

                    **Bonus** Bien sûr, tu peux choisir d'utiliser un autre langage que l'anglais. Tu peux changer ton code pour apprendre le langage que tu veux.
                example_code: |
                    ```
                    {print} "Apprendre l'anglais !"
                    réponse1 {is} {ask} "🐱"
                    {if} réponse1 {is} cat {print} "Formidable !"
                    {else} {print} "Non, chat se dit cat"
                    réponse2 {is} {ask} "🐸"
                    {if} réponse2 {is} frog {print} "Super !"
                    {else} {print} "Non, grenouille se dit frog"
                    ```
    maths:
        description: Introduction des maths
        levels:
            6:
                example_code: |
                    ```
                    {print} "5 plus 5 fait " 5 + 5
                    {print} "5 moins 5 fait " 5 - 5
                    {print} "5 fois 5 fait " 5 * 5
                    {print} "5 divisé par 5 fait " 5 / 5
                    ```
    music:
        name: musique
        default_save_name: musique
        description: Jouez un morceau !
        levels:
            2:
                story_text: |
                    ### Exercise
                    Terminez les chansons ! Nous avons commencé les codes pour certaines mélodies.
                story_text_2: Comme vous pouvez le voir, vous pouvez également utiliser la commande `{sleep}` pour ajouter une petite pause dans la chanson.
            3:
                story_text: |
                    Créez une mélodie aléatoire !

                    ### Exercice
                    L'exemple de code crée une mélodie aléatoire, mais elle est très courte et peu de notes sont utilisées.
                    Ajoutez plus de notes à la liste et créez une mélodie plus longue en copiant la dernière ligne plusieurs fois.
            7:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
    parrot:
        name: Perroquet
        default_save_name: Perroquet
        description: Crée ton propre perroquet en ligne qui te copiera !
        levels:
            1:
                story_text: |
                    Crée ton propre perroquet en ligne qui te copiera !
                example_code: |
                    ```
                    {print} Je suis Hedy le perroquet
                    {ask} quel est ton nom ?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation en cliquant sur le bouton jaune.
                    Fais poser au perroquet une question différente en écrivant quelque chose dans l'espace vide de l'exemple !

                    **Bonus** Tu peux aussi faire poser plusieurs questions au perroquet. Écris plusieurs autres lignes de code à la suite de ce que tu as déjà écrit.
                example_code_2: |
                    ```
                    {print} Je suis Hedy le perroquet
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Au niveau précédent, tu as fait un perroquet qui te répétait. À ce niveau, nous allons faire un perroquet interactif, en utilisant une variable et la commande `{ask}`.
                    Nous allons aussi rendre le perroquet plus vivant en ajoutant des commandes `{sleep}` après les choses qu'il dit.
                example_code: |
                    ```
                    {print} Je suis Hedy le perroquet
                    nom _ _ Quel est ton nom ?
                    {print} nom
                    _
                    {print} coco
                    _
                    {print} nom
                    ```
                story_text_2: |
                    ### Exercice
                    Pour commencer, termine la ligne 2 avec une commande `{is}` et une commande `{ask}`.
                    Ensuite, écrit une commande `{sleep}` aux lignes 4 et 6 pour que le perroquet se calme un petit peu.

                    **Bonus** Peux-tu faire que le perroquet demande plus que ton nom, en ajoutant des lignes de code ?
            3:
                story_text: |
                    Apprend à ton perroquet un nouveau mot avec `{add} {to_list}`.
                    ### Exercice
                    Peux-tu ajouter la commande `{add} {to_list}` pour faire marcher le code ?
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} Entraine ton perroquet !
                    nouveau_mot {is} {ask} Quel mot veux-tu lui apprendre ?
                    _ nouveau_mot _ mots
                    {print} 🧒 Dit nouveau_mot, Hedy !
                    {print} 🦜 mots {at} {random}
                    ```
            4:
                story_text: |
                    À ce niveau nous devons utiliser les guillemets avec les commandes `{ask}` et `{print}`.
                    ### Exercice
                    Complète le code en remplaçant les blancs par des guillemets.
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} _ Entraîne ton perroquet ! _
                    nouveau_mot {is} {ask} _ Quel mot souhaites-tu apprendre au perroquet ? _
                    {add} nouveau_mot {to_list} mots
                    {print} _ 🧒 Dis _ nouveau_mot _, Hedy !_
                    {print} _ 🦜 _ mots {at} {random}
                    ```
            5:
                story_text: |
                    Récompense ton perroquet s'il dit le bon mot !

                    ### Exercice
                    Termine le code en écrivant les 4 commandes qui manquent.
                example_code: |
                    ```
                    mots {is} coco, Hedy
                    {print} "Entraîne ton perroquet !"
                    nouveau_mot {is} {ask} "Quel mot veux-tu lui apprendre ?"
                    {add} nouveau_mot {to_list} mots
                    mot_dit {is} mots {at} {random}
                    {print} "🧒 Dis " nouveau_mot ", Hedy !"
                    {print} "🦜 " mot_dit
                    _ mot_dit {is} nouveau_mot _ "🧒 Bien joué, Hedy ! 🍪"
                    _ _ "🧒 Non, Hedy ! Dis " nouveau_mot
                    ```
    piggybank:
        name: Tirelire
        default_save_name: Tirelire
        description: Compte ton argent de poche !
        levels:
            7:
                story_text: |
                    Dans cette aventure, tu apprendras comment faire une tirelire numérique.

                    ### Exercice
                    Termine le code pour calculer combien d'argent, tu as et pendant combien de temps tu dois économiser pour t'acheter ce que tu veux !
                    Quand tu réponds aux questions, souviens-toi d'utiliser un point et non une virgule pour les nombres décimaux.
                    **Bonus** Peut-être as-tu déjà économisé un peu d'argent ? Déduis-le du montant total que tu devras économiser.
                example_code: |
                    ```
                    {print} "La tirelire numérique"
                    souhait = {ask} "Que veux-tu acheter ?"
                    prix = {ask} "Combien ça coûte ?"
                    économisé = {ask} "Combien d'argent as-tu déjà économisé ?"
                    argent_de_poche = {ask} "Combien d'argent de poche reçois-tu par semaine ?"
                    à_économiser = prix - économisé
                    nombre_semaines = à_économiser / argent_de_poche
                    {print} "Tu pourras acheter " _ " dans " _ " semaines."
                    ```
            15:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Presse une touche
        levels:
            6:
                story_text: |
                    À ce niveau il y a un nouveau mot clé : `{pressed}` !
                    Avec `{pressed}` tu peux utiliser des touches de ton clavier pour contrôler quelles lignes sont jouées.

                    ### Exercice
                    Regarde l'exemple et ajoute une ligne de code de plus qui réagit à une touche.
                example_code: |
                    ```
                    {print} "Voulez-vous une bonne (b) ou une mauvaise (m) fin ?"
                    {if} b {is} {pressed} {print} "Ils vécurent heureux et eurent beaucoup d'enfants ❤️"
                    {else} {print} "Le prince fut mangé par un hippopotame 😭"
                    ```
                story_text_2: |
                    Tu peux aussi associer les commande de la tortue à des touches.

                    ### Exercice
                    Copie les lignes plusieurs fois pour créer une image plus grande.
            8:
                story_text: |
                    Maintenant que tu sais tout sur le `{repeat}`, nous pouvons appuyer sur les touches plusieurs fois.

                    ### Exercice
                    Le code que tu as vu au niveau 5 ne détecte la touche qu'une seule fois. Copie l'exemple et ajoute-lui un `{repeat}` pour que tu puisses appuyer sur les touches plusieurs fois.
            10:
                story_text: |
                    Maintenant que tu sais comment combiner les éléments, tu peux créer un jeu tactile avec `{pressed}`.

                    ### Exercice
                    Termine le code. À chaque fois, une lettre doit être choisie au hasard, qu'il faut appuyer. Tu gagnes un point par bonne réponse, mais deux points sont retirés si tu te trompes.
                    **Bonus** Efface l'écran après chaque lettre, et affiche le score à la fin.
                example_code: |
                    ```
                    points = 0
                    lettre = a, b, c, d, e
                    {repeat} 10 {times}
                        lettre = _ _ _
                        {print} "Presse la touche " letter
                        {if} lettre {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        default_save_name: affiche
        description: Introduction à la commande affiche
        levels:
            1:
                story_text: |
                    ## La commande d'affichage
                    Tu peux afficher du texte à l'écran en utilisant la commande `{print}`.
                example_code: |
                    ```
                    {print} Salut à toi, programmeur/programmeuse !
                    {print} Bienvenue chez Hedy !
                    ```
                story_text_2: |
                    ### Exercice
                    Dans Hedy tu as des exercices pour chaque aventure. Un exercice te permet de t'entraîner aux nouvelles commandes et concepts, et te permet de jouer avec les codes d'exemple.
                    Dans cet exercice, tu verras un espace vide rose. Tu dois écrire quelque chose à la place de cet espace vide pour que ton code fonctionne.

                    Complète l'espace vide en écrivant la commande `{print}` et ajoute cinq autres lignes de code. Chaque ligne doit commencer par la commande `{print}`.
                    Amuse-toi !
                example_code_2: |
                    ```
                    _ Salut !
                    ```
            13:
                story_text: |-
                    Nous sommes arrivés à du code Python réel ! Cela signifie qu'à partir de maintenant, nous devons utiliser les parenthèses avec `{print}` et `{range}`
                    Cela signifie aussi que tu peux utiliser le code Hedy de ce niveau dans n'importe quel environnement Python du moment que tu utilises les commandes en anglais. Si tu ne l'as pas encore fait, tu peux basculer en anglais dans le menu des commandes.
                example_code: |
                    ```
                    {print}('Salut !')
                    {for} i {in} {range}(1, 10):
                        {print}('Ceci est la ligne ', i)
                    ```
                story_text_2: Si tu veux afficher plus d'un élément, tu dois les séparer par une virgule.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}("Il fait ", temperature, " degrés dehors")
                    ```
    quotation_marks:
        name: '"Les guillemets"'
        description: Introduction des guillemets
        levels:
            4:
                story_text: |
                    ## "Les guillemets"
                    Au niveau 4 `{ask}` et `{print}` ont changé.
                    Tu dois mettre le texte que tu veux afficher entre des guillemets.
                    C'est utile, parce que tu peux maintenant afficher tous les mots que tu veux. Même les mots que tu as utilisés pour mémoriser des choses avec `{is}`.
                    La plupart des langages de programmation utilisent aussi des guillemets pour afficher, donc on s'approche un peu plus de la vraie programmation !
                example_code: |
                    ```
                    {print} "Tu as besoins d'utiliser les guillemets à partir de maintenant !"
                    réponse {is} {ask} "Qu'avons nous besoins d'utiliser à partir de maintenant ?"
                    {print} "Nous avons besoins d'utiliser " réponse
                    ```
                story_text_2: |
                    ## Apostrophes
                    Important ! Hedy accepte que tu utilises les guillemets ou les apostrophes pour entourer tes textes. En anglais, on utilise généralement les apostrophes car cela ne pose pas trop de problème, mais en français, cela pose un problème avec, par exemple, « aujourd'hui » ou « s'il vous plait »

                    Astuce : Nous te recommandons d'utiliser les guillemets qui fonctionnent bien dans la plupart des cas.

                    L'exemple montre le problème si tu entoures ton texte avec les apostrophes. Peux-tu le corriger en remplaçant par des guillemets ?
                example_code_2: |
                    ```
                    {print} _ Voici comment ça ne marche pas avec les apostrophes : _
                    {print} 'aujourd'hui je fais du babysitting avec les enfants de ma sœur'
                    {print} 'qu'y a-t-il de plus amusant que ça ?'
                    ```
    random_command:
        description: Introduction de la commande `{at} {random}`
        levels:
            3:
                story_text: |
                    ## Au hasard
                    À ce niveau, tu peux créer une liste avec la commande `{is}`. Tu peux laisser l'ordinateur choisir un élément au hasard dans cette liste. Tu fais ça avec `{at} {random}`
                example_code: |
                    ```
                    animaux {is} chien, chat, kangourou
                    {print} animaux {at} {random}
                    ```
                story_text_2: |
                    Tu peux aussi utiliser la commande `{at} {random}` dans une phrase.
                example_code_2: |
                    ```
                    nourriture {is} part de tarte, part de pizza, salade, crêpe
                    {print} Je vais prendre une nourriture {at} {random} pour le déjeuner.
                    ```
                story_text_3: |
                    ### Exercice
                    Essaie la commande `{at} {random}` en faisant ton propre jeu concours (comme à la télé) où tu choisis une porte ou une valise qui peut contenir le gros lot !
                    Sauras-tu le faire ? Nous avons déjà écrit les premières lignes dans le code d'exemple.
                example_code_3: |
                    ```
                    {print} Le grand jeu concours !
                    {print} Voyez ces 3 valises devant vous…
                    choix {is} {ask} Quelle valise choisissez-vous ?
                    les_prix {is} _
                    _
                    ```
            14:
                example_code_2: |-
                    ```
                    fruit = ["pomme", "banane", "cerise"]
                    {print} fruit[random]
                    ```
    repeat_command:
        description: la commande répète
        levels:
            8:
                story_text: |
                    Le niveau 7 ajoute la commande `{repeat}`. `{repeat}` peut être utilisée pour exécuter une ligne de code plusieurs fois. Comme ceci :

                    ### Exercice
                    Joue avec la commande `{repeat}`. Peux-tu faire la chanson d'anniversaire avec seulement 3 lignes de code à la place de 4 maintenant ?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} "Hedy est amusante !"
                    ```
            9:
                story_text: |
                    À ce niveau, tu peux répéter plusieurs lignes de code avec une seule commande `{repeat}`.
                    Tu le fais en faisant un bloc avec les lignes que tu veux répéter.
                    Pour faire un bloc, tu ajoutes quatre espaces au début de chaque ligne du bloc. C'est ce qu'on appelle une **indentation**.
                    Tu devras indenter même pour créer un bloc d'une seule ligne.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} "Salut tout le monde"
                        {print}"Tout ceci sera répété 5 fois"
                    ```

                        {print} "Bonjour tout le monde"
                        {print} "Ceci sera écrit 5 fois"
            10:
                story_text: |
                    À ce niveau, tu peux non seulement utiliser un bloc de lignes avec `{if}` et `{repeat}`, mais tu peux aussi mettre ces commandes ensemble !
                    Dans l'exemple, tu vois une commande `{if}` dans une commande `{repeat}`. Ça marche aussi à l'inverse, et un `{if}` peut aussi se trouver dans un autre `{if}` et un `{repeat}` dans un autre `{repeat}`.
                    Essaye !
                example_code: |
                    ```
                    {repeat} 3 {times}
                        nourriture = {ask} "Que veux-tu ?"
                        {if} nourriture {is} pizza
                            {print} "bien !"
                        {else}
                            {print} "La pizza c'est meilleur"
                    ```

                        nourriture = {ask} "Que veux-tu ?"
                        {if} nourriture {is} pizza
                            {print} "parfait !"
                        {else}
                            {print} "La pizza c'est meilleur"
    repeat_command_2:
        description: repeat command 2
        levels:
            8:
                story_text: |
                    ## Répète avec d'autres commandes et avec des variables
                    Tu t'es entrainé avec la commande `{repeat}` combinée avec la commande `{print}`. Mais, savais-tu que tu pouvais utiliser d'autres commandes avec `{repeat}` ?
                    L'exemple montre que `{repeat}` peut aussi être utilisée avec une commande `{ask}`, `{if}` ou `{else}`.
                example_code: |
                    ```
                    {repeat} 2 {times} réponse = {ask} "Savais-tu que tu pouvais poser une question plusieurs fois ?"
                    {if} réponse {is} oui {repeat} 2 {times} {print} "Tu le savais déjà !"
                    {else} {repeat} 3 {times} {print} "Tu as appris quelque chose de nouveau !"
                    ```
                story_text_2: |
                    Une autre chose intéressante que tu peux faire avec la commande `{repeat}` est d'utiliser une variable pour indiquer le nombre de fois que quelque chose doit être répété. Dans l'exemple, tu peux voir que nous demandons en premier quel âge a la personne.
                    Ensuite, en ligne 3, le message est répété `âge` fois. Ainsi nous avons utilisé la variable `âge` avec la commande `{repeat}`.
                example_code_2: |
                    ```
                    {print} "Youpi ! C'est ton anniversaire"
                    âge = {ask} "Quel âge as-tu ?"
                    {repeat} âge {times} {print} "Hip Hip Hip Hourra !"
                    ```
            9:
                story_text: |
                    ### C'est dans le bloc ou pas ?
                    À ce niveau, tu dois faire attention à quelles lignes de code doivent être dans le bloc et lesquelles ne doivent pas y être.
                    Par exemple : si tu veux chanter la chanson *Vive le vent*. Tu veux que seule la ligne avec « Vive le vent » soit répétée deux fois.
                    Cela veut dire que les lignes suivantes ne devrait pas démarrer avec une indentation car elles n'appartiennent pas au bloc.
                    Si tu commences les autres lignes avec une indentation, la chanson ne sera plus correcte.

                    ## Exercice
                    Chaque ligne de l'exemple de code commence par un espace vide. Retire les espaces vides et essaye de trouver quelle ligne a besoin d'une indentation et quelle ligne n'en a pas besoin pour faire la chanson de *vive le vent*.
                example_code: |
                    ```
                    _ {print} "Connais-tu la chanson vive le vent ?"
                    _ {repeat} 2 {times}
                    _ {print} "Vive le vent"
                    _ {print} "Vive le vent d'hiver"
                    _ {print} "Qui s'en va sifflant, soufflant"
                    _ {print} "Dans les grands sapins verts, oh !"
                    ```

                        {print} "Cette ligne sera répétée…"
                        {print} "Cette ligne aussi…"
                    {print} "mais celle-ci ne le sera pas !"
    restaurant:
        description: Crée ton propre restaurant virtuel
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux faire ton propre restaurant virtuel et prendre les commandes de tes clients.
                story_text_2: |
                    ### Exercice
                    Copie l'exemple de code dans la zone de programmation en cliquant sur le bouton jaune.
                    Pour commencer, complète avec la bonne commande dans l'espace vide pour faire marcher le code.
                    Ensuite, ajoute au moins 4 lignes de code supplémentaires au programme du restaurant.
                    Demande au client ce qu'il désire boire et demande-lui s'il veut payer en liquide ou avec la carte.
                    Enfin, pense à une façon sympa de dire au revoir à ton client.
                example_code_2: |
                    ```
                    {print} Bienvenu au restaurant Chez Hedy 🍟
                    _ Que voulez-vous commander ?
                    {echo} Ainsi vous voulez commander
                    {print} Merci pour votre commande !
                    {print} C'est bientôt prêt !
                    ```
            2:
                story_text: |
                    Au niveau 2 tu pourrais étendre ton restaurant en utilisant des variables. Au niveau 1, Hedy pouvait seulement `{echo}` les commandes et seulement retenir la dernière chose commandée.
                    Maintenant tu peux utiliser des variables et Hedy peut se rappeler à la fois la nourriture et l'accompagnement !
                example_code: |
                    ```
                    {print} Bienvenue dans le restaurant Chez Hedy !
                    {print} Aujourd'hui, nous avons pizza ou lasagnes.
                    nourriture {is} {ask} Que désirez-vous manger ?
                    {print} Très bon choix ! nourriture est mon choix préféré
                    accompagnement {is} {ask} Désirez-vous des frites ou de la salade avec ça ?
                    {print} nourriture avec accompagnement sont en route !
                    ```
                story_text_2: |
                    ### Exercice
                    Copie ton code du restaurant du niveau précédent dans la zone de programmation ci-dessous.
                    Corrige le code en remplaçant les commandes `{ask}` et `{echo}` et en utilisant des variables comme tu viens de l'apprendre à ce niveau.

                    Maintenant que ton code fonctionne à nouveau, c'est le moment d'ajouter quelquechose en plus.
                    Regarde la dernière ligne du code d'exemple : `{print} nourriture avec accompagnement sont en route !`
                    Dans cette simple ligne, deux variables ont été utilisés pour créer un résumé de la commande.
                    Maintenant ajoute ton propre résumé de la nourriture et de la boisson commandé par le client.

                    **Bonus** Maintenant que tu as appris comment utiliser les variables, tu peux utiliser autant de variables sur une ligne que tu le désires. Peux-tu ajouter plus de variables dans ton code, pour demander « sur place » ou « à emporter », « en liquide » ou « en carte », « avec ou sans paille », etc. ?
            3:
                story_text: |
                    As-tu du mal à décider ce que tu voudrais manger pour dîner ? Tu peux laisser Hedy décider pour toi !
                    Ajoute simplement une liste de tes plats préférés (ou ceux que tu détestes le plus) et Hedy pourra choisir ton dîner pour toi.
                    Tu peux aussi t'amuser, en laissant Hedy choisir, en plus, le prix de ton repas ! Que vas-tu obtenir ?
                example_code: |
                    ```
                    plats {is} spaghetti, choux de Bruxelles, Hamburgers
                    {print} Ce soir, tu mangeras des plats {at} {random} !
                    prix {is} 1 euro, 10 euros, 100 euros
                    {print} Ça fera prix {at} {random} s'il te plait.
                    ```
                story_text_2: |
                    ### Exercice
                    Maintenant, fais ta propre version du restaurant aléatoire.
                    Fais ta liste d'entrées, plats, desserts, boissons et prix.
                    Ensuite, utilise les commandes `{print}` et `{at} {random}` pour dire au client son menu pour ce soir.
                example_code_2: |
                    ```
                    {print} Bienvenue dans le restaurant aléatoire !
                    entrées {is} _
                    plats {is} _
                    desserts {is} _
                    boissons {is} _
                    prix {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Exercice
                    Ajoute les guillemets à ce code pour le faire fonctionner ! Attention : les variables ne doivent pas être entourées de guillemets.
                    Ensuite, utilise la commande `{clear}` pour ne montrer qu'une ligne à la fois dans ton écran de sortie.

                    ### Exercice 2
                    Retourne au niveau précédent et copie ton code du restaurant. Fais fonctionner ce code dans ce niveau en ajoutant des guillemets aux bons endroits et ajoute des commandes  `{clear}`.
                example_code: |
                    ```
                    _ Ajoute les guillemets à ce code _
                    {print} Bienvenue au Restaurant Chez Hedy !
                    {print} Aujourd'hui nous servons pizza ou lasagne.
                    plat {is} {ask} Que voudrais-tu manger ?
                    {print} Très bon choix !  plat  est ce que je préfère !
                    garniture {is} {ask} Que veux-tu en garniture ? fromages ou légumes ?
                    {print} plat  aux  garniture  . C'est parti !
                    boisson {is} {ask} Que voudrais-tu boire avec ça ?
                    {print} Merci pour ta commande.
                    {print} Tes  plat  et  boisson  vont être servis !
                    ```
            6:
                story_text: |
                    ### Exercice
                    L'exemple montre comment tu peux programmer qu'il te manque un des éléments du menu de ton restaurant.
                    Copie ton propre code de restaurant du niveau précédent. Crée un problème dans ton restaurant et code-le, comme dans l'exemple.

                    **Bonus** As-tu programmé le problème et la réponse appropriée ? Alors essaye d'ajouter plus de `{if}` et `{else}` dans ton code.
                    Essaye d'ajouter un `{if}` après chaque commande `{ask}` dans ton code pour le rendre le plus interactif possible.
                example_code: |
                    ```
                    boisson_en_stock {is} eau, limonade, coca, jus d'orange
                    choix {is} {ask} "Que voulez vous boire ?"
                    {if} choix {in} boisson_en_stock {print} choix " en préparation !"
                    {else} {print} "Désolé, nous n'avons pas de " choix
                    ```
            7:
                story_text: |
                    À ce niveau tu peux utiliser les maths pour calculer le prix total pour la commande de ton client, pour faire un restaurant plus réaliste.
                    Mais tu peux aussi ajouter beaucoup plus de choses à ton restaurant virtuel, par exemple, plus de plats.

                    ### Exercice
                    Tu peux ajouter beaucoup plus de choses à ton restaurant virtuel. Par exemple, tu peux…
                    - demander combien de personnes vont manger et multiplier le prix par ce nombre ?
                    - ajouter un autre plat ?
                    - donner une réduction aux gens quand ils donnent un code de réduction (secret) ?
                    - ajouter un menu enfant ?
                    - penser à d'autres choses amusantes à ajouter ?
                example_code: |
                    Tu peux créer un code de restaurant simple, comme celui-ci :
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy"
                    {print} "Voici notre menu :"
                    {print} "Nos plats principaux sont : pizza, lasagnes ou spaghetti"
                    plat_principal = {ask} "Quel plat principal souhaitez-vous ?"
                    {print} "Votre commande : " plat_principal
                    prix = 0
                    {if} plat_principal {is} pizza prix = 10
                    {if} plat_principal {is} lasagnes prix = 12
                    {if} plat_principal {is} spaghetti prix = 8
                    {print} "Ce sera " prix " euros, s'il vous plaît"
                    {print} "Merci, bon appétit !"
                    ```
            8:
                story_text: |
                    À ce niveau tu as appris comment utiliser la commande `{repeat}` pour répéter une ligne de code un certain nombre de fois.
                    Tu peux l'utiliser dans ton restaurant pour demander à plusieurs personnes ce qu'elles veulent manger.

                    ### Exercice
                    Peux-tu compléter le code ? Hedy doit demander le plat autant de fois qu'il y a de personnes. Donc s'il y a 5 personnes, la question doit être répétée 5 fois.
                    **Bonus** Enrichi ton code avec plus de questions, par exemple pour les boissons et les sauces.
                example_code: |
                    ```
                    {print} "Bienvenu au restaurant Chez Hedy"
                    personnes = {ask} "Combien de personnes vont nous rejoindre aujourd'hui ?"
                    ```
            9:
                story_text: |
                    À ce niveau, tu peux rendre ton restaurant virtuel plus élaboré en répétant plusieurs lignes de code. Comme ceci :

                    ### Exercice
                    Ce code peut être complété avec d'autres éléments de menu, par exemple, proposer des boissons, et/ou plusieurs plats ou desserts. Ajoute au moins un autre élément.
                    **Bonus** Ajoute encore plus d'éléments. Propose autant de choix que tu veux !
                example_code: |
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy !"
                    personnes = {ask} "Combien de personnes doivent nous rejoindre aujourd'hui ?"
                    {print} "Génial !"
                    {repeat} personnes {times}
                        plat = {ask} "Que voulez-vous commander ?"
                        {print} plat
                    {print} "Merci d'avoir commandé !"
                    {print} "Bon appétit !"
                    ```
            10:
                story_text: |
                    À ce niveau tu peux utiliser l'imbrication pour rendre ton restaurant plus réaliste et plus amusant !

                    ### Exercice
                    L'indentation a été retiré du code d'exemple.
                    Peux-tu trouver combien d'indentations chaque ligne a besoin pour fonctionner correctement ?
                    Si le client commande une pizza, Hedy doit demander quelle sauce il veut.

                    **Bonus** Un restaurant n'a pas toutes les sauces en réserve. Fait une liste des sauces disponibles et répond pour chaque commande si tu la vends ou pas.<br>
                    **Bonus** Les pizzas ont des garnitures. Demande au client ce qu'il veut.<br>
                    **Bonus** Est-ce que le client a soif ? demande lui aussi sa boisson !<br>
                example_code: |
                    ```
                    {print} "Bienvenue au restaurant Chez Hedy !"
                    nombre_personnes = {ask} "Combien de personnes se joindront à nous aujourd'hui ?"
                    {print} "Génial !"
                    prix = 0
                    {repeat} nombre_personnes {times}
                    _ nourriture = {ask} "Que voulez-vous commander ?"
                    _ {print} nourriture
                    _ {if} nourriture {is} frites
                    _ prix = prix + 3
                    _ sauce = {ask} "Quelle sauce voulez-vous avec vos frites ?"
                    _ {if} sauce {is} aucune
                    _ {print} "pas de sauce"
                    _ {else}
                    _ prix = prix + 1
                    _ {print} "avec " sauce
                    _ {if} nourriture {is} pizza
                    _ prix = prix + 4
                    {print} "Cela fera " prix " euros"
                    {print} "Bon appétit !"
                    ```
            11:
                story_text: |
                    À ce niveau, tu vas apprendre comme demander facilement les commandes pour les différents plats.

                    ### Exercice 1
                    Termine le code avec une commande `{ask}` à la place des espaces vides, pour demander au client ce qu'il veut manger pour chaque plat.
                example_code: |
                    ```
                    menu = appéritif, plat principal, dessert
                    {for} service {in} menu
                        {print} "Que voulez-vous commander pour votre " service " ?"
                        _
                        _
                    ```
                story_text_2: |
                    ### Exercice
                    Bien sûr, tu peux aussi commander pour plusieurs personnes !
                    Peux-tu ajouter la bonne quantité d'indentations avant chaque ligne pour que le code fonctionne correctement ?
                    Conseil : certaines lignes n'ont pas besoin d'être indentées.
                example_code_2: |
                    ```
                    _ menu = appéritif, plat principal, dessert
                    _ noms = Timon, Ono
                    _ {for} nom {in} noms
                    _ {for} service {in} menu
                    _ plat = {ask} nom ", que voulez-vous manger pour votre " service " ?"
                    _ {print} nom " a commandé " plat " pour son " service
                    ```
            12:
                story_text: |
                    À partir de ce niveau, tu peux utiliser les nombres décimaux pour rendre ton menu plus réaliste.

                    ### Exercice
                    Peux-tu écrire le code pour donner à tes amis et à ta famille une réduction de 15 % ?
                example_code: |
                    ```
                    total = 0.0
                    nourriture = {ask} "Que voulez-vous commander ?"
                    boisson = {ask} "Que voulez-vous boire ?"
                    {if} nourriture {is} "hamburger"
                        total = total + 6.50
                    {if} nourriture {is} "pizza"
                        total = total + 5.75
                    {if} boisson {is} "water"
                        total = total + 1.20
                    {if} boisson {is} "soda"
                        total = total + 2.35
                    {print} "Ça vous fera un total de " total " euros, s'il vous plait"
                    ```
    rock:
        name: Pierre, papier, ciseaux
        default_save_name: Rock
        levels:
            1:
                story_text: |
                    Au niveau 1 tu peux commencer à programmer le jeu pierre, papier, ciseaux.

                    Avec `{ask}` tu peux faire un choix, et avec `{echo}` tu peux répéter ce choix.
                example_code: |
                    ```
                    {print} Que choisis-tu ?
                    {ask} Choisis parmi pierre, papier, ciseaux
                    {echo} ainsi, tu as choisi :
                    ```
                story_text_2: |
                    ### Exercice
                    Au lieu d'utiliser des mots, tu peux aussi utiliser des emojis : ✊✋✌️
                    Peux-tu écrire un code utilisant des emojis ?
                example_code_2: |
                    ```
                    {print} Que choisis-tu ?
                    {ask} Choisis parmi _
                    {echo} ainsi, tu as choisi :
                    ```
            2:
                story_text: |
                    À ce niveau tu peux t'entrainer à utiliser les variables pour faire passer le jeu pierre, papier, ciseaux au niveau supérieur !
                    ### Exercice
                    Termine le code en écrivant la **variable** dans les espaces vides.
                    Ce jeu n'est pas très interactif, mais ne t'inquiet pas ! Dans l'onglet suivant, tu apprendras comment utiliser les variables avec la commande `{ask}` pour rendre ton jeu interactif !
                example_code: |
                    ```
                    choix {is} pierre
                    {print} Je choisis _
                    ```
            3:
                story_text: |
                    Tu peux utiliser la commande `{at} {random}` pour faire choisir à l'ordinateur la pierre, le papier ou les ciseaux !

                    ### Exercice
                    Termine le code en utilisant la commande `{at} {random}`.
                example_code: |
                    ```
                    choix {is} pierre, papier, ciseaux
                    {print} choix {at} {random}
                    ```
                story_text_2: |
                    **Bonus** fait un jeu pour deux joueurs. Commence par demander aux deux joueurs leurs noms. Ensuite, laisse l'ordinateur tirer leur réponse au hasard.
                example_code_2: |
                    ```
                    choix {is} pierre, papier, ciseaux
                    joueur_1 {is} {ask} Nom du joueur 1 :
                    _
                    ```
            4:
                story_text: |
                    À ce niveau nous pouvons continuer le programme pierre, papier, ciseaux. Mais si tu veux ajouter du texte, tu dois utiliser les guillemets ici aussi.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
            5:
                story_text: |
                    À ce niveau, nous pouvons déterminer s'il y a égalité ou non. En utilisant le nouveau `{if}` évidemment !

                    ### Exercice
                    Termine le code en remplissant les espaces vides :
                    * Demande à l'ordinateur de faire son choix au hasard.
                    * Demande au joueur son choix.
                    * Écris les bonnes variables en ligne 4 et 5.
                    * Termine la ligne 6 pour que Hedy te dise si c'est une égalité ou pas.
                example_code: |
                    ```
                    options {is} pierre, papier, ciseaux
                    choix_ordinateur {is} _
                    choix_joueur {is} {ask} "Que choisissez vous ?"
                    {print} "Votre choix " _
                    {print} "Choix de l'ordinateur " _
                    {if} _ {is} _ {print} "Égalité !" {else} {print} "Pas d'égalité"
                    ```

                    Écrit le bon code dans les espaces vides pour voir si c'est un match nul.
            10:
                story_text: |
                    À ce niveau tu peux programmer le jeu pierre, papier, ciseaux dans son ensemble, en imbriquant les commandes `{if}`.

                    ### Exercice
                    Peux-tu terminer ce code ? Le programme doit dire qui gagne pour chaque combinaison.

                    **Bonus** Tu veux jouer plus d'une partie ? Étant le code pour pouvoir jouer plusieurs fois. Tu peux même utiliser une commande `{ask}` pour demander aux joueurs combien de parties ils veulent jouer.
                example_code: |
                    ```
                    choix = pierre, papier, ciseaux
                    ton_choix = {ask} "Que choisis-tu ?"
                    {print} "Tu as choisi " ton_choix
                    choix_ordinateur = choix {at} {random}
                    {print} "L'ordinateur a choisi " choix_ordinateur
                    {if} choix_ordinateur {is} ton_choix
                        {print} "Égalité"
                    {if} choix_ordinateur {is} pierre
                        {if} ton_choix {is} papier
                            {print} "Tu as gagné !"
                        {if} ton_choix {is} ciseaux
                            {print} "Tu as perdu !"
                    # termine ce code
                    ```
            9:
                story_text: |
                    ### Exercice
                    Aux niveaux précédents, tu as déjà fait ton propre jeu pierre-papier-ciseau. Peux-tu finir l'exemple suivant en utilisant la commande `{for}` correctement pour que le jeu fonctionne ?
                example_code: |
                    ```
                    choix = _
                    joueurs = _
                    {for} _
                    ```
            16:
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    ```
    rock_2:
        name: Pierre, papier, ciseaux 2
        levels:
            2:
                story_text: |
                    Maintenant que tu as appris comment utiliser la commande `{ask}`, tu peux rendre ton code de pierre, papier, ciseaux interactif !

                    ### Exercice
                    Rend le code de pierre, papier, ciseaux interactif en ajoutant la commande `{ask}`et une question à ton code de pierre, papier, ciseaux.
                example_code: |
                    ```
                    choix {is} _
                    {print} Je choisi choix
                    ```
    secret:
        name: Agent secret
        default_save_name: AgentSecret
        description: Écrit ton code d'agent secret
        levels:
            10:
                story_text: |
                    Nous pouvons simplifier le code de super espion avec `{and}`, pour n'utiliser qu'un seul `{if}`.

                    ### Exercice 1
                    Termine le code en écrivant la bonne commande dans l'espace vide. Conseil : le super espion doit répondre correctement aux deux questions avant d'obtenir l'accès aux informations confidentielles !

                    ### Exercice 2
                    Nous voulons embrouiller l'ennemie encore plus ! Crée une liste avec de fausses réponses et choisis en une au hasard en cas de mauvaise réponse.
                example_code: |
                    ```
                    nom = {ask} "Quel est votre nom ?"
                    mot_de_passe = {ask} "Quel est votre mot de passe ?"
                    {if} nom {is} "Agent007" _ mot_de_passe {is} "TOPSECRET"
                        {print} '"Rendez vous à l'aéroport à 14 h 00"
                    {else}
                        {print} 'Rendez vous à la gare à 10 h 00'
                     ```
    sleep_command:
        description: Introduction à la commande pour endormir
        levels:
            2:
                story_text: |
                    Une autre nouvelle commande de ce niveau est `{sleep}`. Elle endort le programme pendant une seconde. Si tu écris un nombre après la commande `{sleep}`, le programme s'endort durant le nombre de secondes correspondantes.

                    ### Exercice
                    Entraine-toi avec cette nouvelle commande en écrivant ton propre code dans lequel tu utiliseras la commande `{sleep}` au moins 3 fois. Pour chaque commande `{sleep}`, utilise un temps de sommeil différent.
                example_code: |
                    ```
                    {print} Ma couleur préférée est…
                    {sleep} 2
                    {print} le vert !
                    ```
    songs:
        name: Chante une chanson !
        default_save_name: Chanson
        description: Écrit une chanson
        levels:
            7:
                story_text: |
                    Les chansons contiennent souvent beaucoup de répétitions. Parfois la répétition est basée sur un comptage.
                    Par exemple, dans la fameuse chanson « Bouteilles vertes ». Tu peux programmer cette chanson avec un petit peu de maths.

                    Astuce : Utilise la fonction de lecture à voix haute pour que Hedy te chante la chanson !

                    ### Exercice
                    Maintenant que ton programme fonctionne, tu peux répéter les lignes 3 à 7 autant de fois que tu le veux en copiant les lignes.
                example_code: |
                    ```
                    verset = 99
                    {print} verset " bouteilles vertes posées sur le mur"
                    {print} verset " bouteilles vertes"
                    {print} "Et si une bouteille verte vient à tomber"
                    verset = verset - 1
                    {print} verset " bouteilles vertes posées sur le mur"
                    {sleep}
                    ```
                story_text_2: |
                    Cette chanson enfantine décompte à partir de 5 petits singes jusqu'à 1 seul singe.
                    Si tu recopies les lignes de 2 à 7 en dessous du code, tu peux chanter toute la chanson !
                example_code_2: |
                    ```
                    nombre = 6
                    nombre = nombre - 1
                    {print} nombre " petits singes sautant sur le lit"
                    {print} "Un tomba du lit et se cogna la tête"
                    {print} "Maman appella le docteur et le docteur dit"
                    {print} "PLUS AUCUN SINGE SAUTANT SUR LE LIT !"
                    {sleep}
                    ```
            8:
                story_text: |
                    Les chansons contiennent souvent beaucoup de répétitions. Par exemple… Baby Shark ! Si tu la chantes, tu ne fais que répéter la même chose.

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Exercice
                    Peux-tu écrire la chanson Baby Shark avec un `{repeat}` ? Terminer le code en remplaçant les espace vides ?

                    **Bonus** Après Baby Shark, tu peux bien sûr aussi programmer d'autres chansons. Il y a de nombreuses chansons avec des répétitions !
                    Peux-tu penser à une autre chanson et l'écrire ?
                example_code: |
                    ```
                    {repeat} _ _ {print} "Baby Shark tututudutudu"
                    {print} "Baby Shark"
                    ```
            9:
                story_text: |
                    Aux niveaux précédents, tu as programmé la chanson « Bouteilles vertes ». Mais sans la commande `{repeat}` tu devais recopier les versets plusieurs fois.
                    À ce niveau, tu peux répéter la chanson 99 fois en ajoutant juste une simple ligne !

                    ### Exercice
                    Écris la bonne commande à la place de l'espace vide et indente le code correctement.
                example_code: |
                    ```
                    verset = 99
                    _ 99 {times}
                    {print} verset " bouteilles vertes posées sur le mur"
                    {print} verset " bouteilles vertes"
                    {print} "Et si une bouteille verte vient à tomber"
                    verset = verset - 1
                    {print} verset " bouteilles vertes posées sur le mur"
                    ```
            11:
                story_text: |
                    Avec `{for}` tu peux programmer la chanson « baby shark » en entier (y compris tous les autres requins de la famille) en seulement 6 lignes !

                    ### Exercice 1
                    Peux-tu rendre le code de la chanson « baby shark » aussi court en utilisant la commande `{for}` ? termine le code de l'exemple.
                example_code: |
                    ```
                    famille = Baby, Mammy, Daddy, Grandma, Grandpa
                    _ _ _ _
                        {repeat} 3 {times}
                            {print} _
                        {print} _
                    ```
                story_text_2: |
                    ### Exercice 2
                    Fais afficher la chanson « cinq petits singes sautant sur le lit ». Recherche le texte si tu ne t'en souviens pas.

                    **Bonus** Fait afficher la chanson « Le vieux MacDonald a une ferme », et assure-toi que tous les animaux font un cri différent en utilisant un `{if}`.
                example_code_2: |
                    ```
                    singes = 5, 4, 3, 2, 1
                    ```
            12:
                story_text: |
                    Dans cette chanson, nous pouvons programmer plus facilement la partie « si tu as de la joie au cœur, tape des mains ». Parce que nous pouvons mettre toutes les actions dans une liste, comme ceci :

                    ### Exercice
                    Peux-tu ajouter le bon nombre d'indentations pour chaque ligne pour que la chanson soit chantée correctement ?
                    Conseil : Tu n'es pas obligé d'indenter toutes les lignes.
                example_code: |
                    ```
                    _ actions = "tape des mains", "tape du pied", "crie hourra !"
                    _ {for} action {in} actions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} "si tu as de la joie au coeur"
                    _ {print} action
                    _ {print} "si tu as de la joie au coeur et que tu souhaite le partager"
                    _ {print} "si tu as de la joie au coeur"
                    _ {print} action
                    ```
            13:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercice 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercice 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
    songs_2:
        name: Chante une chanson ! 2
        default_save_name: Chanson 2
        description: Chante une chanson ! 2
        levels:
            12:
                story_text: |
                    Les chansons contiennent beaucoup de répétitions. Nous pouvons capturer ces répétitions dans une fonction !
                    ### Exercice
                    Regarde l'exemple de code avec la fonction. Complète les deux lignes pour que la chanson soit écrite entièrement.
                example_code: |
                    ```
                    {define} brille
                        {print} "Brille"
                        {print} _

                    {call} brille
                    {print} "Si haut au-dessus du monde,"
                    {print} "Comme un diamant dans le ciel."
                    {call} _
                    ```
    turtle:
        name: Tortue
        default_save_name: Tortue
        description: Fait ton propre dessin
        levels:
            1:
                story_text: |
                    Tu peux aussi utiliser Hedy pour dessiner. En combinant tournants et lignes, tu peux dessiner un carré ou des escaliers !

                    En utilisant `{forward}` tu traces une ligne vers l'avant. Le nombre écrit après détermine la distance que va parcourir la tortue. `{turn} {right}` tourne d'un quart de tour dans le sens des aiguilles d'une montre, `{turn} {left}` tourne dans le sens inverse des aiguilles d'une montre.

                    Si tu veux reculer, tu utilises quand même la commande `{forward}`, mais avec un nombre négatif. Par exemple `{forward} -100`
                story_text_2: |
                    ### Exercice
                    Ceci est le début d'un petit escalier. Peux-tu lui dessiner 5 marches ?
            2:
                story_text: |
                    À ce niveau, tu peux utiliser des variables pour rendre la tortue interactive. Par exemple, tu peux demander au joueur de combien de pas la tortue doit avancer.
                example_code: |
                    ```
                    réponse {is} {ask} De combien de pas la tortue doit-elle avancer ?
                    {forward} réponse
                    ```
                story_text_2: |
                    Aussi, au niveau 1 la tortue pouvait seulement tourner à gauche ou à droite. C'était un peu lassant !
                    Au niveau 2 elle peut se diriger dans toutes les directions.

                    Utilise 90 pour tourner d'un quart de tour. On appelle ça des degrés. Un tour complet fait 360 degrés.

                    ### Exercice
                    Peux-tu faire une figure avec ce code ? Peut-être un triangle ou un cercle ?
                example_code_2: |
                    ```
                    {print} Dessin de formes
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |
                    À ce niveau, tu peux utiliser `{at} {random}` avec la tortue dessinatrice. Un choix aléatoire permet à la tortue de suivre un chemin différent à chaque fois.
                    Utilise `{at} {random}` pour choisir une valeur dans une liste.
                    ### Exercice
                    Peux-tu copier-coller les lignes 2 et 3 pour créer un chemin aléatoire plus long ?
            4:
                story_text: |
                    Au niveau 4 tu dois utiliser les guillemets avec `{print}` et `{ask}`. Aussi quand tu dessines !
                example_code: |
                    ```
                    {print} _ Dessin de formes _
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    Tu peux aussi changer la couleur des lignes avec la commande `{color}`. Jette un œil à l'exemple.
                    Quand tu utilises la commande `{color} {white}` pour dessiner, les lignes sont « invisibles ». Astuce : utilise le blanc pour déplacer la tortue où tu veux à l'écran avant de commencer à dessiner.
            5:
                story_text: |
                    Au niveau 5 tu peux faire un choix avec `{if}`. Par exemple entre différent type de formes.
                example_code: |
                    ```
                    {print} "Dessins de formes"
                    forme {is} {ask} "Veux-tu un carré ou un triangle ?"
                    {if} forme {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercice
                    Écrit les bons nombres dans ce code pour le faire marcher.
                    Après avoir fait ça, tu peux essayer d'ajouter l'option en arrière.

                    **Bonus** Au lieu d'utiliser `{left}` et `{right}`, refait le programme avec nord, est, sud et ouest.
                    Tu pourrais même ajouter encore plus de directions comme Nord-Est, Sud-Ouest, etc.
                example_code_2: |
                    ```
                    direction {is} {ask} "Dans quelle direction veux-tu aller ? gauche, droite ou tout droit"
                    {if} direction {is} gauche {turn} _
                    {if} direction {is} droite {turn} _
                    {forward} 100
                    ```
            7:
                story_text: |
                    À ce niveau tu peux utiliser les maths pour dessiner différentes formes.
                    Tu as sans doute appris à l'école qu'il faut 360 degrés pour faire tour complet. Si ce n'est pas le cas… maintenant tu le sais !
                    C'est pour ça que tu utilises 90 degrés pour le carré. 360 divisé par 4 fait 90.
                    Maintenant que nous pouvons faire des maths avec Hedy, nous pouvons dessiner toutes les formes que nous voulons !
                example_code: |
                    ```
                    nombre_sommets = {ask} "Combien de sommets veux-tu ?"
                    angle = 360 / nombre_sommets
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
            9:
                story_text: |
                    Maintenant que nous pouvons répéter plusieurs lignes, nous pouvons faire des formes plus facilement.
                    Nous avons juste besoins de régler l'angle une fois et ensuite utiliser cette variable dans le `{repeat}`.

                    ### Exercice 1
                    L'exemple de code dessine un carré. Change le code pour qu'il dessine une autre forme, comme un triangle ou un hexagone.
                    Cela demande de changer deux lignes de code.
                    Indice : un cercle entier fait 360 degrés.

                    ### Exercice 2
                    Maintenant dessine au moins deux polygones sur le même dessin.
                example_code: |
                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    **Bonus** Nous pouvons améliorer le programme qui dessine différentes formes. Termine le code et tu pourras dessiner le polygone que tu veux !
                example_code_2: |
                    ```
                    sommets = {ask} "Combien de sommets dois-je dessiner ?"
                    angle = 360 / sommets
                    {repeat} sommets {times}
                        {turn} _
                        {forward} _
                    ```
            10:
                story_text: |
                    Maintenant que nous pouvons utiliser un `{repeat}` dans un `{repeat}`, nous pouvons dessiner des formes plus complexes.

                    ### Exercice 1
                    Ce code dessine trois triangles noirs, change ça en 5 carrés roses.

                     **Bonus** Crée un dessin de ton choix à partir d'au moins deux types de forme.
            11:
                story_text: |
                    À ce niveau, tu peux faire dessiner une forme à la tortue.
                    La tortue va avancer en fonction des distances de la liste, une par une, en faisant des pas de plus en plus grands.
                    ### Exercice 1
                    Ajoute un tournant de 90 degrés dans la boucle, pour faire une spirale.
                    Ajoute au moins 5 nombre dans la liste, pour que la spirale grossisse encore plus.
                    **(bonus)** peux-tu transformer la spirale en une autre forme ? Fais des expériences en utilisant les nombres pour les tournants !
                    ### Exercice 2
                    La spirale est dessinée vers l'extérieur, fais-la se dessiner vers l'intérieur.
            12:
                story_text: |
                    Nous pouvons utiliser les fonctions pour dessiner des formes plus complexes avec moins de code.
                    ### Exercice 1
                    Complète la fonction pour qu'elle dessine un carré. Tu peux rendre l'image finale plus belle en dessinant des lignes blanches entre les carrés.

                    ### Exercice 2
                    Le code peut être réduit encore plus. Place les lignes finales dans un `{repeat}` tout en conservant le même dessin.

                    ### Exercice 3
                    Crée ton propre dessin avec des formes différentes.
                    Change le nombre de formes avec le `{repeat}` et les formes elles-mêmes dans le `{define}`
                example_code: |
                    ```
                    {define} carré
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} carré
                    {forward} 50
                    {call} carré
                    {forward} 50
                    {call} carré
                    ```
    turtle_draw_it:
        name: Dessine !
        default_save_name: Dessine
        description: Dessine cette forme avec la tortue
        levels:
            1:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
            5:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
            7:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
            8:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            9:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            10:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            11:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    <div class="w-full flex flex-row gap-2">
                    Hexagones imbriqués <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Feux de circulation <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Aide pour les hexagones imbriqués :
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Aide pour les feux de circulation :
                    ```
                    couleurs = rouge, jaune, vert
                    {for} couleur_choisie {in} couleurs
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    Guirlande de Noël <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Aide pour la guirlande de Noël :

                    Commence par bouger jusqu'au côté gauche de l'écran avec une ligne blanche invisible. Ensuite suspend les lumières de Noël !
                    ```
                    {color} blanc
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    couleurs = rouge, bleu, jaune, violet, vert, orange, rose
                    {for} couleur_choisie {in} couleurs
                    _
                    ```
            12:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !
                    Aide pour le programme de conception de bracelet. Commence par définir une fonction **pour chaque forme** que tu veux utiliser dans le bracelet. Ensuite, ajoute les formes au bracelet comme ceci :

                    Bracelet <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} dessine_un_carré
                    _

                    {color} blanc
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gris
                        {forward} 100
                        forme = {ask} "Quelle forme veux-tu ensuite dans ton bracelet ?"
                        couleur = {ask} "Dans quelle couleur ?"
                        {color} couleur
                        {if} forme {is} "carré"
                            {call} dessine_un_carré
                    ```
            14:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
            16:
                story_text: |
                    ### Exercice
                    Refait les dessins avec la tortue !

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
    while_command:
        description: tant que
        levels:
            16:
                story_text: |-
                    Nous allons apprendre une nouvelle boucle, la boucle `{while}` ! La boucle continue tant que la condition est vraie.
                    Alors n'oublie pas de changer la valeur dans la boucle.

                    Dans l'exemple de code, on continue jusqu'à obtenir une réponse correcte.
                    Si la réponse correcte n'est jamais donnée, la boucle ne se termine pas !
                example_code: |
                    ```
                    réponse = 0
                    {while} réponse != 25
                        réponse = {ask} "Combien font 5 fois 5 ?"
                    {print} "Une réponse correcte a été donnée"
                    ```

                        réponse = {ask} "Combien font 5 fois 5 ?"
                    {print} "Une réponse correcte a été donnée"
    years:
        name: Nouvel an
        description: Countdown to the new year!
        levels:
