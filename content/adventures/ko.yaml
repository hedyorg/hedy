adventures:
    story:
        name: 스토리
        default_save_name: 스토리
        description: 스토리
        levels:
            1:
                story_text_2: |
                    ### 연습문제
                    이제 최소 6줄의 코드로 된 자신만의 이야기를 만들어 보세요.
                    이 스토리는 예제 코드와 같을 수 없습니다.
                    적어도 하나의 `{ask}` 명령과 하나의 `{echo}` 명령을 사용합니다.
                    당신은 당신이 좋아하는 어떤 주제에 대해서도 그것을 만들 수 있다.
                    주제가 생각나지 않는다면, 우리가 선택한 것 중 하나를 이용해 보세요: 영화를 보러 가거나, 스포츠 경기를 하거나, 동물원에서 하루를 보내거나.
                story_text: "레벨 1에서는 여러분이 직접 입력한 여러 주인공으로 이야기를 만들 수 있습니다. \n\n첫 번째 줄에  `{ask}`를 사용해서 이야기의 주인공아 누가 될 지를 물어보세요. \n\n첫 번째 줄 이후로는, 출력해야 하는 문장이 있다면 `{print}`로 시작하세요. \n문장의 맨 끝에 여러분의 주인공이 나오게 하고 싶다면  `{echo}`를 사용하세요.\n"
                example_code: "```\n{ask} 이 이야기의 주인공은\n{print} 주인공은 숲 속을 걷고 있습니다. \n{echo} 겁에 질려있네요,\n{print} 사방에서 온갖 시끄러운 소리가 들려옵니다. \n{print} 어쩌면 이 곳이 귀신들린 숲은 아닐까 두려워하고 있습니다. \n```\n"
            2:
                story_text_2: |
                    ### 연습문제
                    이제 이전 레벨에서 만들었던 자신의 스토리에 변수를 추가해야 할 때입니다.
                    '내 프로그램'으로 이동하여 레벨 1 스토리 모험을 찾아 코드를 복사하세요. 코드를 이 레벨의 입력 화면에 붙여넣으세요.

                    아직 변수를 사용하지 않았기 때문에 이 레벨에서는 붙여넣은 코드가 작동하지 않습니다.
                    코드에 있는 `{ask}`명령어와 `{echo}` 명령어를 이 레벨에서 배운 올바른 형태로 변경합니다.

                    **추가** 코드에  `{sleep}` 명령을 추가하여 스토리에 긴장감을 조성해 보세요.
                example_code: "```\n이름 {is} {ask} 주인공의 이름이 무엇인가요?\n{print} 이름 은 숲속을 달릴거예요.\n{print} name 은 조금 겁에 질려있습니다.\n{print} 갑자기 소름끼치는 소음이 들려옵니다.\n{sleep}\n{print} 이름 은 여기가 귀신들린 숲이 아닐까 두려워하고 있습니다.\n```"
                story_text: "레벨 2에서는 여러분의 이야기를 더 재미있게 만들 수 있습니다. 여러분이 만든 주인공의 이름이 문장 어디에든 들어갈 수 있게 되었습니다.\n\n그러기 위해서는 프로그래밍을 조금 더 해야 해요. 당신은 이제 주인공의 이름을 먼저 지어줘야 합니다. \n\n지어준 이름을 문장 어디에나 넣을 수 있습니다.\n"
            3:
                story_text: |
                    레벨 3에서는 여러분의 이야기를 더 재미있게 만들 수 있습니다. 몬스터, 동물이나 장애물에 랜덤성을 사용할 수 있게 됐습니다. 이렇게요:
                story_text_2: |
                    `{add}` 명령어도 여러분의 이야기에 유용하게 쓰일 수 있습니다.
                story_text_3: |
                    ### 연습문제
                    이전 레벨에서 이 레벨로 스토리를 복사합니다.
                    이 레벨에서는 `{at} {random}`, `{add} {to_list}` 및 `{remove} {from}` 명령 3개를 새로 배웠습니다.
                    스토리에 새 코드 줄을 추가하여 모든 새 명령이 스토리에 한 번 이상 포함되도록 합니다.
                example_code: "```\n동물들 {is} 🦔, 🐿, 🦉, 🦇\n{print} 이제 동물들 {at} {random} 의 울음소리가 들리기 시작합니다.\n```\n"
                example_code_2: "```\n{print} 소리가 들려옵니다.\n동물들 {is} 🐿, 🦔, 🦇, 🦉\n동물 {is} {ask} 어떤 동물의 소리일까요?\n{add} 동물 {to_list} 동물들\n{print}  동물들 {at} {random} 이었습니다. \n```\n"
            4:
                story_text: |
                    ### 연습문제1
                    예제 코드를 복사한 후 1행과 2행의 빈칸에 따옴표를 붙여서 마무리한다.
                    3번과 4번의 빈칸은 따옴표가 아니라 `{sleep}`과 `{clear}`명령어로 대체해야 하는데, 할 수 있을까요?

                    ### 연습문제2
                    이전 레벨로 돌아가서 스토리 코드를 복사하세요. 올바른 자리에 따옴표를 추가하여 코드가 이 레벨에서 작동하도록 하세요.
                    주의: 당신 자신의 스토리에 나오는 변수들은 따옴표 밖에 있어야 한다. 예제 코드의 두 번째 줄처럼. 그 줄에서 변수 이름은 따옴표 밖에 놓여 있다.
            5:
                story_text: |
                    이 레벨에서 다른 엔딩을 프로그래밍할 수 있으므로 스토리가 더욱 재미있을 것입니다.
                    예제 코드에서 두 가지 다른 엔딩을 만드는 방법을 볼 수 있습니다.

                    ### 연습문제 1
                    당신이 선택한 주제에 대해 최소 6줄의 코드로 된 새로운 단편 소설을 쓰시오.
                    영감이 없다고요? 다음 주제들 중 하나를 고르세요: 슈퍼히어로, 지루한 학교생활, 무인도에 발이 묶인 것들.

                    이제 예제 코드와 같이 플레이어에게 해피엔드 또는 배드엔드를 선택할 수 있는 변화를 줍니다.
                    양쪽 끝을 모두 프로그래밍합니다.

                    ### 연습문제 2
                    자신의 스토리 모험에서 만든 스토리를 이전 레벨에 복사합니다.
                    스토리에 최소한 두 개의 `{if}` 명령과 `{else}` 명령을 추가하는 방법을 찾으십시오.
                    이것은 행복한 결말일 수도 있고 나쁜 결말일 수도 있지만 명령어를 통합하는 다른 방법을 찾을 수도 있습니다.
            8:
                story_text: |
                    스토리에서, 어떤 사람은 여러 번 말을 합니다. 예를 들어, 누군가가 도움을 요청하거나 노래를 부를 때 말입니다.
                    이런 반복을 스토리에 넣을 수 있습니다. `{repeat}`과(와) 같은 레벨이다.

                    ### 연습문제
                    자신의 스토리를 반복해 보세요. 저장된 프로그램으로 돌아가서 6레벨에서 자신의 이야기 프로그램을 선택하고
                    `{print}`가 포함된 행을 찾아서 반복합니다!
            9:
                story_text: |
                    이 레벨에서는 `{if}` 명령에 여러 줄을 사용할 수 있으며, 이렇게 하면 해피엔딩이나 새드엔딩을 업그레이드할 수 있습니다!

                    ### ### 연습문제 1
                    예제 코드는 두 개의 다른 엔딩을 보여주는데, 하나는 캐릭터가 타임머신에 뛰어드는 것이고, 다른 하나는 그렇지 않은 것이다.
                    빈칸을 한 문장씩 이상 완성하세요.
                    **Extra** 스토리를 길게 만들어 보세요. 스토리에서 무슨 일이 일어날까요? 다른 옵션이 있는 두 번째 `{ask}`를 추가할 수도 있습니다.

                    ### ### 연습문제 2
                    저장된 프로그램으로 돌아가서 5단계에서 스토리 프로그램을 선택하세요. 이제 각각 최소 세 줄의 좋은 결말과 나쁜 결말을 쓰세요!
            10:
                story_text: "이 레벨에서는 다른 `{if}` 및 `{repeat}` 명령어 내에서 {if} 및 {repeat} 명령어를 사용할 수 있습니다. \n이것은 여러분에게 많은 선택권을 주고 여러분의 이야기를 상호작용적으로 만드는 데 정말로 도움을 줍니다.\n\n ### 연습문제 1\n코드를 완료하여 `{if}`가 올바르게 작동하도록 하십시오.\n\n### 연습문제 2\n로빈이 집에 가는 스토리의 부분도 `{if}`와 `{else}`를 붙인다.\n\n### 연습문제 3\n레벨 8 스토리로 돌아가서 다른 `{if}` 안에 최소한 두 개의 `{if}`을 사용합니다.\n"
            11:
                story_text: |
                    이 레벨에서 스토리에서 {for} 명령을 사용할 수 있다. 이렇게 하면 어린이 책 '갈색 곰, 갈색곰, 무엇이 보이니'를 쉽게 프로그래밍할 수 있다.

                    ### 연습 문제

                    <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf">스토리</a> 를 보고, 책에서처럼 인쇄되어 있는지 확인한다.
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n {print} 'What do you see?'\n```\n"
            13:
                story_text: |
                    다른 이야기를 인쇄할 건데 이제는 `{print}`가 붙은 괄호를 써야 해요.

                    ### ### 연습문제 1
                    최소 5문장 이상의 이야기를 만들어 보세요. 아직 '이름'을 사용하지 않아도 됩니다.
                story_text_2: |
                    ### 연습문제 2
                    우리는 이미 당신을 위해 `{input}`을 준비했습니다. 먼저 당신의 이야기에 `name` 변수를 사용하세요.
                    그런 다음 두 번째 `{ask}`를 추가하고 그 변수도 사용합니다.
                    팁: 텍스트와 변수 사이의 `{print}`에 있는 쉼표를 기억하세요!
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        description: introducing add to and remove from
        levels:
            3:
                story_text: "## Add to \n`{add} {to_list}` 명령을 사용하여 항목을 목록에 추가할 수 있습니다. 항목을 목록에 추가하려면 간단히 `{add} penguin {to} animals`를 입력하거나 예제 코드처럼 `{ask}` 명령을 사용합니다.\n"
                story_text_2: |
                    ## Remove from
                    목록에 항목을 추가할 수 있다면 당연히 항목을 삭제할 수도 있다. 이는 `{remove} {from}` 명령으로 완료된다.
                story_text_3: |
                    ### Exercise
                    이 가상 레스토랑에서 새로운 명령어를 사용해 보십시오. 플레이어가 원하는 맛을 목록에 추가하고 알레르기가 있는 맛을 제거하십시오.
    ask_command:
        description: Introduction ask command
        levels:
            1:
                story_text: |
                    ## ask 명령어
                    이제 `{print}` 명령어를 사용할 수 있게 되었으므로 다음 명령어인 `{ask}`를 배울 준비가 되었다. `{ask}` 명령어를 사용하면 질문을 할 수 있다. 다음을 확인해 보자:
                example_code: |
                    ```
                    {print} 안녕하세요!
                    {ask} 너는 이름이 무엇이니?
                    ```
                story_text_2: |
                    ## echo 명령어
                    컴퓨터가 나의 답변을 또 다시 출력하도록 하려면 `{echo}` 명령을 사용하면 됩니다. 대답은 문장 끝에 다시 나오니 이점을 명심해주시고 "안녕하세요" 예문을 참고해주세요.
                example_code_2: |
                    ```
                    {print} 안녕하세요!
                    {ask} 너는 이름이 무엇이니?
                    {echo} 안녕하세요
                    ```
                story_text_3: |
                    ### 연습문제
                    `{ask}` 명령어와 `{echo}` 명령어를 사용해 보세요. 먼저 빈칸을 채워야 이 프로그램이 작동합니다.
                    그런 다음 `{ask}` 명령을 사용하여 2개의 질문을 더 하고, 각 {ask}가 {echo}를 사용하여 답을 화면에 출력합니다.
                example_code_3: |
                    ```
                    _ 너는 요즘 어때?
                    _
                    ```
            2:
                story_text: |
                    ## The ask command
                    이제 코드에서 **variable**를 사용할 수 있게 되었으므로 `{echo}` 명령어가 더 이상 필요하지 않습니다.
                    우리는 질문에 대한 답을 저장하기 위해 변수를 사용할 수 있고, 이 방법으로 우리는 코드에 있는 여러 질문에 대한 답을 사용할 수 있다.
                    확인해보세요:

                    이런 식으로 코드가 상호작용하고 있어요!
                story_text_2: |
                    ### 연습문제
                    이전 탭에서 `{is}` 명령으로 변수를 설정하는 연습을 했습니다.
                    최소 3개 이상의 변수를 생성하여 인쇄 명령과 함께 사용했습니다.
                    이제 예제에서 했던 것처럼 변수를 설정하는 대신 변수를 상호작용적으로 만들기를 바랍니다.

                    이전 탭에서 코드를 복사하고 `{ask}` 명령을 사용하여 변수를 상호작용시킵니다.
            13:
                story_text: 파이썬 코드를 얻기 위해 우리가 해야 할 마지막 변화는 `{ask}`를 `{input}`으로 바꾸는 것이다.
    calculator:
        levels:
            6:
                story_text: |
                    이제 수학을 할 수 있게 되었으니, 계산기를 직접 만들 수 있을 거야!
    clear_command:
        description: clear 명령어
        levels:
            4:
                story_text: |
                    새로운 명령어가 필요합니다. `{clear}`을(를) 사용하면 출력된 화면의 모든 텍스트를 지울 수 있습니다. 이렇게 하면 화면에 텍스트가 너무 차는 것을 방지할 수 있습니다.
                    조심하세요! 만약 `{clear}` 명령을 사용하고 있다면, 그 위에 `{sleep}`을 사용하는 것을 기억하세요. 그렇지 않으면 Hedy는 읽을 시간을 주지 않고 화면을 지울 것입니다!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} '기다리다'
                    {sleep} 3
                    {clear}
                    {print} '서프라이즈!'
                    ```
    dishes:
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            7:
                story_text: |
                    얼마나 자주 설거지를 할까요? 공평한가요? 이 정도면 계산할 수 있어요.
    elif_command:
        description: elif
        levels:
            17:
                story_text: |
                    이 레벨에서는 새 명령어 `{elif}`를 사용할 수도 있습니다. `{elif}`는 `{else}` `{if}`의 줄임말로, 3개 이상의 옵션을 만들 때 필요합니다.
                    한번 봐봐!
                example_code: |
                    ```
                    prices = ['백만달러', '사과파이', '아무것도없음']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '백만달러' :
                        {print} '예! 너는 부자야!'
                    {elif} your_price == '사과파이' :
                        {print} 'Lovely, 사과파이!'
                    {else}:
                        {print} '다음 기회를..'
                    ```
    for_command:
        description: for 명령어
        levels:
            10:
                story_text: |-
                    ## For
                    이 레벨에서 우리는 `{for}`라는 새로운 코드를 배운다. `{for}`를 사용하면 목록을 만들고 모든 요소를 사용할 수 있다.
                    `{for}`는 `{repeat}`와 `{if}`와 같은 블록을 생성하므로 블록의 모든 행은 4개의 공백으로 시작해야 한다.
            17:
                story_text: |
                    이제 들여쓰기를 조금 바꿀 것이다. 들여쓰기가 필요할 때마다 우리는 들여쓰기 앞 줄에 `:`가 필요하다.
    fortune:
        name: 예언가
        default_save_name: 예언가
        levels:
            1:
                story_text: |
                    당신은 카니발에 가보고 예언가에게 당신의 미래를 점쳐본적이 있는가? 아니면 마법의 8구를 가지고 놀아본적이 있는가?
                    그러면 여러분은 아마 그들이 여러분의 미래를 정말로 예측하지 못한다는 것을 알 거예요, 하지만 노는 것은 여전히 재미있어요!

                    다음 레벨에서 여러분은 여러분만의 점치는 기계를 만드는 방법을 배울 수 있습니다!
                    레벨 1에서는 Hedy가 자신을 점쟁이라고 소개하고 선수들의 대답을 `{echo}`하게 하면 쉽게 시작할 수 있다.
                    이런 식으로:
                story_text_2: |
                    ### 연습문제
                    예제 코드를 입력 화면에 복사하고 빈칸을 입력하면 코드가 작동합니다.
                    **추가** 코드를 바꿔서 점쟁이가 당신의 이름뿐만 아니라 당신의 나이, 당신이 좋아하는 스포츠 팀, 또는 당신 자신에 관한 다른 것들도 예측할 수 있도록 하세요.

    haunted:
        name: 유령의 집
        default_save_name: 유령의 집
        levels:
            1:
                story_text: |
                    이 모험에서 여러분은 올바른 문을 선택하여 유령의 집에서 탈출해야 하는 게임을 만들기 위해 노력하고 있습니다.
                    오른쪽 문을 선택하면 살아남겠지만, 끔찍한 괴물이 아니라면...

                    레벨 1에서는 무서운 이야기를 지어내는 것으로 유령의 집 게임을 시작하고 플레이어에게 유령의 집에서 어떤 괴물을 보게 될지 물어봅니다.
            2:
                story_text: |
                    이 유령이 나오는 집에서는 이모지로 몬스터를 고를 수 있습니다. 물론 단어도 사용할 수 있습니다.
    if_command:
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    레벨 5에는 새로운 것인 {if}가 있다! `{if}`을(를) 사용하면 두 개의 다른 옵션 중에서 선택할 수 있다.
                    이 코드는 이름으로 Hedy를 입력하면 인쇄가 잘 되고, 다른 이름으로 입력하면 야유.
                    `{ask}`와 `{print}`는 여전히 레벨 4와 같이 작동한다.
                story_text_2: |
                    `{if}`인 코드가 정말 길어져서 행에 잘 맞지 않을 때도 있다. <br> 코드를 두 줄에 걸쳐 나눌 수도 있는데, 두 번째 줄은 다음과 같이 `{else}`에서 시작한다:
                story_text_3: |
                    ### 연습 문제
                    `{if}`와 `{else}`로 자신만의 코드를 만들어 보자. 원한다면 예제 코드를 사용할 수 있다.
            8:
                story_text: |
                    ## If... Else...
                    `{repeat}` 명령 후 코드 행 블록을 반복하는 법을 배웠습니다.
                    이제 들여쓰기를 사용하여 {if} 또는 {else} 명령 뒤에 블록을 만들 수도 있습니다.
                    예제 코드를 확인해 보세요.

                    ### 연습 문제
                    예제 코드에 {else} 명령어를 추가합니다. 들여쓰기를 사용하여 선 블록을 만듭니다. 이것은 각 선을 4개의 공백으로 시작하여 수행합니다.
    in_command:
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    목록에 있는 것이 있는지 확인하고 싶을 때는 이제 `{in}` 명령을 사용할 수 있다.
                    이 코드는 예쁘게 인쇄됩니다! 녹색이나 노란색을 선택하면, 나는 그렇지 않으면 인쇄됩니다.
                story_text_2: |
                    ### 연습문제
                    배운 명령어를 빈칸에 채워 예제 코드를 완성합니다.
                    코드를 완성했으면 자신의 코드를 만들고 자신이 생각한 질문을 사용해 보십시오.

    is_command:
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    단어의 이름은 `{is}`로 지을 수 있다. 이를 **variable**라고 한다. 이 예제에서 name이라는 변수와 age라는 변수를 만들었다. name이라는 단어는 코드 어디에서나 사용할 수 있으며 다음과 같이 Hedy로 대체된다:
                story_text_2: |
                    ### 연습문제
                    변수를 직접 만들어 볼 시간!
                    예제 코드에서 우리는 `favorite_animal` 변수의 예를 만들었다. 1행에서 변수가 설정되어 있고, 2행에서 우리는 인쇄 명령에 변수를 사용했다.
                    먼저 빈칸에 가장 좋아하는 동물을 채우는 것으로 예제를 끝내라. 그런 다음 적어도 3개의 코드를 직접 만들어라. 변수를 골라서, {is} 명령어로 변수를 설정한다. 그런 다음 우리가 했던 것처럼 {print} 명령어로 사용한다.
            14:
                story_text: |
                    우리는 새로운 것들을 더 배울 거예요. 여러분은 수학, `<`와 `>`에서 이미 알고 있을 거예요.
                    `<`은 첫 번째 숫자가 두 번째 숫자보다 작은지, 예를 들어 `<`12세가 12세보다 작은지를 확인합니다.
                    만약 첫 번째 숫자가 두 번째 숫자보다 작거나 같은지 확인하려면, `<=`를 사용합니다. 예를 들어, "<=" 11.
                    `>`은 첫 번째 숫자가 두 번째 숫자보다 큰지 확인하고, 예를 들어 `>` 는 포인트가 10보다 큰지 확인한다.
                    첫 번째 숫자가 두 번째 숫자보다 크거나 같은지 확인하려면 점 `>=`를 사용하면 된다.
                    다음과 같이 `{if}`에서 이들 비교를 사용한다:
                story_text_2: |
                    이 레벨부터는 정확하게 비교하고 싶다면 두 개의 등호를 사용할 수 있다. 대부분의 프로그래밍 언어는 다음과 같이 한다:
                story_text_3: |
                    다음과 같이 `!=`을 사용하여 어떤 것이 다른 것과 *not* 같은지 비교할 수도 있습니다:
    parrot:
        name: 앵무새
        default_save_name: 앵무새
        description: 당신의 말을 따라할 당신만의 온라인 애완 앵무새를 만들어 보세요!
        levels:
            1:
                story_text: |
                    당신을 따라 할 당신만의 온라인 애완 앵무새를 만들어 보세요!
                story_text_2: |
                    ### 연습문제
                    노란색 버튼을 클릭하여 예제 코드를 입력 화면에 복사합니다.
                    앵무새가 다른 질문을 하도록 하세요. 예제에서 빈칸을 채우세요!
                    **추가** 앵무새가 여러 질문을 하도록 할 수도 있습니다. 자신의 코드 아래에 몇 줄의 코드를 더 입력하세요.
            2:
                story_text_2: |
                    ### 연습문제
                    먼저 `{is}`와 `{ask}` 명령으로 2번 행을 마칩니다.
                    그런 다음 4번과 6번 줄에서 `{sleep}` 명령을 입력하면 앵무새가 잠시 동안 조용히 있을 수 있습니다.

                    **Extra** 코드 줄을 더 추가해서 앵무새가 이름만 요구하게 만들 수 있나요?
            3:
                story_text: |
                    앵무새에게 `{add}`로 새로운 단어를 가르쳐라.
                    ### 연습문제
                    코드를 작동시키기 위해 `{add} {to_list}` 명령을 추가할 수 있습니까?
            4:
                story_text: |
                    이 레벨에서 우리는 `{ask}`와 `{print}` 명령어가 있는 따옴표를 사용해야 한다.
                    ### 연습문제
                    빈칸에 따옴표를 기입하여 코드를 완성한다.
            5:
                story_text: |
                    앵무새가 정확한 단어를 말하면 보상을 해주세요!

                    ### 연습문제
                    누락된 명령어 4개를 입력하여 코드를 마무리합니다.
    print_command:
        levels:
            1:
                story_text: |
                    ## print 명령어
                    `{print}` 명령을 사용하여 화면에 텍스트를 print할 수 있습니다.
                example_code: |
                    ```
                    {print} 안녕, 프로그래머 여러분!
                    {print} Hedy에 오신걸 환영해요!
                    ```
                story_text_2: |
                    ### 연습문제
                    Hedy에서 당신은 모든 모험에서 연습문제를 발견할 수 있을 것이다. 연습문제는 당신이 새로운 명령과 개념을 연습할 수 있게 해주고, 예제 코드에 당신만의 반전을 줄 수 있게 해준다.
                    이 연습에서 여러분은 분홍색 빈 칸을 보게 될 것이다. 코드를 실행하기 전에 빈 칸의 자리에 무언가를 채워야 한다.

                    빈 칸에 `{print}` 명령어를 입력한 다음 코드 행을 다섯 개 더 추가합니다. 각 행은 `{print}`명령어로 시작해야 합니다.
                    재미있게 보내!
                example_code_2: |
                    ```
                    _ 안녕하세요!
                    ```
            18:
                story_text: |-
                    진짜 파이썬 코드에 도착했어! 이제부터는 `{print}`와 `{range}`가 있는 괄호를 써야 한다는 얘기다.
                    영어 명령어만 사용하면 파이썬 환경에서 이 레벨의 Hedy 코드를 사용할 수 있다는 의미도 있다. 지금까지 사용하지 않았다면 명령어 메뉴의 토글을 전환하여 사용할 수 있다.
                story_text_2: 두 개 이상의 항목을 인쇄하려면 쉼표,으로 구분해야 합니다.
    quotation_marks:
        name: '''따옴표'''
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    레벨 4의 `{ask}`와 `{print}`가 변경되었습니다.
                    따옴표 사이에 인쇄할 텍스트를 넣어야 합니다.
                    이제 원하는 단어를 모두 인쇄할 수 있기 때문에 유용합니다. 또한 `{is}`과(와) 함께 저장할 때 사용한 단어도 있습니다.
                    대부분의 프로그래밍 언어도 인쇄할 때 따옴표를 사용하기 때문에 실제 프로그래밍에 한 걸음 더 다가가고 있습니다!
                story_text_2: |
                    ## Contractions
                    중요해요! 이제 따옴표를 사용하게 되었으니, Hedy는 따옴표'를 I'm이나 What's처럼 수축할 때 혼동할 거예요.
                    아포스트로피를 제거하고 철자를 I 또는 What is로 변경해야 합니다.
                    아포스트로피를 사용하는 잘못된 방법을 알아보려면 예제 코드를 확인하십시오.
    random_command:
        levels:
            3:
                story_text: |
                    ## At random
                    이 레벨에서 당신은 `{is}` 명령을 사용하여 목록을 만들 수 있다. 당신은 컴퓨터로 하여금 그 목록에서 임의의 항목을 선택하게 할 수 있다. 당신은 `{at} {random}`로 그렇게 할 수 있다.
                story_text_2: |
                    문장에서도 `{at} {random}` 명령을 사용할 수 있습니다.
                story_text_3: |
                    ### 연습 문제
                    문이나 여행가방을 고르는 게임쇼(TV에 나오는 것처럼)를 만들어 `{at} {random}` 명령어를 사용해 보세요. 가격이 엄청나요!
                    할 수 있겠어? 우리는 이미 예제 코드에 첫 줄을 넣었다.
            16:
                story_text: |-
                    우리는 파이썬 방식으로 목록을 만들고, 목록 주변에 대괄호를 둘 것이다! 우리는 또한 이전 레벨에서 배운 것처럼 각 항목의 주변에 따옴표를 유지한다.
                    우리는 대괄호를 사용하여 목록의 한 자리를 가리킨다. {at} {random} 명령은 더 이상 사용할 수 없다.
    repeat_command:
        description: repeat 명령어
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    레벨 7은 `{repeat}` 명령어를 추가한다.`{repeat}`는 한 줄의 코드를 여러 번 실행하는 데 사용될 수 있다. 다음과 같다:

                    ### ### 연습문제
                    반복 명령으로 장난을 치세요. 생일 축하 노래를 지금 4줄이 아닌 3줄의 코드로 만들 수 있나요?
            8:
                story_text: |
                    ### Repeat commands and indentation
                    이 레벨에서는 1회 반복 명령만으로 여러 줄의 코드를 반복할 수 있습니다.
                    이것은 반복하고 싶은 선들의 블록을 만들어서 하는 것이다.
                    이 블록의 줄에는 **indentation**가 필요합니다.
                    그것은 각 줄의 시작에 4칸을 넣는 것을 의미한다. 한 줄로 된 블록을 만들고 싶을 때도 들여쓰기를 해야 한다.
    repeat_command_2:
        description: repeat 명령어 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    지금은 `{print}` 명령어와 함께 `{repeat}` 명령어를 연습했는데, `{repeat}`으로 다른 명령어도 사용할 수 있다는 사실을 알고 있었나요?
                    이 예제 코드에서 '{repeat}'는 `{ask}`, `{if}` 또는 `{else}` 명령어로도 사용할 수 있음을 알 수 있습니다.
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
            8:
                story_text: |
                    ### In the block or not?
                    이 레벨에서 당신은 어떤 코드 라인이 블록에 있어야 하고 어떤 코드 라인이 있어서는 안 되는지 신중하게 생각해야 한다.
                    예를 들어, 만약 당신이 *the muffin man*이라는 노래를 부르고 싶다면. 당신은 'the muffin man'이라는 대사를 두 번만 반복하기를 원한다.
                    이것은 마지막 줄이 블록에 속하지 않으므로 들여쓰기로 시작해서는 안 된다는 것을 의미합니다.
                    마지막 줄을 들여쓰기로 시작하면 곡이 틀릴 것이다.

                    ## 연습운동
                    예제 코드의 각 줄은 빈칸으로 시작한다. 빈칸을 제거하고 어떤 줄은 들여쓰기가 필요하고 어떤 줄은 머핀 맨 노래가 되지 않는지 알아낸다.
    restaurant:
        name: 식당
        default_save_name: 식당
        levels:
            1:
                story_text: |
                    레벨 1에서는 가상의 식당을 직접 만들어 손님들의 주문을 받아볼 수 있다.
                story_text_2: |
                    ### 연습문제
                    노란색 버튼을 클릭하여 예제 코드를 입력 화면에 복사합니다.
                    먼저 빈칸에 정확한 명령어를 입력하여 코드가 제대로 작동하도록 합니다.
                    그러면 식당 프로그램에 최소 4줄의 코드를 추가해주세요.
                    고객에게 무엇을 마시고 싶은지 물어보고 현금이나 카드로 지불하고 싶은지 물어봅니다.
                    마지막으로 고객과 작별할 수 있는 좋은 방법을 생각해 보세요.
            8:
                story_text: |
                    이 레벨에서는 코드의 한 줄을 일정 시간 반복하기 위해 `{repeat}` 명령을 사용하는 방법을 배웠습니다.
                    레스토랑에서 여러 사람이 무엇을 먹고 싶은지 `{ask}` 용도로 사용할 수 있습니다.

                    ### 연습문제
                    코드를 완성할 수 있나요? Hedy는 이 질문을 사람 수만큼 반복해야 합니다. 그래서 만약에 5명이면 5번 질문을 해야 합니다.
                    **추가** 음료나 소스와 같은 더 많은 질문으로 코드를 확장합니다.
            16:
                story_text: |
                    `{while}`를 사용하면 고객이 주문이 완료될 때까지 주문을 계속 추가할 수 있습니다.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
    rock:
        name: 가위바위보
        default_save_name: Rock
        description: 가위바위보
        levels:
            1:
                story_text: |
                    1단계에서는 가위바위보 게임으로 시작할 수 있습니다.

                    `{ask}`를 사용하면 선택을 할 수 있고, `{echo}`를 사용하면 선택을 반복할 수 있습니다.
            3:
                story_text_2: |
                    **추가** 두 플레이어가 게임을 하도록 하세요. 먼저 두 플레이어에게 이름을 입력해달라고 요청하고 컴퓨터가 임의로 선택하도록 하세요.
            16:
                story_text: |
                    ### 연습문제
                    컴퓨터를 이길 때까지 게임을 해! 하지만 일단 예제 코드를 완성하고...
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: "이 레벨의 또 다른 새로운 명령어는 `{sleep}`으로 프로그램을 잠시 일시 중지한다. {sleep} 명령 뒤에 숫자를 입력하면 해당 시간 동안 프로그램이 일시 중지된다. \n\n### 연습 문제\n{sleep} 명령어를 적어도 3번 사용하는 자신만의 코드를 만들어 이 새로운 명령어를 연습한다. {sleep} 명령어마다 일시 중지 시간이 달라야 한다.\n"
    turtle:
        name: 거북이
        default_save_name: 거북이
        levels:
            1:
                story_text: |
                    여러분은 또한 Hedy를 그림을 그리기 위해 사용할 수 있습니다. 회전과 선을 결합함으로써, 여러분은 사각형이나 계단을 만들 수 있습니다!

                    `{forward}`을 사용하면 앞으로 선을 그립니다. 뒤에 있는 숫자에 따라 거북이가 걸어갈 거리가 결정됩니다.`{turn} {right}`는 시계 방향으로 1/4회전, `{turn} {left}`는 시계 반대 방향으로 회전합니다.

                    뒤로 가려면 `{forward}` 명령을 사용하지만 음수가 됩니다. 따라서 예를 들어 `{forward} -100`
                story_text_2: |
                    ### 연습문제
                    작은 시작 단계입니다. 계단을 5개로 만들 수 있나요?
            2:
                story_text: |
                    이 레벨에서 변수를 사용하여 거북이가 상호작용하도록 만들 수 있다. 예를 들어 플레이어에게 거북이가 몇 걸음을 걸어야 하는지 물어볼 수 있다.
            9:
                story_text_2: |
                    **Extra** 다양한 도형을 그리는 프로그램을 개선할 수 있습니다. 코드를 완성하면 원하는 다각형을 그릴 수 있습니다!
