adventures:
    story:
        name: Historie
        default_save_name: Historie
        description: Lav en kort historie
        levels:
            1:
                story_text: |
                    På niveau 1 kan du lave en historie med en hovedperson du selv indtaster.

                    På første linje, brug `{ask}` til at spørge hvem hovedpersonen skal være.

                    Efter den første linje, start med `{print}` hvis sætningen skal printes.
                    Brug `{echo}` hvis du vil have din hovedpersonen i slutningen af sætningen.
                example_code: |
                    ```
                    {ask} Hovedpersonen i denne historie er
                    {print} Hovedpersonen går nu ind i skoven
                    {echo} De er lidt bange,
                    {print} De hører mærkelige lyde alle steder
                    {print} De er bange for at det en hjemsøgt skov
                    ```
                story_text_2: |
                    ### Opgave
                    Lav nu din egen historie på mindst 6 linjers kode.
                    Denne historie må ikke være den samme som eksempel koden.
                    Brug mindst en `{ask}` og mindst en `{echo}` kommando.
                    Du kan skrive om hvilket som helst emne, du kan lide.
                    Hvis du ikke kan finde på et emne, kan du bruge nogle af vores idéer: en tur i biografen, en sportskamp, eller en dag i zoologisk have.
            2:
                story_text: |
                    På niveau 2 kan du gøre din historie sjovere. Din hovedpersons' navn kan nu være hvor som helst i sætningen.

                    Du bliver nødt til at programmere en lille smule mere for at få det til at ske. Du skal din hovedperson et navn som det første.

                    Så kan du sætte det navn ind alle steder i en sætning.
                example_code: |-
                    ```
                    navn {is} {ask} Hvad hedder hovedpersonen?
                    {print} navn løber nu rundt i skoven
                    {print} navn er lidt bange
                    {print} Pludselig hører hun en mærkelig lyd...
                    {sleep}
                    {print} navn er bange for at det er en hjemsøgt skov
                    ```
                story_text_2: |
                    ### Opgave
                    Nu er det tid til at tilføje variabler til din egen historie, som du lavede i det forrige niveau.
                    Gå til 'My programs', se efter din niveau 1 historie og kopier koden. Indsæt koden i din inputskærm på dette niveau.

                    Koden vil ikke virke på dette niveau, fordi du ikke har brugt variabler endnu.
                    Ændr `{ask}` kommandoen og `{echo}` kommandoen i din kode, til den korrekte form som du har lært på dette niveau.

                    **Ekstra** Tilføj en `{sleep}` kommando til din kode for at opbygge spænding i din historie.
            3:
                story_text: |
                    På niveau 3 kan du gøre din historie endnu sjovere. Du kan bruge tilfældighed til et monster, dyr eller anden forhindring, sådan her:
                example_code: |
                    ```
                    dyr {is} 🦔, 🐿, 🦉, 🦇
                    {print} Nu hører de lyden af et dyr {at} {random}
                    ```
                story_text_2: |
                    Kommandoen `{add}` kan også hjælpe dig i din historie.
                example_code_2: |
                    ```
                    {print} Han hører en lyd
                    dyr {is} 🐿, 🦔, 🦇, 🦉
                    dyret {is} {ask} Hvad tror du det er?
                    {add} dyret {to_list} dyr
                    {print} det var et dyr {at} {random}
                    ```
                story_text_3: |
                    Dette er et eksempel med `{remove}` kommandoen i din historie

                    ### Opgave
                    Kan du bruge de 3 nye kommandoer `{at} {random}` , `{add} {to_list}` og `{remove} {from}` i din egen historie?
                example_code_3: |
                    ```
                    {print} Hans rygsæk blev alt for tung.
                    {print} I den var der en flaske med vand, en lommelygte og en mursten.
                    taske {is} vand, lommelygte, mursten
                    efterlad {is} {ask} Hvilken ting skal han efterlade?
                    {remove} efterlad {from} taske
                    ```
            5:
                story_text: |
                    På dette niveau kan du programmere forskellige slutninger, hvilket vil gøre din historie endnu sjovere.
                    I kodeeksemplet kan du se hvordan man laver 2 forskellige slutninger.

                    ### Opgave 1
                    Find på en ny historie med mindst 6 linjers kode om et emne, du selv har valgt.
                    Mangler du inspiration? Vælg en af disse emner: en superhelt, en kedelig dag i skolen, strander på en øde ø.

                    Giv nu spilleren en chance for at vælge en glad eller en trist slutning, ligesom i kodeeksemplet.
                    Programmer begge slutninger.

                    ### Øvelse 2
                    Kopier historien du har skabt i dit eget eventyr, i de forhenværende niveauer.
                    Find en måde at tilføje mindst 2 `{if}` og `{else}` kommandoer til din historie.
                    Det kan være med en glad eller en trist slutning, men du kan også finde på andre måder at bruge kommandoerne.
                example_code: |
                    ```
                    navn {is} {ask} 'Hvem går i skoven?'
                    {print} navn ' går gennem skoven'
                    {print} navn ' møder et monster'
                    slutning {is} {ask} 'Vil du have en lykkelig eller ulykkelig slutning?'
                    {if} slutning {is} lykkelig {print} navn ' griber sit sværd og monstret løber hurtigt sin vej'
                    {else} {print} 'Monstret æder ' navn
                    ```
            8:
                story_text: |
                    I en historie, gentages nogle ord flere gange. For eksempel, når nogen råber på hjælp eller synger en sang.
                    Du kan indsætte disse gentagelser i din historie, på dette niveau med `{repeat}`.

                    ### Opgave
                    Tilføj en gentagelse til din egen historie. Gå tilbage til dine gemte programmer, vælg dit historieprogram fra et at de forrige niveauer, og
                    find en linje der indeholder `{print}` og gentag det!
                example_code: "```\n{print} 'Prinsen blev ved med at kalde på hjælp'\n{repeat} 5 {times} {print} 'Hjælp!'\n{print} 'Hvorfor er der ikke nogen der hjælper mig?'\n```\n"
            4:
                story_text: "### Opgave\nKopier eksempel koden og færdiggør den ved at tilføje citationstegn til de tomme felter på linje 1 og 2.\nDe tomme felter på linje 3 og 4 skal ikke erstattes med citationstegn, men en `{sleep}` og en `{clear}` kommando. Kan du få det til at virke?\n\n### Opgave 2\nGå tilbage til det forrige niveau og kopiere din historiekode. Få den til at virke på dette niveau ved at tilføje citationstegn de rigtige steder.\nPas på: Variablerne i din historier bør væren udenfor citationstegnene. Ligesom linje 2 i eksempel koden. I den linje er variablerne sat udenfor citationstegnene.\n"
                example_code: "```\nnavn {is} {ask} _ Hvad er dit navn? _\n{print}  _ Hovedpersonen hedder _ navn\n_\n_\n{print} navn  _ går nu en tur i skoven _\n{print} navn _ er lidt bange _\ndyr {is} 🦔, 🐿, 🦉, 🦇\n{print} _ Han hører lyden af et _ dyr {at} {random}\n{print} navn _ er bange for at skoven er hjemsøgt _\n```\n"
            9:
                story_text: "På dette niveau can du bruge flere linjer i dine `{if}` kommandoer. På denne måde kan du opgradere din glade eller triste slutning!\n\n### Opgave 1\nKode eksemplet viser to forskellige slutninger; en hvor karakterene hopper ind i en tidsmaskine, og en hvor de ikke gør.\nFærdiggør de tomme felter med mindst en sætning per slutning.\n**Ekstra** Gør historien længere. Hvad sker der i historien? Du kan også tilføje endnu en `{ask}` med andre muligheder.\n\n### Opgave 2\nGo tilbage til dine gemte programmer, og vælg dit historie program fra niveau 5. Skriv nu en god og en dårlig slutning der hver er 3 linjer lange!\n"
                example_code: "```\n{print} 'ÅH NEJ! T-rexen nærmer sig!'\nslut = {ask} 'Vil du have en glad eller en trist slutning?'\n{if} slut {is} glad\n    {print} 'Richard når lige at hoppe ind i tidsmaskinen!'\n    {print} _\n{else}\n    {print} 'Åh nej! Richard er for langsom...'\n    {print} _\n```\n"
    ask_command:
        description: Introduction ask command
        levels:
            1:
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
            2:
                example_code_2: |
                    ```
                    yndlingsdyr {is} {ask} Hvad er dit yndlingsdyr?
                    {print} Jeg elsker yndlingsdyr
                    ```
    calculator_2:
        name: Lommeregner 2
        default_save_name: Lommeregner 2
        description: Lommeregner 2
    dice:
        name: Terninger
        default_save_name: Terninger
        description: Lav din egen terning
        levels:
            3:
                story_text: |
                    På dette niveau kan vi vælge fra en liste. På denne måde kan vi lade computeren vælge en side på en terning.
                    Se på de brætspil du har i skabet derhjemme.
                    Er der spil med en (speciel) terning? Du kan også lave sådan en med denne kode.
                    For eksempel, terningerne til spillet Earthworms med tallene 1 til 5 og en regnorm på.

                    ![Terning fra Earthworms med 1 til 5 og en regnorm på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    muligheder {is} 1, 2, 3, 4, 5, regnorm
                    {print} muligheder {at} {random}
                    ```
                story_text_2: |
                    ### Opgave
                    Terningerne fra eksemplet ovenfor er terninger til et specifikt spil. Kan du lave en normal terning?
                    Eller en anden speciel terning fra et andet spil?
                example_code_2: |
                    ```
                    muligheder {is} _
                    ```
            4:
                story_text: |
                    På dette niveau kan vi lave sætninger med terningeværdien i en sætning, med anførselstegn selvfølgelig.
                    Denne gang er kodeeksemplet ikke helt færdigt. Kan du færdiggøre den?
            5:
                story_text: |
                    Du kan også lave en terning igen på dette niveau ved at bruge `{if}`.
                    Færdiggør kodeeksemplet så programmet siger "Du kan stoppe med at kaste" når du har slået en regnorm.

                    Men måske du gerne vil genskabe en terning fra et helt andet spil. Det er også helt fint! Så find på din egen reaktion, f.eks. 'jubii' ved en 6'er og 'ærgerligt' ved noget andet.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
    dishes:
        name: Opvask?
        default_save_name: Opvask
        description: Brug computeren til at bestemme hvem der tager opvasken
        levels:
            3:
                story_text: |
                    Er i altid uenige om hvem der skal tage opvasken eller tømme kattebakken derhjemme?
                    Så kan du lade computeren vælge retfærdigt. Du kan programmere det på dette niveau!
                    Først laver du en liste med alle medlemmerne af din familie. Derefter tag fra listen med `{at} {random}`.
                example_code: |
                    ```
                    personer {is} mor, far, Emma, Sophie
                    {print} personer {at} {random}
                    ```
                story_text_2: |
                    Har du ikke lyst til at tage opvasken? Hack programmet ved at fjerne dit navn fra listen med `{remove}` `{from}` kommandoen.
            4:
                story_text: |
                    Med anførselstegn kan du lave din opvaskeplan pænere.
                    Denne gang er eksemplet ikke helt færdig.

                    Kan du færdiggøre koden ved at udfylde de tomme felter? Hvert af de tomme felter skal erstattes med et ord eller symbol.

                    Tip: Glem ikke anførselstegn!
                example_code: |
                    ```
                    personer {is} mor, far, Emma, Sophie
                    {print} _ opvasken tages af _
                    {sleep}
                    {print} personer {at} _
                    ```
            5:
                story_text: |
                    Med `{if}` kan du nu have endnu mere sjov med valg i dit program. Du kan få dit program til at reagere på et valg lavet af computeren.

                    Kan du færdigøre koden så den printer 'ærgerligt' når det er din tur og ellers 'sådan!'?
                    Glem ikke anførselstegn!
                example_code: "```\npersoner {is} mor, far, Emma, Sophie\nopvasker {is} personer {at} {random}\n{if} opvasker {is} Sophie {print} _ ærgerligt jeg skal tage opvasken _ \n{else} {print} 'heldigvis ingen opvask for ' _ ' er allerede i gang'\n```\n"
            7:
                story_text: |
                    Hvor ofte skal alle tage opvasken? Er det retfærdigt? Du kan tælle det på dette niveau.
                example_code: |
                    ```
                    personer = mor, far, Emma, Sophie
                    emma_tager_den = 0
                    opvasker = personer {at} {random}
                    {print} 'Opvaskeren er ' opvasker
                    {if} opvasker {is} Emma emma_tager_den = emma_tager_den + 1
                    {print} 'Emma tager opvasken ' emma_tager_den ' gange denne uge'
                    ```

                    Du kan nu kopiere linje 3 til 5 nogle gange (e.g. 7 gange for en hel uge) for at beregne en hel uge igen.
                    Laver du koden for hele ugen?
                story_text_2: |
                    Hvis du er ekstremt uheldig vil det forrige program måske vælge dig til at tage opvasken hele ugen! Det er ikke retfærdigt!
                    For at lave et mere retfærdigt system can du bruge `{remove}` kommandoen til at fjerne den valgte person fra listen. På den måde skal du ikke tage opvasken igen før alle har taget deres tur.

                    Mandag og tirsdag er klar til dig! Kan du tilføje resten af ugen?
                    Og... kan du finde på en løsning til når listen er tom?
                example_code_2: |
                    ```
                    personer = mor, far, Emma, Sophie
                    opvasker = personer {at} {random}
                    {print} 'Mandag tages opvasken af: ' opvasker
                    {remove} opvasker {from} personer
                    opvasker = personer {at} {random}
                    {print} 'Tirsdag tages opvasken af: ' opvasker
                    {remove} opvasker {from} personer
                    opvasker = personer {at} {random}
                    ```
            8:
                story_text: |
                    Med `{repeat}` kan du gentage stykker af kode. Du kan bruge dette til at beregne hvem der skal tage opvasken i flere dage!
                    ### Opgave
                    Brug `{repeat}` kommandoen til at beslutte hvem der skal tage opvasken en hel uge. Hver blanke felt skal udskiftes med en kommando eller et tal!
                    **(ekstra)** Kan du finde på flere opgaver i huset? Ret koden så den beslutter hvem der klarer tre husholdningsopgaver. Glem ikke at printe hvilken opgave det handler om!
                example_code: |
                    ```
                    personer = mor, far, Emma, Sophie
                    {repeat} _ _ {print} 'Opvasken tages af ' _ _ _
                    ```
            11:
                story_text: |
                    På dette niveau kan du lave et endnu bedre opvaske skema.
                example_code: |
                    ```
                    dage = mandag, tirsdag, onsdag, torsdag, fredag, lørdag, søndag
                    navne = mor, far, Emma, Sophie
                    _ dag _ dage
                        {print} navne {at} {random} ' tager opvasken på ' day
                    ```
    functions:
        name: funktioner
        default_save_name: funktioner
        description: funktioner
    is_command:
        description: introducing is command
        levels:
            2:
                example_code_2: |
                    ```
                    yndlingsdyr {is} _
                    {print} Jeg kan godt lide yndlingsdyr
                    ```
            7:
                example_code: |
                    ```
                    navn = Hedy
                    svar = 20 + 4
                    ```
    print_command:
        default_save_name: skriv
    songs:
        levels:
            14:
                example_code: "```\nalle_dyr = ['gris', 'hund', 'ko']\nlyde = ['øh', 'vuf', 'muh']\n{for} i {in} {range} 1 {to} 3\n    dyr = alle_dyr[i]\n    lyd = lyde[i]\n    {print} 'Jens Hansen havde en bondegård'\n    {print} 'ih ah ih ah oh!'\n    {print} 'og på den gård der var en ' dyr\n    {print} 'ih ah ih ah oh!'\n    {print} 'Der var ' lyd lyd' her'\n    {print} 'og ' lyd lyd' der'\n    {print} lyde ' her'\n    {print} lyde ' der'\n    {print} 'alle steder ' lyde lyde\n```\n\n```\nlinjer = ['Hvad skal vi gøre med den fulde sømand', 'Smid ham i brummen til han vågner', 'Han skal klynges op i masten']\n{for} linje {in} linjer\n    {for} i {in} {range} 1 {to} 3\n        {print} linje \n    {print} 'Tidligt om morgnen.'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Hu hej, se hun sejler'\n    {print} 'Tidligt om morgnen.'\n```\n"
    turtle:
        name: Skildpadde
        default_save_name: Skildpadde
        description: Lav din egen tegning
        levels:
            1:
                story_text: |
                    Du kan også bruge Hedy til at tegne. Ved at kombinere hjørner og streger, kan du lave et kvadrat eller trapper!

                    Ved at bruge `{forward}` tegner du en streg fremad. Tallet bagefter bestemmer hvor langt skildpadden vil gå. `{turn} {right}` drejer en kvart omgang med uret, `{turn} {left}` drejer mod uret.

                    Hvis du vil baglæns, bruger du `{forward}` kommandoen sammen med et negativt tal. For eksempel `{forward} -100`
                story_text_2: |
                    ### Opgave
                    Dette er starten på en lille trappe. Kan du lave den med 5 trin?
            2:
                story_text: |
                    På dette niveau kan du bruge variabler. For eksempel kan du spørge hvor mange skridt skildpadden skal tage.
                example_code: |
                    ```
                    svar {is} {ask} Hvor mange skridt skal skildpadden tage?
                    {forward} svar
                    ```
                story_text_2: |
                    På niveau 1 kunne skildpadden også kun dreje til højre eller venstre. Det er en smule kedeligt!
                    På niveau 2 kan den se i alle retninger.

                    Brug 90 til at dreje en kvart omgang. Det kalder vi grader. En hel omgang er 360 grader.

                    ### Opgave
                    Kan du lave en figur med denne kode? Måske en trekant eller cirkel?
                example_code_2: |
                    ```
                    {print} Tegner figurer
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
            3:
                story_text: |
                    På dette niveau kan du bruge `{at} {random}` med tegneskildpadden. Et tilfældigt valg får skildpadden til at gå en ny vej hver gang.
                    Brug `{at} {random}` for at vælge et element fra en liste.
                    ### Opgave
                    Kan du lave den tilfældige sti længere ved at copy-paste linje 2 og 3?
                example_code: |
                    ```
                    vinkler {is} 10, 50, 90, 150, 250
                    {turn} vinkler {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    På niveau 4 skal du bruge anførselstegn sammen med `{print}` og `{ask}`. Også når du tegner!
                example_code: |
                    ```
                    {print} _ Tegner figurer _
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kan også skifte farve på stregerne med kommandoen `{color}`. Se eksemplet.
                    Du kan også bruge kommandoen `{color} {white}` til at lave 'usynlige' streger. Du kan bruge de hvide streger til at flytte skildpadden hvor som helst på skærmen før du begynder at tegne.
            5:
                story_text: |
                    På niveau 5 kan du lave et valg med `{if}`. For eksempel mellem forskellige typer figurer.
                example_code: |
                    ```
                    {print} 'Tegner figurer'
                    figur {is} {ask} 'Vil du have en firkant eller en trekant?'
                    {if} figur {is} trekant vinkel {is} 120
                    {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
            7:
                story_text: |
                    På dette niveau kan du bruge beregninger til at tegne forskellige figurer.
                    Du kan måske lært i skolen at dreje en hel omgang er 360 grader. Hvis ikke, ved du det nu!
                    Det er også derfor du bruger 90 grader til en firkant. 360 divideret med 4 er 90.
                    Nu hvor vi kan lave matematik med Hedy kan vi tegne alle de figurer vi ønsker!
                example_code: |
                    ```
                    hjørner = {ask} 'Hvor mange hjørne kunne du tænke dig?'
                    vinkel = 360 / hjørner
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    ```
            9:
                story_text: "Nu hvor vi kan gentage flere streger, kan vi lave lettere lave figurer.\nVi skal kun sætte vinklen en gang og så bruge den variabel i `{repeat}` kommandoen.\n\n### Opgave 1\nKoden i eksemplet skaber et kvadrat. Ændrer koden så den skaber en anden figur, så som en trekant eller sekskant. \n Dette kræver at du ændrer to linjer i koden.\nTip: En hel omgang er 360 grader.\n\n### Opgave 2\nLav nu en tegning der består af mindst på polygoner.\n"
                example_code: |
                    ```
                    vinkel = 90
                    {repeat} 4 {times}
                        {turn} vinkel
                        {forward} 50
                    ```
                story_text_2: |
                    Vi kan nu forbedre programmet der tegner forskellige figurer
                    Kan du regne ud hvor meget skildpadden skal dreje til højre her? Færdiggør koden og du kan tegne hvilken som helst polygon du kunne tænke dig!
                example_code_2: |
                    ```
                    kanter = {ask} 'Hvor mange kanter skal jeg tegne?'
                    vinkel = 360 / kanter
                    {repeat} kanter {times}
                        {turn} _
                        {forward} _
                    ```
            10:
                story_text: |
                    Nu hvor vi kan bruge `{repeat}` inden i en `{repeat}`, kan vi lave mere komplekse figurer.

                    ### Opgave 1
                    Denne kode skaber tre sorte trekanter og fem lyserøde firkanter.

                     **(ekstra)** Lav en figur du selv vælger bestående af mindst to forskellige former.
