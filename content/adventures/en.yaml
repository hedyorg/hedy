adventures:
    story:
        name: Story
        default_save_name: Story
        description: Make a short story
        levels:
            1:
                story_text: |
                    In level 1 you can make a story with a different main character that you enter yourself.

                    In the first line, use `{ask}` and ask who the main character of the story will be.

                    After that first line, start with `{print}` if the sentence needs to be printed.
                    You use `{echo}` if you want your main character to be at the end of the sentence.
                example_code: |
                    ```
                    {ask} The main character of this story is
                    {print} The main character is now going to walk in the forest
                    {echo} They're a bit scared,
                    {print} They hear crazy noises everywhere
                    {print} They're afraid this is a haunted forest
                    ```
                story_text_2: |
                    ### Exercise
                    Now create your own story of at least 6 lines of code.
                    This story cannot be the same as the example code.
                    Use at least one `{ask}` and one `{echo}` command.
                    You can make it about any topic you like.
                    If you can't think of a topic, use one of our choices: going to the movies, a sports match or a day at the zoo.
            2:
                story_text: |
                    In level 2 you can make your story more fun. Your main character's name can now be anywhere in the sentence.

                    You do have to program a little bit extra for that. You must now name your main character first.

                    You can then put that name anywhere in a sentence.
                example_code: |-
                    ```
                    name {is} {ask} What is the name of the main character?
                    {print} name is now going to run in the woods
                    {print} name is a bit scared
                    {print} Suddenly she hears a crazy noise...
                    {sleep}
                    {print} name is afraid this is a haunted forest
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a `{sleep}` command to your code to build up tension in your story.
            3:
                story_text: |
                    In level 3 you can make your story more fun. You can use randomness for any monster, animal or other obstacle, like this:
                example_code: |
                    ```
                    animals {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} They now hear the sound of an animals {at} {random}
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story.
                example_code_2: |
                    ```
                    {print} They hear a sound
                    animals {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} What do you think it is?
                    {add} animal {to_list} animals
                    {print} it was an animals {at} {random}
                    ```
                story_text_3: |
                    This is an example of the `{remove}` command in your story

                    ### Exercise
                    Copy your story from the previous levels into this level.
                    In this level you've learned 3 new commands `{at} {random}` , `{add} {to_list}` and `{remove} {from}`.
                    Add new lines of code to your story, so that all of the new commands are featured at least once in your story.
                example_code_3: |
                    ```
                    {print} His backpack got way too heavy.
                    {print} Inside were a bottle of water, a flashlight and a brick.
                    bag {is} water, flashlight, brick
                    dump {is} {ask} Which item should he dump?
                    {remove} dump {from} bag
                    ```
            4:
                story_text: |
                    ### Exercise
                    Copy the example code and finish it by adding quotation marks on the blanks in lines 1 and 2.
                    The blanks in line 3 and 4 should not be replaced by quotation marks, but a `{sleep}` and a `{clear}` command. Can you make it work?

                    ### Exercise 2
                    Go back to the previous level and copy your story code. Make the code work in this level by adding quotation marks in the right spots.
                    Mind: The variables in your own story should be outside of the quotation marks. Just like the second line of the example code. In that line the variable name is placed outside of the quotation marks.
                example_code: |
                    ```
                    name {is} {ask} _ What is your name? _
                    {print} _ The main character is called _ name
                    _
                    _
                    {print} name _ is now going to walk in the woods _
                    {print} name _ is a bit scared _
                    animals {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ He hears the sound of a _ animals {at} {random}
                    {print} name _ is afraid this is a haunted forest _
                    ```
            5:
                story_text: |
                    In this level you can program different endings, which will make your story even more fun.
                    In the example code you can see how to make 2 different endings.

                    ### Exercise 1
                    Write a new short story of at least 6 lines of code about a topic of your choosing.
                    No inspiration? Choose one of these topics: a superhero, a boring school day, stranded on a desert island.

                    Now give the player a change to choose a happy or a bad end, just like in the example code.
                    Program both the endings.

                    ### Exercise 2
                    Copy the story you've created in your own story adventure in the previous levels.
                    Find a way to add at least 2 `{if}` and `{else}` commands to your story.
                    This can be with a happy or bad ending, but you can also try to find other ways to incorporate the commands.
                example_code: |
                    ```
                    name {is} {ask} 'Who is walking in the forest?'
                    {print} name ' walks through the forest'
                    {print} name ' encounters a monster'
                    end {is} {ask} 'Would you like a good or a bad ending?'
                    {if} end {is} good {print} name ' takes the sword and the monster quickly runs away'
                    {else} {print} 'The monster eats ' name
                    ```
            8:
                story_text: |
                    In a story, someone says words several times. For example, when someone calls for help or sings a song.
                    You can put such repetitions in your story, in this level with `{repeat}`.

                    ### Exercise
                    Add repetition to your own story. Go back to your saved programs, choose your story program from a previous level and
                    find a line containing `{print}` and repeat it!
                example_code: |
                    ```
                    {print} 'The prince kept calling for help'
                    {repeat} 5 {times} {print} 'Help!'
                    {print} 'Why is nobody helping me?'
                    ```
            9:
                story_text: |
                    In this level you can use multiple lines in your `{if}` commands, this way you can upgrade your happy or sad ending!

                    ### Exercise 1
                    The example code shows two different endings; one where the characters jump in a time machine and one where they do not.
                    Complete the blanks with at least one sentence per ending.
                    **Extra** Make the story longer. What happens in the story? You can also add a second `{ask}` with different options.

                    ### Exercise 2
                    Go back to your saved programs, choose your story program from level 5. Now write a good and a bad ending of at least three lines long each!
                example_code: |
                    ```
                    {print} 'OH NO! The T-rex is closing in!'
                    end = {ask} 'Do you want a happy or a sad ending?'
                    {if} end {is} happy
                        {print} 'Just in time Richard jumps back into the time machine!'
                        {print} _
                    {else}
                        {print} 'Oh no! Richard is too slow...'
                        {print} _
                    ```
            10:
                story_text: "In this level you can use `{if}` and `{repeat}` commands inside other `{if}` and `{repeat}` commands. \nThis gives you many options and really helps you to make your story interactive.\n\n### Exercise 1\nFinish the code so the `{if}` works correctly.\n\n### Exercise 2\nAdd an `{if}` and `{else}` for the part of the story where Robin goes home too.\n\n### Exercise 3\nGo back to your level 8 story and use at least two `{if}`s inside another `{if}`.\n"
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                        _ {print} 'Robin buys the book and goes home'
                        _ {else}
                        _ {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
                story_text_2: |
                    By using the `{and}` and `{or}` commands, you can make your stories more versatile. You can ask two questions and respond to the combination of answers.

                    ### Exercise 1
                    Look at the example code and finish it. Then add at least 2 more `{if}` codes with `{and}` or `{or}`.

                    ### Exercise 2
                    Find a story from a previous level, and add one `{and}` or `{or}`.
                    example_code: |
                    ```
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    path = {ask} 'Which path should she choose?'
                    weapon = {ask} 'What weapon does she draw?'
                    {if} path {is} 'left' {and} weapon {is} 'sword'
                        _
                    ```
            11:
                story_text: |
                    In this level you can use the `{for}` command in your story. In this way you could easily program the children's book 'Brown bear, Brown bear, what do you see'.

                    ### Exercise

                    Look at <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> the story</a> if you do not know it, and make sure it is printed as in the book.
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n{print} 'What do you see?'\n```\n"
            16:
                story_text: |
                    Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game == 'on'` so you can play until the game is over.
                    Or you can use `{while} sword == 'lost'` so the player can't continue the game until they have found something.

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    keys = 'lost'
                    {print}('You are standing in your garden and you have lost your keys.')
                    {print}('Where do you want to look for them?')
                    {print}('You can choose: tree, flowerbed, rock, postbox')
                    {while} keys == 'lost':
                        location = {input}('Where do you want to look?')
                        {if} location == 'flowerbed':
                            {print}('Here they are!')
                            keys = 'found'
                        {else}:
                            {print}('Nope they are not at the ', location)
                    {print}('Now you can enter the house!')
                    ```
            13:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('Welcome to this story!')
                    ```
                story_text_2: |
                    ### Exercise 2
                    We have already prepared an `{input}` for you. First, use the `name` variable in your story.
                    Then add a second `{ask}` and use that variable as well.
                    Tip: Remember the commas in a `{print}` between text and variables!
                example_code_2: |
                    ```
                    name = {input}("What's your name?")
                    {print}('Welcome to this story!')
                    ```
    add_remove_command:
        name: '{add} {to_list} & {remove} {from}'
        default_save_name: add_remove_command
        description: introducing {add} {to_list} and {remove} {from}
        levels:
            3:
                story_text: |
                    ## {add} {to_list}
                    You can add items to the list with the `{add} {to_list}` command. To add an item to a list you can simply type: `{add} penguin {to_list} animals` or you can use the `{ask}` command like in the example code.
                example_code: |
                    ```
                    animals {is} dog, cat, kangaroo
                    like {is} {ask} What is your favorite animal?
                    {add} like {to_list} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_2: |
                    ## {remove} {from}
                    If you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.
                example_code_2: |
                    ```
                    animals {is} dog, cat, kangaroo
                    dislike {is} {ask} What animal do you not like?
                    {remove} dislike {from} animals
                    {print} I choose animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hoping for to the list and remove the flavors they are allergic to.
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: ask_command
        description: Introduction {ask} command
        levels:
            1:
                story_text: |
                    ## The `{ask}` command
                    Now that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:
                example_code: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    ```
                story_text_2: |
                    ## The `{echo}` command
                    If you want the computer to repeat the answer back to you, you can use the `{echo}` command. The answer will be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Hello!
                    {ask} What is your name?
                    {echo} hello
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.
                    Then ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.
                example_code_3: |
                    ```
                    _ How are you doing?
                    _
                    ```
            2:
                story_text: |
                    ## The `{ask}` command
                    Now that we can use **variables** in our codes, we no longer need the `{echo}` command.
                    We can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.
                    Check it out:

                    This way your code is becoming interactive!
                example_code: |
                    ```
                    name {is} {ask} What is your name?
                    {print} Hello name
                    age {is} {ask} How old are you?
                    {print} name is age years old.
                    ```
                story_text_2: |
                    ### Exercise
                    In the previous adventure you have practised with setting variables with the `{is}` command.
                    You have created at least 3 variables and used them with a `{print}` command.
                    Now, instead of setting the variables we want you to make the variables interactive, like we did in our example.

                    Copy your code from the previous adventure and make the variables interactive by using `{ask}` commands.
                example_code_2: |
                    ```
                    favorite_animal {is} {ask} What is your favorite animal?
                    {print} I like favorite_animal
                    ```
            13:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: and_or_command
        description: 'and, or'
        levels:
            10:
                story_text: |-
                    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two ifs but can use `{and}` and `{or}`.
                    If you use and, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        print 'You are the real Hedy!'
                    {elif} name {is} 'Hedy' {or} age {is} 2
                        {print} 'So close.. but you are not Hedy!'
                    {else}
                        {print} 'You are not Hedy!'
                    ```
    calculator:
        name: Calculator
        default_save_name: Calculator
        description: Create a calculator
        levels:
            7:
                story_text: |
                    Now that you can do maths, you can make a calculator yourself!
                example_code: |
                    ```
                    number_1 = {ask} 'Fill in the first number:'
                    number_2 = {ask} 'Fill in the second number:'
                    correct_answer = number_1 * number_2
                    {print} number_1 ' times ' number_2 ' is ' correct_answer
                    ```
                story_text_2: |
                    ### Exercise
                    The calculator above will calculate the answer for you, but you can also make a program to test your own maths skills, like this:
                    Fill in the blanks to make it complete!
                example_code_2: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} _ {print} 'good job!'
                    {else} {print} 'Wrong! It was ' _
                    ```
                story_text_3: |
                    **Extra** You can also let the computer do random products on its own using `{random}`.
                example_code_3: |-
                    ```
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = {ask} 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
                    ```
            10:
                story_text: |
                    In a previous level, you've created a calculator. In this level, you can expand that code so it asks multiple questions.

                    ### Exercise 1
                    Can you finish line 10 to get the code to work?

                    ### Exercise 2
                    Give the player feedback when they enter an answer, like `{print} 'Correct!'` or `{print} 'Wrong! The correct answer is ' correct_answer`.
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct_answer = number_1 * number_2
                        {print} 'What is ' number_1 ' times ' number_2 '?'
                        answer = {ask} 'Type your answer here...'
                        {print} 'Your answer is ' answer
                        {if} _ {is} _
                            score = score + 1
                    {print} 'Great job! Your score is... ' score ' out of 10!'
                    ```
            11:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            15:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total divided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next adventure!**
                example_code: |
                    ```
                    {def} calculate_mean_grade():
                        total = 0
                        {for} i {in} {range}(1,4):
                            grade = {input} _
                            total = total + _
                            {return} _ / 4

                    mean_grade = _
                    {print}('Your mean grade is ', mean_grade)
                    ```
            16:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question if they answer incorrectly.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then call the function.
                example_code: |
                    ```
                    {define} new_question():
                        numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                        number_1 = numbers[random]
                        number_2 = numbers[random]
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print}('Well done!')

                    {print}('Give 10 correct answers to win!')
                    {for} i {in} {range} 1 {to} 10:
                        _
                    {print}('You win!')
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            15:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous adventure.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: {define} calculate_mean_grade {with} subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
            10:
                story_text: |
                    ### Exercise 1
                    Let's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.

                    ### Exercise 2
                    Sometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.
                    Ask for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.
                    Empty the programming field and create your own solution.
                example_code: |
                    ```
                    answer1 = {ask} 'What is 10 times 7?'
                    answer2 = {ask} 'What is 6 times 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: '{clear} command'
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text from your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, you might need to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read as you can see in the example!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SURPRISE!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: debugging adventure
        levels:
            1:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will show you code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} I love programming
                    Do you love programming too?
                    {echo}
                    {print} What are your hobbies?
                    {echo} Your hobbies are
                    ```
            2:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    destination {ask} Where are you going on holidays?
                    {print} The flight to dstination leaves at 3 pm.
                    {ask} Did you check in your luggage yet?
                    {echo}
                    {print} Let me print your boarding pass for you.
                    {sleep}
                    Here you go! Have a nice trip!
                    ```
            3:
                story_text: |-
                    Welcome to a debugging adventure. Debugging a code means getting rid of mistakes in the code.
                    That means that in these debugging adventures, we will give you a code that does not work yet.
                    You will have to figure out what's wrong and correct the mistakes.

                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to_list} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to the online library!
                    {ask} What genre of books do you like?
                    {print} You like genre
                    author {is} {ask} 'Who's your favorite author?'
                    {print} 'author is your favorite author'
                    {print} Hmmm... i think you should try... books {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    certificate {is} {ask} 'Do you have a swimming certificate?'
                    {if} certificate 'yes' {print} 'Great! You can swim in the pool!
                    {print} {else} 'You can enter, but you can't swim.'
                    discount {is} {ask} 'Are you younger than 12?'
                    {if} discount {is} yes
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice day!'
                    ```
                answer_code: |
                    ```
                    {print} "Welcome to Swimming Pool Hedy!"
                    certificate {is} {ask} 'Do you have a swimming certificate?'
                    {if} certificate {is} 'yes' {print} 'Great! You can swim in the pool!'
                    {else} {print} "You can enter, but you can't swim."
                    discount {is} {ask} 'Are you younger than 12?'
                    {if} discount {is} 'yes' {print} 'That will be $3,50'
                    {print} 'That will be $5,50'
                    {print} 'Have a nice day!'

                    ```
            6:
                story_text: |
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    foods {in} popcorn, candy, nachos
                    food_choice {ask} 'What do you want to eat?'
                    {if} food_choice {is} foods
                    {print} 'We have that! I'll get it.'
                    {else} food_choice {is} 'nothing' 
                    {print} 'No food for you then.'
                    {else} food_choice {is} "" {print} "I'm afraid we don't have that.'
                    ```
                answer_code: |
                    ```
                    foods {is} popcorn, candy, nachos
                    food_choice {is} {ask} 'What do you want to eat?'
                    {if} food_choice {in} foods
                    {print} "We have that! I'll get it."
                    {elif} food_choice {is} 'nothing'
                    {print} 'No food for you then.'
                    {else} 
                    {print} "I'm afraid we don't have that."
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Vending machine
                    chosen_product = {ask} 'Please select a product'
                    one_dollar_products = coke orange juice water
                    two_dollar_products = chocolate, cookie, muesli bar
                    three_dollar_products = potato chips, beef jerky, banana bread
                    {if} chosen_product {is} {in} one_dollar_products
                    price = 1
                    {elif} chosen_product {is} two_dollar_products
                    price = 2
                    {elif} chosen_product {in} three_dollar_products
                    price = 3
                    {else}
                    price
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?
                    total {is} price * amount_of_products
                    {print} 'That will be $' total ' please'
                    ```
                answer_code: |
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    one_dollar_products = coke, orange juice, water
                    two_dollar_products = chocolate, cookie, muesli bar
                    three_dollar_products = potato chips, beef jerky, banana bread
                    {if} chosen_product {in} one_dollar_products
                    price = 1
                    {elif} chosen_product {in} two_dollar_products
                    price = 2
                    {elif} chosen_product {in} three_dollar_products
                    price = 3
                    {else}
                    price = 0
                    amount_of_products = {ask} 'How many of ' chosen_product ' would you like to have?'
                    total = price * amount_of_products
                    {print} 'That will be $' total ' please'
                    ```
            8:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |-
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodyparts {is} {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} body {is} 'both'
                    price = 25
                    {else}
                    18
                    {print} 'That will be $' price
                    color = {ask} 'What color would you like?'
                    sparkles = {ask} 'Would you like some sparkles with that? We charge $3 extra for that.'
                    {if} sparkles {is} yes
                    price = price + 3
                    {else} {print} 'So no extra charge'
                    {repeat} 3 {print} 'Another second...'
                    {print} 'All done! That will be $' price ' please!'
                    'Thank you! Byebye!'
                    ```
                answer_code: |-
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodyparts = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} 'both'
                    price = 25
                    {else}
                    price = 18
                    {print} 'That will be $' price
                    color = {ask} 'What color would you like?'
                    sparkles = {ask} 'Would you like some sparkles with that? We charge $3 extra for that.'
                    {if} sparkles {is} 'yes'
                    price = price + 3
                    {else} 
                    {print} 'So no extra charge'
                    {repeat} 3 {times} {print} 'Another second...'
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    answer = 'Welcome to our pizza shop. Would you like to order?'
                    if answer
                    amount 'How many pizzas would you like to buy?'
                    else
                    print "You're buying one anyways!"
                    amount = 1
                    'We have Margherita and Pepperoni pizzas.'
                    repeat amount
                    chosen_pizza = ask 'What kind of pizza would you like?'
                    print 'One ' chosen_pizza '.'
                    price = amount * 10
                    That will be ' price ' dollars please.'
                    ```
                answer_code: |
                    ```
                    answer = ask 'Welcome to our pizza shop. Would you like to order?'
                    if answer is yes
                        amount = ask 'How many pizzas would you like to buy?'
                    else
                        print "You're buying one anyways!"
                        amount = 1
                    print 'We have Margherita and Pepperoni pizzas.'
                    repeat amount times
                        chosen_pizza = ask 'What kind of pizza would you like?'
                        print 'One ' chosen_pizza '.'
                    price = amount * 10
                    print 'That will be ' price ' dollars please.'
                    ```
            10:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind of bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollars' please'
                    ```
                answer_code: |
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount = {ask} 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                        chosen_bread = {ask} 'What kind of bread would you like your sandwich to be?'
                        types_of_bread = white, wheat, rye, garlic, gluten free
                        {if} chosen_bread {in} types_of_bread
                            {print} 'Lovely!'
                        {else}
                            {print} "I'm sorry we don't sell that"
                        topping = {ask} 'What kind of topping would you like?'
                        sauce = {ask} 'What kind of sauce would you like?'
                        {print} 'One ' chosen_bread ' with ' topping ' and ' sauce '.'
                    price = amount * 6
                    {print} 'That will be ' price ' dollars please.'
                    ```
    dice:
        name: Dice
        default_save_name: Dice
        description: Make your own dice
        levels:
            3:
                story_text: |
                    In this level we can choose from a list. With that we can let the computer choose one side of the die.
                    Take a look at the games you have in your closet at home.
                    Are there games with a (special) die? You can also copy it with this code.
                    For example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} You threw _ {at} {random} !
                    ```
                story_text_2: |
                    ### Exercise
                    The dice in the example above are dice for a specific game. Can you make normal dice?
                    Or other special dice from a different game?
                example_code_2: |
                    ```
                    choices {is} _
                    ```
            4:
                story_text: |
                    In this level you can also create dice. But this time you can try it yourself, without an example code!

                    ### Exercise
                    Make your own dice in this level.
                    Tip: If you have no idea how to make dice. Take a peek at your dice from the previous level, but don't forget to add quotation marks.
            5:
                story_text: |
                    We are going to add the `{if}` and `{else}` commands to our dice!

                    ### Exercise
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm. It should say "You have to throw again" if you've thrown anything else.
                    **Extra** Maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction, e.g. 'yes' for 6 and 'pity' for something else.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} choices {at} {random}
                    {print} 'you have thrown ' throw
                    _ throw {is} earthworm {print} 'You can stop throwing.'
                    _ {print} 'You have to throw it again!'
                    ```
            7:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:

                    ### Exercise
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to copy and paste some lines of the code.
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw ' throw
                    {if} throw {is} earthworm
                    points = points + 5
                    {else}
                    points = points + throw
                    {print} 'those are ' points ' points'
                    ```
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of copy and pasting, right? We are going to make that easier in level 7!
            8:
                story_text: |
                    You can also make a dice again in this level. With the `{repeat}` code you can easily roll a whole hand of dice.

                    ### Exercise
                    Try to finish the sample code! **Extra** Think of a game you know that involves a dice and program that using a `{repeat}`.
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                    Change the names into names of your friends or family, and finish the code.
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
            16:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = [1, 2, 3, 4, 5, 6]
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print}('Yes! You have thrown 6 in ', tries, ' tries.')
                    ```
    dishes:
        name: Dishes?
        default_save_name: Dishes
        description: Use the computer to see who does the dishes
        levels:
            3:
                story_text: |
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random} has to do the dishes
                    ```
                story_text_2: |
                    ### Exercise
                    Make your own version of the dishwasher program. Firstly make a list of your family members.
                    Then think of a task that needs to be done, and let the computer decide who has to do the task with the `{at} {random}` command.

                    **Extra** Don't feel like doing the dishes yourself? Hack the program by removing your name from the list with the `{remove}` `{from}` command.
            4:
                story_text: |
                    With quotation marks you can make your dishwashing program even better.

                    ### Exercise
                    First, fill in right symbols or commands on the blanks to make this example program work.
                    Did you get it? Great! Now copy your own code from the previous level and make it work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} _ the dishes are done by _
                    {sleep}
                    {print} people {at} _
                    ```
            5:
                story_text: |
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.
                    ### Exercise
                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    dishwasher {is} people {at} {random}
                    _ dishwasher {is} Sophie {print} _ too bad I have to do the dishes _
                    _ {print} 'luckily no dishes because ' _ ' is already washing up'
                    ```
            7:
                story_text: |
                    How often is everyone going to do the dishes? Is that fair? You can count it in this level.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    emma_washes = 0
                    dishwasher = people {at} {random}
                    {print} 'The dishwasher is' dishwasher
                    {if} dishwasher {is} Emma
                    emma_washes = emma_washes + 1
                    {print} 'Emma will do the dishes this week' emma_washes 'times'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to do the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again until everybody has had a turn.

                    Monday and Tuesday are ready for you! Can you add the rest of the week?
                    And‚Ä¶ can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    ```
            8:
                story_text: |
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for multiple days!
                    ### Exercise
                    Use the `{repeat}` command to decide on who needs to wash the dishes for an entire week. Each blank needs to be filled with one command or number!
                    **Extra** Can you think of other tasks in the house? Adapt the code so it decides on three household chores. Do not forget to print what tasks it concerns!
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'Dishwashing will be done by ' _ _ _
                    ```
            11:
                story_text: |
                    In this level you can make a schedule for the whole week in an easy way!

                    ### Exercise
                    Add a second chore, such as vacuuming or tidying up, and make sure it is also divided for the whole week.
                    <br> **Extra** The program is not fair, you can be unlucky and wash up all week. How could you make the program more fair?
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    {for} day {in} days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: '{elif}'
        levels:
            6:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prizes is 1 million dollars, an apple pie, nothing
                    your_prize is prizes {at} {random}
                    {print} 'You win ' your_prize
                    {if} your_prize {is} '1 million dollars'
                    {print} 'Yeah! You are rich!'
                    {elif} your_prize {is} 'an apple pie'
                    {print} 'Lovely, an apple pie!'
                    {else}
                    {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: '{for} command'
        levels:
            11:
                story_text: |-
                    ## For
                    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
                    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Exercise
                    Finish this code by adding `{for} action {in} actions` to line 2.
                example_code_2: |
                    ```
                    actions = clap your hands, stomp your feet, shout Hurray!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' action
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            13:
                story_text: |
                    Lastly, we'll turn `{for} i {in} {range} 1 {to} 5` into real Python code, like this:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Fortune teller
        default_save_name: Fortune Teller
        description: Let Hedy predict the future
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her `{echo}` the players' answers.
                    Like this:
                example_code: |
                    ```
                    _ Hello, I'm Hedy the fortune teller!
                    _ Who are you?
                    _ Let me take a look in my crystal ball
                    _ I see... I see...
                    _ Your name is
                    ```
                story_text_2: |
                    ### Exercise
                    Copy the example code into your input screen and fill in the blanks to make the code work.
                    **Extra** Change the code and let the fortune teller not only predict your name, but also your age, your favorite sports team or something else about yourself.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only `{echo}`.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    ```
                    {print} I‚Äôm Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or 'ask again'.
            4:
                story_text: |
                    ### Exercise
                    We have removed all the quotation marks from this example code, can you add them in all the right places?

                    ### Exercise 2
                    Go back to the previous level and copy your fortune teller code. Make the code work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Im Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is your question:  question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
            6:
                story_text: |
                    ### Exercise
                    In the example code you see how to make a fortune teller program that allows you to tip the odds in your favor. This cheating program always tells you that you will win the lottery, but your friends will never win.

                    Use this to make your own program, be creative! For example you could create a code that predicts that:
                    * your favorite sports team will beat all the competitors!
                    * your favorite movie will be chosen for movie night!
                    * you win tickets to your favorite show!
                    * you are the fairest of them all, like Snow White's magic mirror.
                    Let your imagination do the work!

                    Your program has to exist of at least 10 lines of code and need to have at least one `{if}` and `{else}` command.
                example_code: |
                    ```
                    friends {is} Jordan, Lucy, Dave
                    {print} 'I can predict if you will win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    good_answer {is} Hurray! You win!, You will definitely win!, We have a winner!
                    bad_answer {is} Bad luck! Try again!, Another person will win, You lose!
                    {if} person {in} friends
                    {print} good_answer {at} {random}
                    {else}
                    {print} bad_answer {at} {random}
                    ```
            7:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.



                    ### Exercise
                    Can you think of your own (silly) fortune telling machine?
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```
            8:
                story_text: |
                    ### Exercise
                    Finish this program that tells you if your crush loves you back or not.
                example_code: |
                    ```
                    {print} 'I have a flower with magic petals'
                    {print} 'If you pick the petals the flower will tell you if your crush loves you back'
                    amount = {ask} 'How many petals do you want to pick?'
                    options = they love you, they love you not
                    _ _ _ _ options {at} {random}
                    ```
            9:
                story_text: |
                    In the next example you can have your fortune teller ask multiple questions and also print them!

                    ### Exercise
                    Can you fill in right command on the blanks?
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can ask me 3 questions.'
                    answers = yes, no, maybe
                    _ _ _
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says... ' answers {at} {random}
                    ```
            11:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartment, shack, house). In this game you can predict for all the players at once, what their future will look like.

                    ### Exercise
                    Fill in the blanks by using the new command that you've learned this level.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    _
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables `chosen_limb` and `chosen_color`.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} next_turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {repeat} _
                        call next_turn
                        {sleep} 2
                    ```
            15:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument 'place' is used. Place is a variable that is only used in the function, so an argument.
                    To use 'place' we have placed `place` after `{define} song`.
                    When the function is called, the computer will replace the argument 'place', with the piece of text after ` song {with}`.

                    ### Exercise
                    The next verse of this song goes:

                    ```not_hedy_code
                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead
                    ```

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {def} song(place):
                        {print} ('My Bonnie is over the ', place)

                    song('ocean')
                    song('sea')
                    song('ocean')
                    ```
                story_text_2: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code_2: |
                    ```
                    {def} calculate_new_price(amount, percentage):
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        {return} amount - discount_amount

                    old_price = {input} ('How much is on the price tag?')
                    discount = {input} ('What percentage is the discount?')

                    new_price = _ calculate_new_price(old_price, _)
                    {print}('The new price is ', new_price, ' dollar')
                    ```
                story_text_3: |
                    Let's make functions the Pythons way! To define a function, we no longer use:

                    `{define} name_function {with} argument_1, argument_2):`

                    but we use:

                    `{def} name_function(argument_1, argument_2):`.

                    If you don't want to use arguments, you just leave the space between the parentheses empty.
                example_code_3: |
                    ```
                    {def} calculate_score(answer, correct_answer):
                        {if} answer == correct_answer:
                            score = 1
                        {elif} answer == '?':
                            score = 0
                        {else}:
                            score = -1
                        {return} score

                    answer = {input} ('Where can you find the Eiffel Tower?')
                    correct_answer = 'Paris'
                    score = calculate_score(answer, correct_answer)
                    {print} ('Your score is... ', score)
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            16:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Harry Potter adventures
        levels:
            11:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Haunted House
        default_save_name: Haunted House
        description: Escape from the haunted house
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but if not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ### Exercise
                    Copy the example code to your input screen by clicking the yellow button.
                    Now finish the story by adding at least 5 lines of code.
                    Remember to start each line of codes with a `{print}` command.
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room...
                    {print} But a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room...
                    {print} But a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!

                    ### Exercise
                    Copy the example codes and fill in the blanks to make it work!

                    **Extra** This story is pretty straight forward, maybe you can spook it up a bit by adding a more exciting story.
                    Also you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.

                    ### Exercise
                    Can you make your Haunted House level 4 proof?

                    ### Exercise 2
                    Go back to the previous level and copy your haunted house code. Make the code work in this level by adding quotation marks in the right spots.
                example_code: |
                    ```
                    _ Add quotation marks to this code _
                    {print} Escape from the haunted house!
                    {print} There are 3 doors in front of you...
                    choice {is} {ask} Which door do you choose?
                    {print} You picked door ... choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} You see...
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.

                    ### Exercise
                    Can you find the 4 missing words to complete the code?
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    _ _ _ _ {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
            10:
                story_text: "In this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n### Exercise\nNow it's very hard to win this game, can you make it easier to win?\nChange your code so it only has one wrong door and two correct doors instead of one correct door and two wrong ones? \nTip: This means changing the variable correct_door into wrong_door, and switching the `{if}` and `{else}` code.\nAnd of course you may also change the story and make it your own. Change the monsters or make it a happy game show where you get a gift!\n"
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
            14:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} ('You are standing in front of an old mansion')
                    {print} ('Something is not right here')
                    {print} ('You hear ', _)
                    {print} ('You are going to explore it')
                    {print} ('You enter the kitchen and see a lighter, a raw ham and a garlic.')
                    your_weapon = {input} ('What do you bring with you?')
                    {print} ('With your ', your_weapon, ' you enter the living room')
                    {print} ('There you find a ', _)
                    needed_weapon = _
                    {if} your_weapon == needed_weapon:
                        {print} ('You use your ', your_weapon)
                        {print} _
                        {print} ('YOU WIN!')
                    {else}:
                        {print} ('You have chosen the wrong weapon...')
                        {print} _
                        {print} ('GAME OVER')
                    ```
    hospital:
        name: Hospital
        default_save_name: Hospital
        description: Hospital
        levels:
            1:
                story_text: |
                    Welcome to the Hospital Adventure. In this adventure you'll be helping the director of a hospital to fix some problems that occur in their hospital. This is your first assignment:

                    There is a horribly long line at our front desk and the employee is very busy. Could you help this employee by programming a self registration kiosk?
                    ### Exercise
                    The self registration kiosk should:
                    * Greet the patient
                    * Ask for their name and repeat it back
                    * Ask for their date of birth and repeat it back
                    * Ask on which department they have their appointment
                    * Ask with which doctor they have their appointment
                    * Thank the patient for succesfully registering
                    * Tell the patient to take a seat in the waiting room
            2:
                story_text: |
                    The maternity ward of our hospital would like some music for the babies to fall asleep to. Can you program a lullaby?
                    ### Exercise
                    Choose a song to play:
                    * Mary had a little lamb (easy)
                    * Itsy Bitsy Spider (medium)
                    * Brahms lullaby (hard)
                    HINT: You can try to think of the correct musical notes yourself, but you can also search for them on the internet.
            3:
                story_text: |
                    There is a problem in the nurses' office. All the nurses are complaining that the shedule for the night shifts is unfair. Some nurses have to work 2 night shifts a week, while others work none at all.
                    Can you help our nurses by creating a program that makes a fair night shift schedule?
                    ### Exercise
                    The program should:
                    * Show which nurse has to work the night shift on which day of the week.
                    * Make sure that each nurse has to work only one night shift a week.
                    The nurses names are: Meredith, Miranda, Alex, Derek, Christina, Izzy, George
            4:
                story_text: |
                    Our nurses have a lot of tasks to accomplish in one day. One of these tasks is going around all the patients in the morning and ask them what they would like to have for breakfast.
                    Can you lessen the workload of our nurses by creating a program in which the patients choose their breakfast and send their order directly to the kitchenstaff?
                    ### Exercise
                    The program has to:
                    * Ask the patient to enter their name and roomnumber
                    * Greet the patient by their name
                    * Display all the food (sandwiches, cereal, fruit etc.) and drinks on the menu
                    * Ask the patient what they would like to eat
                    * Ask them what they would like to drink
                    * Repeat the order back to the patient
                    * Thank the patient for ordering
                    * Tell them that their order will be brought to their roomnumber in 15 minutes.
            5:
                story_text: |
                    Our centre for burnwounds would like to lessen the workload by using an online triage tool. This way the patients can not only register their name and date of birth, but also what kind of burnwound they have (first, second or third degree) and advise on what to do next.
                    Can you help them?
                    ### Exercise
                    The program should:
                    * Start with a greeting and simple registration of the patients name and date of birth
                    * Preform a triage. Is the skin only red: first degree burn. Are there blisters: second degree burn. Is the skin gone/blackened/whitened from the burn: third degree burn.
                    * Give the patient the appropriate advise. First degree: Cool the burn with water and apply some cream on it. You do not need to see a doctor. Second degree: The doctor will see you and prescribe a special cream. Please wait in the waiting area. Third degree: Please go the the service desk now. You will need urgent care a.s.a.p.
            6:
                story_text: |
                    Our midwifes get a lot of questions from pregnant ladies about what they can and can't eat while pregnant. Can you help their patients by creating an app that tells them if food is safe or not?
                    ### Exercise
                    Program should:
                    * Ask the patient what they would like to eat.
                    * Checks if it is in the list with 'unsafe food'
                    * If it is in the list with unsafe food, it tells the patient it is unsafe to eat.
                    * If it is not on the list, it tells the patient that it is probably safe to eat.
                    * Then the app also warns the person to always use common sense because the list might not be 100% complete. And it advises the person to always avoid raw meats, fish and eggs and alcohol.
                    When you are pregnant it is unsafe to eat: sushi, shrimp, tuna, blue cheese, tiramisu, runny eggs, carpaccio, rare steak, tartar
            7:
                story_text: |
                    Our nurses keep track of the fluid balance of our patients. The fluid balance is how much fluid the patient has gained today (by drinking, eating or IV) minus how much fluid the person lost today (by peeing or vomiting).
                    The fluid balance needs to stay positive. If the fluid balance is negative the nurse needs to administer more IV fluid.
                    Can you help our nurses by making a tool they coudl use to calculate their patients fluid balance?
                    ### Exercise
                    The program should:
                    * Ask how much fluid the patient gained from drinking that day.
                    * Ask how much fluid the patient gained from eating that day.
                    * Ask how much fluid the patient gained from their IV that day.
                    * Ask how much fluid the patient lost from peeing that day.
                    * Ask how much fluid the patient lost from vomiting that day.
                    * Calculate the patients fluid balance and display it to the nurse.
                    * Tell the nurse to check whether the balance is positive or negative to decide if the patient needs more IV fluid today or not.
            8:
                story_text: |
                    Our helipad for the trauma helikopter has lost its paintcoat. Can your write a program for the turtle to redraw the markings?
                    ### Exercise
                    Draw the markings on the helipad.
                    <img src="https://github.com/user-attachments/assets/96deeb9e-b155-4a3d-91f3-3c447df7ce2b" width="200">
            9:
                story_text: |
                    Our ambulance is due for some service. The painted red cross on the side is fading and the siren is no longer working.
                    Can you fix it?
                    ### Exercise
                    The program should:
                    * Paint a red cross with the drawing turtle.
                    * Make a siren sound after finishing the red cross.
                    HINT: use the repeat command.
            10:
                story_text: |
                    The staff at our emergency room has a problem. They say that there are a lot of patients coming in who don't really have an emergency and who should actually go to their gp.
                    These people are filling up the waiting room and putting a lot of workload on our staff. Will you help the emergency room staff by making a triage app that tells the patient if they have to go to the emergency room or not?
                    ### Exercise
                    Your program should tell the patient if they should 'go to the emergency room a.s.a.p.', 'call your healthcare provider to discuss your situation' or 'go to your own gp at earliest convenience'.
                    The programm will ask these questions:
                    * Is your situation life-threatening?
                    * Do you experience trouble breathing?
                    * Are you suddenly not able to speak, see, walk, or move?
                    * Did you ingest or inhale poison?
                    * Did you break a bone?
                    * Do you have a serious allergic reaction?
                    * Are you in severe pain?
                    If the patient answers 'yes' to any of these questions, the program will tell them to go to the emergency room a.s.a.p.. It will not ask any other questions, because time is of the essence.
                    If the patient answers 'no' to all the questions the program will ask:
                    * Can it wait till tomorrow?
                    If the answer is 'yes' the program will tell the patient to go to the gp at their earliest convenience. If the answer is 'no' the program will advise to call their healthcare provider to discuss the situation.
            11:
                story_text: |
                    We have a problem in the vaccination clinic. The screen that calls the next patient to go to the vaccination area is broken down. Can you fix it?
                    ### Exercise
                    The program should:
                    * Have a list of names from patients with an appointment
                    * Ask the nurse if there are any new patients today and if so how many.
                    * Add the names of the new patients to the list as well
                    * Then the program should call on a patient to go to the vaccination area.
                    * The program should wait 10 seconds, clear the screen and call on the next patient, until every patient on the list has been called on.
            12:
                story_text: |
                    We are designing a new hospital ward and we would like to draw a floorplan for this new ward.
                    We would like to have room for 5 patients in the ward. All patients should get a bed and a bedside table.
                    The floorplan should look something like this:
                    <img src="https://github.com/user-attachments/assets/078929cb-c9af-4bcf-87a2-0398ad91d3f0" width="500">
                    ### Exercise
                    The program should:
                    * Draw the floorplan for the new ward!
                    * Use functions to draw the beds and bedside tables.
            13:
                story_text: |
                    Our hospital does not only have a lot of patients, but also a lot of personnel. Each member of the staff needs a badge that states their information.
                    Can you make a program so that a new employee can fill in their information and gets a badge printed?
                    ### Exercise
                    The program should should:
                    * Welcome the new employee
                    * Ask them their title, first name, last name, date of birth, place of birth, function, department and personnel number.
                    * Thank the new employee and tell them their badge will be printed soon.
                    * Pause the program for 2 seconds.
                    * Print the title, first name and last name.
                    * Print the date of birth and the place of birth.
                    * Print the function and department.
                    * Print the personnel number.
            14:
                story_text: |
                  Our janitors have a big list of tasks. Some tasks are done everyday, others on a certain day, season or date. This is very confusing and leads to situations where some tasks are forgotten.
                  Can you help by writing a program that'll print the correct tasklist for that day?
                  ### Exercise
                  The program should:
                  * Wish the janitor a goodmorning.
                  * Ask the janitor what day of the week it is, which month and which day of the month.
                  * Print the correct tasklist for that day.
                  The tasks that should be done:
                  * Everyday tasks: mop the floor, clean the toilets, open the curtains
                  * On mondays and thursdays: water the plants
                  * On tuesday and fridays: mop the floors
                  * On saturdays: wash the coffeemachine
                  * On the first of each month: wash the windows
                  * On the 7th of each month: refill the vending machines
                  * On the 14th of each month: check the batteries for the fire alarms
                  * Everyday in wintermonths: turn on the heaters
                  * Everyday in summermonths: turn on the airconditioning
                example_code: |
                  The program should end like this:
                    ```
                    make_tasklist(day, month, date)
                    ```
            15:
                story_text: |
                    After surgery our patients can sometimes experience a lot of pain. In those cases our patients can be given a morphine pump. They can administer some morphine themselves if they are in pain.
                    These pumps need to be programmed very carefully, so that the patients don't give themselves too much morphine. Can you program a morphine pump for us?
                    ### Exercise
                    The program should:
                    * Ask the nurse how many milliliters of morphine the patient has already had today.
                    * Tell the nurse to give the device to the patient
                    * Ask the patient how much pain they are experiencing on a scale of to 10.
                    * Tell the patient to press the x button if they would like some more morphine.
                    * Call the function start_pump with arguments pain_level and morphine_level if x is pressed.
                    * The function should print 'You will be administered 20 more ml of morphine' while the patients pain level is higher than or equal to 6 and the morphine level is lower than 120.
                    * After administering new morphine the program should sleep for 2 minutes (while testing your program you can use 2 seconds).
                    * After those 2 minutes, the morphine level should be updated (+20ml) and the pain level should be updated by asking the patient how they are feeling now.
                    * If the morphine level is too high or the patient is no longer in pain, the program should tell the patients that they won't be getting more morphine. If they are in a lot of pain, tell them to call the nurse.
                    * Tell the patient that the pump will be shut down now, and to press x if they need the pump to start again.
            16:
                story_text: |
                    Our medical students have to learn the medical terms for all the bodyparts. They seem to be struggling to remind all the anatomical names and they seem to find the studying very boring.
                    Can you help them by creating a game that allows them to practise the medical terms?
                    These are the terms that the students need to know: corpus = body, caput = head, ocolus = eye, nasus = nose, auris = ear, os = mouth, collum = neck, manus = hand, pectus = chest, humerus = shoulder, venter = stomach, tergum = back
                    ### Exercise
                    The program should:
                    * Be a game that allows the students to practise the medical terms.
                    * Give the students a point and a compliment when they have got the right answer.
                    * Take away a point and tell them the answer is incorrect when they have got the answer wrong.
                    * Also show the students the correct answer for a couple of seconds if they have given the wrong answer, wipe the answer off the screen again and keep asking the question until they have got it right.
                    * Keep playing until the student has answered all the questions correctly.
                    * Show the final score to the student.
                    * Give the student feedback based on their score: 12 points: Amazing!, 8 - 11 points: Good job, keep practising!, 7 or less: You should study more!
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            15:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple arguments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with `{ask}` commands.
                example_code: |
                    ```
                    {def} welcome_message(title, last_name, country, room_number):
                        {print} ('Welcome to Hotel Hedy, ', title, ' ', last_name)
                        nice_trip {is} {input} ('Did you have a nice trip from ', country, '?')
                        {if} nice_trip == 'yes':
                            {print} ('Lovely!')
                        {else}:
                            {print} ('Sorry to hear that.')
                            {print} ('Hopefully you can take a nice rest in you room.')
                        {print} ('Your room number is ', room_number)

                    {print} ('Hello. Please fill in your information to check in.')
                    title = {input} ('What is your title (mr, mrs, ms, dr, etc.)?')
                    name = {input} ('What is your last name?')
                    homecountry = {input}('What country do you come from?')

                    welcome_message(title, name, homecountry, 105)
                    ```
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the {if} command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            9:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a `{if}` or `{else}` command.
                    Check out the example code.

                    ### Exercise
                    Add an `{else}` command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            10:
                story_text: |
                    In this level you can also put an `{if}` command inside another `{if}` command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the {in} command
        levels:
            6:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors
                    {print} 'pretty!'
                    {else}
                    {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals {is} dog, cow, sheep
                    answer {is} {ask} 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing {is} command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we used the variable in a `{print}` command.
                    Firstly, finish our example by filling in your favorite animal on the blank. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the `{is}` command. Then use it with a `{print}` command, just like we did.
                example_code_2: |
                    ```
                    favorite_animal {is} _
                    {print} I like favorite_animal
                    ```
            7:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            13:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`. Before we used `{greater} {than}` and `{less} {than}`, but most programming languages use symbols for this.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {input}('How old are you?')
                    {if} age > 12:
                        {print}('You are older than I am!')
                    ```
                    ```
                    age = {input}('How old are you?')
                    {if} age < 12:
                        {print}('You are younger than me!')
                    {else}:
                        {print}('You are older than me!')
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {input}('What is your name?')
                    {if} name == 'Hedy':
                        {print}('You are cool!')
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {input}('What is your name?')
                    {if} name != 'Hedy':
                        {print}('You are not Hedy')
                    ```
    language:
        name: Language
        default_save_name: Language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                    ### Exercise
                    Make the code longer by adding at least 3 more words for the player to learn.
                    **Extra** Of course, you can choose to use a different language than French. You can change to code to any language you'd like to learn.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} 'üê±'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} 'üê∏'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
            14:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} (1,3):
                        answer = {input} ('What does ', french_words[i], ' mean?')
                        correct = translation[i]
                        {if} answer == correct:
                            {print} ('Correct!')
                            score = score + 1
                        {else}:
                            {print} ('Wrong, ', french_words[i], ' means ', translation[i])
                    {print} ('You gave ', score, ' correct answers.')
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            7:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    {print} '5 divided by 5 is ' 5 / 5
                    ```
                story_text_2: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code_2: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_3: |-
                    **Maths with variables**
                example_code_3: |
                    ```
                    {print} 'A ticket is $2'
                    people = {ask} 'How many tickets would you like?'
                    price = people * 2
                    {print} 'That will be $' price 'please'
                    ```
    music:
        name: music
        default_save_name: music
        description: Play a tune!
        levels:
            1:
                story_text: |-
                    In this level you'll learn how to use the `{play}` command to play a tune!

                    Type `{play}` followed by the note you want to play. The scale goes C-D-E-F-G-A-B.
                    As you can see there are 7 different letters, but we can play more than just 7 notes.
                    Type a number between 0 and 9 behind the letter to choose the scale, for example after B4 comes C5.
                    C0 is the lowest note you can play, B9 is the highest.

                    ### Exercise
                    Try out the example code and then play around with it! Can you create your own melody?
                    In the next level you'll learn how to play some existing songs.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Finish the songs! We have started the codes for some melodies.
                example_code: |
                    ```
                    {print} Old Mac Donald had a farm
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: As you can see, you can also use the `{sleep}` command to add a little pause in the song.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Create a random melody!

                    ### Exercise
                    The example code creates a random melody, but it's very short and not many notes are used.
                    Add more notes to the list and create a longer melody by copying the last line a couple more times.
                example_code: |
                    ```
                    notes {is} A4, B4, C4
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    {play} notes {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    answer {is} {ask} 'What is the capital of Zimbabwe?'
                    {if} answer {is} Harare {play} C6
                    _
                    ```
            7:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\nThis calls for musical maths! Try out the example code a couple of times with different starting numbers.\nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            8:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}` command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            9:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Fr√®re Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            10:
                story_text: |
                    From this level on you can - among other things - use a `{repeat}` command inside a `{repeat}` command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in your songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle Little Star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle Little Star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} first_line
                    _
                    _
                    ```
            15:
                story_text: |
                    You can use a function with an argument for songs that have line that are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, but each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to program this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ (note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    line_1(29, 31, 30)
                    line_1(29, 28, 0)
                    line_1(32, 31, 30)

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
                story_text_2: |
                    You can program music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code_2: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        fire_alarm_
                    ```
                story_text_3: |
                    ### Exercise
                    Even in this last level of Hedy we can make some music! Be careful of all the syntax that is needed now.
                    Take a good look at how the functions are defined and called upon in the example code.
                    Finish the song!
                example_code_3: |
                    ```
                    {def} line_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} line_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} line_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    line_1()
                    line_2()
                    line_3()
                    {print} ('Early in the morning')
                    ```
            16:
                story_text: |
                    **Warning** This adventure can become extremely annoying!
                    We can also use the `{while}` command to repeat a song forever.

                    ### Exercise
                    Finish the never-ending song.
                example_code: |
                    ```
                    {define} song
                        {play} _

                    yes_or_no = {ask} 'Do you want to hear my never-ending song?'
                    {while} yes_or_no = 'yes'
                        song()
                        {print} 'ü•≥'
                    ```
            14:
                story_text: |
                    Upgrade your Old MacDonald code!

                    ### Exercise
                    Take your code from the 'Sing a Song' adventure and add musical notes to it!
                    You can make a function for each line in the song and call that function after the line is printed.
                    We defined the first line for you and called it in the code. Can you finish the whole song?
                example_code: |
                    ```
                    {define} line_1
                        {for} i {in} {range} (1, 3)
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} (1, 3)
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old MacDonald had a farm'
                        line_1()
                        {print} 'E I E I O!'
                        _
                    ```
    parrot:
        name: Parrot
        default_save_name: Parrot
        description: Create your own online pet parrot that will copy you!
        levels:
            1:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exercise
                    Copy the example code to your input screen by clicking on the yellow button.
                    Make the parrot ask a different question. Fill in the blanks in the example!
                    **Extra** You can also let the parrot ask multiple questions. Type in some more lines of code beneath your own code.
                example_code_2: |
                    ```
                    {print} Im Hedy the parrot
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    In the previous level you've made a parrot that will repeat after you. In this level we'll make the parrot interactive using a variable and `{ask}` command.
                    We will also make the parrot more life-like by adding `{sleep}` commands after something is said.
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name _ _ what is your name?
                    {print} name
                    _
                    {print} squawk
                    _
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    Firstly, finish line 2 with an `{is}` and an `{ask}` command.
                    Then fill in a `{sleep}` command on line 4 and 6 to let the parrot stay quiet for a little bit.

                    **Extra** Can you make the parrot ask for more then only your name by adding more lines of code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                    ### Exercise
                    Can you add the `{add} {to_list}` command to get the code to work?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    _ new_word _ words
                    {print} üßí Say new_word, Hedy!
                    {print} ü¶ú words {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    ### Exercise
                    Complete the code by filling in quotation marks on the blanks.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ üßí Say _ new_word _, Hedy!_
                    {print} _ ü¶ú _ words {at} {random}
                    ```
            5:
                story_text: |
                    Reward your parrot if it says the correct word!

                    ### Exercise
                    Finish the code by filling in the 4 missing commands.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} 'üßí Say ' new_word ', Hedy!'
                    {print} 'ü¶ú ' said_word
                    _ said_word {is} new_word _ 'üßí Great job, Hedy! üç™'
                    _ _ 'üßí No, Hedy! Say ' new_word
                    ```
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocket money!
        levels:
            7:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank.

                    ### Exercise
                    Finish the code to calculate how much money you have and how long you need to save up to buy what you want!
                    **Extra** Maybe you have already saved some money? Deduct that from the amount you will have to save up.
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' _ ' in ' _ ' weeks.'
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget(wish, money, allowance):
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money:
                            {print} ('You need to save up some more!')
                            {print} ("You'll need ', weeks, ' more weeks.")
                        {else}:
                            {print} ('Great! You have enough')
                            {print} ("Let's go shopping!")

                    money = {input}('How much money have you saved?')
                    wish = {input}('How much money do you need?')
                    allowance = {input}('How much pocket money do you get each week?')

                    _
                    ```
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            6:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ‚ù§'
                    {else} {print} 'The prince was eaten by a hippopotamus üò≠'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            8:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            10:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and two points deduction for a wrong press.
                    **Extra** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The {print} command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be run.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            13:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```
                    ```
                    name = 'Hedy'
                    {print}('My name is ', name)
                    ```
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            7:
                story_text: |
                    ### Exercise
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer is 'A'
                    points_a = points_a + 1
                    {if} answer is 'B'
                    points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                    {print} 'You belong to the A club'
                    {if} points_b > points_a
                    {print} 'You belong to the B club'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to use double quotes when you're using an apostrophe in you line!
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    _ This is how you solve it _
                    {print} "I'm babysitting my sister's kids"
                    {print} "What's more fun than that?"
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing {at} {random} command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big prize!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prizes {is} _
                    _
                    ```
            14:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code.
                    The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} (1, 3)
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: '{repeat} command'
        levels:
            8:
                story_text: |
                    Level 7 adds the `{repeat}` command. `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the `{repeat}` command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            9:
                story_text: |
                    In this level you can repeat multiple lines of code with only 1 `{repeat}` command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you want to create a block of just one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            10:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an `{if}` or `{repeat}` command.
                    But you can't yet combine the two...

                    Good news! In this level you will be allowed to put an `{if}` inside an `{if}`, `{repeat}` inside a `{repeat}` command and in each other.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        order = {ask} 'What would you like to order?'
                        {if} order {is} pizza
                            {print} 'Yammie'
                        {else}
                            {print} 'pizza is better!'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: '{repeat} command 2'
        levels:
            8:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes
                    {repeat} 2 {times} {print} 'You knew that already!'
                    {else}
                    {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can do with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            9:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restaurant
        default_save_name: Restaurant
        description: Create your own virtual restaurant
        levels:
            1:
                story_text: |
                    In level 1 you can make your own virtual restaurant and take your guests' orders.
                story_text_2: |
                    ### Exercise
                    Copy the example code into your input screen by clicking the yellow button.
                    Firstly, fill in the correct command on the blanks to make to code work properly.
                    Then add at least 4 more lines of code to the restaurant program.
                    Ask the customer what they would like to drink and ask if they want to pay with cash or card.
                    Lastly, think of a nice way to say goodbye to your customer.
                example_code_2: |
                    ```
                    {print} Welcome to Hedy's restaurant üçü
                    _ What would you like to order?
                    {echo} So you would like to order
                    {print} Thank you for your order!
                    {print} It's on its way!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only `{echo}` the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the toppings!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    ```
                story_text_2: |
                    ### Exercise
                    Copy your own restaurant code from to previous level to the input screen below.
                    Fix the code by replacing the `{ask}` and `{echo}` commands and using variables, like you've learned in this level.

                    Now that your code is working again, it's time to add something more.
                    Look at the last line of the example code: `{print} food with topping is on its way!`
                    In this single line 2 variables have been used to create a summary of the order.
                    Now add your own summary of the food and drinks ordered by the customer.

                    **Extra** Now that you've learned how to use variables, you can use as many variables in one line as you'd like. Can you add more variables to your code, like eat in or take-away, cash or card, with or without a straw etc.?
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                example_code: |
                    ```
                    dishes {is} spaghetti, brussels sprouts, hamburgers
                    {print} You will have dishes {at} {random} tonight!
                    prices {is} 1 euro, 10 euros, 100 euros
                    {print} That will be prices {at} {random} please.
                    ```
                story_text_2: |
                    ### Exercise
                    Now make your own version of the random restaurant.
                    Make a list of starts, mains, desserts, drinks and prices yourself.
                    Then use `{print}` and `{at} {random}` commands to tell the customer what will be on their menu tonight.
                example_code_2: |
                    ```
                    {print} Welcome to your own random restaurant!
                    starters {is} _
                    mains {is} _
                    desserts {is} _
                    drinks {is} _
                    prices {is} _
                    _
                    ```
            4:
                story_text: |
                    In the restaurant you have to use quotation marks too when using the `{print}` or `{ask}` command.

                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Welcome to Restaurant Chez Hedy!
                    {print} Today we are serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The  food  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food  with  topping  is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your  food  and  drinks  will be right there!
                    ```
            6:
                story_text: |
                    ### Exercise
                    The example code shows how you could program that you've run out of a menu item in your restaurant.
                    Copy your own restaurant code from the previous levels. Create a problem in your restaurant and code it, like the example code did.
                    For instance, you could also run out of a menu item, or you don't take credit cards, or the ice cream machine is broken.

                    **Extra** Have you programmed the problem and programmed appropriate responses? Then try to add more `{if}` and `{else}` commands into your code.
                    Try to add an `{if}` after every `{ask}` command in your code to make the code as interactive as possible!
                example_code: |
                    ```
                    drinks_in_stock {is} water, lemonade, cola, orange juice
                    drink {is} {ask} 'What would you like to drink?'
                    {if} drink {in} drinks_in_stock
                    {print} 'One ' drink 'coming up!'
                    {else}
                    {print} 'Sorry, we do not sell that'
                    ```
            7:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                    But you can also add many more things to your virtual restaurant, for example more courses.

                    ### Exercise
                    You can add many more things to your virtual restaurant. For example, can you...
                    - ask how many people are coming and multiply the price by that amount?
                    - add another course?
                    - give people a discount when they enter a (secret) coupon code?
                    - add a children's menu?
                    - think of other fun things to add?
                example_code: |
                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza
                    price = 10
                    {if} main {is} lasagne
                    price = 12
                    {if} main {is} spaghetti
                    price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
            8:
                story_text: |
                    In this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to `{ask}` multiple people what they'd like to eat.

                    ### Exercise
                    Can you complete the code? Hedy needs to repeat this question as many times as there are people. So if there are 5 people, the question needs to be asked 5 times.
                    **Extra** Expand your code with more questions, for example about drinks or sauce.
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy'
                    people = {ask} 'How many people are joining us today?'
                    ```
            9:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:

                    ### Exercise
                    This code can be expanded with more items on the menu, for example offering drinks, and/or multiple courses or desserts. Add at least one more item.
                    **Extra** Add even more items, as many options as you like!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
            10:
                story_text: "In this level you can use nesting to make your restaurant more realistic and more fun!\n\n### Exercise\nThe indentation was removed in the example code. \nCan you figure out how much indentation each line needs in order for the code to work properly?\nIf the customer orders pizza, Hedy shouldn't ask what sauce the customer wants.\n\n**Extra** A restaurant does not stock all sauces. Make a list of available sauces and give a reply with each order whether you sell it. <br>\n**Extra** Pizzas have toppings. Ask customers what they want.<br>\n**Extra** Do customers want a drink? Ask them too! <br>\n"
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                    _ food = {ask} 'What would you like to order?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ price = price + 3
                    _ sauce = {ask} 'What kind of sauce would you like with your fries?'
                    _ {if} sauce {is} no
                    _ {print} 'no sauce'
                    _ {else}
                    _ price = price + 1
                    _ {print} 'with ' sauce
                    _ {if} food {is} pizza
                    _ price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
                story_text_2: |
                    In this level you will learn new commands to extend your code even further.

                    ### Exercise 1
                    Place a `{and}` and a `{or}` in the logical place in the program.

                    ### Exercise 2
                    Expand your restaurant with at least one more `{and}` and one `{or}`.
                    For example, create a special discount coupon that only applies to pizza, or give your customer a free drink
                    with fries and pancakes. Or something completely different of course!
                example_code_2: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' _ drinks {is} 'juice'
                        {print} 'That is our discount menu'
                        price = price - 3
                    {if} drinks {is} 'water' _ drinks {is} 'juice'
                        {print} 'That is a healthy choice'
                    {print} 'That will be ' price ' dollars'
                    ```
            11:
                story_text: |
                    In this level you'll learn how to easily ask orders for different courses.

                    ### Exercise 1
                    Finish the code with an `{ask}` on the blanks such that the customer is asked what they want to eat for each course.
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    {print} 'What is your order for ' course '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Exercise
                    Of course, you could also order for multiple people!
                    Can you add the correct amount of indentation before each line to make the code work properly?
                    Tip: some lines don't need any indentation at all.
                example_code_2: |
                    ```
                    _ courses = appetizer, main course, dessert
                    _ names = Timon, Ono
                    _ {for} name {in} names
                    _ {for} course {in} courses
                    _ food = {ask} name ', what would you like to eat as your ' course '?'
                    _ {print} name ' orders ' food ' as their ' course
                    ```
            16:
                story_text: |
                    With the `{while}` you can make sure your customers can keep adding orders until they are done.

                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    _
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything else?'
                    {print} 'Thank you!'
                    ```
    rock:
        name: Rock, paper, scissors
        default_save_name: Rock_2
        description: Make your own rock, paper, scissors game
        levels:
            1:
                story_text: |
                    In level 1 you can start with a rock, paper, scissors game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.
                example_code: |
                    ```
                    {print} what do you choose?
                    {ask} choose from rock, paper or scissors
                    {echo} so your choice was:
                    ```
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ‚úä‚úã‚úå
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} what do you choose?
                    {ask} choose from _
                    {echo} so your choice was:
                    ```
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                    ### Exercise
                    Finish the code by filling in the **variable** on the blank.
                    This game is not very interactive, but no worries! In the next adventure you'll learn how to use variables with the `{ask}` command to make your game interactive!
                example_code: |-
                    ```
                    choice {is} rock
                    {print} I choose _
                    ```
            3:
                story_text: |
                    You can use the `{at} {random}` command to let the computer pick rock, paper or scissors!

                    ### Exercise
                    Finish the code by using the `{at} {random}` command.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices _
                    ```
                story_text_2: |
                    **Extra** Make a two player game. Firstly ask the two players to fill in their names. Then let the computer randomly pick their choices.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    player_1 {is} {ask} Name of player 1:
                    _
                    ```
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    In this level we can determine whether it's a tie or not. For that you need the new `{if}` code.

                    ### Exercise
                    Finish the code by filling in the blanks:
                    * Let the computer pick a random option
                    * Ask the player what they want to choose
                    * Fill in the correct variables in line 4 and 5
                    * Finish line 6 so that Hedy can check whether it's a tie or not.
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} _
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see if it is a draw.
            10:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code.

                    ### Exercise
                    Finish the code such that a winner is always decided on. Run your code a few times to verify there is always a winner printed.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {elif} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {elif} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    In the previous levels you have often made your own rock paper scissors game. Can you finish the code and use the `{for}` command properly to get the game to work?
                example_code: |
                    ```
                    choices = _
                    players = _
                    {for} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    _
                    ```
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask}` command, you can make your rock, paper, scissors code interactive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
    secret:
        name: SuperSpy
        default_save_name: SuperSpy
        description: Make your own spy code
        levels:
            10:
                story_text: |
                    We can simplify the superspy code with `{and}`, such that we only need one `{if}`.

                    ### Exercise 1
                    Complete the code by filling the right command on the blank. Tip: The superspy has to answer BOTH questions correctly, before they get the confidential information!

                    ### Exercise 2
                    We want to confuse the enemy even more! Create a list with fake answers and select one at random when a wrong answer is given.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    password = {ask} 'What is your password?'
                    {if} name {is} 'Agent007' _ password {is} 'TOPSECRET'
                        {print} 'Go to the airport at 02.00'
                    {else}
                        {print} 'Go to the train station at 10.00'
                     ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing {sleep} command
        levels:
            2:
                story_text: |
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the `{sleep}` command, the program pauses for that amount of seconds.

                    ### Exercise
                    Practise this new command by making a code of your own in which you use the `{sleep}` command at least 3 times. With each `{sleep}` command the pausing time should differ.
                example_code: |
                    ```
                    {print} My favorite color is...
                    {sleep} 2
                    {print} green!
                    ```
    songs:
        name: Sing a song!
        default_save_name: Song
        description: Print a song
        levels:
            7:
                story_text: |
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.

                    Tip: Use the read aloud function to let Hedy sing the song to you!

                    ### Exercise
                    You can now repeat lines 2 to 7 as many times as you want by copying the lines.
                example_code: |
                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    {sleep}
                    ```
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    {print} number ' little monkeys jumping on the bed'
                    {print} 'One fell off and bumped his head'
                    {print} 'Mama called the doctor and the doctor said'
                    {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    {sleep}
                    ```
            8:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Exercise
                    You can print the song Baby Shark with a `{repeat}`? Finish the code by replacing the blanks?
                    **Extra** After Baby Shark you can of course also program other songs. There are many songs with repetition!
                    Can you think of one more song and print it?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
            9:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. But without the `{repeat}` command, you had to copy the verses many times.
                    In this level you can repeat the song 99 times, just by adding one simple line!

                    ### Exercise
                    Add the right command on the blanks and indent the code correctly.
                example_code: |
                    ```
                    verse = 99
                    _ 99 {times}
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```
            11:
                story_text: |
                    With `{for}` you can print make the whole baby shark song (including all the other sharks in the family) in only 6 lines!

                    ### Exercise 1
                    Can you make the baby shark code even shorter by using a `{for}` command? Finish the example code.
                example_code: "```\nfamily = baby, mammy, daddy, grandma, grandpa\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little monkeys jumping on the bed. Look up the text if you don't remember.

                    **Extra** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
            15:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with `{ask}` commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song (place)
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    song(chosen_place)
                    song(synonym)
                    song (chosen_place)
                    ```
            14:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!

                    ### Exercise
                    Complete the Old MacDonald song by setting the variable `animal` to `animals[i]` and `sound` to `sounds[i]`.
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} (1, 3)
                        animal = _
                        sound = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} (1, 3)
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} (1, 3)
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
            13:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} (1, 3) _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} (1, 3)
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} _

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'
                    object = 'on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again'

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exercise 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = 'wheels', 'doors', _
                    movement = 'round and round', 'open and shut', _
                    ```
    turtle:
        name: Turtle
        default_save_name: Turtle
        description: Make your own drawing
        levels:
            1:
                story_text: |
                    You can also use Hedy to draw. By combining turns and lines, you can make a square or stairs!

                    Using `{forward}` you draw a line forwards. The number behind it determines how far the turtle will walk. `{turn} {right}` turns a quarter turn in clockwise direction, `{turn} {left}` turns counter clockwise.

                    If you want to go backwards, you use the `{forward}` command but with a negative number. So for example `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Exercise
                    This is the start of a little staircase. Can you make it have 5 steps?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    In level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 degrees to turn a quarter, 180 to turn half, and a full circle is 360 degrees.

                    ### Exercise
                    This code now creates the letter T. Can you change it to make the letter B?

                    **Extra** Change the letter into a different letter, like the first one of your name.
                    You can also make multiple letters, by setting the color to `{color}` `{white}` in between.

                example_code: |
                    ```
                    {forward} 80
                    {turn} 90
                    {forward} 50
                    {turn} 180
                    {forward} 100
                    ```
                story_text_2: |
                    You can use variables to in the turtle `turn`.

                    ### Exercise
                    Change the code such that it creates a triangle. Hint: you only have to change the code in one place.

                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |
                    In this level you can use `{at} {random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `{at} {random}` to choose a value from a list.
                    ### Exercise
                    Can you copy and paste lines 2 and 3 to create a longer random path?
                example_code: |
                    ```
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    In level 4 you have to use quotation marks with `{print}` and `{ask}`. Also when drawing!
                example_code: |
                    ```
                    {print} _ Drawing figures _
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    In level 5 you can make a choice with `{if}`. For example between different types of figures.
                example_code: |
                    ```
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    {if} direction {is} left {turn} _
                    {if} direction {is} right {turn} _
                    {forward} 100
                    ```
            7:
                story_text: |
                    In this level you can use calculations to draw different figures.
                    You may have learned in school that turning a full circle is 360 degrees. If not, now you know!
                    That's why you also use 90 degrees for a square. 360 divided by 4 is 90.
                    Now that we can do math with Hedy, we can draw all the figures we want!
                example_code: |
                    ```
                    angles = {ask} 'How many angles do you want?'
                    angle = 360 / angles
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
            9:
                story_text: "Now that we can repeat several lines, we can make figures more easily.\nWe only have to set the angle once and then use that variable in the `{repeat}`.\n\n### Exercise 1\nThe example code creates a square. Change the code so that it create another figure, such as a triangle or a hexagon. \nThis requires a change to two lines of code.\nTip: An entire circle is 360 degrees.\n\n### Exercise 2\nNow create a drawing consisting of at least two polygons.\n"
                example_code: |
                    ```
                    angle = 90
                    {repeat} 4 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** We can now improve the program that draws different figures. Finish the code and you can draw any polygon you'd like!
                example_code_2: |
                    ```
                    figure = {ask} 'How many angles should I draw?'
                    angle = 360 / figure
                    {repeat} figure {times}
                        {turn} _
                        {forward} _
                    ```
            10:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **Extra** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            11:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                    **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs <img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    {repeat} 5 {times}
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = {ask} 'which country would you like to see the flag of?'
                    {if} country {is} 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        {color} _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Firstly, define a function **for each shape** you want to use on the bracelet. Then, add the shapes to the bracelet like this:

                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    Hint Bracelet Designing program
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            14:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house(size)
                    _

                    draw_a_house(90)
                    draw_a_house(60)
                    draw_a_house(30)
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house(chosen_color)
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake(length, color)
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        draw_snowflake(random_number, random_color)
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            15:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees(amount_of_corners)
                        _ 360 / amount_of_corners


                    {define} draw_figure(degrees)
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = _(_)

                    _ {with}
                    _ {with}
                    ```
            16:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square(side)
                    _

                    i = 100
                    {while} i > 1
                        _(i)
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: '{while}'
        levels:
            16:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the New Year!
        levels:
            7:
                story_text: |
                    Ccountdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    number = 10
                    {repeat} _
                        {print} number
                        {sleep}
                        number = number - 1
                    {print} 'Happy New Year!'
                    ```
