adventures:
    story:
        name: Hist√≥rias
        default_save_name: Hist√≥ria
        description: Crie uma pequena hist√≥ria
        levels:
            1:
                story_text: |
                    No n√≠vel 1 voc√™ pode fazer uma hist√≥ria com um personagem principal diferente que voc√™ mesmo(a) insere.

                    Na primeira linha, use `{ask}` e pergunte quem ser√° o personagem principal da hist√≥ria.

                    Ap√≥s essa primeira linha, comece com `{print}` se a frase precisar ser impressa.
                    Voc√™ usa `{echo}` se quiser que seu personagem principal esteja no final da frase.
                example_code: |
                    ```
                    {ask} O(a) personagem principal desta hist√≥ria √©
                    {print} O(a) personagem principal agora vai andar pela floresta
                    {echo} Ele(a) est√° um pouco assustado(a),
                    {print} Ele(a) ouve barulhos estranhos vindo de todos os lados
                    {print} Ele(a) tem medo de que essa seja uma floresta mal-assombrada
                    ```
                story_text_2: "### Exerc√≠cio \nAgora crie sua pr√≥pria hist√≥ria com pelo menos 6 linhas de c√≥digo.\nEssa hist√≥ria n√£o pode ser a mesma do c√≥digo de exemplo.\nUse pelo menos um comando `{ask}` e um comando `{echo}`.\nVoc√™ pode escolher qualquer t√≥pico para a hist√≥ria.\nSe n√£o conseguir pensar em um t√≥pico, pode usar uma das nossas sugest√µes: ir ao cinema, uma partida esportiva ou um dia no zool√≥gico.\n"
            2:
                story_text: |
                    No n√≠vel 2 voc√™ pode tornar sua hist√≥ria mais divertida. O nome do seu personagem principal agora pode estar em qualquer lugar dentro da frase.

                    Voc√™ tem que programar um pouco mais para isso. Agora voc√™ deve nomear seu personagem principal primeiro.

                    Voc√™ pode ent√£o colocar esse nome em qualquer lugar em uma frase.
                example_code: |-
                    ```
                    nome {is} {ask} Qual √© o nome do(a) personagem principal?
                    {print} nome agora vai correr na floresta
                    {print} nome est√° um pouco assustado(a)
                    {print} De repente, ele(a) ouve um barulho estranho...
                    {sleep}
                    {print} nome est√° com medo de que essa seja uma floresta mal-assombrada
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Agora √© hora de adicionar vari√°veis √† sua pr√≥pria hist√≥ria que voc√™ criou no n√≠vel anterior.
                    V√° em ‚ÄòMeus programas‚Äô, procure sua aventura de hist√≥ria de n√≠vel 1 e copie o c√≥digo. Cole o c√≥digo na tela de entrada neste n√≠vel.
                    Este c√≥digo n√£o funcionar√° neste n√≠vel, porque voc√™ ainda n√£o utilizou vari√°veis.
                    Altere os comandos `{ask}` e `{echo}` em seu c√≥digo para a forma correta que voc√™ aprendeu neste n√≠vel.
                    **Extra** Adicione um comando `{sleep}` ao seu c√≥digo para aumentar a tens√£o na sua hist√≥ria.
            3:
                story_text: |
                    No n√≠vel 3 voc√™ pode tornar sua hist√≥ria mais divertida. Voc√™ pode usar aleatoriedade para qualquer monstro, animal ou outro obst√°culo, assim:
                example_code: |
                    ```
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Ouve agora o som de animais {at} {random}
                    ```
                story_text_2: |
                    O comando `{add}` tamb√©m pode ser √∫til em sua hist√≥ria.
                example_code_2: |
                    ```
                    {print} Ele(a) ouve um som
                    animais {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} O que voc√™ acha que √©?
                    {add} animal {to_list} animais
                    {print} era um animais {at} {random}
                    ```
                story_text_3: |
                    Este √© um exemplo do comando `{remove}` em sua hist√≥ria

                    ### Exerc√≠cio
                    Copie a sua hist√≥ria dos n√≠veis anteriores para esse n√≠vel.
                    Nesse n√≠vel, voc√™ aprendeu 3 novos comandos: `{at} {random}` , `{add} {to_list}` e `{remove} {from}`.
                    Adicione novas linhas de c√≥digo √† sua hist√≥ria, usando cada um desses comandos novos pelo menos uma vez.
                example_code_3: |
                    ```
                    {print} A sua ficou muito pesada.
                    {print} Dentro havia uma garrafa de √°gua, uma lanterna e um tijolo.
                    mochila {is} √°gua, lanterna, tijolo
                    lixo {is} {ask} Qual item deve ser descartado?
                    {remove} lixo {from} mochila
                    ```
            4:
                story_text: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo e o complete adicionando aspas nas lacunas das linhas 1 e 2.
                    As lacunas das linhas 3 e 4 n√£o devem ser preenchidas com aspas, mas sim com os comandos `{sleep}` e `{clear}`. Voc√™ consegue fazer ele funcionar?

                    ### Exerc√≠cio 2
                    Volte ao n√≠vel anterior e copie o c√≥digo da sua hist√≥ria. Fa√ßa o c√≥digo funcionar nesse n√≠vel adicionando aspas nos lugares certos.
                    Aten√ß√£o: As vari√°veis da sua hist√≥ria devem ficar do lado de fora das aspas. Assim como na segunda linha do c√≥digo exemplo: naquela linha, o nome da vari√°vel se encontra por fora das aspas.
                example_code: |
                    ```
                    nome {is} {ask} _ Qual √© o seu nome? _
                    {print}  _ O(a) personagem principal se chama _ nome
                    _
                    _
                    {print} nome _ agora est√° indo andar na floresta _
                    {print} nome _ est√° um pouco assustado(a) _
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Ele(a) ouve um som de _ animais {at} {random}
                    {print} nome _ tem medo de que esta seja uma floresta mal-assombrada _
                    ```
            5:
                story_text: |
                    Neste n√≠vel, voc√™ pode programar finais diferentes, o que tornar√° sua hist√≥ria ainda mais divertida.
                    No c√≥digo exemplo, voc√™ pode ver como fazer 2 finais diferentes.

                    ### Exerc√≠cio 1
                    Escreva uma nova hist√≥ria curta, com pelo menos 6 linhas de c√≥digo, sobre um t√≥pico de sua escolha.
                    Sem inspira√ß√£o? Escolha um desses t√≥picos: um super-her√≥i, um dia chato na escola, preso numa ilha deserta.

                    Agora d√™ ao(√†) jogador(a) a op√ß√£o de escolher entre final feliz ou triste, assim como no c√≥digo exemplo.
                    Programe ambos os finais.

                    ### Exerc√≠cio 2
                    Copie aqui a hist√≥ria que voc√™ criou por conta pr√≥pria nos n√≠veis anteriores.
                    Encontre uma maneira de adicionar pelo menos 2 comandos `{if}` e `{else}` √† sua hist√≥ria.
                    Pode ser com uma escolha entre final feliz ou triste, mas voc√™ tamb√©m pode tentar achar outras formas de incorporar os comandos.
                example_code: |
                    ```
                    nome {is} {ask} 'Quem est√° andando na floresta?'
                    {print} nome ' caminha pela floresta'
                    {print} nome ' encontra um monstro'
                    final {is} {ask} 'Voc√™ gostaria de um final feliz ou triste?'
                    {if} final {is} feliz {print} nome ' pega a espada e o monstro foge rapidamente'
                    {else} {print} 'O monstro devora ' nome
                    ```
            7:
                story_text: |
                    Em uma hist√≥ria, algu√©m diz a mesma palavra v√°rias vezes. Por exemplo, quando algu√©m pede ajuda ou canta uma m√∫sica.
                    Voc√™ pode colocar tais repeti√ß√µes em sua hist√≥ria neste n√≠vel, com `{repeat}`.

                    ### Exerc√≠cio
                    Adicione uma repeti√ß√£o √† sua pr√≥pria hist√≥ria. Volte aos seus programas salvos, escolha a sua hist√≥ria de um dos n√≠veis anteriores,
                    encontre uma linha contendo `{print}` e a repita!
                example_code: |
                    ```
                    {print} 'O pr√≠ncipe n√£o parava de pedir ajuda'
                    {repeat} 5 {times} {print} 'Socorro!'
                    {print} 'Por que ningu√©m est√° me ajudando?'
                    ```
            8:
                story_text: |
                    Neste n√≠vel voc√™ pode usar v√°rias linhas em seus comandos `{if}`, desta forma voc√™ pode atualizar seu final feliz ou triste!

                    ### Exerc√≠cio 1
                    O c√≥digo exemplo mostra dois finais diferentes: um em que as personagens saltam em uma m√°quina do tempo e outro em que elas n√£o saltam.
                    Complete as lacunas com pelo menos uma senten√ßa para cada final.
                    **Extra** Deixe a hist√≥ria mais longa. O que acontece depois? Voc√™ tamb√©m pode adicionar um segundo `{ask}` com op√ß√µes diferentes.

                    ### Exerc√≠cio 2
                    Volte aos seus programas salvos e escolha a sua hist√≥ria do n√≠vel 5. Ent√£o, escreva um final feliz e um triste, com pelo menos 3 linhas cada!
                example_code: |
                    ```
                    {print} 'OH N√ÉO! O T-rex est√° se aproximando!'
                    final = {ask} 'Voc√™ quer um final feliz ou triste?'
                    {if} final {is} feliz
                        {print} 'Bem a tempo Ricardo volta para a m√°quina do tempo!'
                        {print} _
                    {else}
                        {print} 'Oh n√£o! Ricardo foi lento demais...'
                        {print} _
                    ```
            9:
                story_text: |
                    Neste n√≠vel voc√™ pode usar o encaixamento para colocar comandos {if}, {repeat} ou {for} dentro de outros comandos {if}, {repeat} ou {for}. Isso oferece muitas op√ß√µes e realmente ajuda voc√™ a tornar sua hist√≥ria interativa.
                example_code: |
                    ```
                    {print} 'Roberta est√° andando no centro'
                    local = {ask} 'Roberta vai entrar numa loja, ou ela vai para casa?'
                    {if} local {is} loja
                        {print} 'Ela entra na loja.'
                        {print} 'Roberta v√™ um livro interessante'
                        compra = {ask} 'A Roberta vai comprar o livro?'
                        {if} compra {is} sim
                        _ {print} 'Roberta compra o livro e vai para casa'
                        _ {else}
                        _ {print} 'Roberta sai da loja e vai para casa'
                    {else}
                        {print} 'Roberta vai para casa'
                    ```
            10:
                story_text: |
                    Neste n√≠vel voc√™ pode usar o comando {for} em sua hist√≥ria. Desta forma, voc√™ poderia facilmente programar o livro infantil 'urso pardo, urso pardo, o que voc√™ v√™'.
                example_code: "```\nanimais = _ , _ , _ \n{print} 'Urso marrom, Urso marrom'\n{print} 'O que voc√™ v√™?'\n```\n"
            13:
                story_text: |
                    Usando os comandos `{and}` e `{or}`, voc√™ pode encurtar suas hist√≥rias. Por exemplo, confira a hist√≥ria do drag√£o.
                example_code: |
                    ```
                    {print} 'Nossa hero√≠na est√° andando pela floresta'
                    {print} 'O caminho se divide em dois'
                    caminho = {ask} 'Para qual lado ela deve seguir?'
                    arma = {ask} 'Que arma ela deve sacar?'
                    {if} caminho {is} 'esquerda' {and} arma {is} 'espada'
                        _
                    ```
            15:
                story_text: |
                    Usar o la√ßo `{while}` pode tornar suas hist√≥rias mais interessantes. Por exemplo, voc√™ pode usar `{while} jogo == 'ligado'` para poder jogar at√© que o jogo termine.
                    Ou voc√™ pode usar `{while} espada == 'perdida'` para que o(a) jogador(a) n√£o possa continuar o jogo at√© encontrar algo.

                    ### Exerc√≠cio
                    O c√≥digo exemplo mostra como usar o la√ßo `{while}` em uma hist√≥ria. Agora **invente o seu pr√≥prio cen√°rio** em que o(a) jogador(a) precisa encontrar algo antes de continuar.
                example_code: |
                    ```
                    chaves = 'perdidas'
                    {print} 'Voc√™ est√° no seu jardim e perdeu suas chaves.'
                    {print} 'Onde voc√™ quer procur√°-las?'
                    {print} 'Voc√™ pode escolher: √°rvore, canteiro de flores, pedra, caixa postal'
                    {while} chaves == 'perdidas'
                        local = {ask} 'Onde voc√™ quer procurar?'
                        {if} local == 'canteiro de flores'
                            {print} 'Aqui est√£o elas!'
                            chaves = 'encontradas'
                        {else}
                            {print} 'N√£o, elas n√£o est√£o no ' local
                    {print} 'Agora voc√™ pode entrar na casa!'
                    ```
            18:
                story_text: |
                    Vamos agora imprimir outra hist√≥ria, mas desta vez usando par√™nteses com o `{print}`.

                    ### Exerc√≠cio 1
                    Crie uma hist√≥ria de pelo menos 5 frases. Voc√™ n√£o precisa usar 'nome' ainda.
                example_code: |
                    ```
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
                story_text_2: |
                    ### Exerc√≠cio 2
                    N√≥s j√° preparamos uma `{input}` para voc√™. Primeiro, use a vari√°vel `name` na sua hist√≥ria.
                    Ent√£o, adicione um segundo `{ask}` e use a vari√°vel dele tamb√©m.
                    Dica: Lembre-se de usar v√≠rgulas em um `{print}` entre os textos e as vari√°veis!
                example_code_2: |
                    ```
                    nome = {input}("Qual √© o seu nome?")
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
    add_remove_command:
        default_save_name: comando_some_remova
        description: introduzindo {add} {to_list} e {remove} {from}
        levels:
            3:
                story_text: |
                    ## {add} {to_list}
                    Voc√™ pode adicionar itens a uma lista usando o comando `{add} {to_list}`. Basta digitar: `{add} pinguim {to_list} animais`, ou voc√™ pode usar o comando `{ask}` assim como no c√≥digo exemplo.
                example_code: |
                    ```
                    animais {is} cachorro, gato, canguru
                    preferido {is} {ask} Qual √© o seu animal favorito?
                    {add} preferido {to_list} animais
                    {print} Eu escolho animais {at} {random}
                    ```
                story_text_2: |
                    ## {remove} {from}
                    Se voc√™ pode adicionar itens a uma lista, √© claro que voc√™ tamb√©m pode retir√°-los. Isso √© feito usando o comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animais {is} cachorro, gato, canguru
                    n√£o_gosta {is} {ask} De que animal voc√™ n√£o gosta?
                    {remove} n√£o_gosta {from} animais
                    {print} Eu escolho animais {at} {random}
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Experimente seus novos comandos nesse restaurante virtual. Adicione o sabor que o(a) jogador(a) espera conseguir √† lista e remova os sabores aos quais ele(a) √© al√©rgico(a).
                example_code_3: |
                    ```
                    {print} Milkshake misterioso
                    sabores {is} morango, chocolate, baunilha
                    esperado {is} {ask} Que sabor voc√™ espera conseguir?
                    _
                    alergias {is} {ask} Voc√™ tem alergia a algum sabor?
                    _
                    {print} Voc√™ conseguiu um milkshake de sabores {at} {random}
                    ```
        name: '{add} {to_list} & {remove} {from}'
    and_or_command:
        default_save_name: e ou
        description: introduzindo {and} & {or}
        levels:
            13:
                story_text: |-
                    Vamos agora aprender a usar `{and}` e `{or}`! Se voc√™ quer checar duas condi√ß√µes, voc√™ n√£o precisa usar dois `{if}`s, voc√™ pode usar `{and}` e `{or}`.

                    Se voc√™ usar `{and}`, ambas as condi√ß√µes, √† esquerda e √† direita do `{and}`, precisam ser verdadeiras. Podemos tamb√©m usar `{or}`, quando apenas uma das condi√ß√µes precisa ser verdadeira.
                example_code: |
                    ```
                    nome = {ask} 'qual √© o seu nome?'
                    idade = {ask} 'qual √© a sua idade?'
                    {if} nome {is} 'Hedy' {and} idade {is} 2
                        {print} 'Voc√™ √© a verdadeira Hedy!'
                    ```
        name: '{and} & {or}'
    ask_command:
        default_save_name: comando_pergunte
        description: Introdu√ß√£o ao comando {ask}
        levels:
            1:
                story_text: |
                    ## O comando `{ask}`
                    Agora que voc√™ sabe usar o comando `{print}`, voc√™ est√° pronto(a) para aprender o pr√≥ximo comando: `{ask}`. Com o comando `{ask}`, voc√™ pode fazer uma pergunta. Veja:
                example_code: |
                    ```
                    {print} Ol√°!
                    {ask} Qual √© o seu nome?
                    ```
                story_text_2: |
                    ## O comando `{echo}`
                    Se voc√™ quer que o computador repita a resposta dada, voc√™ pode usar o comando `{echo}`. A resposta vai ser "ecoada" de volta a voc√™ no fim da frase, nesse caso depois do ol√°.
                example_code_2: |
                    ```
                    {print} Ol√°!
                    {ask} Qual √© o seu nome?
                    {echo} ol√°
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Experimente os comandos `{ask}` e `{echo}`. Primeiro, preencha as lacunas para fazer esse programa funcionar.
                    Ent√£o fa√ßa mais 2 perguntas usando o comando `{ask}`, e depois de cada `{ask}` use um `{echo}` para imprimir a resposta na tela.
                example_code_3: |
                    ```
                    _ Como voc√™ est√°?
                    _
                    ```
            2:
                story_text: |
                    ## O comando `{ask}`
                    Agora que podemos usar **vari√°veis** em nossos c√≥digos, n√£o precisamos mais do comando `{echo}`.
                    Podemos usar vari√°veis para guardar as respostas √†s nossas perguntas e, assim, us√°-las em diversas outras partes de nossos c√≥digos.
                    Veja:

                    Assim, o seu c√≥digo est√° ficando interativo!
                example_code: |
                    ```
                    nome {is} {ask} Qual √© o seu nome?
                    {print} Ol√° nome
                    idade {is} {ask} Quantos anos voc√™ tem?
                    {print} nome tem idade anos.
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Na aventura anterior, voc√™ praticou a defini√ß√£o de vari√°veis com o comando `{is}`.
                    Voc√™ criou pelo menos 3 vari√°veis e usou elas com um comando `{print}`.
                    Agora, ao inv√©s de definir as vari√°veis, queremos que voc√™ as torne interativas, assim como fizemos em nosso exemplo.

                    Copie o seu c√≥digo da aventura anterior e torne as vari√°veis interativas usando comandos `{ask}`.
                example_code_2: |
                    ```
                    animal_favorito {is} {ask} Qual √© o seu animal favorito?
                    {print} Eu gosto de animal_favorito
                    ```
            18:
                example_code: |
                    ```
                    {print}('Meu nome √© Hedy!')
                    nome = {input}('Qual √© o seu nome?')
                    {print}('Ent√£o o seu nome √© ', nome)
                    ```
                story_text: A √∫ltima coisa que teremos de mudar para que o c√≥digo seja de Python √© trocar `{ask}` por `{input}`.
        name: '{ask}'
    calculator:
        name: Calculadora
        default_save_name: Calculadora
        description: Crie uma calculadora
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    n√∫mero_1 = {ask} 'Digite o primeiro n√∫mero:'
                    n√∫mero_2 = {ask} 'Digite o segundo n√∫mero:'
                    resposta_correta = n√∫mero_1 * n√∫mero_2
                    {print} n√∫mero_1 ' vezes ' n√∫mero_2 ' √© ' resposta_correta
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    A calculadora acima vai calcular a resposta para voc√™, mas voc√™ tamb√©m pode fazer um programa para testar suas pr√≥prias habilidades matem√°ticas, assim:
                    Preencha as lacunas para completar o programa!
                example_code_2: |
                    ```
                    resposta_correta = 11 * 27
                    resposta = {ask} 'Quanto √© 11 vezes 27?'
                    {if} resposta {is} _ {print} 'bom trabalho!'
                    {else} {print} 'Errado! A resposta era ' _
                    ```
                story_text_3: |
                    **Extra** Voc√™ tamb√©m pode deixar o computador calcular produtos aleat√≥rios sozinho usando `{random}`.
                example_code_3: |-
                    ```
                    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    n√∫mero_1 = _
                    n√∫mero_2 = _
                    resposta_correta = n√∫mero_1 * n√∫mero_2
                    resposta_dada = {ask} 'Quanto √© ' n√∫mero_1 ' vezes ' n√∫mero_2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    Em um n√≠vel anterior, voc√™ criou uma calculadora. Neste n√≠vel, voc√™ pode expandir aquele c√≥digo para que ele fa√ßa mais perguntas.

                    ### Exerc√≠cio 1
                    Voc√™ consegue completar a linha 10 para fazer o programa funcionar?

                    ### Exerc√≠cio 2
                    D√™ um retorno ao(√†) jogador(a) depois que ele(a) responder, como `{print} 'Correto!'` ou `{print} 'Errado! A resposta correta √© ' resposta_correta`.
                example_code: |
                    ```
                    pontua√ß√£o = 0
                    {repeat} 10 {times}
                        n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        n√∫mero_1 = n√∫meros {at} {random}
                        n√∫mero_2 = n√∫meros {at} {random}
                        resposta_correta = n√∫mero_1 * n√∫mero_2
                        {print} 'Quanto √© ' n√∫mero_1 ' vezes ' n√∫mero_2 '?'
                        resposta = {ask} 'Digite aqui a sua resposta...'
                        {print} 'Voc√™ respondeu ' resposta
                        {if} _ {is} _
                            pontua√ß√£o = pontua√ß√£o + 1
                    {print} '√ìtimo trabalho! Sua pontua√ß√£o foi... ' pontua√ß√£o ' de 10!'
                    ```
            11:
                example_code: |
                    ```
                    n√∫mero = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * n√∫mero
                    ```
                story_text: "Com um `{for}`, voc√™ pode simplificar o programa de praticar a tabuada de multiplica√ß√£o.\n\n### Exerc√≠cio 1\nMelhore o c√≥digo exemplo de forma que ele imprima uma tabuada bonitinha: <br> \"1 vezes 10 √© 10\", \"2 vezes 10 √© 20\", etc.\n\n### Exerc√≠cio 2\nVolte ao seu c√≥digo do n√≠vel 10 da calculadora de tabuada, e ent√£o o modifique para que ele use `{for}` e `{range}`.\n"
            12:
                story_text: |
                    Neste n√≠vel, voc√™ pode fazer uma calculadora que funciona com n√∫meros decimais.

                    ### Exerc√≠cio 1
                    Preencha as lacunas para completar a calculadora. Lembre-se de usar pontos para n√∫meros decimais, n√£o v√≠rgulas.

                    ### Exerc√≠cio 2
                    Crie um novo programa para praticar matem√°tica, desta vez usando n√∫meros decimais.
                    Crie uma lista de n√∫meros, escolha dois para multiplicar e deixe o(a) jogador(a) responder.
                    E claro, voc√™ precisa validar a resposta! **Extra** Eleve a dificuldade com um sistema de vidas: O(a) jogador(a) perde uma vida toda vez que errar uma pergunta, e depois de tr√™s erros o jogo acaba.
                example_code: |
                    ```
                    n√∫mero1 = {ask} 'Qual √© o primeiro n√∫mero?'
                    n√∫mero2 = {ask} 'Qual √© o segundo n√∫mero?'
                    resposta = _
                    {print} n√∫mero1 ' mais ' n√∫mero2 ' √© ' _
                    ```
            13:
                story_text: |
                    ### Exerc√≠cio 1
                    Vamos deixar o programa de pr√°tica um pouco mais dif√≠cil. O(a) jogador(a) agora ter√° de responder duas respostas corretamente. Preencha as lacunas para completar o programa.

                    ### Exerc√≠cio 2
                    √Äs vezes, c√°lculos podem ter mais de uma resposta correta. Por exemplo, 10 pode ser dividido tanto por 5 quanto por 2. Ent√£o a pergunta 'Que n√∫mero divide o 10?' pode ser respondida por 2 ou por 5.
                    Fa√ßa uma pergunta de um c√°lculo que aceite mais de uma resposta correta, pe√ßa ao(√†) jogador(a) para dar uma resposta e determine se ela est√° correta usando `{or}`.
                    Esvazie o campo de programa√ß√£o e crie a sua pr√≥pria solu√ß√£o.
                example_code: |
                    ```
                    resposta1 = {ask} 'Quanto √© 10 vezes 7?'
                    resposta2 = {ask} 'Quanto √© 6 vezes 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                example_code: |
                    ```
                    {define} calcular_m√©dia
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            nota = {ask} _
                            total = total + _
                            {return} _ / 4

                    m√©dia = {call} _
                    {print} 'A sua m√©dia foi ' m√©dia
                    ```
            10:
                story_text: "Este jogo de calculadora te ajuda a praticar a tabuada de multiplica√ß√£o!\n### Exerc√≠cio\nPreencha as lacunas. Queremos que o programa fa√ßa estas perguntas:\n```\nQuanto √© 1 vezes 1?\nQuanto √© 1 vezes 2?\nQuanto √© 1 vezes 3?\nQuanto √© 2 vezes 1?\nQuanto √© 2 vezes 2?\nQuanto √© 2 vezes 3?\nQuanto √© 3 vezes 1?\nQuanto √© 3 vezes 2?\nQuanto √© 3 vezes 3?\n_\n```\n"
                example_code: "```\nn√∫meros = 1, 2, 3\n{for} _\n    {for} _\n        resposta = {ask} _\n        correta = n√∫mero_1 * n√∫mero_2\n        {if} resposta {is} correta\n            {print} '√ìtimo trabalho!'\n        {else}\n            {print} 'Isso est√° errado. A resposta certa √© ' correta\n```\n"
    calculator_2:
        default_save_name: Calculadora 2
        description: Calculadora 2
        name: Calculadora 2
        levels:
            14:
                example_code: "```\n# Use seu pr√≥prio c√≥digo da aventura anterior.\n```\n"
    clear_command:
        default_save_name: comando_limpe
        description: comando {clear}
        name: '{clear}'
        levels:
            4:
                example_code: "```\n{print} '3'\n{clear}\n{print} '2'\n{clear}\n{print} '1'\n{clear}\n{print} 'espere...'\n{sleep} 3\n{clear}\n{print} 'SURPRESA!'\n```\n"
                story_text: "Hora de aprender um comando novo! Com o `{clear}`, voc√™ conseque limpar todo o texto da sua tela de sa√≠da. Dessa forma, voc√™ pode evitar que sua tela fique cheia demais de texto.\nAten√ß√£o! Se voc√™ for usar um comando `{clear}`, talvez voc√™ tamb√©m precise colocar um `{sleep}` logo acima dele. Caso contr√°rio, Hedy vai limpar sua tela sem te dar tempo para ler, como acontece nesse exemplo!\n"
    debugging:
        name: depura√ß√£o
        default_save_name: depura√ß√£o
        description: aventura de depura√ß√£o
        levels:
            1:
                story_text: |-
                    Bem-vindo(a) a uma aventura de depura√ß√£o (debug, em ingl√™s). Depurar c√≥digo significa se livrar de erros e problemas no programa.
                    Isso significa que, nestas aventuras, vamos te mostrar c√≥digos que n√£o funcionam ainda.
                    Voc√™ ter√° de descobrir o que h√° de errado e corrigir os problemas que encontrar.

                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} Eu amo programar
                    Voc√™ tamb√©m ama programar?
                    {echo}
                    {print} Quais s√£o os seus hobbies?
                    {echo} Seus hobbies s√£o
                    ```
            2:
                story_text: |-
                    Bem-vindo(a) a uma aventura de depura√ß√£o (debug, em ingl√™s). Depurar c√≥digo significa se livrar de erros e problemas no programa.
                    Isso significa que, nestas aventuras, vamos te mostrar c√≥digos que n√£o funcionam ainda.
                    Voc√™ ter√° de descobrir o que h√° de errado e corrigir os problemas que encontrar.

                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    destino {ask} Aonde voc√™ vai nessas f√©rias?
                    {print} O voo ao dstino sai √†s 15h.
                    {ask} Voc√™ j√° despachou sua bagagem?
                    {echo}
                    {print} Deixe-me imprimir o seu cart√£o de embarque.
                    {sleep}
                    Aqui est√°! Tenha uma boa viagem!
                    ```
            3:
                story_text: |-
                    Bem-vindo(a) a uma aventura de depura√ß√£o (debug, em ingl√™s). Depurar c√≥digo significa se livrar de erros e problemas no programa.
                    Isso significa que, nestas aventuras, vamos te mostrar c√≥digos que n√£o funcionam ainda.
                    Voc√™ ter√° de descobrir o que h√° de errado e corrigir os problemas que encontrar.

                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    lista_de_filmes {is} dr√°cula, velozes e furiosos, esqueceram de mim, barbie
                    filme_escolhido {is} filmes {at} {random}
                    {print} Hoje vamos assistir filme _escolhido
                    gosto {ask} Voc√™ gosta desse filme?
                    {print} Amanh√£ vamos assistir outra coisa.
                    {add} filme_escolhido {to_list} lista_de_filmes
                    {print} Amanh√£ vamos assistir filme_de_amanh√£
                    filme_de_amanh√£ {is} lista_de_filmes {at} {random}
                    Vou pegar a pipoca! {print}
                    ```
            4:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} 'Bem-vindo(a) √† biblioteca online!
                    {ask} De que g√™nero de livros voc√™ gosta?
                    {print} Voc√™ gosta de g√™nero
                    autor {is} {ask} 'Quem √© o seu autor favorito?'
                    {print} 'autor √© o seu autor favorito'
                    {print} Hmmm... acho que voc√™ devia experimentar ler... livros {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: "**Aten√ß√£o! Este c√≥digo precisa ser depurado!**\n```\n{print} Bem-vindo(a) √† Piscina Hedy!\naula {is} {ask} 'Voc√™ veio participar de uma aula de nata√ß√£o de hoje?'\n{if} aula sim\n{print} '√ìtimo! Voc√™ vai entrar em uma aula!\n{print} {else} 'Voc√™ n√£o vai entrar em uma aula'\ndesconto {is} 'Voc√™ tem um cupom de desconto?'\n{if} desconto {is} sim\ndesconto_resposta {is} {ask} 'Qual √© o c√≥digo do seu cupom?'\ncupons_de_desconto = Senior4231, Estudante8786, NovoMembro6709\n{if} desconto_resposta {is} {in} copuns_de_desconto\n{print} 'Vai custar R$9,90'\n'Vai custar R$15,50'\n{print} 'Tenha um bom mergulho!'\n```\n"
            6:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: "**Aten√ß√£o! Este c√≥digo precisa ser depurado!**\n```\n{print} 'M√°quina de venda autom√°tica'\nproduto_escolhido = {ask} 'Por favor, selecione um produto'\nprodutos_de_1_real = coca suco de laranja √°gua\nprodutos_de_2_reais = chocolate, biscoito, barra de cereal\nprodutos_de_3reais = batata frita, carne seca, p√£o de banana\n{if} escolhido {is} {in} produtos_de_1_real\npre√ßo = 1\n{if} produto_escolhido {is} produtos_de_2_reais\npre√ßo = 2\n{else} produto_escolhido {in} produtos_de_3_reais\npre√ßo = 3\nquantidade_de_produtos = '{ask} De quantos ' produto_escolhido voc√™ gostaria?'\ntotal = pre√ßo + quantidade_de_produto\n{print} 'Vai custar R$' pre√ßo, 'por gentileza'\n```\n"
            7:
                story_text: |-
                    ### Exerc√≠cio
                    Surpresa! Este programa parece mais um texto de sa√≠da do que um c√≥digo. Ainda assim, n√£o queremos que voc√™ apenas adicione comandos `{print}` no come√ßo de cada linha.
                    Conserte esse programa e o transforme na can√ß√£o infantil 'Meus Dedinhos (Fr√®re Jaques)' usando, √© claro, o comando {repeat}!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    Meus dedinhos!
                    Onde est√£o?
                    Eles se saudam!
                    E se v√£o!
                    ```
            8:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} 'Bem-vindo(a) √† nossa sanduicheria'
                    quantidade 'Quantos sandu√≠ches voc√™ gostaria de comprar?'
                    {repeat} quantidade {times}
                    {ask} {is} {ask} 'Que tipo de p√£o voc√™ gostaria no seu sandu√≠che?'
                    tipos_de_p√£o {is} branco, integral, franc√™s, alho, sem gl√∫ten
                    {if} p√£o_escolhido em tipos_de_p√£o
                    {print} '√ìtima escolha!'
                    {else}
                    'Desculpe, n√£o temos esse'
                    cobertura {is} {ask} 'De que cobertura voc√™ gostaria?'
                    molho {is} {ask} 'De que molho voc√™ gostaria?'
                    {print} Um p√£o_escolhido com cobertura e molho.
                    pre√ßo = quantidade * 6
                    {print} 'Vai custar 'pre√ßo reais', por gentileza'
                    ```
            10:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    nomes = Marcos Helena Samuel Nat√°lia
                    atividades = soltar pipa, nadar, fazer caminhadas, se bronzear
                    {for} nome {is} nomes
                    {print} nome adora atividade {at} {random} na praia
                    ```
            11:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este programa de calend√°rio. A sa√≠da deste programa precisa se parecer com uma lista de datas.
                    Por exemplo:

                    ```
                    Calend√°rio Hedy
                    Aqui est√£o todos os dias de Novembro
                    1 de Novembro
                    2 de Novembro
                    3 de Novembro
                    ```
                    E assim por diante.

                    Note que voc√™ deve testar o seu c√≥digo com aten√ß√£o extra para o m√™s de Fevereiro, visto que a quantidade de dias deste m√™s muda em anos bissextos.
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} 'Calend√°rio Hedy'
                    meses_com_31 dias = Janeiro, Mar√ßo, Maio, Julho, Setembro, Outubro, Dezembro
                    meses_com_30_dias = Abril, Junho, Agosto, Novembro
                    m√™s = {ask} 'Qual m√™s voc√™ gostaria de ver?'
                    {if} m√™s {in} meses_com_31_dias
                        dias = 31
                        {if} m√™s {in} meses_com30_dias
                            dias = 30
                    {if} m√™s = Fevereiro
                        anos_bissextos = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        ano = {ask} 'De que ano?'
                    {if} ano {in} anos_bissextos
                        dias = 29
                    {else}
                        dias = 28

                    {print} 'Aqui est√£o todos os dias de ' ms
                    {for} i {in} {range} 1 {to} dias
                        {print} i de m√™s
                    ```
            12:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define} cumprimentar
                    cumprimentos = 'Ol√°', 'Como vai?', 'Boa tarde'
                        {print} cumprimentos {at} {random}

                    {define} anotar_pedido
                        comida = {ask} 'O que gostaria de comer?'
                        {print} '1 comida'
                        bebida = 'O que gostaria de beber?'
                        {print} '1 ' bebida
                        mais = {ask} 'Gostaria de algo mais?'
                            {if} mais {is} 'n√£o'
                        {print} 'OK'
                            {else}
                            {print} 'E ' mais
                    {print} 'Obrigado'

                    {print} 'Bem-vindo(a) ao nosso restaurante'
                    pessoas = {ask} 'H√° quantas pessoas em seu grupo?'
                    {for} i {in} {range} 0 {to} pessoas
                        {call} cumprimentar_cliente
                    ```
            13:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define}recomenda√ß√£o_de_filme {with} nome
                        filmes_de_a√ß√£o == 'Duro de Matar', 'Velozes e Furiosos', 'Bastardos Ingl√≥rios'
                        filmes_de_romance = 'Simplesmente Amor', 'Di√°rio de uma Paix√£o', 'Titanic'
                        filmes_de_com√©dia = 'Mr Bean' 'Barbie''Deadpool'
                        filmes_infantis = 'Minions', 'As Aventuras de Paddington', 'Encanto'
                        {if} nome {is} 'Camila' {or} nome {is} 'Manuel'
                            filme_recomendado = filme_infantil {at} {random}
                        {if} nome {is} 'Pedro' {or} 'Gabriela'
                                humor = {ask} 'Est√° no humor de assistir o qu√™?'
                            {if} humor {is} 'a√ß√£o'
                                filme_recomendado = filmes_de_com√©dia {at} {random}
                            {if} humor {is} 'romance'
                                filme_recomendado = filmes_de_romance
                        {if} humor {is} 'com√©dia'
                                filme_recomendado = filmes_de_com√©dia {at} {random}

                    {print} 'Eu recomendaria ' filme_recomendado ' para ' nome

                    nome = {ask} 'Quem est√° assistindo?'
                    recomenda√ß√£o = {ask} 'Gostaria de uma recomenda√ß√£o?'
                    {if} recomenda√£o {is} 'sim'
                    {print} recomenda√ß√£o_de_filme {with} nome
                    {else}
                    {print} 'Sem problemas!'
                    ```
            14:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define} calcular_batimentos
                        {print} 'Pressione levemente seus dedos √† lateral do seu pesco√ßo'
                        {print} '(logo abaixo do queixo)'
                        {print} 'Conte quantas batidas voc√™ sente em 15 segundos'
                        batidas == {ask} 'Quantas batidas voc√™ sente em 15 segundos?'
                        batimentos = batidas*4
                        {print} 'Seus batimentos s√£o de ' batimento
                        {if} batimentos >= 60 {or} batimentos <= 100
                            {print} 'Seus batimentos parecem normais'
                        {else}
                            {if} batimentos > 60
                                {print} 'Seus batimentos parecem estar muito baixos'
                            {if} batimentos < 100
                                {print} 'Seus batimentos parecem estar muito altos'
                            {print} 'Considere procurar um m√©dico'

                    medir_batimentos = {ask} 'Gostaria de medir seus batimentos card√≠acos?'
                    {if} medir_batimentos = 'sim'
                        {call} medir_batimentos
                    {else}
                        'sem problemas'
                    ```
            15:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este gerador de hist√≥rias aleat√≥rias. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    nomes = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbos='andando', 'pulando', 'andando de bicicleta', 'dirigindo', 'correndo'
                    lugares = 'numa montanha', 'no supermercado', '√† piscina'
                    esconderijos = 'atr√°s de uma √°rvore', debaixo de uma mesa', em uma caixa'
                    sons = 'um trompete', 'um carro batendo', 'trov√£o'
                    causas_do_barulho = 'uma televis√£o', 'uma crian√ßa com fogos de artif√≠cio', 'um elefante m√°gico', 'um sonho'

                    nome_ escolhido = nomes {at} {random}
                    verbo_escolhido = verbos {at} {random}
                    lugar_escolhido = 'lugares {at} {random}'
                    sons_escolhidos = barulhos {at} {random}
                    esconderijo_escolhido = esconderijos {random}
                    causas_escolhidas = causas_do_barulho {at} {random}

                    {print} nome_escolhido ' estava ' verbo_escolhido ' ' lugar_escolhido
                    {print} 'quando, de repente, ouviu o som de ' sons {at} {random}
                    {print} nome_escolhido ' olhou em volta, mas n√£o conseguiu descobrir de onde veio o barulho.'
                    {print} nome_escolhido ' se escondeu ' esconderijo_escolhido'
                    {print} 'e tentou olhar em volta, mas n√£o conseguia ver nada de l√°'
                    escondido = 'sim'
                    {while} escondido = 'sim'
                        {print} nome_escolhido 'ainda n√£o via nada.'
                    resposta = {ask} 'Devia ' nome_escolhido ' sair de seu esconderijo?'
                        {if} resposta = 'sim'
                            escondido == 'n√£o'
                    {print} 'nome_escolhido saiu de seu esconderijo' esconderijo_escolhido
                    {print} 'E ent√£o viu que era s√≥' causa_escolhida
                    {print} nome_escolhido 'riu e continuou seu dia'
                    {print} Fim
                    ```
            16:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                    Dica: Certifique-se de mostrar a pontua√ß√£o s√≥ uma vez, no fim.
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    pa√≠s = ['Pa√≠ses Baixos', 'Pol√¥nia', 'Turquia', 'Zimb√°bue', 'Tail√¢ndia', 'Brasil', 'Peru', 'Austr√°lia', '√çndia', 'Rom√™nia' ]
                    capitais = 'Amsterd√£', 'Vars√≥via' 'Istambul', 'Harare', 'Bangkok', 'Bras√≠lia', 'Lima', 'Camberra', 'Nova Delhi', 'Bucareste'
                    pontua√ß√£o = 0
                    {for} i {in} {range} 0 {to} 10
                        resposta = {ask} 'Qual √© a capital de ' pa√≠ses[i]
                        correta = capital[i]
                        {if} resposta = correta
                            {print} 'Correto!'
                        pontua√ß√£o = pontua√ß√£o + 1
                        {else}
                            {print} 'Errado,' capitais[i] '√© a capital de' pa√≠ses[i]
                        {print} 'Voc√™ pontuou ' pontua√ß√£o ' de 10'

                    ```
            17:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define} pedido_de_comida
                        coberturas = {ask} 'calabresa, atum, vegetais ou queijo?'
                        tamanho = {ask} 'grande, m√©dia ou pequena?'
                        n√∫mero_de_pizza = {ask} 'Quantas dessa pizza voc√™ vai querer?'

                        {print} 'VOC√ä PEDIU'
                        {print} n√∫mero_de_pizzas ' pizzas de  ' recheio ' tamanho ' tamanho

                    {define} pedido_de_bebida
                        bebida = {ask} '√°gua, coca, guaran√°, limonada ou caf√©?'
                        n√∫mero_de_bebidas = {ask} 'Quantas dessa bebida voc√™ vai querer?'

                        {print} 'VOC√ä PEDIU'
                        {print} n√∫mero_de_bebidas ' ' bebida

                    'Bem-vindo(a) √† pizzaria Hedy'
                    mais_comida = {ask} 'Gostaria de pedir uma pizza?'
                    {while} mais_comida = 'sim'
                        {return} pedido_de_comida
                        mais_comida = {ask} 'Gostaria de pedir uma pizza?'
                    mais_bebidas = {ask} 'Gostaria de pedir bebidas?'
                    {while} mais_bebidas == 'sim'
                        {call} pedido_de_bebida
                        mais_bebidas == {ask} 'Gostaria de pedir mais bebidas?'


                    {print} 'Agradecemos pelo pedido!'
                    ```
            18:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este programa do Velho MacDonald do n√≠vel 16. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    animais = ['porco', 'c√£o', 'vaca']
                    sons = ['oinc', 'au', 'mu']
                    {for} i {in} {range} 1 {to} 3
                        animal = animais[i]
                        som = sons[i]
                        {print} 'O Velho MacDonald tinha uma fazenda'
                        {print} 'I-A-I-A-√î!'
                        {print} 'e nessa fazenda ele tinha um(a) ' animal
                        {print} 'I-A-I-A-√î!'
                        {print} 'com um ' som som ' pra c√°'
                        {print} 'e um ' som som ' pra l√°'
                        {print} som ' pra c√°'
                        {print} som ' pra l√°'
                        {print} som som ' em todo lugar'
                    ```
    default:
        name: Introdu√ß√£o
        description: Explica√ß√£o do n√≠vel
        levels:
            1:
                story_text: |
                    Bem-vindo(a) √† Hedy! Aqui voc√™ pode aprender a programar passo a passo.

                    Experimente o c√≥digo voc√™ mesmo(a)! O bot√£o amarelo copia o c√≥digo exemplo ao seu campo de programa√ß√£o.
                    Depois, aperte o bot√£o verde escrito "Executar c√≥digo" embaixo do campo de programa√ß√£o para executar o c√≥digo.

                    Preparado(a)? Ent√£o v√° para a pr√≥xima aventura para aprender a fazer seus pr√≥prios c√≥digos!
                example_code: |
                    ```
                    {print} Ol√° mundo!
                    ```
            2:
                story_text: |
                    Parab√©ns! Voc√™ chegou ao n√≠vel 2. Voc√™ provavelmente j√° fez alguns c√≥digos incr√≠veis!
                    No primeiro n√≠vel, voc√™ pode ter notado que o comando `{echo}` s√≥ pode salvar um pouco de informa√ß√£o de cada vez.
                    Por exemplo, na aventura no restaurante, voc√™ podia ecoar o que o cliente queria comer, ou o que ele queria beber, mas n√£o os dois em uma mesma frase.

                    Isso muda no n√≠vel 2. Agora, voc√™ vai aprender a trabalhar com vari√°veis, que lhe permitem salvar m√∫ltiplos peda√ßos de informa√ß√µes e imprimi-los onde voc√™ quiser.
                    Ent√£o vamos para a pr√≥xima aventura!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo n√£o ir√° funcionar!**
                    Na Hedy, comandos v√£o mudar √†s vezes. `{echo}`, por exemplo, s√≥ funciona no n√≠vel 1. Nesse n√≠vel, voc√™ aprender√° uma maneira melhor de repetir as respostas.
                    ```
                    {print} Bem-vindo(a) ao Hedy's
                    {ask} O que gostaria de comer?
                    {echo} Ent√£o voc√™ quer
                    {ask} O que gostaria de beber?
                    {echo} Ent√£o voc√™ quer
                    ```
            3:
                story_text: |
                    No n√≠vel anterior, voc√™ aprendeu o que s√£o vari√°veis e como us√°-las para tornar suas aventuras mais interativas.
                    Mas... isso n√£o √© a √∫nica coisa que voc√™ pode fazer com vari√°veis! Voc√™ tamb√©m pode us√°-las para fazer listas.
                    E voc√™ pode at√© deixar a Hedy escolher uma palavra aleat√≥ria da lista, o que lhe permite criar jogos de verdade!
                    D√™ uma olhada na pr√≥xima aventura!
            4:
                story_text: |
                    Nos n√≠veis anteriores, voc√™ esteve praticando com vari√°veis, mas talvez voc√™ tenha passado por este problema.
                    Voc√™ pode ter tentado executar um programa desse jeito:

                    √â claro que voc√™ queria imprimir

                    `Meu nome √© Sofia`

                    mas Hedy imprimiu

                    `Meu Sofia √© Sofia`.

                    Neste n√≠vel, esse problema √© resolvido usando aspas.
                example_code: |
                    ```
                    nome {is} Sofia
                    {print} Meu nome √© nome
                    ```
            5:
                story_text: |
                    Nos n√≠veis anteriores, voc√™ j√° aprendeu a usar `{at} {random}`, o que fez seus jogos serem diferentes toda vez que voc√™ os executava.
                    Mas n√£o chega a ser interativo, o(a) jogador(a) n√£o tem qualquer influ√™ncia sobre o que acontece no jogo.

                    Neste n√≠vel, voc√™ vai aprender o comando `{if}`, que permite que voc√™ d√™ respostas diferentes em seu programa. Assim, voc√™ pode programar uma senha secreta para seu computador, por exemplo.
                    Ent√£o vamos para a pr√≥xima aventura aprender o novo comando!
                example_code: |
                    ```
                    senha {is} {ask} 'Qual √© a senha correta?'
                    ```
            6:
                story_text: |
                    No n√≠vel anterior, voc√™ praticou com `{ask}` e `{if}`. Voc√™ pode, por exemplo, perguntar aos fregueses o que eles gostariam de comer.
                    O que voc√™ ainda n√£o pode, no entanto, √© calcular o pre√ßo do jantar de todo mundo.

                    Este n√≠vel possibilita fazer adi√ß√µes, subtra√ß√µes e multiplica√ß√µes em seus programas. Assim, voc√™ pode calcular os pre√ßos em seu restaurante, mas voc√™ tamb√©m poderia adicionar um c√≥digo secreto para dar a seus amigos e fam√≠lia um desconto.
                    Outra op√ß√£o nesse n√≠vel √© programar seu pr√≥prio jogo de matem√°tica, para seu irm√£ozinho ou irm√£zinha praticar multiplica√ß√£o.
                    V√° ver voc√™ mesmo(a)!
                example_code: |
                    ```
                    pre√ßo_da_comida {is} 0
                    pre√ßo_da_bebida {is} 0
                    pre√ßo_total {is} 0
                    {print} 'Bem-vindo(a) ao McHedy'
                    pedido {is} {ask} 'O que gostaria de comer?'
                    {if} pedido {is} hamb√∫rger pre√ßo_da_comida {is} 5
                    {if} pedido {is} fritas pre√ßo_da_comida {is} 2
                    bebida {is} {ask} 'O que gostaria de beber?'
                    {if} bebida {is} √°gua pre√ßo_da_bebida {is} 0
                    {else} pre√ßo_da_bebida {is} 3
                    pre√ßo_total {is} pre√ßo_da_comida + pre√ßo_da_bebida
                    {print} 'Vai custar ' pre√ßo_total ' reais, por gentileza'
                    ```
            7:
                story_text: |
                    √ìtimo trabalho! Voc√™ chegou ao pr√≥ximo n√≠vel, o que significa que voc√™ praticou com `{if}` e `{else}`. Voc√™ provavelmente notou que seus c√≥digos est√£o ficando mais e mais longos.
                    Por exemplo, imagine se voc√™ quiser programar 'Parab√©ns pra Voc√™' (vers√£o simplificada).

                    √â muito c√≥digo para imprimir praticamente as mesmas palavras de novo e de novo. Felizmente, na pr√≥xima aventura, voc√™ ir√° aprender uma solu√ß√£o com o comando `{repeat}`, que permite que voc√™ repita uma mesma linha de c√≥digo v√°rias vezes.
                example_code: |
                    ```
                    {print} 'parab√©ns pra voc√™'
                    {print} 'parab√©ns pra voc√™'
                    {print} 'parab√©ns querida Hedy'
                    {print} 'parab√©ns pra voc√™'
                    ```
            8:
                story_text: |
                    Agora voc√™ sabe como repetir uma √∫nica linha de c√≥digo. Isso √© √∫til, mas nem sempre √© suficiente. √Äs vezes voc√™ quer repetir v√°rias linhas de uma vez.
                    Este n√≠vel permite que voc√™ agrupe algumas linhas de c√≥digo e repita aquele grupo inteiro de linhas de uma vez!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'Na pr√≥xima aventura voc√™ vai poder repetir v√°rias linhas de c√≥digo por vez!'
                    ```
            9:
                story_text: |
                    √ìtimo trabalho! Voc√™ alcan√ßou mais um n√≠vel novo! No n√≠vel anterior, voc√™ aprendeu a usar m√∫ltiplas linhas de c√≥digo nos comandos {if} e {repeat}. Mas voc√™ ainda n√£o p√¥de combinar os dois...
                    Boas not√≠cias! Neste n√≠vel, voc√™ ter√° permiss√£o de colocar um {if} dentro de outro {if}, ou dentro de um comando {repeat}. Colocar um bloco de c√≥digo dentro de outro √© chamado de "nesting" (aninhamento, em ingl√™s).
                example_code: |
                    ```
                    resposta = {ask} 'Voc√™ est√° pronto(a) para aprender algo novo?'
                    {if} resposta {is} sim
                        {print} '√ìtimo! Vamos aprender a usar o comando repita dentro do comando se!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                    {else}
                        {print} 'Talvez voc√™ deva praticar um pouco mais no n√≠vel anterior'
            10:
                story_text: |
                    Voc√™ est√° indo muito bem! Nos n√≠veis anteriores, ainda enfrent√°vamos um pequeno problema. Voc√™ aprendeu a repetir linhas, mas e se voc√™ quisesse mudar elas um pouco?
                    Por exemplo, se voc√™ quisesse cantar a can√ß√£o 'se voc√™ est√° contente', o c√≥digo seria assim:

                    Se voc√™ tamb√©m quisesse o verso seguinte 'bata os p√©s', depois o pr√≥ximo, depois o pr√≥ximo, voc√™ teria que mudar o c√≥digo completamente.
                    Neste n√≠vel, voc√™ vai aprender o comando `{for}`, que permite que voc√™ fa√ßa uma lista de a√ß√µes e repita o c√≥digo com uma a√ß√£o diferente em cada vez!
                    V√° dar uma olhada!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'se voc√™ est√° contente bata palmas'
                    {print} 'se voc√™ est√° contente e quer mostrar pra toda gente'
                    {print} 'se voc√™ est√° contente bata palmas'
                    ```
            11:
                story_text: |
                    Voc√™ chegou ao n√≠vel 11, est√° indo muito bem! Conforme os n√≠veis aumentam, Hedy foca cada vez mais em te ensinar a linguagem de programa√ß√£o Python.
                    Em Python, n√£o h√° um comando `{repeat}`, mas existe um comando que funciona da mesma forma que `{repeat}`. Ficou curioso(a) para saber como dizer `{repeat}` na linguagem Python? R√°pido, vamos descobrir!
            12:
                story_text: |
                    Talvez voc√™ tenha tentado usar n√∫meros decimais na sua aventura do restaurante. Se sim, voc√™ provavelmente notou que Hedy n√£o os entendia ainda e sempre os arredondava.
                    A partir deste n√≠vel, voc√™ pode usar n√∫meros decimais.
                example_code: |
                    ```
                    hamb√∫rguer = 5
                    bebida = 2
                    total = hamb√∫rguer + bebida
                    {print} 'Voc√™ pediu um hamb√∫rguer e uma bebida'
                    {print} 'Vai custar ' total ' reais, por gentileza'
                    ```
            13:
                story_text: |
                    Nos n√≠veis anteriores, voc√™ aprendeu a colocar dois comandos `{if}` um dentro do outro. Funciona bem, mas tamb√©m resulta em c√≥digos longos e desajeitados como este:

                    Neste sistema, voc√™ precisa dar o nome de usu√°rio e senha ambos corretos.
                    Neste n√≠vel, voc√™ aprender√° o comando `{and}`, que deixar√° este c√≥digo muito mais curto e compreens√≠vel!
                    Confira!
                example_code: |
                    ```
                    usu√°rio = {ask} 'Qual √© o seu nome de usu√°rio?'
                    senha = {ask} 'Qual √© a sua senha?'
                    {if} usu√°rio {is} 'Hedy'
                        {if} senha {is} 'secreta'
                            {print} 'Bem-vinda Hedy!'
                        {else}
                            {print} 'Acesso negado'
                    {else}
                        {print} 'Acesso negado!'
                    ```
            14:
                story_text: |
                    Com o c√≥digo exemplo, voc√™ pode calcular sua m√©dia e ver se voc√™ passou em uma mat√©ria da escola (nesse caso, com uma m√©dia de 6 ou mais).
                    Voc√™ pode ver que esse c√≥digo √© extremamente ineficiente, devido √† linha 5 ser t√£o longa.
                    Todas as diferentes m√©dias de 1 a 5 tiveram de ser programadas separadamente. Sorte a sua que, nesse n√≠vel, voc√™ ir√° aprender a fazer isso sem usar esse c√≥digo gigante!
                example_code: |
                    ```
                    primeira_nota = {ask} 'Quanto voc√™ tirou na primeira prova?'
                    segunda_nota = {ask} 'Quanto voc√™ tirou na segunda prova?'
                    somadas = primeira_nota + segunda_nota
                    m√©dia = somadas / 2
                    {if} m√©dia = 1 {or} m√©dia = 2 {or} m√©dia = 3 {or} m√©dia = 4 {or} m√©dia = 5
                        {print} 'Oh n√£o! Voc√™ reprovou na mat√©ria...'
                    {else}
                        {print} 'Excelente! Voc√™ passou na mat√©ria!'
                    ```
            15:
                story_text: |
                    No jogo abaixo, um c√≥digo foi feito para ter certeza que o(a) jogador(a) pode jogar por quanto tempo quiser...
                    Mas esse c√≥digo √© ineficiente e longo demais. Al√©m do mais, e se o(a) jogador(a) quiser jogar 101 vezes ao inv√©s de 100?
                    N√£o se pode jogar infinitamente?
                    Neste n√≠vel, voc√™ ir√° aprender um comando que deixa tudo isso mais f√°cil!
                example_code: |
                    ```
                    jogo = 'ligado'
                    {for} i {in} {range} 1 {to} 100
                        {if} jogo == 'ligado'
                            resposta = {ask} 'Voc√™ quer continuar?'
                            {if} resposta == 'n√£o'
                                jogo = 'terminado'
                            {if} resposta == 'sim'
                                {print} 'Certo, vamos continuar'
                    ```
            16:
                story_text: |
                    Neste n√≠vel, vamos nos aproximar um pouco mais de c√≥digo real de Python. Voc√™ tamb√©m ir√° aprender como usar duas listas em conjunto, relacionando seus valores.
                    Assim, voc√™ pode programar um c√≥digo em que certo animal √© combinado com seu respectivo som.
                    Porque os dois c√≥digos abaixo... N√£o fazem sentido algum!
                example_code: |-
                    ```
                    animais = 'galinha', 'cavalo', 'vaca'
                    sons = 'coc√≥', 'iiirrrr√≠', 'muuu'
                    {for} animal {in} animais
                        {print} 'Um(a) ' animal ' diz ' sons {at} {random}
                    ```
                    Voc√™ tamb√©m poderia tentar faz√™-lo funcionar deste jeito, mas....
                    ```
                    animais = 'galinha', 'cavalo', 'vaca'
                    sons = 'coc√≥', 'iiirrrr√≠', 'muuu'
                    {for} animal {in} animais
                        {for} som {in} sons
                            {print} 'Um(a) ' animal ' diz ' som
                    ```
                    Nota: Esses c√≥digos n√£o v√£o funcionar dessa maneira nesse n√≠vel. V√° para a pr√≥xima aventura para ver quais partes voc√™ precisa corrigir.
            17:
                story_text: |
                    Agora vamos mudar um pouco a indenta√ß√£o. Toda vez que precisarmos de uma indenta√ß√£o, precisaremos colocar `:` na linha anterior a ela.

                    Neste n√≠vel, voc√™ tamb√©m pode usar um novo comando: `{elif}`. `{elif}` √© a jun√ß√£o de `{else}` com `{if}` e voc√™ precisar√° dele quando quiser fazer 3 (ou mais!) op√ß√µes.
                    Confira!
            18:
                story_text: |
                    Parab√©ns! Voc√™ chegou ao √∫ltimo n√≠vel da Hedy! O c√≥digo que voc√™ criou aqui pode ser copiado para ambientes reais de Python, como Replit ou PyCharm, e voc√™ pode continuar aprendendo l√°!
                    Note, por√©m, que o Python s√≥ consegue ler comandos em Ingl√™s, ent√£o se voc√™ usava outro idioma, ter√° de mudar os comandos para Ingl√™s agora.
        default_save_name: introdu√ß√£o
    dice:
        name: Dado
        default_save_name: Dado
        description: Fa√ßa seu pr√≥prio dado
        levels:
            3:
                story_text: |
                    Neste n√≠vel, podemos escolher algo de uma lista. Com isso, podemos deixar o computador escolher uma face do dado.
                    D√™ uma olhada nos jogos que voc√™ tem guardados em casa.
                    H√° algum jogo que usa um dado especial? Voc√™ tamb√©m pode copi√°-lo com esse c√≥digo.
                    Por exemplo, os dados do jogo Earthworms (Minhocas) t√™m faces numeradas de 1 a 5 e uma minhoca na sexta face.

                    ![Dado de Earthworms com faces numeradas de 1 a 5 e uma minhoca na sexta face](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    escolhas {is} 1, 2, 3, 4, 5, minhoca
                    {print} Voc√™ tirou _ {at} {random} !
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Os dados no exemplo acima s√£o para um jogo espec√≠fico. Voc√™ consegue fazer dados normais?
                    Ou outros dados especiais para um jogo diferente?
                example_code_2: |
                    ```
                    escolhas {is} _
                    ```
            4:
                story_text: |
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    escolhas {is} 1, 2, 3, 4, 5, minhoca
                    jogada {is} escolhas {at} {random}
                    {print} 'voc√™ tirou ' jogada
                    _ jogada {is} minhoca {print} 'Voc√™ pode parar de jogar.'
                    _ {print} 'Voc√™ ter√° de jogar de novo!'
                    ```
            6:
                story_text: |
                    Voc√™ tamb√©m pode refazer o dado do jogo Earthworms (Minhocas) aqui, mas desta vez voc√™ pode calcular sua pontua√ß√£o.
                    Nesse jogo, a minhoca vale 5 pontos. Agora, logo ap√≥s rolar os dados, voc√™ pode calcular imediatamente quantos pontos voc√™ tirou.
                    Este √© o c√≥digo para calcular pontos para um dado:

                    ### Exerc√≠cio
                    Voc√™ consegue mudar o c√≥digo de modo a calcular a pontua√ß√£o total de 8 dados? Para isso, voc√™ ter√° de copiar e colar algumas linhas de c√≥digo.
                example_code: |
                    ```
                    escolhas = 1, 2, 3, 4, 5, minhoca
                    pontos = 0
                    jogada = escolhas {at} {random}
                    {print} 'voc√™ tirou ' jogada
                    {if} jogada {is} minhoca pontos = pontos + 5 {else} pontos = pontos + jogada
                    {print} 'isso d√° ' pontos ' pontos'
                    ```
                example_code_2: |
                    Voc√™ conseguiu calcular a pontua√ß√£o para 8 dados? Precisou copiar e colar muitas vezes, n√©? Vamos deixar isso mais f√°cil no n√≠vel 7!
            7:
                story_text: |
                    Voc√™ tamb√©m pode fazer um dado novamente neste n√≠vel. Com o comando `{repeat}`, voc√™ pode facilmente rolar uma m√£o cheia de dados.

                    ### Exerc√≠cio
                    Tente finalizar o c√≥digo amostra! **Extra** Pense num jogo que voc√™ conhece que envolve dados e o programe usando um `{repeat}`.
                example_code: |
                    ```
                    escolhas = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Exerc√≠cio
                    Est√£o todos demorando demais para jogar os dados? Neste n√≠vel voc√™ pode deixar Hedy jogar todos os dados de uma vez!
                    Mude os nomes para os nomes de seus amigos ou fam√≠lia e finalize o c√≥digo.
                example_code: |
                    ```
                    jogadores = Ana, John, Jessie
                    escolhas = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} jogador ' tirou ' escolhas {at} {random}
                        {sleep}
                    ```
    dishes:
        name: Pratos?
        default_save_name: Pratos
        description: Use o computador para decidir quem lava a lou√ßa
        levels:
            3:
                story_text: |
                    Voc√™ sempre discorda em casa sobre quem deve lavar a lou√ßa ou trocar a caixa de areia hoje?
                    Ent√£o voc√™ pode deixar o computador escolher de forma muito justa. Voc√™ pode programar isso neste n√≠vel!
                example_code: |
                    ```
                    pessoas {is} m√£e, pai, Eva, Sofia
                    {print} pessoas {at} {random} √© quem vai lavar a lou√ßa
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Fa√ßa a sua pr√≥pria vers√£o do programa de lavar lou√ßa. Primeiro, fa√ßa uma lista dos membros de sua fam√≠lia.
                    Ent√£o, pense em uma tarefa que precisa ser feita e deixe que o computador decida quem ter√° de faz√™-la, usando o comando `{at} {random}`.

                    **Extra** N√£o est√° a fim de lavar a lou√ßa? Hackeie o programa removendo o seu pr√≥prio nome da lista com o comando `{remove}``{from}`.
            4:
                story_text: |
                    Com as aspas simples voc√™ pode deixar seu planejamento de lavagem de lou√ßa mais bonito.
                    Desta vez, o c√≥digo de exemplo n√£o est√° completo.

                    Voc√™ pode completar o c√≥digo preenchendo os espa√ßos em branco? Cada espa√ßo em branco deve ser substitu√≠do por uma palavra de s√≠mbolo.

                    Dica: N√£o se esque√ßa das aspas!
                example_code: |
                    ```
                    pessoas {is} m√£e, pai, Eva, Sofia
                    {print} _ os pratos s√£o limpos por _
                    {sleep}
                    {print} pessoas {at} _
                    ```
            5:
                story_text: |
                    Com o `{if}` agora voc√™ pode se divertir mais com a escolha do programa. Voc√™ pode fazer com que seu programa responda √† escolha que o computador fez.

                    Voc√™ pode terminar o c√≥digo para que ele imprima 'muito ruim' quando for sua vez e, caso contr√°rio, 'sim!'?
                    N√£o se esque√ßa das aspas simples!
                example_code: |
                    ```
                    pessoas {is} m√£e, pai, Eva, Sofia
                    lavador {is} pessoas {at} {random}
                    _ lavador {is} Sofia {print} _ pena que tenho que lavar os pratos _
                    _ {print} 'felizmente sem pratos para lavar porque ' _ ' j√° est√° lavando'
                    ```
            6:
                story_text: |
                    Quantas vezes todo mundo vai lavar a lou√ßa? Isso √© justo? Voc√™ pode cont√°-lo neste n√≠vel.
                example_code: |
                    ```
                    pessoas = m√£e, pai, Eva, Sofia
                    vezes_eva_lava = 0
                    lavador = pessoas {at} {random}
                    {print} lavador ' √© quem vai lavar a lou√ßa'
                    {if} lavador {is} Eva vezes_eva_lava = vezes_eva_lava + 1
                    {print} 'Eva vai lavar a lou√ßa ' vezes_eva_lava ' vezes essa semana'
                    ```

                    Agora voc√™ pode copiar as linhas 3 a 5 algumas vezes (para uma semana, 7 vezes) e calcular para uma semana inteira novamente.
                    Voc√™ consegue fazer o c√≥digo funcionar para a semana inteira?
                story_text_2: |
                    Se voc√™ tiver uma extrema falta de sorte, o programa anterior pode escolher voc√™ para lavar a lou√ßa a semana inteira! N√£o √© justo!
                    Para criar um sistema mais justo, voc√™ pode usar o comando `{remove}` para remover a pessoa escolhida da lista. Assim voc√™ n√£o precisa lavar a lou√ßa de novo at√© que todos tenham tido sua vez.

                    Segunda e Ter√ßa j√° est√£o prontos para voc√™! Voc√™ consegue adicionar o resto da semana?
                    E... voc√™ consegue pensar em uma solu√ß√£o para quando a lista ficar vazia?
                example_code_2: |
                    ```
                    pessoas = m√£e, pai, Eva, Sofia
                    lavador = pessoas {at} {random}
                    {print} 'Segunda-feira quem lava a lou√ßa √©: ' lavador
                    {remove} lavador {from} pessoas
                    lavador = pessoas {at} {random}
                    {print} 'Ter√ßa-feira quem lava a lou√ßa √©: ' lavador
                    {remove} lavador {from} pessoas
                    ```
            7:
                story_text: |
                    Com o `{repeat}` voc√™ pode repetir peda√ßos de c√≥digo. Voc√™ pode us√°-lo para calcular para m√∫ltiplos dias quem vai lavar a lou√ßa!
                    ### Exerc√≠cio
                    Use o comando `{repeat}` para decidir quem vai lavar a lou√ßa em cada dia de uma semana inteira. Cada lacuna precisa ser preenchida com um comando ou n√∫mero!
                    **Extra** Voc√™ consegue pensar em outras tarefas na casa? Ajuste o c√≥digo para que decida em tr√™s afazeres dom√©sticos. N√£o se esque√ßa de imprimir quais s√£o os afazeres em quest√£o!
                example_code: |
                    ```
                    pessoas = m√£e, pai, Eva, Sofia
                    {repeat} _ _ {print} 'A lou√ßa ser√° lavada por ' _ _ _
                    ```
            10:
                story_text: |
                    Neste n√≠vel, voc√™ poder√° fazer um cronograma para a semana inteira de uma maneira mais f√°cil!

                    ### Exerc√≠cio
                    Adicione uma segunda tarefa, como aspirar ou arrumar, e certifique-se de tamb√©m divid√≠-la para a semana inteira.
                    <br> **Extra** O programa n√£o √© justo, voc√™ pode ter azar e ter de lavar a lou√ßa a semana toda. De que modo voc√™ poderia deixar o programa mais justo?
                example_code: |
                    ```
                    dias = Segunda, Ter√ßa, Quarta, Quinta, Sexta, S√°bado, Domingo
                    nomes = m√£e, pai, Eva, Sofia
                    {for} dia {in} dias
                        {print} nomes {at} {random} ' ir√° lavar a lou√ßa ' dia
                    ```
    elif_command:
        default_save_name: sen√£o se
        levels:
            17:
                story_text: |
                    Neste n√≠vel, voc√™ tamb√©m pode usar um novo comando: `{elif}`. `{elif}` √© a jun√ß√£o de `{else}` com `{if}` e voc√™ precisar√° dele quando quiser fazer 3 (ou mais!) op√ß√µes.
                    Confira!
                example_code: |
                    ```
                    pr√™mios = ['1 milh√£o de reais', 'uma torta de ma√ß√£', 'nada']
                    seu_pr√™mio = pr√™mios[{random}]
                    {print} 'Voc√™ ganhou ' seu_pr√™mio
                    {if} seu_pr√™mio == '1 milh√£o de reais' :
                        {print} '√â isso a√≠! Voc√™ est√° rico(a)!'
                    {elif} seu_pr√™mio == 'uma torta de ma√ß√£' :
                        {print} 'Que del√≠cia, uma torta de ma√ß√£!'
                    {else}:
                        {print} 'Mais sorte na pr√≥xima..'
                    ```
        name: '{elif}'
        description: '{elif}'
    for_command:
        default_save_name: para
        description: comando {for}
        levels:
            10:
                story_text: |-
                    ## Para
                    Neste n√≠vel, aprenderemos um c√≥digo novo chamado `{for}`. Com `{for}` voc√™ pode fazer uma lista e usar todos os elementos.
                    `{for}` cria um bloco, assim como `{repeat}` e `{if}`, ent√£o todas as linhas do bloco precisam come√ßar com 4 espa√ßos a mais.
                example_code: |
                    ```
                    animais = cachorro, gato, peixe-bolha
                    {for} animal {in} animais
                        {print} 'Eu amo ' animal
                    ```
                example_code_2: "```\na√ß√µes = bata palmas, bata os p√©s, grite viva!\n_\n    {repeat} 2 {times}\n        {print} 'Se voc√™ est√° contente, ' a√ß√£o\n        {sleep} 2\n    {print} 'Se voc√™ est√° contente, quer mostrar pra toda a gente'\n    {print} 'Se voc√™ est√° contente, ' a√ß√£o\n    {sleep} 3\n```\n"
                story_text_2: "### Exerc√≠cio\nComplete este c√≥digo adicionando `{for} a√ß√£o {in} a√ß√µes` √† linha 2.\n"
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} contador {in} {range} 1 {to} 10
                        {print} contador
                    {print} 'Prontos ou n√£o, l√° vou eu!'
                    ```
            17:
                story_text: |
                    Agora vamos mudar um pouco a indenta√ß√£o. Toda vez que precisarmos de uma indenta√ß√£o, precisaremos colocar `:` na linha anterior a ela.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Prontos ou n√£o, l√° vou eu!'
                    ```
            18:
                example_code: "```\n{for} i {in} {range}(1,5):\n    {print} (i)\n```\n"
                story_text: "Por fim, vamos converter `{for} i {in} {range} 1 {to} 5` em c√≥digo Python, assim:\n"
        name: '{for}'
    fortune:
        name: Vidente
        default_save_name: Vidente
        description: Deixe Hedy prever o futuro
        levels:
            1:
                story_text: |
                    Voc√™ j√° foi a um parque de divers√µes e teve seu futuro previsto por uma cartomante? Ou voc√™ j√° jogou com uma bola oito m√°gica?
                    Ent√£o voc√™ provavelmente sabe que eles n√£o podem prever seu futuro, mas ainda √© divertido de jogar!

                    Nos pr√≥ximos n√≠veis, voc√™ pode aprender a criar sua pr√≥pria m√°quina de adivinha√ß√£o!
                    No n√≠vel 1 voc√™ pode come√ßar de leve, deixando a Hedy se apresentar como uma cartomante e deix√°-la repetir com {echo} as respostas dos jogadores.
                    Dessa forma:
                example_code: |
                    ```
                    _ Ol√°, sou Hedy, a vidente!
                    _ Quem √© voc√™?
                    _ Deixe-me dar uma olhada na minha bola de cristal
                    _ Eu vejo... eu vejo...
                    _ Seu nome √©
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada e preencha as lacunas para fazer o c√≥digo funcionar.
                    **Extra** Altere o c√≥digo e deixe que a vidente preveja n√£o apenas seu nome, mas tamb√©m sua idade, seu time favorito ou algo mais sobre voc√™.
            3:
                story_text: |
                    Nos n√≠veis anteriores voc√™ criou sua primeira m√°quina de adivinha√ß√£o, mas Hedy n√£o conseguia prever nada, apenas usava {echo}.
                    Neste n√≠vel voc√™ pode usar uma vari√°vel e o comando `{at} {random}` para realmente deixar Hedy escolher uma resposta para voc√™. Confira este c√≥digo, por exemplo:
                example_code: |
                    ```
                    {print} Eu sou Hedy, a vidente!
                    pergunta {is} {ask} O que voc√™ quer saber?
                    {print} Isso √© o que voc√™ quer saber: pergunta
                    respostas {is} sim, n√£o, talvez
                    {print} Minha bola de cristal diz...
                    {sleep} 2
                    {print} respostas {at} {random}
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    No momento, Hedy s√≥ pode responder sim, n√£o ou talvez. Voc√™ pode dar √† Hedy mais op√ß√µes de resposta, como 'definitivamente' ou 'pergunte novamente'.
            4:
                story_text: |
                    ### Exerc√≠cio
                    N√≥s removemos todas as aspas deste c√≥digo exemplo, voc√™ consegue adicion√°-las nos lugares certos?

                    ### Exerc√≠cio 2
                    Volte ao n√≠vel anterior e copie o seu c√≥digo da vidente. Fa√ßa aquele c√≥digo funcionar neste n√≠vel adicionando as aspas nos locais certos.
                example_code: |
                    ```
                    _ Adicione as aspas a este c√≥digo _
                    {print} Sou Hedy, a vidente!
                    pergunta {is} {ask} O que voc√™ quer saber?
                    {print} Essa √© sua pergunta:  pergunta
                    respostas {is} sim, n√£o, talvez
                    {print} Minha bola de cristal diz...
                    {sleep} 2
                    {print} respostas {at} {random}
                    ```
            5:
                story_text: |
                    ### Exerc√≠cio
                    No c√≥digo exemplo abaixo, voc√™ pode ver como se faz um programa de vidente que permite que voc√™ incline as probabilidades a seu favor. Esse programa trapaceiro sempre diz que voc√™ vai ganhar na loteria, mas seus amigos nunca v√£o ganhar.

                    Use isso para fazer seu pr√≥prio programa, seja criativo(a)! Voc√™ poderia, por exemplo, fazer um programa que prev√™ que:
                    * seu time favorito vai derrotar todos os competidores!
                    * seu filme favorito ser√° escolhido para a noite de filme!
                    * voc√™ ganhar√° ingressos para seu show favorito!
                    * voc√™ √© a mais bela de todas, como o espelho da Branca de Neve.
                    Deixe sua imagina√ß√£o fluir!

                    Seu programa deve conter pelo menos 10 linhas de c√≥digo e ter pelo menos um comando `{if}` e um `{else}`.
                example_code: |
                    ```
                    amigos {is} Jorge, L√∫cia, Davi
                    {print} 'Posso prever se voc√™ ganhar√° na loteria amanh√£!'
                    pessoa {is} {ask} 'Quem √© voc√™?'
                    resposta_boa {is} Oba! Voc√™ ganhou!, Voc√™ certamente vai ganhar!, Temos um vencedor!
                    resposta_ruim {is} Sem sorte! Tente novamente!, Outra pessoa vai ganhar, Voc√™ perdeu!
                    {if} pessoa {in} amigos {print} resposta_boa {at} {random}
                    {else} {print} resposta_ruim {at} {random}
                    ```
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'Eu sou Hedy, a vidente!'
                    {print} 'Eu posso prever quantos filhos/filhas voc√™ ter√° quando crescer!'
                    idade = {ask} 'Quantos anos voc√™ tem?'
                    irm√£os = {ask} 'Quantos irm√£os/irm√£s voc√™ tem?'
                    altura = {ask} 'Qual √© a sua altura em cent√≠metros?'
                    filhos = altura / idade
                    filhos = filhos - irm√£os
                    {print} 'Voc√™ ter√°...'
                    {sleep}
                    {print} filhos ' filhos(as)!'
                    ```
            7:
                story_text: |
                    ### Exerc√≠cio
                    Termine este programa que diz se seu/sua crush tamb√©m te ama ou n√£o.
                example_code: |
                    ```
                    {print} 'Eu tenho uma flor com p√©talas m√°gicas'
                    {print} 'Se voc√™ tirar as p√©talas, a flor te dir√° se seu/sua crush tamb√©m te ama'
                    quantidade = {ask} 'Quantas p√©talas voc√™ quer tirar?'
                    op√ß√µes = bem te quer, mal te quer
                    _ _ _ _ op√ß√µes {at} {random}
                    ```
            8:
                story_text: |
                    No pr√≥ximo exemplo, voc√™ poder√° deixar a sua vidente fazer v√°rias perguntas e tamb√©m imprim√≠-las!

                    ### Exerc√≠cio
                    Voc√™ consegue preencher as lacunas com os comandos certos?
                example_code: |
                    ```
                    {print} 'Eu sou Hedy, a vidente!'
                    {print} 'Voc√™ pode me fazer 3 perguntas.'
                    respostas = sim, n√£o, talvez
                    _ _ _
                       pergunta = {ask} 'O que voc√™ quer saber?'
                       {print} pergunta
                       {sleep}
                       {print} 'Minha bola de cristal diz... ' respostas {at} {random}
                    ```
            10:
                story_text: |
                    Nesse n√≠vel, voc√™ aprender√° a programar o jogo MASH (mansion, apartment, shack, house). Nesse jogo, voc√™ pode prever para todos os jogadores ao mesmo tempo como ser√° o futuro deles.

                    ### Exerc√≠cio
                    Preencha os espa√ßos em branco usando o novo comando que voc√™ aprendeu neste n√≠vel.
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    vis√µes = 'voc√™ vai escorregar numa casca de banana', _
                    {print} 'Vou dar uma olhada na minha bola de cristal e prever o seu futuro.'
                    {print} 'Eu vejo... eu vejo...'
                    {sleep}
                    {print} vis√µes {at} {random}
                    ```
    functions:
        default_save_name: fun√ß√µes
        levels:
            12:
                story_text: |
                    Neste n√≠vel, voc√™ vai aprender a usar **fun√ß√µes**. Uma fun√ß√£o √© um bloco de c√≥digo que voc√™ pode facilmente usar v√°rias vezes. Fun√ß√µes podem nos ajudar a organizar peda√ßos de c√≥digo que podemos usar de novo e de novo.
                    Para criar uma fun√ß√£o, use `{define}` e a d√™ um nome. Depois, coloque todas as linhas que voc√™ quer que estejam na fun√ß√£o em um bloco indentado abaixo da linha do `{define}`.
                    Deixe uma linha em branco no seu c√≥digo para que ele fique mais elegante. √ìtimo trabalho! Voc√™ criou uma fun√ß√£o!

                    Agora, sempre que precisarmos daquele bloco de c√≥digo, vamos simplesmente usar <code>{call}</code> com o nome da fun√ß√£o para execut√°-lo! N√£o teremos de digitar aquele bloco novamente.

                    Veja este c√≥digo exemplo de um jogo chamado Twister. A fun√ß√£o 'giro' cont√©m um bloco de c√≥digo que escolhe qual membro do corpo deve ir aonde.

                    ### Exerc√≠cio
                    Termine o c√≥digo definindo as duas vari√°veis membro_escolhido e cor_escolhida.
                    Ent√£o, escolha quantas vezes voc√™ quer chamar a fun√ß√£o de girar a roda do Twister.

                    ### Exerc√≠cio 2
                    Melhore seu c√≥digo adicionando uma vari√°vel chamada "pessoas". Use-a para dar um comando pr√≥prio a cada um dos jogadores.
                    Por exemplo: 'Ahmed, m√£o direita no verde' ou 'J√©ssica, p√© esquerdo no amarelo'.
                example_code: |
                    ```
                    lados = 'esquerdo', 'direito'
                    membros = 'm√£o', 'p√©'
                    cores = 'vermelho', 'azul', 'verde', 'amarelo'

                    {define} giro
                        lado_escolhido = lados {at} {random}
                        membro_escolhido = membros _
                        cor_escolhida = cores _
                        {print} membro_escolhido ' ' lado_escolhido ' no ' cor_escolhida

                    {print} 'Vamos jogar uma partida de Twister!'
                    {for} i {in} {range} 1 {to} _
                        {call} giro
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
            14:
                example_code: |
                    ```
                    {define} calcular_pre√ßo_novo {with} valor, porcentagem
                        porcentagem = porcentagem / 100
                        valor_descontado = valor * porcentagem
                        {return} valor - valor_descontado

                    pre√ßo_antigo = {ask} 'Qual √© o valor na etiqueta de pre√ßo?'
                    desconto = {ask} 'Qual √© a porcentagem de desconto?'

                    pre√ßo_novo = _ calcular_pre√ßo_novo {with} pre√ßo_antigo, _
                    {print} 'O pre√ßo novo √© ' pre√ßo_novo ' reais'
                    ```
        name: fun√ß√µes
        description: fun√ß√µes
    guess_my_number:
        default_save_name: adivinhe o n√∫mero
        description: adivinhe o n√∫mero
        name: Adivinhe o n√∫mero
        levels:
            14:
                story_text: "Neste n√≠vel, voc√™ pode programar o jogo 'Adivinhe o n√∫mero'\n\n### Exerc√≠cio\nPreencha as lacunas com os s√≠mbolos corretos para fazer o jogo funcionar.\n"
                example_code: "```\n{print} 'Adivinhe o n√∫mero'\nn√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nn√∫mero = n√∫meros {at} {random}\njogo = 'acontecendo'\n{for} i {in} {range} 1 {to} 10\n    {if} jogo == 'acontecendo'\n        chute = {ask} 'Que n√∫mero voc√™ acha que √©?'\n        {if} chute _ n√∫mero \n            {print} 'Mais baixo!'\n        {if} chute _ n√∫mero \n            {print} 'Mais alto!'\n        {if} chute _ n√∫mero \n            {print} 'Voc√™ venceu!'\n            jogo = 'finalizado'\n```\n"
    harry_potter:
        description: Aventuras de Harry Potter
        default_save_name: Harry Potter
        name: Harry Potter
    haunted:
        name: Casa mal-assombrada
        default_save_name: Casa mal-assombrada
        description: escape from the haunted house
        levels:
            1:
                story_text: |
                    Nesta aventura voc√™ est√° trabalhando para fazer um jogo no qual voc√™ tem que escapar de uma casa mal-assombrada escolhendo a porta correta.
                    Se voc√™ escolher a porta certa, voc√™ sobreviver√°, mas sen√£o um monstro terr√≠vel pode...

                    No n√≠vel 1 come√ßamos nosso jogo de casa mal-assombrada inventando uma hist√≥ria assustadora e perguntando ao jogador que monstro ele ver√° na casa mal-assombrada.
                example_code: |
                    ```
                    {print} Como eu cheguei aqui?
                    {print} Lembro-me de meu amigo me dizendo para entrar na antiga mans√£o...
                    {print} e de repente tudo ficou preto.
                    {print} Mas como eu acabei no ch√£o...?
                    {print} Minha cabe√ßa d√≥i como se eu tivesse sido atingido por um taco de beisebol!
                    {print} Que som √© esse?
                    {print} Oh n√£o! Eu sinto que n√£o estou sozinho nesta casa!
                    {print} Eu preciso sair daqui!
                    {print} H√° 3 portas na minha frente..
                    {ask} Qual porta devo escolher?
                    {echo} eu escolho a porta
                    {print} ...?
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada clicando no bot√£o amarelo.
                    Agora termine a hist√≥ria adicionando pelo menos 5 linhas de c√≥digo.
                    Lembre-se de come√ßar cada linha com um comando `{print}`.
            2:
                story_text: |
                    Nesta casa mal-assombrada, voc√™ pode escolher seus monstros com emojis. Mas claro, voc√™ tamb√©m poderia usar palavras.
                example_code: |
                    ```
                    monstro_1 {is} üëª
                    monstro_2 {is} ü§°
                    monstro_3 {is} üë∂
                    {print} Voc√™ entra na casa mal-assombrada.
                    {print} De repente, voc√™ v√™ um monstro_1
                    {print} Voc√™ corre para a outra sala...
                    {print} Mas um monstro_2 est√° l√° te esperando!
                    {print} Oh n√£o! Voc√™ vai depressa at√© a cozinha.
                    {print} Mas ao entrar, um monstro_3 te ataca!
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    No exemplo acima os monstros s√£o pr√©-determinados. Portanto, cada vez que voc√™ executa seu c√≥digo, o resultado √© o mesmo.
                    Voc√™ pode adicionar comandos `{ask}` para tornar a casa mal-assombrada interativa e fazer com que os jogadores escolham os monstros que encontrar√£o?
                example_code_2: |
                    ```
                    monstro_1 {is} _
                    monstro_2 {is} _
                    monstro_3 {is} _
                    {print} Voc√™ entra na casa mal-assombrada.
                    {print} De repente, voc√™ v√™ um monstro_1
                    {print} Voc√™ corre para a outra sala...
                    {print} Mas um monstro_2 est√° l√° te esperando!
                    {print} Oh n√£o! Voc√™ vai depressa at√© a cozinha.
                    {print} Mas ao entrar, um monstro_3 te ataca!
                    ```
            3:
                story_text: |
                    Nos n√≠veis anteriores voc√™ fez uma introdu√ß√£o ao seu jogo de casa mal-assombrada, mas como voc√™ deve ter notado, a hist√≥ria sempre teria um final terr√≠vel.
                    Neste n√≠vel voc√™ pode tornar sua hist√≥ria mais interativa alterando o resultado do jogo; √†s vezes voc√™ ser√° comido, √†s vezes voc√™ escapar√°!
                    Deixe Hedy decidir aleatoriamente!
                example_code: |
                    ```
                    _ Escape da casa mal-assombrada!
                    _ H√° 3 portas na sua frente...
                    _ _ _ Qual delas voc√™ escolhe?
                    _ Voc√™ escolheu a porta... escolha
                    monstros _ um zumbi, um vampiro, ALGO IMPOSS√çVEL DE SE ESCAPAR
                    _ Voc√™ v√™...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    _ Adicione aspas a este c√≥digo _
                    {print} Escape da casa mal-assombrada!
                    {print} H√° 3 portas na sua frente...
                    escolha {is} {ask} Qual delas voc√™ escolhe?
                    {print} Voc√™ escolheu a porta... escolha
                    monstros {is} um zumbi, um vampiro, ALGO IMPOSS√çVEL DE SE ESCAPAR
                    {print} Voc√™ v√™...
                    {sleep}
                    {print} monstros {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape da casa mal-assombrada!'
                    {print} 'H√° 3 portas na sua frente...'
                    portas {is} 1, 2, 3
                    monstros {is} lobisomem, m√∫mia, vampiro, zumbi
                    porta_escolhida {is} {ask} 'Qual delas voc√™ escolhe?'
                    {print} 'Voc√™ escolhe a porta... ' porta_escolhida
                    {sleep}
                    porta_correta {is} portas {at} {random}
                    _ _ _ _ {print} '√ìtimo! Voc√™ escapou!'
                    {else} {print} 'Ah n√£o! Voc√™ est√° sendo devorado(a) por um(a)... ' monstros {at} {random}
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!
                example_code: |
                    ```
                    {print} 'Escape da Casa Mal-Assombrada!!'
                    jogador = vivo
                    portas = 1, 2, 3
                    monstros = zumbi, vampiro, aranha gigante
                    {repeat} 3 {times}
                        {if} jogador {is} vivo
                            porta_correta {is} portas {at} {random}
                            {print} 'H√° 3 portas na sua frente...'
                            porta_escolhida = {ask} 'Qual delas voc√™ escolhe?'
                            {if} porta_escolhida {is} porta_correta
                                {print} 'Sem monstros aqui!'
                            {else}
                                {print} 'Voc√™ foi devorado(a) por um(a) ' monstros {at} {random}
                                jogador = morto
                        {else}
                            {print} 'FIM DE JOGO'
                    {if} jogador {is} morto
                        {print} '√ìtimo! Voc√™ sobreviveu!'
                    ```
            11:
                story_text: |
                    Neste n√≠vel, mudamos o comando `{for}` para podermos dizer ao(√†) jogador(a) onde est√°. 

                    ### Exerc√≠cio 1
                    Complete o programa de modo que o(a) jogador(a) saiba onde est√°.

                    ### Exerc√≠cio 2
                    Transforme o programa em uma aventura seguindo estes passos:

                    1. Fa√ßa uma lista de escolhas (ex.: lutar ou fugir)
                    2. Certifique-se de que o(a) jogador(a) pode escolher uma op√ß√£o usando `{ask}`
                    3. Foi a escolha certa? Ent√£o o jogo pode prosseguir para o pr√≥ximo monstro. Foi uma escolha ruim? Informe isso com um `{print}`. 

                    **Extra** Se voc√™ fizer uma escolha ruim, o jogo ainda mostra outro monstro! Como pode consertar isso?
                example_code: |
                    ```
                    {print} 'Escape da Casa Mal-Assombrada!'
                    monstros = zumbi, vampiro, aranha gigante
                    _
                        {print} 'Sala ' i
                        monstro = monstros {at} {random}
                    ```
            14:
                story_text: "### Exerc√≠cio\nNeste n√≠vel, voc√™ pode usar os s√≠mbolos `<` e `>` para introduzir vidas ao seu jogo.\nCertifique-se de que o(a) jogador(a) perde uma vida quando passa pelo monstro errado e que o jogo termina se voc√™ n√£o tiver mais vidas.\n"
                example_code: "```\n{print} 'Escape da casa mal-assombrada'\nvidas = 3\nportas = 1, 2, 3\nmonstros = 'a bruxa do mal', 'um zumbi', 'um c√£o de 3 cabe√ßas dormindo'\n{for} i {in} {range} 1 {to} 10\n    {if} vidas _\n        porta_boa = portas {at} {random}\n        monstro = monstros {at} {random}\n        porta_escolhida = {ask} 'Qual porta voc√™ escolhe?'\n        {if} porta_boa == porta_escolhida\n            {print} 'Voc√™ escolheu a porta certa'\n        {else}\n            {print} 'Voc√™ v√™...' monstro\n            {if} monstro == 'um c√£o de 3 cabe√ßas dormindo'\n                {print} 'Ufa.... ele t√° dormindo'\n            {else}\n                {print} 'Voc√™ perdeu uma vida'\n                vidas = _\n    {else}\n        {print} 'FIM DE JOGO'\n```\n"
    if_command:
        default_save_name: comando_se
        description: Introduzindo o comando {if}
        levels:
            5:
                story_text: |
                    ## Se... sen√£o....
                    No n√≠vel 5, h√° um comando novo: o `{if}`! Com o `{if}` voc√™ pode escolher entre duas op√ß√µes diferentes.
                    Este c√≥digo imprime 'legal' se voc√™ digita Hedy como nome, e 'meh!' se voc√™ digita outra coisa.
                    `{ask}` e `{print}` ainda funcionam da mesma forma que no n√≠vel 4.
                example_code: |
                    ```
                    nome {is} {ask} 'qual √© o seu nome?'
                    {if} nome {is} Hedy {print} 'legal' {else} {print} 'meh!'
                    ```
                story_text_2: |
                    √Äs vezes, c√≥digos com um `{if}` ficam bem longos e n√£o cabem direito na linha. <br> Voc√™ tamb√©m pode dividir o c√≥digo em duas linhas, come√ßando a segunda linha com o `{else}`, assim:
                example_code_2: |
                    ```
                    nome {is} {ask} 'qual √© o seu nome?'
                    {if} nome {is} Hedy {print} 'legal'
                    {else} {print} 'meh!'
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Tente criar seu pr√≥prio c√≥digo com `{if}` e `{else}`. Voc√™ pode usar o c√≥digo exemplo se quiser.
                example_code_3: |
                    ```
                    resposta {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ '√ìtimo trabalho!'
                    _ _ 'N√£o, 2 + 2 = 4'
                    ```
            9:
                story_text: |
                    Neste n√≠vel, voc√™ tamb√©m pode colocar um comando `{if}` dentro de outro comando `{if}`.
                example_code: "```\ncontinuar = {ask} 'Voc√™ quer continuar?'\n{if} continuar = sim\n    certeza = {ask} 'Tem certeza?'\n    {if} certeza {is} sim\n        {print} 'Vamos continuar'\n    {else}\n        {print} 'Voc√™ n√£o tem certeza'\n{else}\n    {print} 'Voc√™ n√£o quer continuar'\n```\n"
            8:
                example_code: "```\nnome = {ask} 'Qual √© o seu nome?'\n{if} nome {is} Hedy\n    {print} 'Bem-vinda, Hedy'\n    {print} 'Voc√™ pode jogar no seu computador!'\n```\n"
    in_command:
        default_save_name: comando_em
        description: Introduzindo o comando {in}
        levels:
            5:
                story_text: |
                    ## Listas
                    A partir de agora, quando quisermos checar se algo est√° em uma lista, poderemos usar o comando `{in}`.
                    Este c√≥digo imprime 'bela!' se voc√™ escolhe verde ou amarelo, e 'meh' caso contr√°rio.
                example_code: |
                    ```
                    cores_belas {is} verde, amarelo
                    cor_favorita {is} {ask} 'Qual √© a sua cor favorita?'
                    {if} cor_favorita {in} cores_belas {print} 'bela!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Complete o c√≥digo exemplo preenchendo as lacunas com comandos que voc√™ aprendeu.
                    Quando tiver terminado, tente criar seu pr√≥prio c√≥digo com sua pr√≥pria pergunta.
                example_code_2: |
                    ```
                    animais {is} cachorro, vaca, ovelha
                    resposta {is} {ask} 'Qual √© o seu animal favorito?'
                    _ resposta _ animais _ 'O meu tamb√©m!'
                    _ _ 'Meus animais favoritos s√£o cachorros, vacas e ovelhas.'
                    ```
        name: '{in}'
    is_command:
        default_save_name: comando_√©
        description: introduzindo o comando {is}
        levels:
            2:
                story_text: |
                    ## Vari√°veis
                    Voc√™ pode dar um valor a uma palavra usando `{is}`. Isso se chama **vari√°vel**. Neste exemplo, fizemos uma vari√°vel chamada de nome e uma vari√°vel chamada de idade. Voc√™ pode usar a palavra nome em qualquer parte do seu c√≥digo e ela ser√° substitu√≠da por Hedy, assim:
                example_code: |
                    ```
                    nome {is} Hedy
                    idade {is} 15
                    {print} nome tem idade anos
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    √â hora de criar suas pr√≥prias vari√°veis!
                    No c√≥digo exemplo, fizemos um exemplo da vari√°vel `animal_favorito`. Na linha 1, a vari√°vel √© definida e, na linha 2, usamos a vari√°vel em um comando `{print}`.
                    Primeiro, complete o nosso exemplo preenchendo a lacuna com o seu animal favorito. Ent√£o, fa√ßa voc√™ mesmo pelo menos 3 desses c√≥digos. Escolha uma vari√°vel e a defina com o comando `{is}`. Em seguida, use-a com um comando {print}, assim como fizemos.
                example_code_2: |
                    ```
                    animal_favorito {is} _
                    {print} Eu gosto de animal_favorito
                    ```
            14:
                story_text: |
                    Vamos aprender mais itens novos. Voc√™ j√° deve conhec√™-los da matem√°tica, o `<` e o `>`.
                    O `<` verifica se o primeiro n√∫mero √© menor que o segundo. Por exemplo, idade `<` 12 verifica se idade √© menor que 12.
                    Se quiser verificar se o primeiro n√∫mero √© menor ou igual ao segundo, voc√™ pode usar `<=`. Exemplo: age `<=` 11.
                    The `>` verifica se o primeiro n√∫mero √© maior que o segundo. Por exemplo, pontos `>` 10 verifica se pontos √© maior que 10.
                    Se quiser verificar se o primeiro n√∫mero √© maior ou igual ao segundo, voc√™ pode usar `>=`. Exemplo: pontos `>=` 11.
                    Essas compara√ß√µes podem ser usadas em um `{if}`, assim:
                example_code: |
                    ```
                    idade = {ask} 'Quantos anos voc√™ tem?'
                    {if} idade > 12
                        {print} 'Voc√™ √© mais velho(a) que eu!'
                    ```
                    ```
                    idade = {ask} 'Quantos anos voc√™ tem?'
                    {if} idade < 12
                        {print} 'Voc√™ √© mais novo(a) que eu!'
                    {else}
                        {print} 'Voc√™ √© mais velho(a) que eu!'
                    ```
                story_text_2: |
                    Deste n√≠vel em diante, se quiser verificar uma igualdade exata, voc√™ pode usar dois sinais de igual. √â assim na maioria das linguagens de programa√ß√£o:
                example_code_2: |
                    ```
                    nome = {ask} 'Qual √© o seu nome?'
                    {if} nome == 'Hedy'
                        {print} 'Voc√™ √© legal!'
                    ```
                story_text_3: |
                    Voc√™ pode verificar se duas coisas s√£o *diferentes* usando `!=`, desse jeito:
                example_code_3: |
                    ```
                    nome = {ask} 'Qual √© o seu nome?'
                    {if} nome != 'Hedy'
                        {print} 'Voc√™ n√£o √© Hedy'
                    ```
            6:
                example_code: "```\nnome = Hedy\nresposta = 20 + 4\n```\n"
                story_text: "Tamb√©m mudamos a forma como voc√™ guarda uma palavra em uma vari√°vel! Agora voc√™ pode usar `=` em vez de `{is}` para guardar um nome ou n√∫mero numa vari√°vel, assim:\n"
        name: '{is}'
    language:
        name: L√≠ngua
        default_save_name: Idioma
        description: Pratique palavras em um idioma estrangeiro
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: "```\n{print} 'Aprenda Franc√™s!'\ngato {is} {ask} 'üê±'\n{if} gato {is} chat {print} 'Incr√≠vel!'\n{else} {print} 'N√£o, gato √© chat'\nsapo {is} {ask} 'üê∏'\n{if} sapo {is} grenouille {print} 'Sensacional!'\n{else} {print} 'N√£o, sapo √© grenouille'\n```\n"
    maths:
        name: matem√°tica
        default_save_name: matem√°tica
        description: introduzindo matem√°tica
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 mais 5 √© ' 5 + 5
                    {print} '5 menos 5 √© ' 5 - 5
                    {print} '5 vezes 5 √© ' 5 * 5
                    {print} '5 dividido por 5 √© ' 5 / 5
                    ```
            12:
                story_text: |-
                    **N√∫meros Decimais**
                    At√© o momento, Hedy n√£o permitia n√∫meros decimais como 1.5. Deste n√≠vel em diante, voc√™ poder√° us√°-los. Note que computadores usam `.` em n√∫meros decimais.
                example_code: |
                    ```
                    {print} 'Dois e meio mais dois e meio √©...'
                    {print} 2.5 + 2.5
                    ```
                example_code_2: |
                    ```
                    a = 'Ol√° '
                    b = 'mundo!'
                    {print} a + b
                    ```
    music:
        name: m√∫sica
        default_save_name: m√∫sica
        description: Toque uma m√∫sica!
        levels:
            1:
                story_text: |-
                    Neste n√≠vel, voc√™ ir√° aprender a usar o comando `{play}` para tocar uma melodia!

                    Digite `{play}` seguido da nota que voc√™ quer tocar. A escala vai assim: C-D-E-F-G-A-B (no lugar de D√≥, R√©, Mi, F√°, Sol, L√°, Si; nessa ordem)
                    Como pode ver, h√° 7 letras diferentes, mas podemos tocar mais do que apenas 7 notas.
                    Digite um n√∫mero entre 0 e 9 depois da letra para escolher a escala. Por exemplo, depois de B4 vem C5.
                    C0 √© a nota mais grave que voc√™ pode tocar, e B9, a mais aguda.

                    ### Exerc√≠cio
                    Experimente o c√≥digo exemplo e ent√£o brinque com ele! Voc√™ consegue criar sua pr√≥pria melodia?
                    No pr√≥ximo n√≠vel, voc√™ aprender√° a tocar algumas m√∫sicas j√° existentes.
                example_code: "```\n{play} C4\n{play} D4\n{play} E4\n{play} F4\n{play} G4\n{play} A4\n{play} B4\n{play} C5\n```"
            2:
                story_text: |
                    ### Exercise
                    Termine as can√ß√µes! N√≥s come√ßamos os c√≥digos para algumas melodias.
                example_code: |
                    ```
                    {print} O Velho MacDonald tinha uma fazenda
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: Como pode ver, voc√™ tamb√©m pode usar o comando `{sleep}` para dar uma pequena pausa na m√∫sica.
                example_code_2: |
                    ```
                    {print} Brilha Brilha Estrelinha
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Crie uma melodia aleat√≥ria!

                    ### Exerc√≠cio
                    O c√≥digo exemplo cria uma melodia aleat√≥ria, mas ela √© bem curta e n√£o usa muitas notas.
                    Adicione mais notas √† lista e crie uma meloda mais longa copiando a √∫ltima linha mais algumas vezes.
                example_code: |
                    ```
                    notas {is} A4, B4, C4
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    ```
            5:
                example_code: |
                    ```
                    resposta {is} {ask} 'Qual √© a capital do Zimb√°bue?'
                    {if} resposta {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
            7:
                example_code: |
                    ```
                    {print} 'Brilha Brilha Estrelinha'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            9:
                story_text: "From this level on you can - among other things - use a {repeat} command inside a {repeat} command.\nThat makes songs like 'Happy birthday' even shorter!\n\n### Exercise\nFinish the song!\n"
            15:
                example_code: "```\n{define} m√∫sica\n    {play} _\n\nsim_ou_n√£o = {ask} 'Quer ouvir a minha m√∫sica infinita?'\n{while} sim_ou_n√£o = 'sim'\n    {call} m√∫sica\n    {print} 'ü•≥'\n```\n"
                story_text: "**Aviso** Essa aventura pode ficar extremamente irritante!\nTamb√©m podemos usar o comando {while} para repetir uma m√∫sica infinitamente.\n\n### Exerc√≠cio\nComplete a m√∫sica infinita.\n"
    parrot:
        name: Papagaia
        default_save_name: Papagaia
        description: Crie sua pr√≥pria papagaia de estima√ß√£o online que ir√° copiar voc√™!
        levels:
            1:
                story_text: |
                    Crie sua pr√≥pria papagaia de estima√ß√£o online que ir√° copiar voc√™!
                example_code: |
                    ```
                    {print} Sou Hedy, a papagaia
                    {ask} qual √© o seu nome?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada clicando no bot√£o amarelo.
                    Fa√ßa a papagaia perguntar outra coisa. Preencha as lacunas no exemplo!
                    **Extra** Voc√™ tamb√©m pode deixar a papagaia fazer m√∫ltiplas perguntas. Escreva mais algumas linhas de c√≥digo embaixo de seu programa.
                example_code_2: |
                    ```
                    {print} Sou Hedy, a papagaia
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    No n√≠vel anterior, voc√™ fez uma papagaia que repete o que voc√™ diz. Neste n√≠vel, tornaremos a papagaia interativa usando uma vari√°vel e o comando `{ask}`.
                    Tamb√©m faremos a papagaia parecer mais viva adicionando comandos `{sleep}` depois que algo √© dito.
                example_code: |
                    ```
                    {print} Sou Hedy, a papagaia
                    nome _ _ qual √© o seu nome?
                    {print} nome
                    _
                    {print} grasnido
                    _
                    {print} nome
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Primeiramente, complete a linha 2 com os comando `{is}` e `{ask}`.
                    Em seguida, coloque um comando `{sleep}` nas linhas 4 e 6 para que a papagaia fique quieta por um tempo.

                    **Extra** Voc√™ consegue fazer a papagaia pedir mais do que apenas seu nome adicionando mais linhas de c√≥digo?
            3:
                story_text: |
                    Ensine a sua papagaia uma nova palavra com `{add}`.
                    ### Exerc√≠cio
                    Voc√™ consegue adicionar o comando `{add} {to_list}` de modo a fazer o c√≥digo funcionar?
                example_code: |
                    ```
                    palavras {is} crr√°c, Hedy
                    {print} Treine sua papagaia!
                    nova_palavra {is} {ask} Qual palavra voc√™ quer ensinar a ela?
                    _ nova_palavra _ palavras
                    {print} üßí Diga nova_palavra, Hedy!
                    {print} ü¶ú palavras {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: "```\npalavras {is} crr√°c, Hedy\n{print} _ Treine sua papagaia! _\npalavra_nova {is} {ask} _ Qual palavra voc√™ quer ensinar a ela? _\n{add} palavra_nova {to_list} palavras\n{print} _ üßí Diga _ palavra_nova _, Hedy!_\n{print} _ ü¶ú _ palavras {at} {random}\n```\n"
            5:
                story_text: |
                    Recompense seu papagaio se ele disser a palavra correta!
                example_code: |
                    ```
                    palavras {is} grasnar, Hedy
                    {print} 'Treine seu papagaio!'
                    nova_palavra {is} {ask} 'Qual palavra voc√™ quer ensinar a ele?'
                    {add} nova_palavra {to_list} palavras
                    palavra_dita {is} palavras {at} {random}
                    {print} 'üßí Diga ' nova_palavra ', Hedy!'
                    {print} 'ü¶ú' palavra_dita
                    {if} palavra_dita {is} nova_palavra {print} 'üßí √ìtimo trabalho, Hedy! üç™'
                    {else} {print} 'üßí N√£o, Hedy! Diga ' nova_palavra
                    ```
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
            14:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
            5:
                story_text: "Neste n√≠vel, temos uma nova palavra: `{pressed}`!\nCom `{pressed}`, voc√™ pode usar teclas para controlar quais linhas s√£o usadas.\n\n### Exerc√≠cio\nVeja o c√≥digo exemplo e adicione mais uma linha de c√≥digo que reaja a um aperto de tecla.\n"
                example_code: "```\n{print} 'Voc√™ quer um final feliz (f) ou triste (t)?'\n{if} f {is} {pressed} {print} 'Eles viveram felizes para sempre ‚ù§'\n{else} {print} 'O pr√≠ncipe foi devorado por um hipop√≥tamo üò≠'\n```\n"
        name: Apertos de tecla
        description: Tente ligar uma tecla a um comando!
        default_save_name: Apertado
    print_command:
        default_save_name: imprima
        description: Introdu√ß√£o ao comando imprima
        levels:
            1:
                story_text: |
                    ## O comando {print}
                    Voc√™ pode imprimir texto na tela usando o comando `{print}`.
                example_code: |
                    ```
                    {print} Ol√°, programador(a)!
                    {print} Bem-vindo(a) √† Hedy!
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Em Hedy voc√™ encontrar√° exerc√≠cios em todas as aventuras. Um exerc√≠cio permite que voc√™ pratique os novos comandos e conceitos al√©m de permitir que voc√™ d√™ seu toque pessoal aos c√≥digos de exemplo.
                    Neste exerc√≠cio voc√™ ver√° um espa√ßo em branco de cor rosa. Voc√™ deve preencher algo no lugar do espa√ßo em branco antes que o c√≥digo possa ser executado.

                    Coloque o comando `{print}` no espa√ßo em branco e ent√£o adicione mais cinco linhas de c√≥digo. Cada linha precisa come√ßar com o comando `{print}`.
                    Divirta-se!
                example_code_2: |
                    ```
                    _ Ol√°!
                    ```
            18:
                story_text: |-
                    Chegamos ao c√≥digo real de Python! Isso significa que teremos de usar par√™nteses com `{print}` e `{range}` de agora em diante.
                    Tamb√©m significa que voc√™ pode usar c√≥digos Hedy deste n√≠vel em qualquer ambiente Python contanto que voc√™ use os comandos em ingl√™s. Caso ainda n√£o tenha tentado, voc√™ pode trocar o idioma de comandos no menu de comandos.
                example_code: |
                    ```
                    {print}('Ol√°!')
                    {for} i {in} {range}(1, 10):
                        {print}('Essa √© a linha ', i)
                    ```
                story_text_2: Se quiser imprimir mais de um item, ter√° de separ√°-los por v√≠rgulas.
                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Est√° ', temperatura, ' graus l√° fora.')
                    ```
                    ```
                    nome = 'Hedy'
                    {print}('Meu nome √© ', nome)
                    ```
    quotation_marks:
        name: '''aspas'''
        default_save_name: aspas
        description: Introdu√ß√£o √†s aspas
        levels:
            4:
                story_text: |
                    ## 'Aspas'
                    No n√≠vel 4, `{ask}` e `{print}` mudaram.
                    Agora, quando quiser imprimir qualquer texto, ter√° de coloc√°-lo entre aspas.
                    O bom disso √© que agora voc√™ pode imprimir todas as palavras que quiser, mesmo as que voc√™ j√° usou para guardar algum valor usando `{is}`.
                    A maioria das linguagens de programa√ß√£o tamb√©m usa aspas para isso, ent√£o estamos ficando um passo mais perto da programa√ß√£o real!
                example_code: |
                    ```
                    {print} 'Voc√™ ter√° de usar aspas de agora em diante!'
                    resposta {is} {ask} 'O que teremos de usar de agora em diante?'
                    {print} 'Teremos de usar ' resposta
                    ```
                story_text_2: |
                    ## Contra√ß√µes
                    Importante! Note que, agora que estamos usando aspas simples, Hedy ficar√° confusa se voc√™ usar o ap√≥strofo em contra√ß√µes como "d'√°gua".
                    Certifique-se de delimitar o texto por aspas duplas em vez de simples quando for usar um ap√≥strofo.
                    Confira o c√≥digo exemplo para ver a forma errada de usar ap√≥strofos em seu programa.
                example_code_2: |
                    ```
                    _ Esta √© a forma errada de usar ap√≥strofos no seu c√≥digo _
                    {print} 'Amigo, pode me trazer um copo d'√°gua? Gelada, se tiver.'
                    {print} 'Claro, sempre deixo uma garrafa d'√°gua cheia na geladeira.'
                    _ √â assim que se resolve esse problema _
                    {print} "Amigo, pode me trazer um copo d'√°gua? Gelada, se tiver."
                    {print} "Claro, sempre deixo uma garrafa d'√°gua cheia na geladeira."
                    ```
            12:
                story_text: |
                    **Todos os textos precisam estar dentro de aspas**
                    Neste n√≠vel, voc√™ tamb√©m ter√° de usar aspas ao guardar um texto usando `=`:
                story_text_3: |
                    **Todos os textos depois de compara√ß√µes `{if}` tamb√©m precisam de aspas**
                story_text_4: |
                    **N√∫meros n√£o precisam de aspas**
                    Com n√∫meros, n√£o se usa aspas depois de `=`:
                example_code_4: |
                    ```
                    pontua√ß√£o = 25
                    {print} 'Voc√™ conseguiu ' pontua√ß√£o
                    ```
    random_command:
        default_save_name: comando_aleat√≥rio
        description: introduzindo o comando em aleat√≥rio
        levels:
            3:
                story_text: |
                    ## Em aleat√≥rio
                    Neste n√≠vel, voc√™ pode fazer uma lista usando o comando `{is}` e ent√£o deixar o computador escolher um item aleat√≥rio dessa lista. Para isso, se usa o `{at} {random}`.
                example_code: |
                    ```
                    animais {is} c√£es, gatos, cangurus
                    {print} animais {at} {random}
                    ```
                story_text_2: |
                    Voc√™ pode usar o comando `{at} {random}` em uma frase tamb√©m.
                example_code_2: |
                    ```
                    comida {is} hamb√∫rguer, pizza, salada, burrito
                    {print} Vou comer comida {at} {random} no almo√ßo.
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Experimente o comando `{at} {random}` criando o seu pr√≥prio game show onde voc√™ escolhe uma porta ou mala e ela cont√©m um grande pr√™mio!
                    Consegue fazer isso? J√° colocamos as primeiras linhas no c√≥digo exemplo.
                example_code_3: |
                    ```
                    {print} O grande game show!
                    {print} H√° 3 malas na sua frente...
                    escolhida {is} {ask} Qual mala voc√™ escolhe?
                    premios {is} _
                    _
                    ```
    restaurant:
        name: Restaurante
        default_save_name: Restaurante
        description: Crie seu pr√≥prio restaurante virtual
        levels:
            1:
                story_text: |
                    No n√≠vel 1 voc√™ pode fazer seu pr√≥prio restaurante virtual e receber os pedidos de seus convidados.
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada clicando no bot√£o amarelo.
                    Primeiro, preencha as lacunas com os comandos certos para fazer o c√≥digo funcionar corretamente.
                    Ent√£o, adicione pelo menos mais 4 linhas de c√≥digo ao programa de restaurante.
                    Pergunte ao(√†) cliente o que ele(a) gostaria de beber e pergunte se o pagamento ser√° em dinheiro ou cart√£o.
                    Por fim, pense em uma forma gentil de se despedir do(a) cliente.
                example_code_2: |
                    ```
                    {print} Bem-vindo(a) ao restaurante da Hedy üçü
                    _ O que voc√™ gostaria de pedir?
                    {echo} Ent√£o voc√™ gostaria de pedir
                    {print} Obrigado pelo seu pedido!
                    {print} Est√° a caminho!
                    ```
            2:
                story_text: |
                    No n√≠vel 2, voc√™ pode expandir seu restaurante usando vari√°veis. No n√≠vel 1, Hedy s√≥ conseguia executar `{echo}` no pedido uma √∫nica vez e s√≥ se lembrava da √∫ltima coisa pedida.
                    Agora, voc√™ pode usar vari√°veis e Hedy poder√° se lembrar tanto da comida quanto das bebidas!
                example_code: |
                    ```
                    {print} Bem-vindo(a) ao restaurante da Hedy!
                    {print} Hoje estamos servimos pizza ou lasanha.
                    comida {is} {ask} O que voc√™ gostaria de comer?
                    {print} √ìtima escolha! Essa comida √© minha favorita!
                    acompanhamento {is} {ask} Gostaria da comida com carne ou com vegetais?
                    {print} comida com acompanhamento a caminho!
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo do seu pr√≥prio restaurante do n√≠vel anterior para a tela de entrada abaixo.
                    Corrija o c√≥digo substituindo os comandos `{ask}` e `{echo}` e usando vari√°veis, como voc√™ aprendeu neste n√≠vel.

                    Agora que seu c√≥digo est√° funcionando novamente, √© hora de adicionar algo mais.
                    Veja a √∫ltima linha do c√≥digo de exemplo: `{print} comida com acompanhamento a caminho!`
                    Nesta √∫nica linha foram utilizadas 2 vari√°veis para criar um resumo do pedido.
                    Agora adicione seu pr√≥prio resumo das comidas e bebidas que o cliente pediu.

                    **Extra** Agora que voc√™ aprendeu como usar vari√°veis, voc√™ pode usar quantas vari√°veis desejar em uma linha. Voc√™ pode adicionar mais vari√°veis ao seu c√≥digo, como comer no local ou levar, dinheiro ou cart√£o, com ou sem canudo, etc.?
            3:
                story_text: |
                    Est√° tendo problemas para decidir o que quer jantar? Voc√™ pode deixar Hedy escolher por voc√™!
                    Basta adicionar listas de suas refei√ß√µes favoritas (ou menos favoritas) e Hedy poder√° escolher seu jantar aleatoriamente.
                    Voc√™ tamb√©m pode se divertir um pouco, deixando Hedy escolher o pre√ßo do seu jantar tamb√©m! O que voc√™ vai conseguir?
                example_code: |
                    ```
                    pratos {is} espaguete, couve de Bruxelas, hamb√∫rgueres
                    {print} Voc√™ ter√° pratos {at} {random} esta noite!
                    pre√ßos {is} 1 euro, 10 euros, 100 euros
                    {print} Isso custar√° pre√ßos {at} {random}, por favor.
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Agora fa√ßa a sua pr√≥pria vers√£o do restaurante aleat√≥rio.
                    Fa√ßa por conta pr√≥pria uma lista de entradas, pratos principais, sobremesas, bebidas e pre√ßos.
                    Em seguida, use os comandos `{print}` e `{at} {random}` para informar ao(√†) cliente o que estar√° em seu menu esta noite.
                example_code_2: |
                    ```
                    {print} Bem-vindo(a) ao seu pr√≥prio restaurante aleat√≥rio!
                    entradas {is} _
                    pratos_principais {is} _
                    sobremesas {is} _
                    bebidas {is} _
                    pre√ßos {is} _
                    _
                    ```
    rock:
        name: Pedra, papel, tesoura
        default_save_name: Pedra_2
        description: Fa√ßa seu pr√≥prio jogo de pedra, papel e tesoura
        levels:
            1:
                story_text: |
                    No n√≠vel 1, voc√™ pode come√ßar com um jogo de pedra, papel e tesoura.

                    Com o comando `{ask}` voc√™ pode fazer uma escolha, e com `{echo}` voc√™ pode repetir essa escolha.
                example_code: |
                    ```
                    {print} o que voc√™ escolhe?
                    {ask} escolha entre pedra, papel ou tesoura
                    {echo} ent√£o sua escolha foi:
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Em vez de usar palavras, voc√™ tamb√©m pode usar emojis: ‚úä‚úã‚úå
                    Voc√™ consegue criar um c√≥digo usando emojis?
                example_code_2: |
                    ```
                    {print} o que voc√™ escolhe?
                    {ask} escolha entre _
                    {echo} ent√£o sua escolha foi:
                    ```
            2:
                story_text: |
                    Neste n√≠vel, voc√™ pode praticar o uso de vari√°veis. Assim, voc√™ vai conseguir criar o jogo de pedra, papel e tesoura no pr√≥ximo n√≠vel!
                    ### Exerc√≠cio
                    Complete o c√≥digo preenchendo a lacuna com a **vari√°vel**.
                    Este jogo n√£o √© muito interativo, mas n√£o se preocupe! Na pr√≥xima aventura, voc√™ aprender√° a usar vari√°veis com o comando `{ask}` para tornar o seu jogo mais interativo!
                example_code: |-
                    ```
                    escolha {is} pedra
                    {print} Eu escolho _
                    ```
            3:
                story_text: |
                    Voc√™ pode usar o comando `{at} {random}` para deixar o computador escolher pedra, papel ou tesoura!

                    ### Exerc√≠cio
                    Termine o c√≥digo usando o comando `{at} {random}`.
                example_code: |
                    ```
                    escolhas {is} pedra, papel, tesoura
                    {print} escolhas _
                    ```
                story_text_2: |
                    **Extra** Fa√ßa um jogo para duas pessoas jogarem. Primeiro, pe√ßa que as duas digitem seus nomes. Ent√£o, deixe que o computador escolha aleatoriamente para elas.
                example_code_2: |
                    ```
                    escolhas {is} pedra, papel, tesoura
                    jogador_1 {is} {ask} Nome do(a) jogador(a) 1:
                    _
                    ```
            10:
                story_text: |
                    ### Exerc√≠cio
                    Nos n√≠veis anteriores, voc√™ fez diversas vezes o seu pr√≥prio jogo de pedra, papel e tesoura. Voc√™ consegue terminar este c√≥digo e usar o comando `{for}` para fazer o jogo funcionar corretamente?
                example_code: |
                    ```
                    escolhas = _
                    jogadores = _
                    {for} _
                    ```
            4:
                example_code: "```\nescolhas {is} pedra, papel, tesoura\n{print} _O computador escolhe..._ escolhas {at} {random}\n```\n"
    rock_2:
        name: Pedra, papel e tesoura 2
        default_save_name: pedra_2
        description: Parte 2 de pedra, papel e tesoura
        levels:
            2:
                story_text: |
                    Agora que voc√™ aprendeu a usar o comando `{ask}`, voc√™ pode deixar o c√≥digo do seu jogo de pedra, papel e tesoura mais interativo!

                    ### Exerc√≠cio
                    Deixe o jogo mais interativo adicionando um comando `{ask}` para fazer uma pergunta em seu jogo de pedra, papel e tesoura.
                example_code: |
                    ```
                    escolha {is} _
                    {print} Eu escolho escolha
                    ```
    secret:
        name: Superespi√£o
        default_save_name: Superespi√£o
        description: Fa√ßa seu pr√≥prio c√≥digo de espi√£o
    sleep_command:
        default_save_name: comando_durma
        description: introduzindo o comando {sleep}
        levels:
            2:
                story_text: |
                    Mais um comando novo deste n√≠vel √© o `{sleep}`, que pausa o seu programa por um segundo. Se voc√™ digitar um n√∫mero depois do comando `{sleep}`, o programa pausa por essa quantidade de segundos.
                    ### Exerc√≠
                    cio
                    Pratique esse novo comando fazendo um c√≥digo de sua pr√≥pria autoria, em que voc√™ usa o `{sleep}` pelo menos 3 vezes. Para cada comando `{sleep}`, o tempo de pausa tem de ser diferente.
                example_code: |
                    ```
                    {print} Minha cor favorita √©...
                    {sleep} 2
                    {print} verde!
                    ```
    songs:
        name: Cante uma can√ß√£o!
        default_save_name: Can√ß√£o
        description: Imprima uma can√ß√£o
        levels:
            6:
                story_text: |
                    As m√∫sicas geralmente cont√™m muita repeti√ß√£o. √Äs vezes, a repeti√ß√£o tamb√©m se baseia na contagem.
                    Por exemplo, como na conhecida can√ß√£o 'Garrafas de cerveja'. Voc√™ pode programar essa m√∫sica com um pouco de matem√°tica.
                example_code: |
                    ```
                    verso = 99
                    {print} verso 'garrafas de cerveja na parede'
                    {print} verso 'garrafas de cerveja'
                    {print} 'Pegue uma, passe por a√≠'
                    verso = verso - 1
                    {print} verso 'garrafas de cerveja na parede'
                    ```

                    Agora voc√™ pode repetir as linhas 2 a 9 quantas vezes quiser copiando as linhas.
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |
                    As m√∫sicas geralmente cont√™m muita repeti√ß√£o. Por exemplo... Beb√™ Tubar√£o! Se voc√™ canta, voc√™ continua cantando a mesma coisa:

                    Beb√™ tubar√£o tututudutudu <br>
                    Beb√™ tubar√£o tututudutudu <br>
                    Beb√™ tubar√£o tututudutudu <br>
                    Tubar√£o beb√™

                    Voc√™ pode fazer esta m√∫sica muito mais curta com um `{repeat}`! Voc√™ pode terminar o c√≥digo?
            8:
                story_text: |
                    Em um n√≠vel anterior voc√™ programou a m√∫sica 'Garrafas de cerveja'. Voc√™ fez um verso e depois teve que copiar os versos 99 vezes. No n√≠vel 7 voc√™ pode repetir a m√∫sica 99 vezes, apenas adicionando uma linha simples!
                example_code: |
                    ```
                    verso = 99
                    {repeat} 99 {times}
                         {print} verso 'garrafas de cerveja na parede'
                         {print} verso 'garrafas de cerveja'
                         {print} 'Pegue uma, passe por a√≠'
                         verso = verso - 1
                         {print} verso 'garrafas de cerveja na parede'
                    ```
            10:
                story_text: |
                    Neste n√≠vel, voc√™ pode facilmente fazer a m√∫sica infantil 'Cinco macaquinhos'. Voc√™ pode fazer o √∫ltimo refr√£o?
                    Voc√™ tamb√©m pode fazer toda a m√∫sica do tubar√£o beb√™ (incluindo todos os outros tubar√µes da fam√≠lia) em apenas 6 linhas!
                    Ou voc√™ pode fazer o Velho MacDonald com todos os diferentes animais.
                example_code: |
                    ```
                    macacos = 5, 4, 3, 2
                    {for} macaco {in} macacos
                        {print} macaco 'macaquinhos pulando na cama'
                        {print} 'Um caiu e bateu a cabe√ßa'
                        {print} 'Mam√£e chamou o m√©dico e o m√©dico disse'
                        {print} 'SEM MAIS MACACOS PULANDO NA CAMA!'
                    ```

                    ```
                    tubar√µes = beb√™, mam√£e, papai, vov√≥, vov√¥
                    {for} tubar√£o {in} tubar√µes
                        {print} tubar√£o 'tututututudu'
                        {print} tubar√£o 'tututututudu'
                        {print} tubar√£o 'tututututudu'
                        {print} tubar√£o
                    ```
                    ```
                    animais = porco, cachorro, vaca
                    {for} animal {in} animais
                        {if} animal {is} porco
                            som = oink
                        {if} animal {is} cachorro
                            som = au
                        {if} animal {is} vaca
                            som = mu
                        {print} 'O velho MacDonald tinha uma fazenda'
                        {print} 'I A I A O U!'
                        {print} 'e naquela fazenda ele tinha um ' animal
                        {print} 'I A I A O U!'
                        {print} 'com um ' som som ' aqui'
                        {print} 'e um ' som som ' ali'
                        {print} 'aqui um ' som
                        {print} 'l√° um' som
                        {print} 'em todos os lugares um ' som som
                    ```
            11:
                story_text: |
                    Neste n√≠vel voc√™ pode usar o comando `{for} i {in} {range}` para fazer m√∫sicas que usam contagem.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' macaquinhos pulando na cama'
                        {print} 'Um caiu e bateu a cabe√ßa'
                        {print} 'Mam√£e chamou o m√©dico e o m√©dico disse'
                        {if} i {is} 1
                            {print} 'COLOQUE AQUELES MACACOS LOGO NA CAMA!'
                        {else}
                            {print} 'CHEGA DE MACACOS PULANDO NA CAMA!'
                    ```
            12:
                story_text: |
                    Nesta m√∫sica podemos tornar ainda mais f√°cil programar '{if} voc√™ est√° feliz e sabe disso, bata palmas'. Uma vez que podemos colocar todas as a√ß√µes em uma vari√°vel, confira:
                example_code: |
                    ```
                    a√ß√µes = 'bater palmas', 'bater os p√©s', 'gritar Hurra!'
                    {for} a√ß√£o {in} a√ß√µes
                        {for} i {in} {range} 1 {to} 2
                            {print} 'se voc√™ est√° feliz e sabe disso'
                            {print} a√ß√£o
                        {print} 'se voc√™ est√° feliz e sabe disso e realmente quer demonstrar'
                        {print} 'se voc√™ est√° feliz e sabe disso'
                        {print} a√ß√£o
                    ```
            16:
                story_text: |
                    Neste n√≠vel, voc√™ pode programar uma m√∫sica como Velho MacDonald ainda mais rapidamente. Voc√™ pode conectar o animal certo ao som certo simplesmente colocando-os no mesmo lugar na lista.
                    O Marinheiro B√™bado tamb√©m √© feito rapidamente neste n√≠vel. Voc√™ s√≥ precisa de 8 linhas para a m√∫sica inteira, confira!
                example_code: |
                    ```
                    animais = ['porco', 'cachorro', 'vaca']
                    sons = ['oinc', 'au', 'mu']
                    {for} i {in} {range} 1 {to} 3
                         animal = _
                         som = _
                         {print} 'O velho MacDonald tinha uma fazenda'
                         {print} 'I A I A O!'
                         {print} 'e naquela fazenda ele tinha um ' animal
                         {print} 'I A I A O!'
                         {print} 'com um ' som som ' aqui'
                         {print} 'e um ' som som ' ali'
                         {print} 'aqui um ' som
                         {print} 'l√° um' som
                         {print} 'em todos os lugares um ' som som
                    ```

                    ```
                    linhas = ['o que devemos fazer com o marinheiro b√™bado', 'raspar sua barriga com uma navalha enferrujada', 'coloc√°-lo em um longo barco at√© que ele fique s√≥brio']
                    {for} linha {in} linhas
                        {for} i {in} {range} 1 {to} 3
                            {print} linha
                        {print} 'no in√≠cio da manh√£'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'e assim se levanta a √¢ncora'
                        {print} 'no in√≠cio da manh√£'
                    ```
    songs_2:
        default_save_name: Can√ß√£o 2
        description: Cante uma can√ß√£o 2
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    turtle:
        name: Tartaruga
        default_save_name: Tartaruga
        description: Fa√ßa o seu pr√≥prio desenho
        levels:
            1:
                story_text: |
                    Voc√™ tamb√©m pode usar Hedy para desenhar. Ao combinar giros e linhas, voc√™ pode fazer um quadrado ou uma escada!

                    Usando `{forward}` voc√™ desenha uma linha para frente. O n√∫mero depois dele determina o qu√£o longe a tartaruga vai andar. `{turn} {right}` gira um quarto de volta no sentido hor√°rio, `{turn} {left}` gira no sentido anti-hor√°rio.
                    Se voc√™ quiser voltar, voc√™ usa o comando `{forward}` mas com um n√∫mero negativo. Por exemplo, `{forward} -100`
                story_text_2: |
                    ### Exercise
                    Este √© o in√≠cio de uma pequena escada. Voc√™ pode faz√™-la ter 5 degraus?
                example_code_2: "```\n{forward} 20\n{turn} {right}\n{forward} 20\n{turn} {left}\n{forward} 20\n```\n"
                example_code: "```\n{forward} 100\n{turn} {left}\n```\n"
            2:
                story_text: |
                    No n√≠vel 1, a tartaruga s√≥ podia virar para a esquerda ou para a direita. Isso √© meio chato!
                    No n√≠vel 2, ela pode apontar seu nariz para qualquer dire√ß√£o.

                    Use 90 graus para dar um quarto de volta, 180 para dar meia volta, e 360 para dar uma volta completa.

                    ### Exerc√≠cio
                    No momento, esse c√≥digo cria a letra T. Voc√™ consegue mud√°-lo de forma que ele fa√ßa a letra B?

                    **Extra** Mude a letra para alguma outra letra, como, por exemplo, a primeira do seu nome.
                    Voc√™ tamb√©m pode criar v√°rias letras, definindo a cor como `{color}` `{white}` entre elas.
                example_code: |
                    ```
                    {forward} 80
                    {turn} 90
                    {forward} 50
                    {turn} 180
                    {forward} 100
                    ```
                story_text_2: |
                    Voc√™ tamb√©m pode usar vari√°veis no comando `turn` da tartaruga.

                    ### Exerc√≠cio
                    Altere o c√≥digo de modo que ele crie um tri√¢ngulo. Dica: voc√™ s√≥ precisa mudar o c√≥digo em um lugar.
                example_code_2: |
                    ```
                    {print} Desenhando figuras
                    √¢ngulo {is} 90
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    ```
            3:
                story_text: |
                    Neste n√≠vel voc√™ pode usar `{at} {random}` com a tartaruga de desenho. Uma escolha aleat√≥ria faz com que a tartaruga percorra um caminho diferente a cada vez.
                    Use `{at} {random}` para escolher um valor de uma lista. Voc√™ pode copiar e colar as linhas 2 e 3 para criar um caminho aleat√≥rio mais longo.
                example_code: |
                    ```
                    √¢ngulos {is} 10, 50, 90, 150, 250
                    {turn} √¢ngulos {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    No n√≠vel 4 voc√™ tem que usar aspas com `{print}` e `{ask}`. Tamb√©m ao desenhar!
                example_code: |
                    ```
                    {print} _ Desenhando figuras _
                    √¢ngulo {is} 90
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    ```
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: |
                    No n√≠vel 5 voc√™ pode fazer uma escolha com `{if}`. Por exemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Desenhando Figuras'
                    figura {is} {ask} 'Voc√™ quer um quadrado ou um tri√¢ngulo?'
                    {if} figura {is} tri√¢ngulo √¢ngulo {is} 120
                    {else} √¢ngulo {is} 90
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    ```
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    Neste n√≠vel voc√™ pode usar c√°lculos para desenhar figuras diferentes.
                    Voc√™ pode ter aprendido na escola que girar um c√≠rculo completo √© de 360 graus. Se n√£o, agora voc√™ sabe!
                    √â por isso que voc√™ tamb√©m usa 90 graus para um quadrado. 360 dividido por 4 √© 90.
                    Agora que podemos fazer contas com a Hedy, podemos desenhar todas as figuras que quisermos!
                example_code: |
                    ```
                    √¢ngulos = {ask} 'Quantos √¢ngulos voc√™ deseja?'
                    √¢ngulo = 360 / √¢ngulos
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    ```
            8:
                story_text: |
                    Agora que podemos repetir v√°rias linhas, podemos fazer figuras com mais facilidade.
                    N√≥s s√≥ temos que definir o √¢ngulo uma vez e ent√£o usar essa vari√°vel no `{repeat}`.
                example_code: |
                    ```
                    √¢ngulo = 90
                    {repeat} 4 {times}
                        {turn} √¢ngulo
                        {forward} 50
                    ```
                story_text_2: |
                    **Extra** Agora podemos melhorar o programa que desenha diversas figuras. Termine o c√≥digo e voc√™ poder√° desenhar qualquer pol√≠gono que quiser!
                example_code_2: |
                    ```
                    √¢ngulos = {ask} 'Quantos √¢ngulos eu deve desenhar?'
                    √¢ngulo= 360 / √¢ngulos
                    {repeat} √¢ngulos {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.

                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!

                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    dist√¢ncias = 10, 20, 30, 40, 50, 60
                    {for} dist√¢ncia {in} dist√¢ncias
                        {forward} dist√¢ncia
                    ```
    turtle_draw_it:
        name: Desenhe!
        default_save_name: Desenhe
        description: Desenhe essa imagem com a tartaruga
        levels:
            1:
                story_text: |
                    ### Exerc√≠cio
                    Recrie os desenhos com a tartaruga!

                    <div class="w-full flex flex-row gap-2">
                        Ret√¢ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Quadrado <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Escada <img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exerc√≠cio
                    Recrie os desenhos com a tartaruga!

                    <div class="w-full flex flex-row gap-2">
                    Tri√¢ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Seta <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Barco <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exerc√≠cio
                    Recrie os desenhos com a tartaruga!

                    <div class="w-full flex flex-row gap-2">
                    Tri√¢ngulo <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Estrela <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Seta <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exerc√≠cio
                    Recrie os desenhos com a tartaruga!

                    <div class="w-full flex flex-row gap-2">
                    Estrela Colorida <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Arco-√≠ris <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Quadrados Aninhados <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Est√° pronto para um verdadeiro desafio? Certifique-se de que as cores das imagens sejam selecionadas de forma aleat√≥ria, para que cada vez que voc√™ executar os programas, a apar√™ncia seja diferente!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
    years:
        description: Contagem regressiva para o Ano Novo!
    blackjack:
        levels:
            17:
                story_text: "Vinte-e-um (ou \"Blackjack\") √© um simples jogo de cartas em que voc√™ tem que chegar o mais perto de 21 poss√≠vel. Voc√™ tem 2 cartas, cada uma com seu valor num√©rico, e as cartas especiais (Valete, Dama e Rei) valem 10 pontos.\nO √Ås pode valer ou 1, ou 11 (voc√™ escolhe na hora). O \"dealer\", seu oponente, tamb√©m ganha duas cartas.\nSe voc√™ quiser, voc√™ pode pegar outra carta e, ent√£o, os pontos dela ser√£o adicionados ao seu total. O dealer tamb√©m pode escolher outra carta.\nMas tome cuidado para n√£o passar dos 21 pontos, sen√£o voc√™ perde!\nO(a) jogador(a) que chegar mais perto de 21, sem ir al√©m disso, vence!\n\n### Exerc√≠cio\nNesta aventura, vamos escrever o c√≥digo da primeira parte do nosso jogo de Vinte-e-um. Vamos criar uma fun√ß√£o para calcular quantos pontos vale uma carta.\n\n***Defina as vari√°veis***\nComece fazendo uma lista de todas as cartas do 2 ao √Ås. Depois, fa√ßa uma lista das cartas especiais: Valete, Dama e Rei. Ent√£o, escolha uma carta aleat√≥ria.\n\n***Crie uma fun√ß√£o para calcular os pontos***\nCrie uma fun√ß√£o que calcule quantos pontos vale uma certa carta.\nAs cartas especiais valem 10 pontos cada, o √Ås vale 11 e todas as outras cartas valem o pr√≥prio n√∫mero.\nRetorne a vari√°vel `pontos` no final da fun√ß√£o.\n\n***Teste a fun√ß√£o***\nTeste se sua fun√ß√£o est√° funcionando corretamente. Complete o primeiro comando de imprimir com a carta que voc√™ tirou. Em seguida, complete a segunda linha chamando a fun√ß√£o com carta_1.\nExecute o c√≥digo algumas vezes. Feliz com os resultados? √ìtimo! Ent√£o voc√™ j√° pode remover a parte do teste e seguir para a pr√≥xima aventura!\n"
                example_code: "```\n{print} 'VINTE-E-UM'\n\n# Defina estas vari√°veis\ncartas = _\ncartas_especiais = _\ncarta_1 =\n\n# Crie uma fun√ß√£o para calcular os pontos\n{define} calcular_pontos {with} carta:\n    {if} carta {in} cartas_especiais:\n        pontos = _\n    {elif} _\n        _\n    {else}:\n        _\n    _ pontos\n\n# Teste sua fun√ß√£o\n{print} 'Sua carta √© ' _\n{print} 'Ela vale ' _ ' pontos'.\n```\n"
        description: Tente chegar o mais perto de 21 que conseguir
        name: Vinte-e-um
        default_save_name: Vinte-e-um
    blackjack_3:
        description: Vinte-e-um parte 3
        name: Vinte-e-um 3
        default_save_name: Vinte_e_um_3
    blackjack_4:
        name: Vinte-e-um 4
        default_save_name: Vinte_e_um_4
        description: Vinte-e-um parte 4
    blackjack_2:
        name: Vinte-e-um 2
        default_save_name: Vinte_e_um_2
        description: Vinte-e-um parte 2
    hangman:
        name: Forca
        default_save_name: Forca
        description: Adivinhe a palavra
