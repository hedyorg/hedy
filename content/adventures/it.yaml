adventures:
    story:
        name: Storia
        default_save_name: Storia
        description: Crea una storia breve
        levels:
            1:
                story_text: |
                    Nel livello 1 puoi creare una storia con un personaggio principale diverso che inserisci tu stesso.

                    Nella prima riga, usa `{ask}` e chiedi chi sar√† il personaggio principale della storia.

                    Dopo la prima riga, inizia con `{print}`  se la frase deve essere stampata.
                    Usa `{echo}`  se vuoi che il tuo personaggio principale sia alla fine della frase.
                example_code: |
                    ```
                    {ask} Il personaggio principale di questa storia √®
                    {print} Il personaggio principale ora camminer√† nella foresta
                    {echo} √à un po' spaventato,
                    {print} Sente rumori terrificanti ovunque
                    {print} Ha paura che questa sia una foresta infestata
                    ```
                story_text_2: |
                    ### Esercizio
                    Ora crea la tua storia di almeno 6 righe di codice.
                    Questa storia non pu√≤ essere uguale al codice di esempio.
                    Utilizza almeno un comando `{ask}` e un comando `{echo}`.
                    Puoi farlo su qualsiasi argomento che ti piace.
                    Se non riesci a pensare a un argomento, usa una delle nostre scelte: andare al cinema, una partita sportiva o una giornata allo zoo.
            2:
                story_text: |
                    Nel livello 2 puoi rendere la tua storia pi√π divertente. Il nome del tuo personaggio principale ora pu√≤ essere ovunque nella frase.

                    Devi programmare un po' di pi√π per quello. Ora devi prima nominare il tuo personaggio principale.

                    Puoi quindi inserire quel nome ovunque in una frase.
                story_text_2: |
                    ### Esercizio
                    Ora √® il momento di aggiungere variabili alla tua storia che hai creato nel livello precedente.
                    Vai su 'I miei programmi', cerca la tua avventura storia di livello 1 e copia il codice. Incolla il codice nella schermata di input in questo livello.

                    Questo codice non funzioner√† in questo livello perch√© non hai ancora utilizzato le variabili.
                    Modifica i comandi `{ask}` e `{echo}` nel tuo codice nella forma corretta che hai imparato in questo livello.

                    **Extra** Aggiungi un comando `{sleep}` al tuo codice per aumentare la tensione nella tua storia.
                example_code: "```\nnome {is} {ask} Qual √® il nome del personaggio principale?\n{print} nome sta per correre nel bosco\n{print} nome √® un po' spaventato\n{print} All'improvviso sente un rumore inquietante...\n{sleep}\n{print} nome teme che questa sia un bosco infestato\n```"
            3:
                story_text: |
                    Nel livello 3 puoi rendere la tua storia pi√π divertente. Puoi usare la casualit√† per qualsiasi mostro, animale o ostacolo, in questo modo:
                story_text_3: |
                    Questo √® un esempio del comando `{remove}` nella tua storia

                    ### Esercizio
                    Copia la tua storia dai livelli precedenti a questo livello.
                    In questo livello hai imparato 3 nuovi comandi `{at} {random}`, `{add} {to_list}` e `{remove} {from}`.
                    Aggiungi nuove righe di codice alla tua storia, in modo che tutti i nuovi comandi siano presenti almeno una volta nella tua storia.
                example_code: "```\nanimali {is} ü¶î, üêø, ü¶â, ü¶á\n{print} Ora sentono il verso di un animali {at} {random}\n```\n"
                story_text_2: "Il comando `{add}` pu√≤ essere utile nella tua storia.\n"
                example_code_2: "```\n{print} Sentono un suono\nanimali {is} üêø, ü¶î, ü¶á, ü¶â\nanimale {is} {ask} Quale pensi che sia?\n{add} animale {to_list} animali\n{print} era un animali {at} {random}\n```\n"
                example_code_3: "```\n{print} His backpack got way too heavy.\n{print} Inside were a bottle of water, a flashlight and a brick.\nbag {is} water, flashlight, brick\ndump {is} {ask} Which item should he dump?\n{remove} dump {from} bag\n```\n"
            4:
                story_text: |
                    ### Esercizio
                    Copia il codice di esempio e completalo aggiungendo virgolette sugli spazi vuoti nelle righe 1 e 2.
                    Gli spazi nelle righe 3 e 4 non devono essere sostituiti da virgolette, ma da un comando `{sleep}` e un comando `{clear}`. Puoi farlo funzionare?

                    ### Esercizio 2
                    Torna al livello precedente e copia il codice della storia. Fai funzionare il codice in questo livello aggiungendo virgolette nei punti giusti.
                    Attenzione: le variabili nella tua storia dovrebbero essere fuori dalle virgolette. Proprio come la seconda riga del codice di esempio. In quella riga il nome della variabile viene inserito fuori dalle virgolette.
                example_code: |
                    ```
                    nome {is}{ask} _ Come ti chiami? _
                    {print} _ Il personaggio principale si chiama _ nome
                    _
                    _
                    {print} nome _ ora camminer√† nel bosco _
                    {print} nome _ √® un po' spaventato _
                    animali {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Sente il suono di _ animali {at} {random}
                    {print} nome _ ha paura che questa sia una foresta infestata _
                    ```
            5:
                story_text: |
                    In questo livello puoi programmare diversi finali, che renderanno la tua storia ancora pi√π divertente.
                    Nel codice di esempio puoi vedere come realizzare 2 finali diversi.

                    ### Esercizio 1
                    Scrivi un nuovo racconto di almeno 6 righe di codice su un argomento di tua scelta.
                    Nessuna ispirazione? Scegli uno di questi argomenti: un supereroe, una noiosa giornata scolastica, bloccato su un'isola deserta.

                    Ora dai al giocatore la possibilit√† di scegliere un finale bello o brutto, come nel codice di esempio.
                    Programma entrambi i finali.

                    ### Esercizio 2
                    Copia la storia che hai creato nella tua avventura narrativa nei livelli precedenti.
                    Trova un modo per aggiungere almeno 2 comandi `{if}` e `{else}` alla tua storia.
                    Questo pu√≤ avvenire con un finale bello o brutto, ma puoi anche provare a trovare altri modi per inserire i comandi.
                example_code: |
                    ```
                    nome {is} {ask} 'Chi sta camminando nella foresta?'
                    {print} nome 'cammina nella foresta'
                    {print} nome 'incontra un mostro'
                    fine {is} {ask} 'Vuoi un lieto fine o un brutto finale?'
                    {if} fine {is} lieto {print} nome 'prende la spada e il mostro scappa velocemente'
                    {else} {print} 'Il mostro mangia' nome
                    ```
            8:
                story_text: |
                    In una storia, qualcuno dice le parole pi√π volte. Ad esempio, quando qualcuno chiede aiuto o canta una canzone.
                    Puoi inserire tali ripetizioni nella tua storia, in questo livello con `{repeat}`.

                    ### Esercizio
                    Aggiungi ripetizione alla tua storia. Torna ai programmi salvati, scegli il programma della storia dal livello precedente e
                    trova una riga contenente `{print}` e ripetila!
                example_code: "```\n{print} 'Il principe continuava a chiedere aiuto'\n{repeat} 5 {times} {print} 'Aiuto!'\n{print} 'perch√© nessuno mi aiuta?'\n```\n"
            9:
                story_text: |
                    In questo livello puoi utilizzare pi√π righe nei comandi `{if}`, in questo modo puoi migliorare il tuo lieto fine o il tuo triste finale!

                    ### Esercizio 1
                    Il codice di esempio mostra due finali diversi; uno in cui i personaggi saltano in una macchina del tempo e uno in cui no.
                    Completa gli spazi vuoti con almeno una frase per conclusione.
                    **Extra** Rendi la storia pi√π lunga. Cosa succede nella storia? Puoi anche aggiungere un secondo `{ask}` con diverse opzioni.

                    ### Esercizio 2
                    Torna ai tuoi programmi salvati, scegli il tuo programma storia dal livello 5. Ora scrivi un finale bello e uno brutto di almeno tre righe ciascuno!
                example_code: |
                    ```
                    {print} 'OH NO! Il T-rex si sta avvicinando!'
                    end = {ask} 'Vuoi un finale felice o triste?'
                    {if} la fine {is} felice
                        {print} 'Appena in tempo Richard torna nella macchina del tempo!'
                        {print} _
                    {else}
                        {print} 'Oh no! Richard √® troppo lento...'
                        {print}_
                    ```
            10:
                story_text: |
                    In questo livello puoi utilizzare i comandi `{if}` e `{repeat}` all'interno di altri comandi `{if}` e `{repeat}`.
                    Questo ti offre molte opzioni e ti aiuta davvero a rendere la tua storia interattiva.

                    ### Esercizio 1
                    Completa il codice in modo che `{if}` funzioni correttamente.

                    ### Esercizio 2
                    Aggiungi un `{if}` e un `{else}` per la parte della storia in cui anche Robin torna a casa.

                    ### Esercizio 3
                    Torna alla tua storia di livello 8 e usa almeno due `{if}` all'interno di un altro `{if}`.
                example_code: |
                    ```
                    {print} 'Robin sta camminando in centro'
                    luogo = {ask} 'Robin entra in un negozio o torna a casa?'
                    {if} luogo {is} negozio
                        {print} 'Lei entra nel negozio.'
                        {print} "Robin vede un libro dall'aspetto interessante"
                        prenota = {ask} 'Robin compra il libro?'
                        {if} prenota {is} s√¨
                        _ {print} 'Robin compra il libro e torna a casa'
                        _ {else}
                        _ {print} 'Robin esce dal negozio e torna a casa'
                    {else}
                        {print} 'Robin va a casa'
                    ```
            11:
                story_text: |
                    In questo livello puoi usare il comando {for} nella tua storia. In questo modo potrete facilmente programmare il libro per bambini 'Orso bruno, Orso bruno, cosa vedi'.

                    ### Esercizio

                    Guarda <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> la storia</a> se non la conosci e assicurati che sia stampato come nel libro.
                example_code: |
                    ```
                    animali = _ , _ , _
                    {print} 'Orso bruno, orso bruno'
                    {print} 'Cosa vedi?'
                    ```
            13:
                example_code: |
                    ```
                    {print}('Benvenuti in questa storia!')
                    ```
                story_text_2: |
                    ### Esercizio 2
                    Abbiamo gi√† preparato un `{input}` per te. Innanzitutto, utilizza la variabile `name` nella tua storia.
                    Quindi aggiungi un secondo `{ask}` e usa anche quella variabile.
                    Suggerimento: ricorda le virgole in `{print}` tra testo e variabili!
                example_code_2: |
                    ```
                    nome = {input}("Come ti chiami?")
                    {print}('Benvenuti in questa storia!')
                    ```
                story_text: "Scriveremo un'altra storia, ma ora dobbiamo usare le parentesi con `{print}`.\n\n### Esercizio 1\nCrea una storia di almeno 5 frasi. Non devi ancora usare 'nome'.\n"
            16:
                story_text: "Usando la funzione `{while}`  puoi rendere le tue storie pi√π interessanti. Per esempio puoi usare `{while} game == 'on'` in modo da giocare fino alla fine della partita.\nO puoi usare `{while} sword == 'lost'` in modo che il giocatore non possa continuare la partita fino a quando non hanno trovato qualcosa.\n\n###  Esercizio\nIl codice di esempio ti mostra come usare la funzione `{while}`  in una storia. Ora **pensa ad un tuo scenario** in cui il giocatore deve trovare qualcosa per continuare.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
    add_remove_command:
        default_save_name: aggiungi_rimuovi_comando
        description: introducendo {add}¬†{to_list} e {remove}¬†{from}
        levels:
            3:
                story_text: |
                    ## Aggiungere a
                    Puoi aggiungere elementi all'elenco con il comando `{add} {to_list}`. Per aggiungere un elemento a una lista puoi semplicemente digitare: `{add} penguin {to_list} animals` oppure puoi usare il comando `{ask}` come nel codice di esempio.
                example_code: |
                    ```
                    animali {is} cane, gatto, canguro
                    like {is} {ask} Qual √® il tuo animale preferito?
                    {add} mi piace {to_list} animali
                    {print} Scelgo gli animali {at} {random}
                    ```
                story_text_2: |
                    ## Rimuovere da
                    Se puoi aggiungere elementi a un elenco, ovviamente puoi anche rimuoverli. Questo viene fatto con il comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animali {is} cane, gatto, canguro
                    non_mi_piace {is} {ask} Quale animale non ti piace?
                    {remove} non_mi_piace {from} animali
                    {print} Scelgo gli animali {at} {random}
                    ```
                story_text_3: |
                    ### Esercizio
                    Prova i nuovi comandi in questo ristorante virtuale. Aggiungi il gusto che il giocatore desidera alla lista e rimuovi i sapori ai quali √® allergico.
                example_code_3: |
                    ```
                    {print} Milkshake misterioso
                    Sapori {is} fragola, cioccolato, vaniglia
                    Speranza {is} {ask} Quale gusto speri di avere?
                    _
                    Allergie {is} {ask} Hai qualche allergia ai sapori?
                    _
                    {print} Ottieni un milkshake con il sapore di {at} {random}
                    ```
        name: '{add} {to_list} & {remove} {from}'
    ask_command:
        description: Introduzione comando {ask}
        levels:
            1:
                story_text: |
                    ## Il comando `{ask}`
                    Ora che sai usare il comando `{print}`, sei pronto per imparare il prossimo comando: `{ask}`. Con il comando `{ask}`, puoi fare una domanda. Guarda:
                example_code: |
                    ```
                    {print} Ciao!
                    {ask} Come ti chiami?
                    ```
                story_text_2: |
                    ## The  `{echo}` command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Ciao!
                    {ask} Come ti chiami?
                    {echo} ciao
                    ```
                story_text_3: |
                    ### Esercizio
                    Prova i comandi `{ask}` e `{echo}` . Prima di tutto, riempi i campi vuoti per far funzionare il programna.
                    Quindi, formula 2 altre domande utilizzando il comando `{ask}` e, dopo ciascun `{ask}`, utilizza  `{echo}` per far visualizzare a schermo la risposta.
                example_code_3: |
                    ```
                    _ Come va?
                    _
                    ```
            2:
                story_text: |
                    ## Il comando `{ask}`
                    Ora che possiamo utilizzare le **variabili** nei nostri codici, non abbiamo pi√π bisogno del comando `{echo}`.
                    Possiamo utilizzare le variabili per memorizzare le risposte alle nostre domande e in questo modo possiamo utilizzare la risposta a pi√π domande nei nostri codici.
                    Guarda:

                    In questo modo il tuo codice diventa interattivo!
                example_code: |
                    ```
                    name {is} {ask} Come ti chiami?
                    {print} Ciao name
                    age {is} {ask} Quanti anni hai?
                    {print} name ha age anni.
                    ```
                story_text_2: |
                    ### Esercizio
                    Nella scheda precedente ti sei esercitato a impostare le variabili con il comando `{is}`.
                    Hai creato almeno 3 variabili e le hai utilizzate con un comando `{print}`.
                    Ora, invece di impostare le variabili, vogliamo che tu renda le variabili interattive, come abbiamo fatto nel nostro esempio.

                    Copia il codice dalla scheda precedente e rendi interattive le variabili utilizzando i comandi `{ask}`.
                example_code_2: |
                    ```
                    animale_preferito {is} {ask} Qual √® il tuo animale preferito?
                    {print} Mi piacciono gli animale_preferito
                    ```
            13:
                example_code: "```\n{print}('Il mio nome √® Hedy!')\nnome = {input}('Come ti chiami?')\n{print}('quindi il tuo nome √®  ', nome)\n```\n"
                story_text: L'ultimo cambiamento che dobbiamo fare per ottenere un codice Python √® cambiare `{ask}` in `{input}`.
        name: '{ask}'
        default_save_name: ask_command
    calculator:
        name: Calcolatore
        default_save_name: Calcolatrice
        description: Crea una calcolatrice
        levels:
            7:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    numero_1 = {ask} 'Compila il primo numero:'
                    numero_2 = {ask} 'Compila il secondo numero:'
                    risposta_corretta = numero_1 * numero_2
                    {print} numero_1 ' volte ' numero_2 ' √® 'risposta_corretta
                    ```
                story_text_2: |
                    ### Esercizio
                    La calcolatrice qui sopra calcoler√† la risposta per te, ma puoi anche creare un programma per testare le tue abilit√† matematiche, come questo:
                    Compila gli spazi vuoti per completarlo!
                example_code_2: |
                    ```
                    risposta_corretta = 11 * 27
                    risposta = {ask} 'Quanto fa 11 per 27?'
                    {if} risposta {is} _ {print} 'bel lavoro!'
                    {else} {print} 'Sbagliato! Era ' _
                    ```
                story_text_3: |
                    **Extra** Puoi anche lasciare che il computer esegua prodotti casuali da solo utilizzando `{random}`.
            10:
                story_text: |
                    Nel livello 6 hai creato una calcolatrice, in questo livello puoi espandere quel codice in modo che ponga pi√π domande.

                    ### Esercizio 1
                    Riesci a finire la riga 10 per far funzionare il programma?

                    ### Esercizio 2
                    Dai un feedback al giocatore quando inserisce una risposta giusta o sbagliata. Per raggiungere questo obiettivo, espandi il tuo programma con un `{else}`.
                example_code: |
                    ```
                    punteggio = 0
                    {repeat} 10 {times}
                        numeri = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        numero1 = numeri {at} {random}
                        numero2 = numeri {at} {random}
                        risposta_corretta = numero1 * numero2
                        {print} 'Quanto fa ' numero1 ' per ' numero2 '?'
                        risposta = {ask} 'Digita la tua risposta qui...'
                        {print} 'La tua risposta √®' risposta
                        {if}_{is}_
                            punteggio = punteggio + 1
                    {print} 'Ottimo lavoro! Il tuo punteggio √®... 'punteggio' su 10!'
                    ```
            11:
                story_text: |
                    Questo gioco di calcolatrice ti aiuta a praticare le tue tabelline!
                    ### Esercizio
                    Puoi aggiungere pi√π numeri all'elenco, cos√¨ da poter esercitarti con le tabelline fino al 10?
                example_code: |
                    ```
                    numeri = 1, 2, 3
                    {for} numero1 {in} numeri
                        {for} numero2 {in} numeri
                            risposta = {ask} 'Quanto fa 'numero2' per 'numero1'?'
                            corretto = numero1 * numero2
                            {if} risposta {is} corretta
                                {print} 'Ottimo lavoro!'
                            {else}
                                {print} 'Questo √® sbagliato. La risposta giusta √® ' corretto
                    ```
            15:
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            16:
                story_text: |
                    Puoi aggiungere il ciclo `{while}` al gioco della calcolatrice che hai imparato a realizzare nel livello precedente.
                    Ci√≤ garantisce che il giocatore non possa continuare con la domanda successiva se risponde in modo errato.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
    clear_command:
        description: clear command
        levels:
            4:
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SORPRESA'
                    ```
    dice:
        levels:
            4:
                story_text: |
                    In questo livello puoi anche creare dadi. Ma questa volta puoi provarlo tu stesso, senza un codice di esempio!

                    ### Esercizio
                    Crea i tuoi dadi in questo livello.
                    Suggerimento: se non hai idea di come realizzare i dadi. Dai un'occhiata ai tuoi dadi del livello precedente, ma non dimenticare di aggiungere le virgolette.
            5:
                story_text: |
                    Aggiungeremo i comandi `{if}` e `{else}` ai nostri dadi!

                    ### Esercizio
                    Completa il codice di esempio in modo che il codice indichi "Puoi smettere di lanciare" una volta lanciato un lombrico. Dovrebbe essere scritto "Devi lanciare di nuovo" se hai lanciato qualcos'altro.
                    **Extra** Forse vuoi ricreare un dado di un gioco completamente diverso. Va bene anche quello! Quindi inventa la tua reazione, ad es. "s√¨" per 6 e "peccato" per qualcos'altro.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            7:
                story_text: |
                    In questo modo puoi anche far morire di nuovo un lombrico, ma ora puoi anche calcolare quanti punti sono stati ottenuti.
                    Potresti sapere che il verme conta 5 punti per i lombrichi. Ora dopo un lancio puoi immediatamente calcolare quanti punti hai lanciato.
                    Questo √® il codice per calcolare i punti per un dado:

                    ### Esercizio
                    Puoi creare il codice in modo da ottenere il punteggio totale per 8 dadi? Per fare ci√≤, devi tagliare e incollare alcune righe del codice.
        name: Dadi
        default_save_name: Dadi
    dishes:
        name: Piatti?
        default_save_name: Piatti
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            3:
                story_text: |
                    A casa sei sempre in disaccordo su chi dovrebbe lavare i piatti o cambiare la lettiera oggi?
                    Quindi puoi lasciare che sia il computer a scegliere in modo molto equo. Puoi programmarlo in questo livello!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                story_text_2: |
                    ### Esercizio
                    Crea la tua versione del programma per lavastoviglie. Per prima cosa fai un elenco dei membri della tua famiglia.
                    Quindi pensa a un'attivit√† che deve essere eseguita e lascia che sia il computer a decidere chi deve eseguirla con il comando `{at} {random}`.

                    **Extra** Non hai voglia di lavare i piatti da solo? Hackera il programma rimuovendo il tuo nome dall'elenco con il comando `{remove}` `{from}`.
            4:
                story_text: |
                    Con le virgolette puoi migliorare ulteriormente il tuo programma di lavaggio.

                    ### Esercizio
                    Innanzitutto, inserisci i simboli o i comandi corretti negli spazi vuoti per far funzionare questo programma di esempio.
                    L'hai preso? Grande! Ora copia il tuo codice dal livello precedente e fallo funzionare in questo livello aggiungendo virgolette nei punti giusti.
            5:
                story_text: |
                    Con `{if}` ora puoi divertirti di pi√π con la scelta nel programma. Puoi fare in modo che il tuo programma risponda alla scelta fatta dal computer.
                    ### Esercizio
                    Puoi completare il codice in modo che venga stampato "peccato" quando tocca a te e altrimenti "s√¨!"?
                    Non dimenticare le virgolette!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    dishwasher {is} people {at} {random}
                    {if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ {else} {print} 'luckily no dishes because' _ 'is already washing up'
                    ```
    for_command:
        description: for command
        levels:
        default_save_name: per
    fortune:
        name: Indovino
        levels:
            1:
                story_text: |
                    Siete mai stati a un carnevale e vi siete fatti predire il futuro da un'indovino? O hai mai giocato con una palla otto magica?
                    Allora probabilmente saprai che non possono davvero predire il tuo futuro, ma √® comunque divertente giocarci!

                    Nei prossimi livelli potrai imparare a creare la tua macchina per predire il futuro!
                    Nel livello 1 puoi iniziare in modo semplice lasciando che Hedy si presenti come un'indovino e lasci che `{echo}` le risposte dei giocatori.
                    Come questo:
    haunted:
        name: Casa stregata
        default_save_name: Casa stregata
        description: Scappa dalla casa stregata
    language:
        name: Lingua
        default_save_name: Lingua
    parrot:
        name: Pappagallo
        default_save_name: Pappagallo
        description: Crea il tuo amico pappagallo che ripeter√† ci√≤ che dici!
        levels:
            1:
                story_text: |
                    Crea il tuo amico pappagallo che ripeter√† ci√≤ che dici!
                example_code: |
                    ```
                    {print} Sono Hedy il pappagallo
                    {ask} Come ti chiami?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Esercizio
                    Copia il codice di esempio nel tuo schermo di input clickando sul pulsante giallo.
                    Fai in modo che il pappagallo faccia un'altra domanda. Riempi gli spazi bianchi nell'esempio!
                    **Extra** Puoi anche fare in modo che il pappagallo faccia molte domande. Scrivi qualche riga in pi√π sotto al tuo codice.
                example_code_2: |
                    ```
                    {print} Sono Hedy il pappagallo
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Crea il tuo amico pappagallo che ripeter√† ci√≤ che dici!
                example_code: |
                    ```
                    {print} Sono Hedy il pappagallo
                    nome {is} {ask} come ti chiami?
                    {print} nome
                    {sleep}
                    {print} craaa!
                    {sleep}
                    {print} nome
                    ```
            3:
                story_text: |
                    Insegna al tuo pappagallo una nuova parola con `{add}`.
                example_code: |
                    ```
                    parole {is} craaa, Hedy
                    {print} Addestra il tuo pappagallo!
                    parola_nuova {is} {ask} Che parola vuoi insegnargli?
                    {add} parola_nuova {to_list} parole
                    {print} üßí Dii parola_nuova , Hedy!
                    {print} ü¶ú parole {at} {random}
                    ```
            5:
                story_text: |
                    Premia il tuo pappagallo se ({if}) dice la parola giusta.
                example_code: |
                    ```
                    le parole {is} stridono, Hedy
                    {print} 'Addestra il tuo pappagallo!'
                    nuovo_record {is} {ask} 'Quale parola vuoi insegnargli?'
                    {add} nuova_parola {to_list} parole
                    detta_parola {is} parole {at}{random}
                    {print} 'üßí D√¨ 'nuova_parola', Hedy!'
                    {print} '   ' ha detto_parola
                    _ detto_parola {is} nuova_parola _ 'üßí Ottimo lavoro, Hedy! üç™'
                    _ _ 'üßí No, Hedy! Pronuncia "nuova_parola".
                    ```
    print_command:
        levels:
            1:
                story_text: |
                    ## Il comando `{print}`
                    Puoi scrivere del testo sullo schermo usando il comando `{print}`.
                story_text_2: |
                    ### Esercizio
                    In Hedy troverai esercizi in ogni avventura. Un esercizio ti permettere di fare pratica con i nuovi comandi e concetti, e ti consente di dare il tuo tocco personalizzato al codice di esempio.
                    In questo esercizio vedrai uno spazio bianco rosa. Devi scrivere qualcosa al posto dello spazio rosa prima che il codice possa essere avviato.

                    Riempi il comando `{print}` nello spazio bianco e aggiungi cinque linee di codice aggiuntive. Ogni linea di codice deve iniziare con un comando `{print}`.
                    Buon divertimento!
        name: '{print}'
    quizmaster:
        description: Crea il tuo quiz!
    restaurant:
        default_save_name: Ristorante
        description: Crea il tuo ristorante virtuale
        levels:
            10:
                example_code: |
                    ```
                    {print} 'Benvenuti al Ristorante Chez Hedy!'
                    persone = {ask} 'Quante persone si uniranno a noi oggi?'
                    {print} 'Fantastico!'
                    prezzo = 0
                    {repeat} persone {times}
                    _ cibo = {ask} 'Cosa vorresti ordinare?'
                    _ {print} cibo
                    _ {if} cibo {is} patatine fritte
                    _ prezzo = prezzo + 3
                    _ salsa = {ask} 'Che tipo di salsa vorresti con le tue patatine?'
                    _ {if} salsa {is} no
                    _ {print} 'senza salsa'
                    _ {else}
                    _ prezzo = prezzo + 1
                    _ {print} 'con ' salsa
                    _ {if} cibo {is} pizza
                    _ prezzo = prezzo + 4
                    {print} 'Sar√† il ' prezzo ' in dollari'
                    {print} 'Buon appetito!'
                    ```
        name: Ristorante
    rock:
        name: Sasso, carta, forbice
        default_save_name: Rock
        levels:
            2:
                example_code: |-
                    ```
                    la scelta {is} rock
                    {print} Scelgo _
                    ```
    songs:
        name: Canta una canzone!
        levels:
            9:
                example_code: |
                    ```
                    verso = 99
                    _ 99 {times}
                    {print} versetto 'bottiglie di birra sul muro'
                    {print} versetto 'bottiglie di birra'
                    {print} 'Prendine uno e passalo in giro'
                    verso = verso - 1
                    {print} versetto 'bottiglie di birra sul muro'
                    ```
            11:
                example_code: |
                    ```
                    famiglia = bambino, mamma, pap√†, nonna, nonno
                    _ _ _ _
                      {print}_
                    ```
        default_save_name: Canzone
    turtle:
        default_save_name: Tartaruga
        levels:
            3:
                story_text: |
                    In questo livello puoi usare `{at} {random}` con la tartaruga che disegna. Una scelta casuale fa s√¨ che la tartaruga percorra ogni volta un percorso diverso.
                    Utilizza `{at} {random}` per scegliere un valore da un elenco.
                    ### Esercizio
                    Puoi copiare e incollare le righe 2 e 3 per creare un percorso casuale pi√π lungo?
        name: Tartaruga
    while_command:
        description: '{while}'
        levels:
            16:
                story_text: "Stiamo per imparare un nuovo loop, il `{while}` loop!Continuiamo il ciclo finch√© la condizione √® vera. \nQuindi, non dimenticare di modificare il valore nel loop.\n\nNel codice di esempio, continuiamo fino a quando non viene fornita una risposta corretta.\n Se la risposta corretta non viene mai fornita, il loop non termina mai!"
                example_code: |
                    ```
                    risposta = 0
                    {while} risposta != 25
                        risposta = {ask} 'Quanto fa 5 per 5?'
                    {print} 'La risposta √© corretta'
                    ```
    years:
        name: Anno nuovo
        default_save_name: Conto alla rovescia per il nuovo anno
        description: Conto alla rovescia per il nuovo anno!
    guess_my_number:
        default_save_name: indovina il mio numero
        name: Indovina il mio numero
        description: indovina il mio numero
    music:
        default_save_name: musica
        name: musica
    calculator_2:
        name: Calcolatrice 2
        default_save_name: Calcolatrice 2
        description: Calcolatrice 2
    songs_2:
        default_save_name: Canzone 2
        description: Canta una canzone 2
        name: Canta una canzone! 2
    secret:
        name: SuperSpia
        default_save_name: SuperSpia
    piggybank:
        name: Salvadanaio
        default_save_name: Salvadanaio
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
    functions:
        description: funzioni
        name: funzioni
        default_save_name: funzioni
    turtle_draw_it:
        levels:
            16:
                story_text_3: "Stella <img src=\"https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93\" width=\"150\">\n"
        name: Disegnalo!
        default_save_name: Disegnalo
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Avventure di Harry Potter
    rock_2:
        name: Sasso, carta, forbici 2
    in_command:
        name: '{in}'

