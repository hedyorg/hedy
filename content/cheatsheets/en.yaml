1:
-   name: '{print}'
    explanation: Print something with `{print}`.
    demo_code: '{print} Hello welcome to Hedy!'
-   name: '{ask}'
    explanation: Ask something with `{ask}`.
    demo_code: '{ask} What is your favorite color?'
-   name: '{echo}'
    explanation: Repeat something using `{echo}`.
    demo_code: |-
        {ask} What is your favorite color?
        {echo} so your favorite color is
-   name: '{print} emojis'
    explanation: Print an emoji with `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{play}'
    explanation: Play a musical note with `{play}`. Type play followed by the note you want to play. The scale goes C-D-E-F-G-A-B. As you can see there are 7 different letters, but we can play more than just 7 notes. Type a number between 0 and 9 behind the letter to choose the scale, for example after B4 comes C5. C0 is the lowest note you can play, B9 is the highest.
    demo_code: |-
        {play} C5
-   name: '{forward}'
    explanation: Draw a line with `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Turn the drawing turtle with `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: Use a variable with `{is}`.
    demo_code: |-
        name {is} Hedy
        {print} welcome name
-   name: '{ask}'
    explanation: Ask something with `{ask}`. Beware! You need to use a variable with `{is}`.
    demo_code: |-
        color {is} {ask} What is your favorite color?
        {print} color is your favorite!
-   name: '{sleep}'
    explanation: With `{sleep}`, you can let Hedy pause for a (couple of) second(s).
    demo_code: |-
        {print} Let me think for one second...
        {sleep}
        {print} Hmm.. I need 3 more seconds...
        {sleep} 3
        {print} Eureka! Ive got it!
-   name: '{turn} 90'
    explanation: Instead of just `{right}` and `{left}`, you can now make turn of all degrees possible.
    demo_code: |-
        {forward} 100
        {turn} 90
        {forward} 100
        {turn} -90
-   name: 'variables with turtle'
    explanation: Use a variable with in the turtle with `{is}`.
    demo_code: |-
        angle {is} 90
        {turn} angle
        {forward} 100
-   name: 'These keywords have stayed the same'
    explanation: '`{print}`, `{forward}`'
    demo_code: |-
        {print} hello world üåç
3:
-   name: Make a list with `{is}`
    explanation: Make a list with is.
    demo_code: |-
        colors {is}
-   name: Choose random
    explanation: Choose a random word from a group with `{at} {random}`.
    demo_code: |-
        animals {is} dog, cat, kangaroo
        {print} animals {at} {random}
-   name: '{at} {random} in a sentence'
    explanation: 'You can use `{at} {random}` in a sentence as well.'
    demo_code: |-
        food {is} sandwich, slice of pizza, salad, burrito
        {print} I am going to have a food {at} {random} for lunch.
-   name: '{add}'
    explanation: '`{add}` an item `{to_list}` a list.'
    demo_code: |-
        animals {is} cow, cat
        {add} dog {to_list} animals
-   name: '{remove}'
    explanation: '`{remove}` an item `{from}` a list.'
    demo_code: |-
        animals {is} cat, dog, cow
        {remove} dog {from} animals
-   name: '{clear}'
    explanation: 'Clear the screen with `{clear}`. Make sure to use `{sleep}`, or the computer will clear the screen before you can read the text before the {clear}.'
    demo_code: |-
        {print} 'hello'
        {sleep} 2
        {clear}
-   name: '`{color} red`'
    explanation: 'Use {color} make the turtle draw in a different color. The colors you can choose are red, orange, yellow, green, blue, purple, pink, brown, gray, black and white.'
    demo_code: |-
        {color} red
        {forward} 100
        {color} green
        {forward} 100
-   name: 'Keywords you have learned before this level'
    explanation: '`{print}`, `{ask}`, `{is}`, `{sleep}`, `{forward}`, `{turn}`, `{play}`. '
    demo_code: |-
        {print} hello world üåç
        {sleep} 2
        name {is} {ask} 'what is your name?'
        {print} hello name

4:
-   name: '{print}'
    explanation: Print using quotation marks.
    demo_code: '{print} ''Hello welcome to Hedy.'''
-   name: '{is}'
    explanation: Use a variable. Leave the variable outside of the quotation marks.
    demo_code: |-
        name {is} Hedy
        {print} 'my name is ' name
-   name: '{ask}'
    explanation: Ask something with `{ask}`.
    demo_code: |-
        color {is} {ask} 'What is your favorite color?'
        {print} 'I like ' color 'too!'
-   name: '{print} with double quotation marks'
    explanation: Sometimes you need to use an apostrophe in the text that you want to print. In that case you can use double quotation marks.
    demo_code: |-
        {print} "Hi! I'm Hedy!"
        mood {is} {ask} "What's up?"
-   name: 'Keywords you have learned before this level'
    explanation: '`{at} {random}`, `{add} {to_list}`, `{remove} {from}`, `{sleep}`, `{forward}`, `{turn}`, `{play}`. '
    demo_code: |-
        animals {is} duck, dog, rhino
        chosen_to_add {is} {ask} 'What animal would you like to add to the list?'
        {add} chosen_to_add {to} animals
        chosen_to_remove {is} {ask} 'What animal would you like to remove from the list?'
        {remove} chosen_to_remove {from} animals
        {sleep} 2
        {print} 'I pick...' animals {at} {random}
5:
-   name: '{if}'
    explanation: 'Make a choice with `{if}`.'
    demo_code: |-
        color {is} {ask} 'What is your favorite color?'
        {if} color {is} green {print} 'pretty!'
-   name: '{else}'
    explanation: Use `{else}` with `{if}`.
    demo_code: |-
        color {is} {ask} 'What is your favorite color?'
        {if} color {is} green {print} 'pretty!'
        {else} {print} 'meh'
-   name: '{if} with turtle'
    explanation: Make a choice with `{if}`.
    demo_code: |-
        answer {is} {ask} 'Should I walk far or not?'
        {if} answer {is} yes {forward} 100
        {else} {forward} 5
-   name: 'Keywords you have learned before this level'
    explanation: '`{print}`, `{is}`, `{ask}`, `{at} {random}`, `{add} {to_list}`, `{remove} {from}`, `{sleep}`, `{forward}`, `{turn}`, `{play}`. '
    demo_code: |-
        animals {is} duck, dog, rhino
        chosen_to_add {is} {ask} 'What animal would you like to add to the list?'
        {add} chosen_to_add {to} animals
        chosen_to_remove {is} {ask} 'What animal would you like to remove from the list?'
        {remove} chosen_to_remove {from} animals
        {sleep} 2
        {print} 'I pick...' animals {at} {random}
6:
-   name: '{elif}'
    explanation: 'Add a thrid option to `{if}` and `{else}` with `{elif}`.'
    demo_code: |-
        your_choice {is} {ask} 'Choose rock, paper, or scissors!'
        {print} 'The computer has chosen paper'
        {if} your_choice {is} rock {print} 'You lose!'
        {elif} your_choice {is} paper {print} "It's a draw!"
        {else} {print} 'You chose scissors. You win!'
-   name: '{in}'
    explanation: Check if elements are in a list.
    demo_code: |-
        pretty_colors {is} green, yellow
        color {is} {ask} 'What is your favorite color?'
        {if} color {in} pretty_colors {print} 'pretty!'
        {else} {print} 'meh'
-   name: '{not} {in}'
    explanation: Check if elements are not in a list.
    demo_code: |-
        pretty_colors {is} green, yellow
        color {is} {ask} 'What is your favorite color?'
        {if} color {not} {in} pretty_colors {add} color {to} pretty_colors
        {else} {print} 'It was already on the list!'
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''You pressed A!'' {else} {print} ''You pressed another key!'''
-   name: 'Keywords you have learned before this level'
    explanation: '`{if}`, `{else}`, `{print}`, `{is}`, `{ask}`, `{at} {random}`, `{add} {to_list}`, `{remove} {from}`, `{sleep}`, `{forward}`, `{turn}`, `{play}`. '
    demo_code: |-
        animals {is} duck, dog, rhino
        chosen_to_add {is} {ask} 'What animal would you like to add to the list?'
        {add} chosen_to_add {to} animals
        chosen_to_remove {is} {ask} 'What animal would you like to remove from the list?'
        {remove} chosen_to_remove {from} animals
        {sleep} 2
        {print} 'I pick...' animals {at} {random}
        happy {is} {ask} 'Are you happy with this choice?'
        {if} happy {is} yes {print} 'Great!'
        {else} {print} "I'll choose again! I pick..." animals {at} {random}
7:
-   name: 'Maths'
    explanation: 'You can use these mathematical symbols to calculate in Hedy'
    demo_code: |-
        {print} '5 plus 5 is ' 5 + 5
        {print} '5 minus 5 is ' 5 - 5
        {print} '5 times 5 is ' 5 * 5
        {print} '5 divided by 5 is ' 5 / 5
-   name: '='
    explanation: 'Instead of {is} you can use the = symbol, when setting a variable or making a list. Note: We do not use the =-symbol in if-statements.'
    demo_code: |-
        {anwer} = {ask} 'What is 5 times 5?'
        correct_answer = 5*5
        {if} answer {is} correct_answer {print} 'Great job!'
        {else} {print} 'Try again!'
-   name: 'Maths with variables'
    explanation: 'Variables can also be used in calculations'
    demo_code: |-
        people {is} {ask} 'How many tickets would you like?'
        price = people * 3
        {print} 'That will be $' price ', please.'
-   name: 'Decimal numbers'
    explanation: 'Use a point in your decimal numbers'
    demo_code: |-
        {print} 2.5 + 2.5
-   name: '{play} with numbers'
    explanation: 'Instead of musical notes, you can also play tunes using numbers. Choose a number between 1 and 70.'
    demo_code: |-
        {play} 45
-   name: 'Keywords you have learned before this level'
    explanation: '`{if}`, `{elif}`, `{else}`, `{in}`, `{not} {in}`, `{print}`, `{is}`, `{ask}`, `{at} {random}`, `{add} {to_list}`, `{remove} {from}`, `{sleep}`, `{pressed}`, `{forward}`, `{turn}`, `{play}`. '
    demo_code: |-
        primary_colors = red, yellow, blue
        secondary_colors = orange, green, purple
        chosen_color = {ask} 'What color is your favorite?'
        {if} chosen_color {in} primary_colors {print} 'That is a primary color!'
        {elif} chosen_color {in} secondary_colors {print} 'That is a secondary color!'
        {else} {print} 'Interesting choice!'
8:
-   name: '{repeat} 3 {times}'
    explanation: 'Repeat a line of code multiple times'
    demo_code: |-
        {repeat} 5 {times} {print} 'Hello!'
-   name: '{repeat} with a variable'
    explanation: 'You can use a variable with a {repeat}.'
    demo_code: |-
        people {is} {ask} 'How many people are here today?'
        {repeat} people {times} 'Goodmorning!'
-   name: 'Keywords you have learned before this level'
    explanation: '`{if}`, `{elif}`, `{else}`, `{in}`, `{not} {in}`, `{print}`, `{is}`, `{ask}`, `{at} {random}`, `{add} {to_list}`, `{remove} {from}`, `{sleep}`, `{pressed}`, `{forward}`, `{turn}`, `{play}`. '
    demo_code: |-
        primary_colors = red, yellow, blue
        secondary_colors = orange, green, purple
        chosen_color = {ask} 'What color is your favorite?'
        {if} chosen_color {in} primary_colors {print} 'That is a primary color!'
        {elif} chosen_color {in} secondary_colors {print} 'That is a secondary color!'
        {else} {print} 'Interesting choice!'
20:
-   name: '{print}'
    explanation: Print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 times 5 is '' 5 * 5'
-   name: '{ask}'
    explanation: Ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        {else}
            {print} 'Oops!'
            {print} 'The answer is 10'
-   name: '{repeat} with turtle'
    explanation: Repeat multiple lines.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'You pressed A!'
        {else}
            {print} 'You pressed another key!'
9:
-   name: '{if} with multiple lines'
    explanation: The answer of a sum of questions with `{ask}` and see if it is correct. Now we print out two lines.
    demo_code: |-
        answer = {ask} 'What is 10 plus 10?'
        {if} answer {is} 20
            {print} 'Well done!!'
            {print} 'The answer is indeed' answer
        {else}
            {print} 'Wrong'
            {print} 'The answer is 20'
-   name: '{repeat} with turtle'
    explanation: Repeat multiple lines.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Print something. Remember to use a quotation mark for literal printing.
    demo_code: '{print} ''5 times 5 is '' 5 * 5'
-   name: '{for} with a list'
    explanation: Print all things in a list.
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: '{for} loop'
    explanation: We can use `{for}` with a `{range}`.
    demo_code: |-
        {for} counter {in} {range} 1 {to} 5
            {print} counter
-   name: '{ask}'
    explanation: Ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: |-
        answer = {ask} 'What is 5 plus 5?'
        {if} answer {is} 10
            {print} 'Well done!'
            {print} 'Indeed, the answer was ' answer
        {else}
            {print} 'Oops!'
            {print} 'The answer is 10'
12:
-   name: float directly
    explanation: Decimal numbers.
    demo_code: |-
        {print} 'Calculate away!'
        {print} 'Two and a half plus two and a half is...'
        {print} 2.5 + 2.5
-   name: assign text
    explanation: Text with quotation marks after `=`
    demo_code: |-
        name = 'Hedy the Robot'
        {print} 'Hello ' name
-   name: quotes after `{if}` comparison
    explanation: Text with quotation marks after `{if}`.
    demo_code: |-
        name = {ask} 'Who are you?'
        {if} name = 'Hedy'
            {print} 'Hi there!'
-   name: quotes in list
    explanation: A list with quotation marks.
    demo_code: |-
        superheroes = 'Iron Man', 'Batman', 'Superman'
        {print} superheroes {at} {random}
13:
-   name: '{and}'
    explanation: Two parts both need to be correct.
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {and} answer2 {is} 4
            {print} 'Both answers are correct!'
        {else}
            {print} 'At least one answer is wrong!'
-   name: '{or}'
    explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {or} answer2 {is} 4
            {print} 'At least one answer is correct!'
        {else}
            {print} 'Both answers are wrong!'
14:
-   name: Smaller
    explanation: We use the `<` to check if the first number is smaller than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age < 13
            {print} 'You are younger than me!'
-   name: Bigger
    explanation: We use the `>` to check if the first number is bigger than the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age > 13
            {print} 'You are older than me!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That is correct!'
-   name: Not equal
    explanation: We use the `!=` to check if two things are not the same.
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'
-   name: Smaller or equal
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: '{while}'
    explanation: We can use the `{while}` loop with not equal.
    demo_code: |-
        answer = 0
        {while} answer != 25
            answer = {ask} 'What is 5 times 5?'
        {print} 'A correct answer has been given'
-   name: Smaller {while}
    explanation: We can also use the `{while}` loop with `<` and `>`.
    demo_code: |-
        count = 1
        {while} count < 3
            {print} 'We do this ' 3 - count ' more times'
            count = count + 1
        {print} 'We are done'
16:
-   name: square brackets
    explanation: Lists with square brackets.
    demo_code: |-
        fruit = ['apple', 'banana', 'cherry']
        {print} fruit
-   name: Get an item from a list
    explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        firstfruit = fruit[1]
        {print} firstfruit
-   name: Get a random item from a list
    explanation: To get a random item from a list we use [{random}] so fruit[{random}] means, get a random fruit from the list!
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        random_fruit = fruit[{random}]
        {print} random_fruit
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a is 1'
        {elif} a == 2:
            {print} 'a is 2'
        {else}:
            {print} 'a is not 1 or 2'
-   name: '{print}'
    explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Ready or not, here I come!'
-   name: '{if}'
    explanation: We need to do the same with all of our `{if}` statements.
    demo_code: |-
        color = {ask} 'What is your favorite color?'
        {if} color == 'green':
            {print} 'Your favorite color is green'
        {else}:
            {print} 'Your favorite color is not green'
18:
-   name: '{print}'
    explanation: After `{print}` you need to use parentheses.
    demo_code: '{print}(''hi!'')'
-   name: '{range}'
    explanation: After `{range}` you need to use parentheses.
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Hello, times ', i)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you print more items.
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something.
    demo_code: |-
        name = {input}('What is your name?')
        {print}('So your name is ', name)
