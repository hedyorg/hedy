title: Dokumentation för Hedy
home-sections:
-   title: Textprogrammering på ett enkelt sätt!
    text: |-
        Många skolor och lärare runt om i världen vill lära sina elever programmering. Till en början görs detta ofta med lekfulla verktyg, allt från roboten Beebot till
        Scratch Junior eller Scratch. Efter att ha använt sådana verktyg vill ungdomarna ofta gå vidare till mer kraftfulla, textbaserade programspråk som Python.

        Men Python svårt, eftersom det bara finns på engelska och kräver att eleverna lär sig komplexa programmeringsbegrepp och syntax på en gång.
        Hedy är det enkla sättet att komma igång med textbaserade programspråk! Hedy är gratis att använda, har öppen källkod och skiljer sig från alla andra textbaserade programspråk på tre sätt.

        1. Hedy är flerspråkigt, så du kan använda Hedy på ditt eget språk
        2. Hedy fungerar stegvis, så att du kan lära dig ett begrepp och dess syntax åt gången
        3. Hedy är gjort för klassrummet, så att lärare kan anpassa sina elevers upplevelse fullt ut
-   title: Flerspråkig programmering
    text: Nästan alla textbaserade programspråk har nyckelord på engelska, som `for` eller `repeat`, men Hedy kan användas på alla språk! Vi stöder för närvarande 39 olika språk, inklusive spanska, arabiska, förenklad kinesiska och hindi. Om ditt språk inte finns, kan du alltid starta en ny översättning.
-   title: Steg för steg-inlärning
    text: Att lära sig ett programmeringsspråk kan vara överväldigande, eftersom man måste lära sig begrepp (t.ex. if-else eller loopar) och syntax (t.ex. citattecken eller runda parenteser) samtidigt. I Hedy introduceras begreppen först med lite syntax och förfinas sedan. Ett vetenskapligt bevisat sätt att lära sig!
-   title: Gjort för klassrummet
    text: |-
        Hedy passar barn från 10 år och uppåt och är utformat för användning i klassrummet.
        Lärare kan använda våra kostnadsfria, inbyggda lektionsplaner, men kan också skapa egna lektioner och ladda upp dem i Hedys användargränssnitt.
-   title: Programmering i sitt sammanhang
    text: Hedy visar programmering på bredast möjliga sätt och kan användas på en mängd spännande sätt. Hedy gör det möjligt att skapa digitala och interaktiva berättelser, färgglada teckningar som kan visas på skärmen men också ritas med en plotterpenna eller broderas på en tröja, och som kan användas för att skapa spel eller appar med knappar och tangentbordsstyrning.
-   title: Är Hedy gratis?
    text: |-
        Ja! Hedy är 'öppen källkod', vilket betyder att alla kan hjälpa oss att förbättra Hedy.
        Du kan hitta vår kod på <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Om du gillar Hedy och vill bidra, tar vi emot (och är mycket tacksamma för) <a href="https://github.com/sponsors/hedyorg" target="_blank">donationer</a>!
-   title: Behöver jag installera något?
    text: Nej. Hedy fungerar i webbläsaren, alltså det program du använder för att titta på den här sidan. Förmodligen Chrome eller Edge eller Firefox. Hedy fungerar även på telefoner och surfplattor.
-   title: Behöver jag programmeringserfarenhet för att undervisa med Hedy?
    text: |-
        Nej, det behövs inte. Alla begrepp förklaras i bilderna och i gränssnittet för elever.
        Om du skapar ett kostnadsfritt lärarkonto får du även tillgång till lärarhandledningen med information om hur du undervisar
        och vanliga misstag.
join-sections:
-   title: Att stödja Hedy
    text: "# Det finns tre sätt att stödja Hedy!"
-   title: Förbättra språket
    text: |-
        Hedys stegvisa och flerspråkiga karaktär skapar många intressanta tekniska utmaningar.
        Du hittar dessa frågor på <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>.
-   title: Översätta Hedy
    text: |-
        Är du ingen programmerare? Inga problem! Ett annat sätt att stödja Hedy är att <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">översätta nyckelord, felmeddelanden, äventyr och annat innehåll</a>.
        Detta är den nuvarande statusen; hjälp oss att göra klart ett språk eller lägga till ett nytt!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Hjälpa lärare att komma igång
    text: |-
        Hedy är utformat för att hjälpa lärare att ge programmeringslektioner i klassrummet. Vi har särskilda lärarfunktioner som möjligheten att skapa en klass, anpassa den och följa dina elever.
        Om du gillar Hedy kan du nå ut till skolor som du känner för att hjälpa lärare att komma igång! Vi kan hjälpa dig att hitta skolor eller lärare via <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a>.
learn-more-sections:
-   {}
-   title: En djupdykning!
    text: |-
        Vill du veta mer om Hedys filosofi och design? Kolla in det här föredraget som Felienne höll på StrangeLoop-konferensen 2022:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Hedy i nyheterna
    text: |-
        En del webbplatser och tidningar har skrivit om Hedy sedan vi släpptes i början av 2020. Vi har en lista här:
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://podcasts.apple.com/nl/podcast/techoptimisme-2-een-oplossing-voor-het-it-tekort/id1114136654?i=1000581523458)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.universiteitleiden.nl/en/news/2021/01/felienne-hermans-receives-dutch-prize-for-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
teacher-guide:
-   title: Inledning
    key: intro
    subsections:
    -   title: Vad är Hedy?
        text: |-
            Hedy är ett textbaserat programspråk för målgruppen (för-)tonåringar i åldrarna 10 till 15 år.
            Till skillnad från programspråk för barn, som Scratch, använder Hedy inte kodblock utan textbaserad kod.
            Så med Hedy får du lära dig att skriva kod som riktiga programmerare gör, men i små steg med lekfulla övningar.
            På så sätt kan Hedy fungera som en språngbräda till riktiga programspråk som Python på ett tillgängligt och mestadels roligt sätt!
            Om du vill veta mer kan du titta på denna <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video</a> om utvecklingen av Hedy som ett programspråk.
    -   title: Målgrupp
        text: |-
            Hedy är utvecklat med tanke på elever i mellanstadiet och högstadiet, alltå åldrarna 10–15 år.
            Det är viktigt att eleverna kan läsa bra. Vi rekommenderar att man inte börjar med Hedy förrän eleverna har uppnått läsnivå motsvarande årkurs 3.
            Elever (och lärare!) behöver inte ha någon erfarenhet av programmering innan de börjar med Hedy.
    -   title: Hur fungerar Hedy?
        text: |-
            Hedy är indelad i nivåer, där nya kommandon lärs ut. Varje nivå innehåller en mängd olika äventyr där man kan öva på de nya kommandona.
            Som lärare får du bestämma vilka äventyr som är tillgängliga för dina elever. Kommer de att skapa en restaurang, en kalkylator eller ett spökhus på den här nivån? Inom varje nivå är äventyren ordnade från lättast till svårast.
            Så dina elever får hela tiden nya utmaningar. Äventyren kan göras av eleverna individuellt, eller så kan du använda dem i traditionell undervisning.

            Äventyren innehåller också ett kodexempel, så att även lärare med mindre digital kompetens kan använda Hedy!
            Naturligtvis vänder sig Hedy också till de kreativa lärare som älskar att göra sina egna lektionsplaner och äventyr!

            När du har programmerat alla äventyr på en viss nivå kan dina elever testa sina kunskaper i frågesporten.
            Du kan följa dina elevers arbete och deras framsteg på klassidan.
    -   title: Enheter
        text: |-
            Hedy är webbaserat, vilket betyder att det fungerar på alla enheter med en webbläsare (Google Chrome, Firefox, Edge etc), så bärbara datorer, Chromebooks, surfplattor och till och med mobiler är lämpliga för att använda Hedy.
            Du behöver inte ladda ner något innan du börjar arbeta med Hedy, det är bara att gå till sajten så är du redo!
    -   title: Hedy-gemenskapen
        text: |-
            Alla Hedy-lärare, -programmerare och andra fans är välkomna till vår Discord-server <a href="https://discord.gg/8yY7dEme9r" target="_blank"></a> . Det är det perfekta stället att prata om Hedy: vi har kanaler där du kan visa dina coola projekt och lektioner, kanaler för att rapportera fel och kanaler för att prata med andra lärare och med Hedy-teamet.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Här</a> hittar du en video om hur du går med i Discord-gemenskapen.
    -   title: Hedy and the GDPR
        text: |-
            Organizations in the EU have to comply with the GDPR (General Data Protection Regulation) when processing personal data.
            Because this is a complex issue for many schools, you can use all Hedy programming functionalities without sharing personal data.
            The easiest way to do this is to use Hedy without creating accounts for the teacher and students. Without accounts, all functionality is available, with the exception of personalizing levels, saving students' programs and viewing their progress. That is limiting, but there are schools that use Hedy in that way.

            A second way is for a teacher to create an account with an email address without personal data, for example "docent25@email.com". Apart from an email address, which is only required to reset your password, you do not need to share any information when you create a teacher account.
            With a teacher account, you can create anonymous accounts for students, e.g. rainbow-student1, rainbow-student2, etc (See 'Teaching preparations' for a detailed manual). This way you can use all functionality of Hedy, including saving progress, without sharing personal data of yourself or your students.

            If the above is not sufficient for your context, we can sign a processing agreement for the processing of your personal data.
-   title: Vanliga misstag
    key: vanliga_misstag
    intro: |-
        Du kan lära dig av dina misstag, särskilt inom kodning!
        Att göra misstag är oundvikligt och en fantastisk möjlighet att lära sig, men för lärare kan det vara en utmaning att hitta rätt lösning på ett misstag!
        Särskilt när koden blir längre och längre i takt med att nivåerna utvecklas. Därför har vi gjort en lista med vanliga misstag på varje nivå och deras lösningar.
    levels:
    -   level: "1"
        sections:
        -   title: Eleverna glömmer att skriva kommandon
            example:
                error_text: De skriver t.ex. en mening utan att använda print.
                error_code: Hedy kan inte skriva ut detta
                solution_text: Lär eleverna att alltid börja en kodrad med ett kommando.
                solution_code: "{print} Hedy kan skriva detta!"
        -   title: Eleverna använder versaler när de skriver kommandon
            example:
                error_text: Kommandon fungerar inte om de är skrivna med versaler.
                error_code: |-
                    Fråga varför är min kod fel?
                    Print för jag använder stora bokstäver.
                solution_text: Ta bort versalerna.
                solution_code: |-
                    {ask} Varför fungerar min kod nu?
                    {print} Eftersom jag tog bort versalerna!
        -   title: Eleverna använder eko utan fråga
            example:
                error_text: Echo görs för att upprepa ett svar efter ett fråga-kommando. Utan fråga kommer echo inte att göra någonting.
                error_code: "{echo} Du heter"
                solution_text: Lägg till ett ask-kommando för att få det att fungera.
                solution_code: |-
                    {ask} Vad heter du?
                    svara Du heter
        -   title: Eleverna vill att deras eko-ord (variabel) ska vara inuti en mening
            example:
                error_text: Och de har rätt! Det är därför de kommer att lära sig att använda riktiga variabler på nästa nivå.
                error_code: |-
                    {ask} Vilket programmeringsspråk är roligast?
                    {echo} är bäst!
                solution_text: "På nivå 1 får vi hålla oss till detta:"
                solution_code: |-
                    {ask} Vilket programmeringsspråk är roligast?
                    {echo} Det bästa är …
        -   title: "Sköldpadda: Eleverna låter sköldpaddan gå utanför skärmen"
            example:
                error_text: Ofta vill eleverna testa stora tal när de använder sköldpaddan, vilket gör att pilen hamnar utanför skärmen.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: I exemplet kan eleverna att tro att kommandot för att svänga inte fungerar. Även om det fungerar kan du inte se det hända utanför skärmen. Använd mindre tal för att förhindra att detta händer.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Sköldpadda: Eleverna använder kommandot bakåt, men det finns inte"
            example:
                error_text: Bakåt är inte ett kommando.
                error_code: bakåt 100
                solution_text: För att få sköldpaddan att gå baklänges används kommandot framåt och ett negativt tal. Till exempel
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Eleverna har stavfel i sina kommandon
            example:
                error_text: Hedy kan inte känna igen ett felstavat kommando.
                error_code: skrivv Gör inga stavfel
                solution_text: Lär eleverna att läsa felmeddelandena. På så sätt kan de själva ta reda på vad som gick fel.
                solution_code: "{print} Gör inga stavfel"
        -   title: Studenter glömmer att kommandot fråga har ändrats
            example:
                error_text: På den här nivån lär sig eleverna om variabler. Kommandot fråga behöver en variabel, men eleverna glömmer detta.
                error_code: fråga vad vill du äta
                solution_text: På den här nivån måste du berätta för Hedy var du vill spara ditt svar, så att det kan användas senare. Detta kallas en variabel.
                solution_code: beställning {is} {ask} Vad vill du äta
        -   title: Eleverna försöker använda kommandot eko
            example:
                error_text: För vissa studenter kan det vara frustrerande att lära sig att kommandot eko inte fungerar längre. Det är därför det är så viktigt att förklara fördelarna med att använda variabler. Du kan till exempel använda flera olika variabler i koden och du kan placera dem var du vill i en mening!
                error_code: |-
                    svaret {is} {ask} Varför fungerar inte eko längre
                    echo
                solution_text: Använd en variabel istället.
                solution_code: |-
                    svar {is} {ask} Varför fungerar inte eko längre
                    {print} svar
        -   title: Eleverna använder ett variabelnamn som ett vanligt ord
            example:
                error_text: I exemplet nedan används ordet "namn" som variabel men också som vanlig text. Resultatet av koden blir "Hej mitt Hedy är Hedy".
                error_code: |-
                    namn {is} Hedy
                    {print} Hej mitt namn är namn
                solution_text: Använd alltså inte ett ord som du vill använda i texten som variabelnamn. På nivå 4 löses detta med citattecken.
                solution_code: |-
                    namn {is} Hedy
                    {print} Hej jag heter namn
        -   title: Studenter använder långa variabelnamn som innehåller två ord.
            example:
                error_text: En variabelnamn ska vara ett ord. Du kan använda ett understreck för att koppla ihop två ord. Det räknas som ett ord.
                error_code: vald dörr är fråga Vilken dörr väljer du
                solution_text: Lägg till ett understreck.
                solution_code: vald_dörr {is} {ask} vilken dörr väljer du
        -   title: Eleverna kan råka använda två olika namn för samma variabel
            example:
                error_text: I det här exemplet har eleven använt 'häst' och 'namn' för samma variabler.
                error_code: |-
                    häst {is} {ask} vad heter din häst
                    {print} Din häst heter namn
                solution_text: Kolla alltid om variabeln genomgående har samma namn. Små skillnader kan vara svåra att upptäcka (till exempel pluralformer) men de kommer att påverka vad koden gör.
                solution_code: |-
                    namn {is} {ask} Vad heter din häst
                    {print} Din häst heter namn
    -   level: "3"
        sections:
        -   title: Eleverna försöker skriva ut hela listor
            example:
                error_text: En hel lista kan inte skrivas ut. Du kan bara skriva ut ett element i taget från listan med {at} {random}.
                error_code: |-
                    matvaror {is} äpplen, mjölk, choklad
                    {print} matvaror
                solution_text: För att skriva ut en lista med alla matvaror behöver du bara sätta dem efter ett `{print}`-kommando. Annars kan du använda listan för att skriva ut ett element med `{at}` `{random}`.
                solution_code: |-
                    {print} äpplen, mjölk, choklad

                    eller

                    matvaror {är} äpplen, mjölk, choklad
                    {print} matvaror {at} {random}
        -   title: Eleverna använder namnet på en variabel eller lista som vanlig text
            example:
                error_text: Det här problemet hände förmodligen redan nivå 2. Nu kan det hända med listor också.
                error_code: |-
                    namn {är} Hedy
                    {print} Hej mitt namn är namn

                    eller

                    djur {är} noshörning, bi, svan
                    {print} Mitt bästa djur är … djur {at} {random}
                solution_text: Använd inte namnen på variabler eller listor i vanlig text för att skriva ut. På nivå 4 löses detta problem med citattecken.
                solution_code: |-
                    namn {är} Hedy
                    {print} Mitt namn är namn

                    eller

                    djur {är} noshörning, bi, svan
                    {print} Mitt bästa djur är … djur {at} {random}
        -   title: Elever glömmer `{at}` i `{at}` `{random}`
            example:
                error_text: Som i exemplet
                error_code: |-
                    fåglar {is} sparv, mås, rödhake
                    {print} fåglar slump
                solution_text: Lös problemet genom att lägga till ordet på.
                solution_code: |-
                    fåglar {är} sparv, mås, rödhake
                    {print} fåglar {at} {random}
        -   title: Eleverna glömmer använda kommandot `{print}` när de också använder kommandot `{at}` `{random}`
            example:
                error_text: Eller så sätter de ibland `{at}` `{random}` i början av raden.
                error_code: |-
                    frukt {is} äpple, körsbär, banan
                    frukt {at} {random}
                solution_text: Betona för dina elever att du alltid behöver ett skriv-kommando för att skriva ut text.
                solution_code: |-
                    frukt {is} äpple, körsbär, banan
                    {print} frukt {at} {random}
        -   title: Eleverna glömmer att använda kommatecken i listor
            example:
                error_text: I en lista ska elementen skiljas åt med kommatecken.
                error_code: |-
                    pizzor {is} funghi tonno quattro stagioni
                    {print} pizzor {at} {random}
                solution_text: Efter varje element i listan ska det vara ett kommatecken
                solution_code: |-
                    pizzor {is} funghi, tonno, quattro stagioni
                    {print} pizzor på slump
        -   title: Eleverna försöker använda `{at}` `{random}` utan en lista
            example:
                error_text: Till exempel
                error_code: |-
                    klubbar {is} Manchester United
                    {print} klubbar {at} {random}
                solution_text: Hedy kan inte skriva ut något slumpmässigt, eftersom det inte finns någon lista att välja ur.
                solution_code: |-
                    klubbar {is} Manchester United, Bayern München, FC Barcelona
                    {print} klubbar {at} {random}
        -   title: Eleverna försöker använda lägg till/ta bort utan någon lista
            example:
                error_text: I exemplet nedan är 'namn' inte en lista, utan en variabel. Du kan inte lägga till något till den.
                error_code: |-
                    namn {is} Jake
                    ditt_namn {is} {ask} Vem är du?
                    {add} ditt_namn {to} namn
                    {print} namn {at} {random}
                solution_text: Det måste först finnas en lista, så du måste lägga till ett andra namn för att förvandla namn till en lista, till exempel Amy. Om du inte vill ha Amy på din lista, kan du använda kommandot ta bort.
                solution_code: |-
                    namn {is} Jake, Amy
                    ditt_namn {is} {ask} Vem är du?
                    {add} ditt_namn {to} namn
                    {print} namn {at} {random}
        -   title: Elever glömmer att använda till/bort i lägg till/ta bort
            example:
                error_text: Utan till/bort kommer kommandona lägg till/ta bort inte att fungera.
                error_code: |-
                    äventyr {is} berättelse, papegoja, tärningar
                    val {is} Vilket äventyr gillar du bäst?
                    {add} val
                    {remove} tärningar
                    {print} Jag älskar äventyr {at} {random}
                solution_text: Hedy måste veta vilken lista objektet ska läggas till i/tas bort från.
                solution_code: |-
                    äventyr {is} berättelse, papegoja, tärningar
                    val {is} Vilket äventyr gillar du bäst?
                    {add} val {to} äventyr
                    {remove} tärningar {from} äventyr
                    {print} Jag älskar äventyr på slump
    -   level: "4"
        sections:
        -   title: Eleverna glömmer att det behövs citattecken på båda sidor om texten
            example:
                error_text: På den här nivån behöver skriv och fråga ett par citattecken. Ett före och ett efter texten.
                error_code: |-
                    {print} Hej
                    humör {is} {ask} 'Hur är det?
                solution_text: Lägg till rätt citattecken.
                solution_code: |-
                    {print} 'Hej'
                    humör {is} {ask} 'Hur är det?'
        -   title: Eleverna använder fel citattecken
            example:
                error_text: Det är viktigt att börja lektionen med att kolla om eleverna vet hur man skriver ett citattecken på rätt sätt. Annars kanske de använder "dubbla citattecken" eller den sneda apostrofen `.
                error_code: |-
                    {print} `Välkommen till restaurangen`
                    mat {is} {ask} "Vad vill du beställa?"
                solution_text: "Detta är rätt citattecken:"
                solution_code: |-
                    {print} 'Välkommen till restaurangen'
                    mat {is} {ask} 'Vad vill du beställa?'
        -   title: Eleverna använder en apostrof i sin text
            example:
                error_text: Från den här nivån är apostrofer inte tillåtna. De används ofta på engelska när du skriver sammandragningar som you’re, don’t eller what’s.
                error_code: "{print} 'Skriv inte rock'n roll'"
                solution_text: Du kan välja att använda fel grammatik och bara utelämna apostrof. Eller så kan du använda ` som apostrof.
                solution_code: |-
                    {print} 'Du kan skriva rock-n-roll'
                    {print} 'Och du kan skriva rock`n roll'
    -   level: "5"
        sections:
        -   title: Eleverna glömmer att använda `{print}` i ett `{if}`-kommando
            example:
                error_text: När eleverna har använt `{if}` eller `{else}` glömmer de att ha ett andra kommando som `{print}` eller `{ ask}`.
                error_code: |-
                    {if} namn {is} Hedy 'Bra!'
                    {else}  Hedy {is} bättre!
                solution_text: Lägg till kommandot skriv för att fixa det.
                solution_code: |-
                    {if} namn {is} Hedy {print} 'Bra!'
                    {else} {print} 'Hedy är bättre!'
        -   title: Elever råkar använda två olika namn för samma variabel
            example:
                error_text: I det här exemplet har eleven använt 'häst' och 'namn' för samma variabler.
                error_code: |-
                    häst {is} {ask} 'Vad heter din häst?'
                    {if} namn {is} Bonfire {print} 'coolt'
                    {else} {print} 'mindre coolt!'
                solution_text: Kolla alltid om variabeln har samma namn genomgående. Små skillnader kan vara svåra att upptäcka (till exempel pluralformer) men de kommer att ändra kodens innebörd.
                solution_code: |-
                    häst {is} {ask} 'Vad heter din häst?'
                    {if} häst {is} Bonfire {print} 'coolt!'
                    {else} {print} 'mindre coolt!'
        -   title: Eleverna glömmer fortfarande citattecken före och efter text
            example:
                error_text: Kod som använder kommandot `om` kan bli väldigt lång och eleverna tenderar att glömma att använda citattecken.
                error_code: |-
                    {if} namn {is} Hedy {print} 'kul'
                    {else} {print} 'meh!
                solution_text: Använd alltid två citattecken i kommandot skriv.
                solution_code: |-
                    {if} namn {is} Hedy {print} 'kul'
                    {else} {print} 'meh!'
        -   title: Eleverna använder citattecken runt variabelnamn
            example:
                error_text: På den här nivån är det inga citattecken kring variabelnamn.
                error_code: |-
                    {if}  namn  {is} 'Hedy' {print} 'kul'
                    {else} {print} 'meh!'
                solution_text: Ta bort citattecknen för att få koden att fungera.
                solution_code: |-
                    {if} namn {is} Hedy {print} 'kul'
                    {else} {print} 'meh!'
        -   title: Studenter använder långa variabelnamn med två ord
            example:
                error_text: En variabel ska heta ett ord. Du kan använda ett understreck för att koppla ihop två ord. Det räknas som ett ord.
                error_code: vald dörr är fråga  Vilken dörr väljer du?
                solution_text: Lägg till ett understreck.
                solution_code: vald_dörr {is} {ask} 'vilken dörr väljer du?'
        -   title: Eleverna vill att flera svar ska vara rätt
            example:
                error_text: Till exempel vill den här eleven att Hedy ska säga att alla hens vänner är roliga och att de andra klasskamrater inte är det.
                error_code: "{if} namn {is} Jesse, David, Souf skriv  Du är rolig  {else} {print} 'Du är inte rolig'"
                solution_text: |-
                    Du kan använda kommandot `i` för att lösa det. Det förklaras på en högre nivå, men det fungerar redan på nivå 5.
                    En annan lösning är att använda flera om-kommandon och inget annars-kommando. Nackdelen är att det inte kommer att säga till de andra klasskamraterna att de inte är roliga.
                solution_code: |-
                    vänner {is} Jesse, David, Souf
                    namn {is} {ask} 'Vem är du?'
                    {if} namn {in} vänner {print} 'Du är rolig'
                    {else} {print} 'Du är inte rolig'

                    eller

                    namn {is} {ask} 'Vem är du?'
                    {if} namn {is} Jesse {print} 'Du är rolig'
                    {if} namn {is} David {print} 'Du är rolig'
                    {if} namn {is} Souf {print} 'Du är rolig'
        -   title: Eleverna gör variabelnamnet till samma som värdet i `{if}`-satsen
            example:
                error_text: I exemplet nedan är lösenordet 'lösenord'. Detta kommer att resultera i att det alltid är korrekt.
                error_code: |-
                    lösenord {is} {ask} 'Vad är lösenordet?'
                    {if} lösenord {is} lösenord {print} 'Åtkomst beviljad'
                    {else} {print} 'Ingen åtkomst'
                solution_text: Välj ett annat variabelnamn.
                solution_code: |-
                    hemligt_lösenord {is} {ask} 'Vad är lösenordet'
                    {if} hemligt_lösenord {is} lösenord {print} 'Åtkomst beviljad!'
                    {else} {print} 'Ingen åtkomst'
    -   level: "6"
        sections:
        -   title: Eleverna kämpar med citattecken
            example:
                error_text: Vissa elever kämpar med att lägga till citattecken eller inte. Om du lägger till citattecken blir utskriften bokstavligen '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: I den här koden kommer utdataskärmen att skriva ut '10'.
                solution_code: "{print} 5 + 5"
        -   title: Eleverna kämpar med begreppet att göra uträkningar med en variabel
            example:
                error_text: "Vissa elever kommer att tycka att det är svårt att göra uträkningar med variabler. Försök att visa dem mycket enkla exempel, t.ex:"
                error_code: |-
                    ålder = {ask} 'Hur gammal är du?'
                    {print} 'Nästa år fyller du ' ålder + 1
                solution_text: Eller ta det ett steg längre och gör så här.
                solution_code: |-
                    pris = 0
                    {print} 'Välkommen till vår hamburgerrestaurang'
                    hamburgare = {ask} 'Vill du ha en hamburgare?'
                    {if} hamburgare = ja pris = pris + 10
                    dryck = {ask} 'Vill du ha något att dricka?'
                    {if} dryck = ja pris = pris + 4
                    {print} 'Det blir ' pris ' euro tack'
    -   level: "7"
        sections:
        -   title: Eleverna glömmer något av orden i repetera-kommandot, eller så glömmer de skriv-kommandot
            example:
                error_text: Se till att eleverna vet att de ska använda både det fullständiga repetera-kommandot och utskriftskommandot.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 skriv
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Eleverna försöker upprepa flera rader
            example:
                error_text: På den här nivån kan du bara upprepa en kodrad åt gången. I den här koden ville eleven skriva ut tre olika drycker, men det fungerar inte. Den kommer att ställa frågan tre gånger och bara skriva ut det sista svaret.
                error_code: |-
                    {repeat} 3 {times} dryck = {ask} 'Vad skulle du vilja dricka?'
                    {print} dryck
                solution_text: Du bör gå till nästa nivå för att kunna upprepa flera rader. Så på den här nivån måste du skriva ut allt separat.
                solution_code: |-
                    dryck = {ask} 'Vad skulle du vilja dricka?'
                    {print} dryck
                    dryck = {ask} 'Vad skulle du vilja dricka?'
                    {print} dryck
                    dryck = {ask} 'Vad skulle du vilja dricka?'
                    {print} dryck
        -   title: Eleverna skriver program som tar för lång tid att köra
            example:
                error_text: På den här nivån är det väldigt lätt att göra långa kod. Eleverna får inte göra program som tar för lång tid att ladda (för att spara våra servrar).
                error_code: "{repeat} 100 {times} {print} 'Hur många gånger kan jag upprepa detta?'"
                solution_text: Se till att koden inte är för lång
                solution_code: "{repeat} 20 {times} {print} 'Detta räcker'"
    -   level: "8"
        sections:
        -   title: Eleverna gör fel indrag
            example:
                error_text: Indrag är ett nytt begrepp på den här nivån, som är svårt att använda för vissa elever. Se till att de tränar på enkel kod innan du gör ett helt program med det.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hej'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hej'
        -   title: Elever upprepar bara en rad när de ville upprepa flera rader
            example:
                error_text: I koden nedan ville studenten t.ex. ta emot tre personers dryckesbeställningar. Men istället frågade programmet tre gånger och men skrev bara ut en beställning.
                error_code: |-
                    {repeat} 3 {times}
                        dryck = {ask} 'Vad skulle du vilja dricka?'
                    {print} dryck
                solution_text: |-
                    I rätt kod börjar även den tredje raden med indrag. På så vis tillhör den raden upprepningsblocket och kommer att upprepas 3 gånger.
                    Att visa dina elever dessa skillnader kan hjälpa dem att förstå varför vi behöver indrag för att få våra program att fungera.
                solution_code: |-
                    {repeat} 3 {times}
                        dryck = {ask} 'Vad skulle du vilja dricka?'
                        {print} dryck
        -   title: Elever vill nästa `{if}`-satser eller ha `{if}`-satser i en loop
            example:
                error_text: |-
                    På den här nivån får eleverna ännu inte ha `{if}`-satser inuti andra `{if}`-satser eller inuti upprepade loopar.
                    På nästa nivå är detta tillåtet.
                error_code: |-
                    födelsedag = {ask} 'Är det din födelsedag?'
                    {if} födelsedag = ja
                        {repeat} 3 {times}
                            {print} 'Hipp Hipp Hurra!'
                solution_text: "Det här är rätt kod på den här nivån:"
                solution_code: |-
                    födelsedag = {ask} 'Är det din födelsedag?'
                    {if} födelsedag = ja
                        {print} 'Hipp Hipp Hurra!'
                        {print} 'Hipp Hipp Hurra!'
                        {print} 'Hipp Hipp Hurra!'
        -   title: Eleverna skriver program som tar för lång tid att köra
            example:
                error_text: På den här nivån är det väldigt lätt att skriva mycket kod. Eleverna får inte göra program som tar för lång tid att ladda (för att spara våra servrar).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'Hur många gånger kan jag upprepa detta?'
                solution_text: Se till att koden inte är för lång
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'Detta räcker'
        -   title: Elever använder kommandot `{if}` för att kolla om variabelvärdet är lika med variabelnamnet
            example:
                error_text: |-
                    Vi har sett det här misstaget hos några av våra elever. De skapar ett lösenord för sin dator, men de skapar lösenordet 'lösenord'.
                    På rad 2 uppmanas datorn att kolla om det variabeln lösenord är lika med variabeln lösenord, alltså sig själv. Det innebär att svaret alltid är ja.
                    Så med den här koden kommer svaret alltid att vara 'Du kan komma in' oavsett vad spelaren fyller i.
                error_code: |-
                    lösenord {is} {ask} 'Vad är lösenordet?'
                    {if} lösenord {is} lösenord
                        {print} 'Du kan komma in'
                    {else}
                        {print} 'Du får inte komma in'
                solution_text: Du kan åtgärda det här misstaget genom att lägga till citattecken. Då vet datorn att det andra lösenordet i '{if} lösenord {is} 'lösenord' är en sträng (alltså normal text) och inte variabelnamnet.
                solution_code: |-
                    lösenord {is} {ask} 'Vad är lösenordet?'
                    {if} lösenord {is} 'lösenord'
                        {print} 'Du kan komma in'
                    {else}
                        {print} 'Du får inte komma in'
    -   level: "9"
        sections:
        -   title: Elever gör fel på indrag
            example:
                error_text: Det svåraste med den här nivån är att ha rätt indrag. Elever älskar att kapsla `{if}`-satser, ibland även inuti andra kapslade `{if}`-satser. Att hålla reda på indragen kan bli ganska svårt.
                error_code: |-
                    {print} 'Robin går på stan'
                    plats = {ask} 'Går Robin in i en butik eller går hon hem?'
                    {if} plats {is} butik
                        {print} 'Hon går in i butiken.'
                        {print} 'Robin ser en intressant bok'
                        bok = {ask} 'Köper Robin boken?'
                            {if} bok {is} ja
                    {print} 'Robin köper boken och går hem'
                    {else}
                        {print} 'Robin lämnar butiken och går hem'
                    {else}
                        {print} 'Robin går hem'
                solution_text: Detta är rätt kod. Försök att hålla reda på alla olika konstruktioner när du sätter `{if}`-satser inuti andra `{if}`-satser.
                solution_code: |-
                    {print} 'Robin går på stan'
                    plats = {ask} 'Går Robin in i en butik eller går hon hem?'
                    {if} plats {is} butik
                        {print} 'Hon går in i butiken.'
                        {print} 'Robin ser en intressant bok'
                        bok = {ask} 'Köper Robin boken?'
                        {if} bok {is} ja
                            {print} 'Robin köper boken och går hem'
                        {else}
                            {print} 'Robin lämnar butiken och går hem'
                    {else}
                        {print} 'Robin går hem'
    -   level: "10"
        sections:
        -   title: Eleverna använder inte för-kommandot rätt
            example:
                error_text: Vi ser ofta att elever försöker skriva ut listan (i exemplet djur) istället för elementen i listan.
                error_code: |-
                    djur {is} hund, katt, marulk
                    {for} djuret {in} djur
                      {print} 'Jag älskar ' djur
                solution_text: Ordet djur i den sista raden bör ändras till djuret.
                solution_code: |-
                    djur {is} hund, katt, marulk
                    {for} djuret {in} djur
                      {print} 'Jag älskar ' djuret
        -   title: Eleverna glömmer indragningen
            example:
                error_text: Elever har en tendens att glömma att använda indrag efter ett för-kommando.
                error_code: |-
                    djur {is} hund, katt, marulk
                    {for} djuret {in} djur
                    {print} 'Jag älskar ' djuret
                solution_text: Du behöver använda indrag efter kommandot för.
                solution_code: |-
                    djur {is} hund, katt, marulk
                    {for} djuret {in} djur
                      {print} 'Jag älskar ' djuret
    -   level: "11"
        sections:
        -   title: Eleverna glömmer att använda indrag
            example:
                error_text: Se till att eleverna använder indrag.
                error_code: |-
                    för j i intervallet 1 till 5
                    {print} j
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    för j i intervallet 1 till 5
                        {print} j
        -   title: Eleverna förstår inte j:ets betydelse
            example:
                error_text: |-
                    Vissa elever förstår inte att j är en variabel. Vi har valt j (eller i) eftersom det används i Python-programmering, men du kan lika gärna använda ett annat variabelnamn.
                    Till exempel den här koden:
                error_code: |-
                    för j i intervallet 1 till 5
                    {print} j
                solution_text: Kan lika gärna ersättas med denna kod. Den fungerar på samma sätt.
                solution_code: |-
                    för banan i intervallet 1 till 5
                        {print} banan
    -   level: "12"
        sections:
        -   title: Eleverna glömmer citattecken
            example:
                error_text: Eleverna behöver fler citattecken nu än på de tidigare nivåerna. I det här exemplet glömdes citattecken i listan och i kommandot `{if}`.
                error_code: |-
                    superhjältar = Spiderman, Batman, Iron Man
                    superhjälte = superhjältar {at} {random}
                    {if} superhjälte = Batman
                        {print} 'JAG ÄR BATMAN!'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    superhjältar = 'Spiderman', 'Batman', 'Iron Man'
                    superhjälte = superhjältar {at} {random}
                    {if} superhjälte {is} 'Batman'
                        {print} 'JAG ÄR BATMAN!'
        -   title: Eleverna använder citattecken runt tal som de vill använda för beräkningar
            example:
                error_text: |-
                    Du kan använda citattecken runt tal, men bara om du vill att datorn ska se dem som text. Det betyder att du inte kan göra beräkningar med talet.
                    I exemplet nedan kan du inte göra uträkningar med talet 25, eftersom det står inom citattecken.
                error_code: |-
                    poäng = '25'
                    svar {is} {ask} 'Vill du ha en poäng?'
                    {if} svar {is} 'ja'
                        poäng = poäng + 1
                        skriva poäng
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    poäng = 25
                    svar {is} {ask} 'Vill du ha en poäng?'
                    {if} svar {is} 'ja'
                        poäng = poäng + 1
                        {print} poäng
        -   title: Eleverna använder kommatecken istället för punkt i decimaltal
            example:
                error_text: Decimaltal kan användas från och med den här nivån, men du kan inte använda decimalkomma.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "Detta är rätt kod:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: Elever förväxlar `och` med `eller`
            example:
                error_text: De båda kommandona kan verka snarlika, men de fungerar helt olika.
                error_code: |-
                    spel {is} {ask} 'Vill du spela ett spel?'
                    tid {is} {ask} 'Har du tid att spela?'
                    {if} spel {is} 'ja' {or} tid {is} 'ja'
                        {print} 'Nu spelar vi!'
                solution_text: I det här fallet behöver personen svara ja på båda frågorna, så du ska använda `och`.
                solution_code: |-
                    spel {is} {ask} 'Vill du spela ett spel?'
                    tid {is} {ask} 'Har du tid att spela?'
                    {if} spel {is} 'ja' {and} tid {is} 'ja'
                        {print} 'Nu spelar vi!'
    -   level: "14"
        sections:
        -   title: Eleverna blandar ihop symbolerna < och >
            example:
                error_text: Ofta är eleverna redan bekanta med de symbolerna från matten. Men om dina elever inte känner till tecknen än kan de få problem med det.
                error_code: |-
                    ålder = {ask} 'Hur gammal är du?'
                    {if} ålder < 12
                        {print} 'Du är äldre än jag!'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    ålder = {ask} 'Hur gammal är du?'
                    {if} ålder > 12
                        {print} 'Du är äldre än jag!'
        -   title: Eleverna använder fel symboler för `!=`, `<=` och `>=`
            example:
                error_text: De här symbolerna är förmodligen nya för de flesta eleverna. Se till att förklara dem för dina elever.
                error_code: |-
                    namn = {ask} 'Vad heter du?'
                    {if} namn =  'Hedy'
                        {print} 'Du är inte Hedy'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    namn = {ask} 'Vad heter du?'
                    {if} namn != 'Hedy'
                        {print} 'Du är inte Hedy'
        -   title: Eleverna glömmer att använda symbolen ==
            example:
                error_text: På den här nivån får eleverna fortfarande använda = eller är. Men på högre nivåer, eller i Python, kan de få problem. Därför är det bäst att träna dem i att använda symbolen ==.
                error_code: |-
                    namn = {ask} 'Vad heter du?'
                    {if} namn = 'Hedy'
                        {print} 'Du är cool!'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    namn = {ask} 'Vad heter du?'
                    {if} namn == 'Hedy'
                        {print} 'Du är cool!'
    -   level: "15"
        sections:
        -   title: Eleverna glömmer indrag i while-loopen
            example:
                error_text: Indrag är ofta svårt för eleverna.
                error_code: |-
                    svar = 0
                    {while} svar != 25
                    svar = {ask} 'Vad är 5 gånger 5?'
                    {print} 'Rätt svar har getts'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Vad är 5 gånger 5?'
                    {print} 'Rätt svar har getts'
    -   level: "16"
        sections:
        -   title: Eleverna glömmer klamrar
            example:
                error_text: Från och med den här nivån ska listor anges inom klammer.
                error_code: |-
                    glass = 'jordgubbs', 'choklad'
                    {print} 'Jag älskar ' glass[{random}] 'glass'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    glass = ['jordgubbs', 'choklad']
                    {print} 'Jag älskar ' glass[{random}] 'glass'
        -   title: Eleverna använder fel sorts klammer
            example:
                error_text: Från och med den här nivån ska listor ha hakparenteser (klammer).
                error_code: |-
                    glass = ('jordgubbs', 'choklad')
                    {print} 'Jag älskar ' glass[{random}] 'glass'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    glass = ['jordgubbs', 'choklad']
                    {print} 'Jag älskar ' glass[{random}] 'glass'
        -   title: Eleverna glömmer citattecknen när de fokuserar på parenteserna
            example:
                error_text: Studenter är ibland så fokuserade på den nya aspekten av syntaxen att de glömmer bort citattecknen.
                error_code: |-
                    glass = [jordgubbs, choklad]
                    {print} 'Jag älskar ' glass[{random}] 'glass'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    glass = ['jordgubbs', 'choklad']
                    {print} 'Jag älskar ' glass[{random}] 'glass'
        -   title: Eleverna använder fortfarande det gamla kommandot på slump
            example:
                error_text: Studenter är ibland så fokuserade på den nya aspekten av syntaxen att de glömmer bort citattecknen.
                error_code: |-
                    glass = [jordgubbs, choklad]
                    {print} 'Jag älskar ' glass på slump 'glass'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    glass = ['jordgubbs', 'choklad']
                    {print} 'Jag älskar ' glass[{random}] 'glass'
        -   title: Eleverna glömmer citattecken medan när fokuserar på parenteserna
            example:
                error_text: Studenter är ibland så fokuserade på den nya aspekten av syntaxen att de glömmer bort citattecknen.
                error_code: |-
                    glass = [jordgubbs, choklad]
                    {print} 'Jag älskar ' glass[{random}] 'glass'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    glass = ['jordgubbs', 'choklad']
                    {print} 'Jag älskar ' glass[{random}] 'glass'
    -   level: "17"
        sections:
        -   title: Eleverna använder `{elif}` som `{else}`, alltså utan ett villkor
            example:
                error_text: Kommandot `{elif}` behöver ett villkor efter. Det kan inte användas som `{else}`, alltså utan ett villkor.
                error_code: |-
                    färg = fråga 'Vilken är din favoritfärg?'
                    {if} färg == 'grön':
                        {print} 'grönt är trevligt'
                    {elif}:
                        {print} 'Jag gillar grönt'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    färg = {ask} 'Vilken är din favoritfärg?'
                    {if} färg == 'grön':
                        {print} 'grönt är trevligt'
                    {elif} färg == gul:
                        {print} 'gult är okej'
                    {annars}:
                        {print} 'Jag gillar grönt'
        -   title: Eleverna glömmer kolonet
            example:
                error_text: Efter ett kommando som behöver indrag ska det vara ett kolon.
                error_code: |-
                    svar = fråga 'Hur mår du?'
                    {if} svar {is} 'bra'
                        {print} 'Jag också!'
                    {elif} svar {är} 'dåligt'
                        {print} 'Jag kan pigga upp dig!'
                    {annars}
                        {print} 'Jag är jättebra!'
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    svar = {ask} 'Hur mår du?'
                    {if} svar {is} 'bra':
                        {print} 'Jag också!'
                    {else}
                        om svar är  dåligt
                    {print} 'Jag kan muntra upp dig!'
                        {else}:
    -   level: "18"
        sections:
        -   title: Eleverna glömmer hakparenteser
            example:
                error_text: Eleverna glömmer att ha parenteser runt text.
                error_code: "{print} 'jag heter Hedy!'"
                solution_text: "Detta är rätt kod:"
                solution_code: "{print}('jag heter Hedy!')"
        -   title: Eleverna fortsätter använda fråga-kommandot
            example:
                error_text: Ask-kommandot har använts från nivå 1. Så det kan vara svårt för eleverna att byta till kommandot inmatning istället för kommandot fråga.
                error_code: |-
                    {print}('Jag heter Hedy!')
                    namn = fråga('Vad heter du?')
                    {print}('Så du heter ', namn)
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    {print}('Jag heter Hedy!')
                    namn = {input}('Vad heter du?')
                    {print}('Så du heter ', namn)
        -   title: Eleverna råkar använda parenteser som citattecken
            example:
                error_text: De har lärt sig att ha variablerna utanför citattecknen, så de kanske gör samma sak med parenteserna, vilket inte är rätt sätt att använda dem.
                error_code: |-
                    temperatur = 25
                    {print}('Det är ') temperatur (' grader ute')
                solution_text: "Detta är rätt kod:"
                solution_code: |-
                    temperatur = 25
                    {print}('Det är' , temperatur, ' grader ute')
