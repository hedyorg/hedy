title: Dokumentacja
home-sections:
-   title: Czym jest stopniowany język programowania?
    text: |-
        Uczenie się programowania może być trudne. Nie oznacza to, że programowanie samo w sobie *jest* trudne! Ale jest wiele zasad które należy zapamiętać, zupełnie jak gdy rozpoczyna się naukę polskiego.
        Podobnie, będziesz potrzebować wiele praktyki aby nauczyć się programowania.

        Możesz czytać te zdania z łatwością. Ale czy pamiętasz okres rozpoczynania nauki czytania? Każda litera wymagała od ciebie czasu!
        To prawda również w przypadku programowania, może ono być trudne na początku, ale z czasem staje się łatwiejsze!

        Dobrą cechą Hedy jest to, że Hedy jest *stopniowany*. Oznacza to, że nie musisz uczyć się wszystkich zasad jednocześnie.
        Pierwsze kilka poziomów nie ma aż tak wiele zasad, dzięki czemu swobodnie możesz przyzwyczaić się do programowania.
        Na każdym poziomie dodajemy nowe zasady, zwiększając liczbę komend które znasz. Komendy to instrukcje dla komputera.
-   title: Dlaczego Hedy jest stopniowany?
    text: |-
        W tym materiale wideo Felienne, twórczyni Hedy, wyjaśnia dlaczego Hedy jest stopniowany.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-   title: Dla kogo jest Hedy?
    text: Hedy jest przeznaczony dla wszystkich dzieci pragnących nauczyć się programować! Musisz jedynie potrafić czytać po angielsku z łatwością.
-   {}
-   {}
-   title: Czy potrzebuję doświadczenia z programowaniem?
    text: Nie, nie jest to wymagane. Jednakże, jeśli programowałoś już w Scratchu lub Pythonie, niektóre z komend będą dla ciebie znajome.
-   title: Czy Hedy jest darmowy?
    text: |-
        Tak! Hedy jest także Otwartym Oprogramowaniem (Open Source), co oznacza, że każdy kto potrafi programować może pomóc nam ulepszać Hedy.
        Możesz znaleźć kod na [GitHubie](https://github.com/hedyorg/hedy).
        Jeśli lubisz Hedy i chcesz wnieść swój wkład, akceptujemy (i jesteśmy bardzo wdzięczni za) [dotacje](https://github.com/sponsors/hedyorg)!
-   title: Czy muszę coś zainstalować?
    text: Nie. Hedy działa w przeglądarce internetowej, która jest programem którego używasz aby wyświetlać tę stronę. Prawdopodobnie Chrome, Edge lub Firefox. Hedy działa również za twoim telefonie lub tablecie.
teacher-guide:
-   title: Wprowadzenie
    key: intro
    subsections:
    -   title: Czym jest Hedy?
        text: |-
            Hedy to tekstowy język programowania, stworzony dla dzieci i nastolatków w przedziale wiekowym 10 - 15 lat.
            W przeciwieństwie do innych języków skierowanych do dziecięcej widowni, takich jak Scratch, Hedy nie używa kodu w formie bloczków, a prawdziwego tekstu.
            Hedy oferuje więc naukę pisania kodu niczym prawdziwi programiści, ale małymi kroczkami za pomocą krótkich i ciekawych zadań.
            Dzięki temu Hedy może funkcjonować jako przystanek na drodze do nauki właściwych języków programowania, takich jak Python, w łatwo przyswajalny i, przede wszystkim, zabawny sposób!
            Jeśli chcesz wiedzieć więcej, możesz obejrzeć ten <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">film</a> na temat tego, jak powstawał język programowania Hedy.
    -   title: Docelowi odbiorcy
        text: |-
            Hedy został stworzony z myślą o dzieciach i nastolatkach w wieku 10 - 15 lat.
            Ważnym jest, by uczniowie potrafili poprawnie czytać. Nie zalecamy używania Hedy’ego zanim uczniowie nie osiągną poziomu czytania odpowiadającego dzieciom z 3 klasy podstawowej.
            Uczniowie (i nauczyciele!) nie muszą mieć żadnego doświadczenia w programowaniu przed rozpoczęciem nauki z Hedy’m.
    -   title: Jak działa Hedy?
        text: |-
            Hedy jest podzielony na poziomy, w ramach których wprowadzane są nowe polecenia. Każdy poziom zawiera szereg zadań pozwalających na przećwiczenie nowo poznanych poleceń. 
            Jako nauczyciel, możesz decydować które zadania są dostępne dla twoich uczniów. Czy będą tworzyć restauracje, kalkulator czy może nawiedzony dom? Na każdym poziomie, zadania są ułożone od najłatwiejszych do najtrudniejszych. 
            Dzięki takiemu podejściu, Twoi uczniowie cały czas będą mieli przed sobą zajmujące wyzwania. Zadania mogą być wykonywane przez każdego z uczniów z osobna, lub możesz je wykorzystać jako instrukcje nn aswoioich lejach. 

            Zadania zawierają także przykładowy kod, aby ułatwić korzystanie z Hedy, także mniej obeznanym z programowaniem nauczycielom.
            Oczywiście Hedy wspiera również kreatywnych nauczycieli, którzy uwielbiają tworzyć własne plany lekcji i zadania.

            Po zrobieniu wszystkich zadań z danego poziomu, Twoi uczniowie mogę sprawdzić swoją wiedzę w quizie.
            Możesz śledzić pracę i postępy swoich uczniów na stronie klasy.
    -   title: Urządzenia
        text: |-
            Hedy jest aplikacją internetową, co oznacza, że działa on na każdym urządzeniu z dostępną przeglądarką (Google Chrome, Firefox, Edge itp.), dzięki czemu każdy komputer, laptop, tablet, czy nawet smartfon, jest odpowiednim narzędziem to korzystania z Hedy’ego.
            Nie ma potrzeby pobierania czegokolwiek przed przystąpieniem do pracy z Hedy’m – po prostu uruchomcie stronę internetową i jesteście gotowi do działania!
    -   title: Społeczność Hedy
        text: |-
            Zapraszamy wszystkich nauczycieli, programistów i innych fanów Hedy do przyłączenia się do naszego <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discorda</a>. Jest to idealne miejsce aby porozmawiać o Hedy’m: mamy kanały gdzie możesz pokazać innym swoje projektu i lekcje, kanały do zgłaszania błędów, oraz kanały do dyskusji z innymi nauczycielami oraz zespołem Hedy’ego
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Tutaj</a> możesz znaleźć film jak dołączyć do społeczności na Discordzie.
-   title: Często popełniane błędy
    key: częste_pomyłki
    intro: |-
        Możesz uczyć się na błędach, zwłaszcza w programowaniu!
        Pomyłki są nieuniknione, dając przy tym świetną okazję do uczenia się, jednak znalezienie odpowiedniego ich rozwiązania może okazać się dość problematyczne dla samych nauczycieli.
        Szczególnie w późniejszych poziomach, kiedy kod staje się coraz dłuższy i bardziej skomplikowany. Z tego też powodu stworzyliśmy listę najczęściej spotykanych błędów w każdym z poziomów, wraz z ich rozwiązaniami.
    levels:
    -   level: "1"
        sections:
        -   title: Uczniowie zapominają napisać odpowiednią komendę
            example:
                error_text: Na przykład, wpisują zdanie bez używania komendy 'napisz'
                error_code: Hedy nie może tego wyświetlić
                solution_text: Naucz swoich uczniów, by zawsze zaczynali linijkę kodu komendą.
                solution_code: "{print} Hedy może to wyświetlic!"
        -   title: Uczniowie używają wielkich liter przy wpisywaniu komend
            example:
                error_text: Komendy nie zadziałają, jeżeli zostaną napisane przy użyciu wielkich liter
                error_code: |-
                    Zapytaj Czemu mój kod nie działa?
                    Napisz Bo używam wielkich liter.
                solution_text: Zamień wielkie litery na małe.
                solution_code: |-
                    {ask} Czemu mój kod teraz działa?
                    {print} Bo używam tylko małych liter!
        -   title: Uczniowie używają 'dołącz' bez ' zapytaj'
            example:
                error_text: Komenda 'dołącz' powtarza odpowiedź do pytania zadanego komendą 'zapytaj'. Bez 'zapytaj', 'powtórz' nie ma czego powtórzyć.
                error_code: "{echo} Nazywasz się"
                solution_text: Dodaj komendę 'zapytaj'.
                solution_code: |-
                    {ask} Jak się nazywasz?
                    {echo} Nazywasz się
        -   title: Uczniowie próbują wykorzystać komendę 'dołącz' do dodania wartości w środku zdania
            example:
                error_text: I mają rację! Jednak by to osiągnąć, potrzebne będą zmienne, wprowadzone dopiero w następnym poziomie.
                error_code: |-
                    {ask} Jaki język programowania jest najlepszy?
                    {echo} jest najlepszy!
                solution_text: "By zachować spójność przekazu, na potrzeby poziomu 1 ograniczymy się do:"
                solution_code: |-
                    {ask} Jaki język programowania jest najlepszy?
                    {echo} Najlepszy jest...
        -   title: "Żółw: Uczniowie wyprowadzają żółwia poza ekran"
            example:
                error_text: Uczniowie często lubią wykorzystywać duże liczby podczas zabawy z żółwiem, powodując tym samym przesunięcie poza widok ekranu.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: W tym przykładzie, uczniom może się wydawać, że komenda 'obróć' nie działa. Pomimo tego, że wszystko wykonuje się tak jak powinno, nie możesz tego zobaczyć, ponieważ wykonuje się poza ekranem. Użyjcie mniejszych liczb, by tego uniknąć.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Żółw: Uczniowie próbują użyć komendę 'wstecz' lub podobną, lecz takowa nie istnieje"
            example:
                error_text: Komenda 'wstecz' nie istnieje
                error_code: wstecz 100
                solution_text: "By żółw ruszył się wstecz, należy użyć komendy 'naprzód' z wartością ujemną. Na przykład:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Uczniowie wpisali komendę z literówką
            example:
                error_text: Hedy nie rozpozna komendy z literówką.
                error_code: napizs Nie rób literówek
                solution_text: Naucz swoich uczniów, by zwracali uwagę na wiadomości z błędami. W ten sposób szybciej dojdą do tego, co poszło nie tak.
                solution_code: "{print} Nie rób literówek"
        -   title: Uczniowie zapominają, że komenda ask uległa zmianie
            example:
                error_text: Na tym poziomie uczniowie uczą się o zmiennych. Komenda ask również wymaga zmiennej, ale uczniowie o tym zapominają.
                error_code: zapytaj Co chciałbyś zjeść
                solution_text: W tym poziomie musisz wskazać Hedy'emu, gdzie przechować odpowiedź, by użyć ją później. Coś takiego nazywane jest 'zmienną'.
                solution_code: zamówienie {is} Co chciałbyś zjeść
        -   title: Uczniowie próbują użyć komendy 'dołącz'
            example:
                error_text: Dla niektórych uczniów frustrujące może być to, że polecenie echo już nie działa. Dlatego bardzo ważne jest, aby wyjaśnić zalety korzystania ze zmiennych. Na przykład można używać wielu zmiennych w kodzie i można je umieszczać w dowolnym miejscu w zdaniu!
                error_code: |-
                    odpowiedź {is} {ask} Czemu dołącz już nie działa
                    dołącz
                solution_text: Użyj zmiennej.
                solution_code: |-
                    odpowiedź {is} {ask} Czemu dołącz już nie działa
                    {print} odpowiedź
        -   title: Uczniowie używają nazwy zmiennej jak zwykłego słowa
            example:
                error_text: W przykładzie poniżej, słowo 'imię' używane jest zarówno jako zmienna, jak i część zwykłego zdania. Wynikiem tego kodu będzie 'Hej moje Hedy to Hedy'.
                error_code: |-
                    imię {is} Hedy
                    {print} Hej moje imię to Hedy
                solution_text: By tego uniknąć, nie używaj słów jako i nazwy zmiennych, i części zdania. W poziomie 4 problem ten jest rozwiązany za pomocą cudzysłowów.
                solution_code: |-
                    imię {is} Hedy
                    {print} Hej nazywam się imię
        -   title: Uczniowie używają zmiennych z nazwami dwuczłonowymi .
            example:
                error_text: Nazwa zmiennej musi zawierać tylko jedno słowo. Zamiast spacji możliwe jest użycie podkreślników '_', w ten sposób dwa słowa liczą się jak jedno.
                error_code: wybrane drzwi to zapytaj Które drzwi wybierasz
                solution_text: Zamień spacje na podkreślniki.
                solution_code: wybrane_drzwi {is} {ask} Które drzwi wybierasz
        -   title: Uczniowie używają nieistniejącej zmiennej
            example:
                error_text: W tym przykładzie uczeń nazwał zmienną 'pies', ale próbuje wywołuje zmienną 'imię'.
                error_code: |-
                    pies {is} {ask} Jak nazywa się twój pies
                    {print} Twój pies nazywa się imię
                solution_text: Zawsze zwracaj uwagę na spójność nazwy zmiennej. Małe zmiany mogą być trudne do zauważenia (na przykład użycie liczby mnogiej zamiast pojedynczej), ale będą miały wpływ na działanie (lub niedziałanie) kodu.
                solution_code: |-
                    imię {is} {ask} Jak nazywa się twój pies
                    {print} Twój pies nazywa się imię
    -   level: "3"
        sections:
        -   title: Uczniowie próbują wyświetlić całe listy
        -   title: Uczniowie używają nazw zmiennych lub list jak zwykłego tekstu
