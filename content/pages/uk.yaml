title: Документація Hedy
join-sections:
-   title: Підтримати Hedy
    text: Є три способи, якими ви можете підтримати Хеді!
-   title: Удосконалення мови
    text: "Поступовий і багатомовний характер Hedy створює багато цікавих технічних проблем.\nЗнайдіть ці проблеми на <a href=\"https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage\" target=\"_blank\">Github</a> ."
-   title: Переклад Хеді
    text: "Не програміст? немає проблем! Ще один спосіб підтримати Hedy – це <a href=\"https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial\" target=\"_blank\">переклад ключових слів, повідомлень про помилки, пригод та іншого вмісту</a> .\nЦе поточний статус, допоможіть нам завершити мову або додати нову!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>"
-   title: Допоможіть вчителям почати роботу
    text: "Hedy призначений для підтримки вчителів у проведенні уроків програмування в класі. У нас є спеціальні функції для вчителів, як-от можливість створити клас, налаштувати його та переглянути, як учні навчаються.\nЯкщо вам подобається Hedy, ви можете звернутися до шкіл, які ви знаєте, щоб допомогти вчителям почати! Ми можемо допомогти вам знайти школи чи вчителів через <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">Discord</a> ."
learn-more-sections:
-   title: Фонд Хеді
    text: "Hedy підтримується Фондом Hedy (Stichting Hedy), Sportmanstaat 8, 2341 JG Oegstgeest, Голландська торгова палата, номер 94013985.\n\nПравління фонду складається з:\n\n  * Фелієн Германс, президент\n  * Елко Хейзінг, фінанси\n  * Рене Мербіс, секретар\n\nПравління Stichting Hedy не отримує фінансової винагороди за виконання своїх завдань. "
-   title: Hedy у новинах!
    text: |-
        Want to know more about Hedy? Check out this talk Felienne gave at the European Code Week 2020:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Хеді в новинах
    text: "Деякі веб-сайти та газети писали про Hedy після нашого випуску на початку 2020 року. Ми зберігаємо список тут:\n* [CoRecursive (англійською), червень 2024 р.](https://corecursive.com/hedy-with-felienne-hermans/)\n* [Журнал Java (голландська мова), квітень 2023 р.](images/Hedy_Javamagazine2023.pdf)\n* [gotopia (англійською), лютий 2023 р.](https://gotopia.tech/articles/215/teaching-kids-how-to-code-with-Hedy)\n* [Roteco (Німеччина), листопад 2022 р.](https://www.roteco.ch/de/stories/robot-und-ressourcen/hedy-eine-mitwachsende-programmiersprache/)\n* [Tech Optimism - A Solution to the IT Shortage (Нідерланди), серпень 2022 р.](https://podcasts.apple.com/nl/podcast/techoptimisme-2-een-oplossing-voor-het-it-tekort/id1114136654?i=1000581523458)\n* [Codeweek Podcast, липень 2022](https://codeweek.eu/podcasts/26)\n* [Heise.de (німецька), січень 2022 р.](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)\n* [Strumenta, листопад 2021 р.](https://tomassetti.me/teaching-programming-with-hedy/)\n* [Vives (Нідерланди), CodeWeek Special, жовтень 2021 р.](images/Vives-174-codeweek.pdf)\n* [CodeWeek.eu – конкурс Haunted House Challenge, вересень 2021 р.](https://codeweek.eu/2021/challenges/haunted-house)\n* [CodeWeek.eu (англійською), травень 2021 р.](https://codeweek.eu/blog/hedy-making-textual-programming-easier-and-more-fun/)\n* [Opensource.com, квітень 2021 р.](https://opensource.com/article/21/4/hedy-teach-code)\n* [IO Magazine, квітень 2021](https://ict-research.nl/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)\n* [Ingeniería De Software (іспанською), лютий 2021 р.](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)\n* [Журнал Hello World, лютий 2021 р.](images/Hello_World_15_Hedy.pdf)\n* [DiScoro, січень 2021 р.](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)\n* [Фелієнне отримує голландську нагороду за дослідження ІКТ для Hedy, січень 2021](https://www.universiteitleiden.nl/en/news/2021/01/felienne-hermans-receives-dutch-prize-for-ict-research-2021)\n* [SlashDot, серпень 2020 р.](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)\n* [GenBeta (іспанською), серпень 2020 р.](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)\n* [Developpez (фр.), серп 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour -enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)\n* [Vives (Нідерланди), жовтень 2020 р.](images/artikel_vives.pdf) «Met Hedy stap voor stap leren programmeren»\n* [Лейденський університет, квітень 2020 р.](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)\n* [Маре (голландська), квітень 2020 р.](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)\n* [AG Connect (Нідерланди), квітень 2020 р.](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)"
teacher-guide:
-   title: Введення
    key: введення
    subsections:
    -   title: Що таке Hedy?
        text: |-
            Hedy — це мова текстового програмування, спеціально розроблена для підлітків (від 10 до 15 років).
            На відміну від мов програмування для дітей, таких як Scratch, Hedy використовує не блоки коду, а текстовий код.
            Тож із Hedy ви навчитеся вводити код, як це роблять справжні програмісти, але маленькими кроками за допомогою ігрових вправ.
            Таким чином Hedy може функціонувати як сходинка до справжніх мов програмування, таких як Python, у доступний і переважно цікавий спосіб!
            Якщо ви хочете дізнатися більше, ви можете переглянути це <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">відео</a> про розвиток Hedy як мови програмування.
    -   title: Цільова аудиторія
        text: |-
            Hedy розроблено для учнів середньої та молодшої школи (віком від 10 до 15 років).
            Важливо, щоб учні вміли добре читати. Ми рекомендуємо не починати з Hedy, поки учні не досягнуть рівня читання принаймні в 3-му класі.
            Студентам (і вчителям!) не потрібен досвід програмування, перш ніж почати працювати з Hedy.
    -   title: Як працює Hedy?
        text: |-
            Hedy розділений на рівні, на яких навчаються новим командам. Кожен рівень містить різноманітні пригоди, щоб відпрацювати щойно вивчені команди.
            Як учитель, ви вирішуєте, які пригоди доступні для ваших учнів. Чи будуть вони робити ресторан, калькулятор чи будинок з привидами такого рівня? На кожному рівні пригоди розташовані від найлегшого до найважчого.
            Тож ваші студенти постійно отримують виклики. Пригоди можуть виконувати учні самостійно, або ви можете використати їх у класичному навчанні.

            Пригоди також включають приклад коду, щоб переконатися, що вчителі, які менш обізнані з цифровими засобами, також зможуть використовувати Hedy!
            Звичайно, Hedy також обслуговує творчих вчителів, які люблять складати власні плани уроків і пригоди!
            Після програмування всіх пригод певного рівня ваші 
            учні можуть перевірити свої знання у вікторині.
            Ви можете відслідковувати роботу своїх учнів та їх прогрес на сторінці класу.
    -   title: Прилади
        text: |-
            Hedy базується в Інтернеті, що означає, що він працює на будь-якому пристрої з браузером (Google Chrome, Firefox, Edge тощо), тому для використання Hedy підходять ноутбуки, хромбуки, планшети та навіть смартфони.
            Не потрібно нічого завантажувати, перш ніж працювати з Hedy, просто перейдіть на веб-сайт, і все готово!
    -   title: Спільнота Hedy
        text: |-
            Усі вчителі Hedy, програмісти та інші шанувальники можуть приєднатися до нашого <a href="https://discord.gg/8yY7dEme9r" target="_blank">сервера Discord</a>. Це ідеальне місце для спілкування про Hedy: у нас є канали, де ви можете показати свої круті проекти та уроки, канали для повідомлення про помилки та канали для спілкування з іншими викладачами та командою Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Тут</a> ви можете знайти відео про те, як приєднатися до спільноти Discord.
    -   title: Хеді та GDPR
        text: "Під час обробки персональних даних організації в ЄС повинні дотримуватися GDPR (Загального регламенту захисту даних).\nОскільки це складне питання для багатьох шкіл, ви можете використовувати всі функції програмування Hedy без надання особистих даних.\nНайпростіший спосіб зробити це — використовувати Hedy без створення облікових записів для вчителя та учнів. Без облікових записів доступні всі функції, за винятком персоналізації рівнів, збереження програм студентів і перегляду їх прогресу. Це обмежує, але є школи, які використовують Hedy таким чином.\n\nДругий спосіб полягає в тому, щоб викладач створив обліковий запис з електронною адресою без особистих даних, наприклад «docent25@email.com». Окрім адреси електронної пошти, яка потрібна лише для скидання пароля, вам не потрібно ділитися жодною інформацією під час створення облікового запису викладача.\nЗа допомогою облікового запису вчителя ви можете створювати анонімні облікові записи для учнів, наприклад, rainbow-student1, rainbow-student2 тощо (докладний посібник див. у «Підготовці до навчання»). Таким чином ви можете використовувати всі функції Hedy, включно зі збереженням прогресу, не передаючи особистих даних про себе чи своїх учнів.\n\nЯкщо вищезазначеного недостатньо для вашого контексту, ми можемо підписати угоду про обробку ваших персональних даних."
-   title: Часті помилки
    key: типові_помилки
    intro: |-
        Ви можете вчитися на своїх помилках, особливо в кодуванні! Роблення помилок неминуче, і це чудова нагода для навчання, але для вчителів може бути складно знайти правильне виправлення помилки! Особливо тому, що програми стають все довшими і довшими, оскільки студенти просуваються по рівнях. Ось чому ми склали список із частими помилками на кожному рівні та способами їх вирішення.
    levels:
    -   level: "1"
        sections:
        -   title: Учні забувають вводити команди
            example:
                error_text: Наприклад, вони вводять речення без використання друку.
                error_code: Hedy не може це надрукувати
                solution_text: Навчіть своїх учнів завжди починати рядок коду з команди.
                solution_code: "{print} Hedy може надрукувати це!"
        -   title: Під час введення команд учні використовують великі літери
            example:
                error_text: Команди не працюватимуть, якщо вони написані великими літерами.
                error_code: |-
                    Ask Чому мій код не працює?
                    Print Oскільки я використовую великі літери.
                solution_text: Змініть великі літери.
                solution_code: |-
                    {ask} Чому мій код зараз працює?
                    {print} Тому що я видалив великі літери!
        -   title: Учні використовують echo без ask
            example:
                error_text: Команду echo створено для повторення відповіді після запиту. Без команди ask, команда echo нічого не зробить.
                error_code: "{echo} Ваше ім'я"
                solution_text: Додайте команду запиту, щоб вона працювала.
                solution_code: |-
                    {ask} Як тебе звати?
                    {echo} Ваше ім'я
        -   title: Учні хочуть, щоб їхнє слово (змінна) які вонни ввели після команди ask було в середині речення
            example:
                error_text: І вони мають рацію! Ось чому вони навчаться використовувати правильні змінні на наступному рівні.
                error_code: |-
                    {ask} Яка мова програмування найвеселіша?
                    {echo} найкраще!
                solution_text: "На першому рівні ми маємо зберегти це:"
                solution_code: |-
                    {ask} Яка мова програмування найвеселіша?
                    {echo} Найкраща мова це...
        -   title: "Черепаха: Учні відпускають черепаху від екрану"
            example:
                error_text: Часто учні люблять пробувати великі числа, використовуючи черепаху, яка змушує стрілку йти з екрана.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: "У цьому прикладі студенти схильні думати, що команда повороту не вдалася; навіть якщо він зробив те, що мав. Що сталося, черепаха вийшла за рамки екрана. Щоб цього не сталося, використовуйте менші числа."
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Черепаха: Учні використовують команду назад, але такої команди немає."
            example:
                error_text: Backward не є командою.
                error_code: назад 100
                solution_text: "Щоб змусити черепаху рухатися назад, ви використовуєте команду вперед і від’ємне число. Наприклад:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Учні роблять помилки у своїх командах
            example:
                error_text: Hedy не може розпізнати команду з помилкою.
                error_code: prinnt Не робіть опечаток
                solution_text: Навчіть учнів читати повідомлення про помилки. Таким чином вони можуть самі дізнатися, що пішло не так.
                solution_code: "{print} Не робіть опечаток"
        -   title: Учні забувають, що команда ask змінилася
            example:
                error_text: На цьому рівні учні дізнаються про змінні. Команда ask також вимагає змінної, але учні забувають про це.
                error_code: ask що ти хочеш їсти
                solution_text: На цьому рівні ви повинні сказати Hedy, де зберегти вашу відповідь, щоб її можна було використати пізніше. Це називається змінною.
                solution_code: order {is} {ask} Що б ви хотіли з'їсти
        -   title: Учні пробують використати команду echo
            example:
                error_text: Деяким студентам може бути неприємно дізнатися, що команда echo більше не працює. Саме тому дуже важливо пояснити переваги використання змінних. Наприклад, ви можете використовувати кілька змінних у коді та розміщувати їх у будь-якому реченні, де забажаєте!
                error_code: |-
                    answer {is} {ask} Чому команда echo більше не працює
                    echo
                solution_text: Замість цього використовуйте змінну.
                solution_code: |-
                    answer {is} {ask} Чому {echo} більше не працює?!
                    {print} відповідь
        -   title: Учні використовують назву змінної чи як звичайне слово
            example:
                error_text: У наведеному нижче прикладі слово "name" використовується як змінна, але також як звичайний текст. Результатом цього коду буде «Привіт, моє Hedy — є Hedy».
                error_code: |-
                    name {is} Hedy
                    {print} Привіт, моє name - є name
                solution_text: Тому не використовуйте слово, яке ви хочете використовувати в тексті, як назву змінної. На четвертому рівні це вирішується за допомогою лапок.
                solution_code: |-
                    name {is} Hedy
                    {print} Привіт, я name
        -   title: Учні використовують довгі імена змінних, що містять два слова.
            example:
                error_text: Змінна має бути названа одним словом. Ви можете використовувати підкреслення, щоб з’єднати два слова. Це вважається за одне слово.
                error_code: chosen door is ask Які двері ви обираєте
                solution_text: Додайте підкреслення.
                solution_code: chosen_door {is} {ask} які двері ви обираєте
        -   title: Учні можуть використовувати дві різні назви для однієї змінної
            example:
                error_text: У цьому прикладі студент використав 'horse' та 'name' для тих самих змінних.
                error_code: |-
                    horse {is} {ask} Як звати твого коня
                    {print} Твого коня звати name
                solution_text: Завжди перевіряйте, чи змінна має однакову назву в коді. Незначні відмінності може бути важко помітити (наприклад, множина), бо вони заважатимуть коду.
                solution_code: |-
                    name {is} {ask} What is your horse called
                    {print} Your horse is called name
    -   level: "3"
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: A list can't be printed. You can only print one item from the list with at random.
                error_code: |-
                    groceries {is} apples, milk, chocolate
                    {print} groceries
                solution_text: To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |-
                    {print} apples, milk, chocolate

                    or

                    groceries {is} apples, milk, chocolate
                    {print} groceries {at} {random}
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: Ймовірно, ця проблема також виникла на рівні 2. Тепер це може статися і зі списками.
                error_code: |-
                    name {is} Hedy
                    {print} Hi my name is name

                    or

                    animal {is} rhino, bee, swan
                    {print} The best animal is... animal {at} {random}
                solution_text: Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi I'm name

                    or

                    animals {is} rhino, bee, swan
                    {print} The best animal is... animals {at} {random}
        -   title: Students forget at in at random
            example:
                error_text: Як у прикладі
                error_code: |-
                    birds {is} sparrow, seagull, robin
                    {print} birds random
                solution_text: This problem is solved by adding the word at.
                solution_code: |-
                    birds {is} sparrow, seagull, robin
                    {print} birds {at} {random}
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: Or they will sometimes put at random at the beginning of the line.
                error_code: |-
                    fruit {is} apple, cherry, banana
                    fruit at random
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit {is} apple, cherry, banana
                    {print} fruit {at} {random}
        -   title: Students forget to use commas in their lists
            example:
                error_text: У списку елементи відокремлюються комою.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Students try to use at random without a list
            example:
                error_text: Наприклад
                error_code: |-
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    клуби {is} Манчестер Юнайтед, ФК Баварія Мюнхен, ФК Барселона
                    {print} клубів {at} {random}
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names {is} Jake
                    your_name {is} {ask} Who are you?
                    {add} your_name {to_list} names
                    {print} names {at} {random}
                solution_text: There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |-
                    names {is} Jake, Amy
                    your_name {is} {ask} Who are you?
                    {add} your_name {to_list} names
                    {print} names {at} {random}
        -   title: Студенти забувають використовувати `{to}`/`{from}` у `{add}`/`{remove}`
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    add choice
                    remove dice
                    {print} I love adventures {at} {random}
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice {to_list} adventures
                    {remove} dice {from} adventures
                    {print} I love adventures {at} {random}
    -   level: "4"
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    {print} Hello
                    mood {is} {ask} 'How are you?
                solution_text: Add the correct quotation marks.
                solution_code: |-
                    {print} 'Hello'
                    mood {is} {ask} 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: Важливо почати урок з перевірки того, чи вміють учні правильно друкувати лапки. На Hedy студенти можуть використовувати одинарні лапки ('') і подвійні лапки (""). З іншого боку, зворотні галочки не вважаються дійсними лапками (``).
                error_code: |-
                    {print} `Welcome to the restaurant`
                    food {is} {ask} "What would you like to order?"
                solution_text: "These are the correct quotation marks:"
                solution_code: |-
                    {print} 'Welcome to the restaurant'
                    food {is} {ask} 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: "{print} 'You're not allowed to type this'"
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    {print} 'Youre allowed to type this'
                    {print} 'And you`re able to do this'
    -   level: "5"
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: After students use if or else they forget to use a second command like print or ask.
                error_code: |-
                    {if} name {is} Hedy 'Great!'
                    {else}  Hedy {is} better!
                solution_text: Add the print command to fix it.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Great!'
                    {else} {print} 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse {is} {ask} 'What is your horse called?'
                    {if} name {is} Bonfire {print} 'cool'
                    {else} {print} 'less cool!'
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse {is} {ask} 'What is your horse called'
                    {if} horse {is} Bonfire {print} 'cool!'
                    {else} {print} 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Using the `if` command can make the code lines very long and students tend to forget to use quotes.
                error_code: |-
                    {if} name {is} Hedy {print} fun
                    {else} {print} 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    {if}  name  {is} 'Hedy' {print} 'fun'
                    {else} {print} 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!
        -   title: Учні використовують довгі імена змінних, що містять два або більше слів
            example:
                error_text: Змінні в Hedy не можуть містити пробіли, тому, щоб використовувати кілька слів разом, студенти повинні з’єднати їх за допомогою підкреслення (_)
                error_code: chosen door is ask  Which door do you pick?
                solution_text: Додати підкреслення.
                solution_code: chosen_door {is} {ask} 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: Наприклад, цей учень хоче, щоб Хеді сказала всім його друзям, що вони смішні, а іншим однокласникам – ні.
                error_code: "{if} name {is} Джессі, Девід, Суф {print} «Ви смішний» {else} {print} «Ви не смішний»"
                solution_text: |-
                    Для цього можна використати команду `{in}`. Хоча це пояснюється на вищому рівні, воно вже працює на рівні 5. 
                    Іншим рішенням є використання кількох команд `{if}` і жодної команди `{else}`. Недоліком є те, що він не скаже іншим однокласникам, що вони не смішні.
                solution_code: |-
                    friends {is} Jesse, David, Souf
                    name {is} {ask} 'Who are you?'
                    {if} name {in} friends {print} 'You are funny'
                    {else} {print} 'You are not funny'

                    or

                    name {is} {ask} 'Who are you?'
                    {if} name {is} Jesse {print} 'You are funny'
                    {if} name {is} David {print} 'You are funny'
                    {if} name {is} Souf {print} 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password {is} {ask} 'Який пароль?'
                    {if} пароль {is} пароль {print} "Доступ надано"
                    {else} {print} "У доступі відмовлено!"
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password {is} {ask} 'What is the password'
                    {if} secret_password {is} password {print} 'Access granted!'
                    {else} {print} 'Access denied!'
    -   level: "6"
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: In this code the output screen will print '10'.
                solution_code: "{print} 5 + 5"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:"
                error_code: |-
                    age = {ask} 'How old are you?'
                    {print} 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    {print} 'Welcome to our burger restaurant'
                    burger = {ask} 'Would you like a burger?'
                    {if} burger = yes price = price + 10
                    drink = {ask} 'Would you like a drink?'
                    {if} drink = yes price = price + 4
                    {print} 'That will be ' price ' euros please'
    -   level: "7"
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 print
                solution_text: "Ось правильний код:"
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    {repeat} 3 {times} drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: Ви повинні перейти на наступний рівень, щоб мати можливість повторити кілька рядків. Тому на цьому рівні вам доведеться друкувати все окремо.
                solution_code: |-
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: "{repeat} 100 {times} {print} 'How many times can I repeat this?'"
                solution_text: Make sure the programs aren't too long
                solution_code: "{repeat} 20 {times} {print} 'This is enough'"
    -   level: "8"
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple snippets before making a whole program with it.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hello'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                        {print} drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: "This is the correct code for this level:"
                solution_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'How many times can I repeat this?'
                solution_text: Make sure the programs aren't too long
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    Ми помітили типову помилку наших студентів: вони намагаються створити програму, яка перевіряє пароль, але роблять пароль «паролем». 
                    У рядку 2 комп’ютеру пропонується перевірити, чи змінний пароль збігається зі змінним паролем, тобто сам. Це означає, що відповідь завжди так. 
                    Тому з цим кодом відповідь завжди буде «Ви можете зайти» незалежно від того, що заповнює гравець.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'password'
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
    -   level: "9"
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                            {if} book {is} yes
                    {print} 'Robin buys the book and goes home'
                    {else}
                        {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
    -   level: "10"
        sections:
        -   title: Студенти неправильно використовують команду `{for}`
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                    {print} 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
    -   level: "11"
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: "Ось правильний код:"
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    {for} banana {in} {range} 1 {to} 5
                        {print} banana
    -   level: "12"
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
                solution_text: "Ось правильний код:"
                solution_code: |-
                    score = 25
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "Ось правильний код:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: Студенти плутають `{and}` з `{or}`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {or} time {is} 'yes'
                        {print} 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {and} time {is} 'yes'
                        {print} 'Lets play!'
    -   level: "14"
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 12
                        {print} 'You are older than I am!'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name =  'Hedy'
                        {print} 'You are not Hedy'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy'
                        {print} 'You are cool!'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
    -   level: "15"
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    -   level: "16"
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'полуниця', 'шоколад'
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    морозиво = ['полуниця', 'шоколад']
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    морозиво = ('полуниця', 'шоколад')
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    морозиво = ['полуниця', 'шоколад']
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    морозиво = [полуниця, шоколад]
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    морозиво = ['полуниця', 'шоколад']
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    морозиво = [полуниця, шоколад]
                    {print} "Я люблю" морозиво навмання "морозиво"
                solution_text: "Ось правильний код:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    морозиво = [полуниця, шоколад]
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    морозиво = ['полуниця', 'шоколад']
                    {print} 'Я люблю ' icecream[{random}] 'морозиво'
    -   level: "17"
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}
                        {print} 'I like green'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: "Ось правильний код:"
                solution_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great':
                        {print} 'Me too!'
                    {elif} answer {is} 'bad':
                        {print} 'Let me cheer you up!'
                    {else}:
                        {print} 'Im great!'
    -   level: "18"
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: "{print} 'my name is Hedy!'"
                solution_text: "Ось правильний код:"
                solution_code: "{print}('мене звуть Hedy!')"
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    {print}('My name is Hedy!')
                    name = ask('What is your name?')
                    {print}('So your name is ', name)
                solution_text: "Ось правильний код:"
                solution_code: |-
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    {print}('It is ') temperature ('degrees outside')
                solution_text: "Ось правильний код:"
                solution_code: |-
                    temperature = 25
                    {print}('It is ', temperature, 'degrees outside')
home-sections:
-   title: Текстове програмування стало простіше!
    text: "Багато шкіл і вчителів у всьому світі хочуть навчити своїх учнів програмуванню. Спочатку це часто робиться за допомогою грайливих інструментів, від Робот Beeb-Bot до\nScratch Junior або Scratch. Після використання таких інструментів діти часто хочуть перейти на більш потужні, текстові мови програмування, такі як Python.\n\nPython, однак, складний, оскільки він доступний лише англійською мовою, і вимагає від учнів вивчення складних концепцій програмування та синтаксису відразу.\nHedy — це простий спосіб розпочати роботу з мовами текстового програмування! Hedy є вільною у використанні, має відкритий вихідний код і відрізняється від будь-якої іншої мови текстового програмування трьома способами.\n\n1. Hedy є багатомовним, ви можете використовувати Hedy своєю рідною мовою\n2. Хеді є поступовим, тому ви можете вивчати одну концепцію та її синтаксис за раз\n3. Hedy створено для класу, дозволяючи вчителям повністю налаштувати досвід своїх учнів"
-   title: Багатомовне програмування
    text: У той час як майже всі текстові мови програмування мають ключові слова англійською мовою, такі як `for` або `repeat`, Hedy можна використовувати будь-якою мовою! Зараз ми підтримуємо 47 різних мов, включаючи голландську, іспанську, арабську, турецьку, китайську та хінді. Якщо ваша мова недоступна, ви завжди можете почати новий переклад.
-   title: Крок за кроком навчання
    text: Вивчення мови програмування може бути надзвичайно складним, оскільки учні повинні вивчати поняття (наприклад, if-else або цикли) і синтаксис (наприклад, лапки або круглі дужки) одночасно. У Hedy поняття спочатку вводяться з невеликим синтаксисом, а потім уточнюються. Науково перевірений спосіб навчання!
-   title: Створено для класу
    text: "Hedy підходить для дітей віком від 10 років і призначений для використання в класі.\nВчителі можуть використовувати наші безкоштовні вбудовані плани уроків, але також можуть створювати власні уроки та завантажувати їх в інтерфейс користувача Hedy."
-   title: Програмування в контексті
    text: Hedy показує програмування найширше, і його можна використовувати різноманітними захоплюючими способами. Hedy дозволяє створювати цифрові та інтерактивні історії, барвисті малюнки, які можна показувати на екрані, а також малювати ручним плотером або вишивати на сорочці, а також можна використовувати для створення ігор або програм за допомогою кнопок і дій на клавіатурі.
-   title: Хеді вільна?
    text: "так! Hedy є «відкритим кодом», що означає, що кожен може допомогти нам зробити Hedy кращим.\nВи можете знайти наш код на <a href=\"https://github.com/hedyorg/hedy\" target=\"_blank\">Github</a> .\nЯкщо вам подобається Hedy і ви хочете зробити внесок, ми приймаємо (і дуже вдячні за) <a href=\"https://github.com/sponsors/hedyorg\" target=\"_blank\">пожертви</a> !"
-   title: Чи потрібно мені щось встановлювати?
    text: Ні. Hedy працює в браузері, який є програмою, яку ви використовуєте для перегляду цієї сторінки. Ймовірно, Chrome, або Edge, або Firefox. Hedy також працює на телефонах і планшетах.
-   title: Чи потрібен мені досвід програмування, щоб навчати з Hedy?
    text: "Ні, це не потрібно. Усі поняття пояснюються на слайдах та в інтерфейсі для учнів.\nЯкщо ви створюєте безкоштовний обліковий запис учителя, ви також отримуєте доступ до посібника для вчителя з інформацією про те,\nяк викладати і часто робив помилки."
start-sections:
-   title: Початок роботи з Hedy
    text: "Ласкаво просимо до Hedy, ми раді допомогти вам розпочати роботу з Hedy.\n\nУ нашому [Посібнику для вчителя] (https://www.hedy.org/for-teachers/manual) міститься детальний огляд усіх функцій, але на цій сторінці є короткий огляд, щоб ви знали, що це таке, перш ніж занурюватися.\n\nКілька основних моментів, які важливо знати:\n* Hedy — це інструмент, який допомагає керувати класом дитячого програмування! Ви можете створювати власні заняття, плани уроків і стежити за успіхами дітей.\n* Вам не потрібно знати багато програмування, якщо ви починаєте, Hedy працює крок за кроком, також для вас!\n* Ви можете використовувати Hedy своєю рідною мовою, оскільки її перекладено на багато інших мов!\n* Кожна дитина може програмувати!! Hedy особливо корисний для дітей, які мають проблеми із зором, оскільки він може читати вам матеріал вголос без використання миші.\n* Ми тут, щоб допомогти, ви можете знайти нас, наприклад, на [Discord](https://discord.gg/8yY7dEme9r) або ви можете [написати нам](hello@hedy.org)."
-   text: "Різні вчителі в усьому світі висловили свою пристрасть до Хеді, як деякі поділилися з нами:\n\n*Неймовірно надихає! Дуже хороший спосіб зробити програмування набагато доступнішим для себе, а також для студентів. Дуже весело грати і багато можливостей для використання зі студентами. Я вважаю, що це дуже гарний інструмент! Я вважаю, що це цінний спосіб для дітей почати вивчати програмування. Python і кодування завжди були дуже захоплюючими, тому що бар’єр для навчання дуже високий. Зараз усе трохи нижче, і було пояснено, що насправді це може бути дуже легко. Мені сподобалося бачити, як Хеді намагається зробити програмування максимально доступним для користувачів!*\nНідерланди: навчаються вчителі математики (середня школа)\n\n*Простий інтерфейс і гарні приклади.* Вчитель: 3-6 класи (початкова)\n\n*Багатомовне програмування та лише сама концепція поступового програмування.* США: середня школа, 6-8 класи\n\n*Поступовий характер впровадження програмування.* Австралія: Середня школа\n\n*Продовжує автоматично.* Нідерланди: 2 HAVO-VWO\n\n*І те, що пояснення може бути голландською (а код англійською), і те, що воно створює все більше і більше можливостей.* Нідерланди: група плюс класу\n\n*Але Хеді та його поступові рівні... яка ідея, я хотів особисто подякувати вам за створення цього. Я не можу вам достатньо подякувати. Крім того, я ніколи не бачив такого рівня залученості та ентузіазму моїх студентів, як я бачив у Хеді. Ми досягли рівня 5 і плануємо витратити на це ще один тиждень у класах і лабораторіях, перш ніж розпочати роботу з Python.* Пакистан\n\n* «Реальність» програмування, воно нагадує те, як воно є в реальності.* Нідерланди: плюс група класів з 4 по 8\n\n*Покрокова діяльність. Розваги.* Нідерланди: 1e Усі рівні, 2e VWO/HAVO 2e VWO +, 3e HAVO 3e VWO\n\n*Мені дуже подобається Hedy, і він також гарно налаштований, тому його добре використовувати в початковій школі. Поступовий підхід Хеді працює дуже добре. Коротке пояснення на початку кожного рівня та короткі приклади програм допомагають дітям швидко зрозуміти, що нового в обраному рівні. Різні завдання, які діти можуть вибрати, також дуже добре працюють. Ви бачите, як діти вибирають завдання, які їм подобаються, і потім вони починають з ними працювати через рівні. Hedy — чудова розвага для дітей, які добре вміють програмувати та хочуть відчути смак справжньої мови програмування. Це хороша підготовка до середньої школи, оскільки там дається більше освіти з ІКТ.* Нідерланди: школа Oegstgeest Монтессорі\n\n*Конструкція така хороша.* Нідерланди: початкова середня школа HAVO-VWO\n\n*Я можу тримати темп класу.* Нідерланди: група 7 і 8\n\n![Фелієн навчає дітей](/images/teacherfeedback/Fkids1.JPG) *Фелієн навчає дітей* ![Діти вивчають Хеді](/images/teacherfeedback/Fkids2.JPG) *Діти вивчають Хеді*"
    title: Вчителі про Хеді
