title: Hedy Dokumentation
home-sections:
-   title: Textprogrammierung leicht gemacht!
    text: |-
        Viele Schulen und Lehrpersonen auf der Welt möchten ihre Schülerinnen und Schülern im Programmieren unterrichten . Zu Beginn wird dies oft mit spielerischen Werkzeugen vom Bee-Bot-Roboter bis
        Scratch Junior oder Scratch gemacht. Nachdem sie diese Werkzeuge verwendet haben, wollen Kinder oft zu mächtigeren, textbasierten Programmiersprachen, wie Python, wechseln.

        Python ist jedoch schwierig, da es nur auf Englisch verfügbar ist und von den Lernenden das gleichzeitige Erlernen komplexer Programmierkonzepte und Syntax erfordert.
        Hedy ist der einfache Weg mit textbasierten Sprachen zu beginnen! Hedy ist kostenlos nutzbar, Open Source und in dreierlei Hinsicht anders als jede andere textbasierte Programmiersprache.

        1. Hedy ist mehrsprachig, du kannst Hedy in deiner eigenen Sprache verwenden
        2. Hedy ist graduell, daher kannst du ein Konzept und die zugehörige Syntax einzeln lernen
        3. Hedy wurde für den Unterricht entwickelt und ermöglicht es Lehrpersonen, das Erlebnis ihrer Schüler individuell zu gestalten
-   title: Mehrsprachige Programmierung
    text: Während fast alle textbasierten Programmiersprachen englische Schlüsselwörter wie `for` oder `repeat` haben, kann Hedy in jeder Sprache verwendet werden! Wir unterstützen derzeit 47 verschiedene Sprachen, darunter Niederländisch, Spanisch, Arabisch, Türkisch, Chinesisch und Hindi. Wenn deine Sprache nicht verfügbar ist, kannst du jederzeit eine neue Übersetzung starten.
-   title: Schritt für Schritt lernen
    text: Das Erlernen einer Programmiersprache kann überwältigend sein, da Lernende gleichzeitig Konzepte (zum Beispiel if-else oder Schleifen) und Syntax (wie Anführungszeichen oder runde Klammern) lernen müssen. In Hedy werden Konzepte zunächst mit wenig Syntax eingeführt und dann verfeinert. Eine wissenschaftlich erprobte Art zu lernen!
-   title: Entwickelt für den Unterricht
    text: |-
        Hedy ist für Kinder ab 10 Jahren geeignet und für den Einsatz im Klassenzimmer konzipiert.
        Lehrer können unsere kostenlosen, integrierten Unterrichtspläne nutzen, aber auch eigene Unterrichtsstunden verfassen und diese in die Hedy-Benutzeroberfläche laden.
-   title: Programmieren im Kontext
    text: Hedy zeigt das Programmieren in größtmöglichem Umfang und kann auf vielfältige, spannende Weise eingesetzt werden. Hedy ermöglicht die Erstellung digitaler und interaktiver Geschichten, farbenfroher Zeichnungen, die auf dem Bildschirm angezeigt, aber auch mit einem Stiftplotter gezeichnet oder auf ein T-Shirt gestickt werden können, und mit denen sich Spiele oder Apps mit Tasten und Tastaturaktionen erstellen lassen.
-   title: Ist Hedy kostenlos?
    text: |-
        Ja! Hedy ist "Open Source", was bedeutet, dass jede und jeder uns helfen kann, Hedy zu verbessern.
        Du kannst unseren Code auf <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a> finden.
        Falls du Hedy magst und etwas beitragen möchtest, akzeptieren wir <a href="https://github.com/sponsors/hedyorg" target="_blank">Spenden</a> (und sind sehr dankbar für)!
-   title: Muss ich etwas installieren?
    text: Nein. Hedy funktioniert im Browser, dem Programm, mit dem du diese Seite betrachtest. Wahrscheinlich Chrome oder Edge oder Firefox. Hedy funktioniert auch auf Smartphones und Tablets.
-   title: Benötige ich Programmiererfahrung, um mit Hedy zu unterrichten?
    text: |-
        Nein, das ist nicht nötig. Alle Konzepte werden in den Folien und in der Benutzeroberfläche für Lernende erklärt.
        Wenn du ein kostenloses Lehrpersonenkonto erstellst, erhältst du auch Zugriff auf das Lehrpersonenhandbuch mit Informationen zum Unterrichten
        und häufig gemachte Fehler.
join-sections:
-   title: Hedy unterstützen
    text: "# Es gibt drei Möglichkeiten, wie du Hedy unterstützen kannst!"
-   title: Die Sprache verbessern
    text: |-
        Die schrittweise und mehrsprachige Natur von Hedy bringt viele interessante technische Herausforderungen mit sich.
        Du findest diese auf <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>.
-   title: Hedy übersetzen
    text: |-
        Kein Programmierer? Kein Problem! Eine weitere Möglichkeit, Hedy zu unterstützen, besteht darin, <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">Schlüsselwörter, Fehlermeldungen, Abenteuer und andere Inhalte zu übersetzen</a>.
        Dies ist der aktuelle Status. Hilf uns, eine Sprache zu vervollständigen oder eine neue hinzuzufügen!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Übersetzungsstatus" /></a>
-   title: Lehrpersonen helfen loszulegen
    text: |-
        Hedy wurde gestaltet, um Lehrpersonen dabei zu unterstützen Programmierlektionen im Unterricht durchzuführen. Wir haben spezifische Lehrpersonen-Features, wie die Option Klassen zu erstellen, anzupassen und zu sehen wie deine Schülerinnen und Schüler sich machen.
        Falls du Hedy magst, kannst du Schulen ansprechen, um Lehrpersonen zu helfen anzufangen! Wir können dir helfen Schulen oder Lehrpersonen über unseren <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a> zu finden.
learn-more-sections:
-   title: Die Hedy Stiftung
    text: "Hedy wird verwaltet von der Hedy Stiftung (Stichting Hedy), Sportmanstaat 8, 2341 JG Oegstgeest, und ist registriert bei der niederländischen Handelskammer 94013985.\n\nDer Vorstand der Stiftung besteht aus:\n\n  * Felienne Hermans, Präsidentin\n  * Eelko Huizing, Finanzen\n  * Renée Merbis, Sekretärin\n\nDer Vorstand von Stichting Hedy erhält keine finanziellen Entschädigungen für seine Aufgaben. "
-   title: Ein tiefes Eintauchen!
    text: |-
        Möchtest du mehr über Hedys Philosophie und Design erfahren? Schau dir den Vortrag von Felienne bei der StrangeLoop Conference 2022 an:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Hedy in den Nachrichten
    text: |-
        Manche Websites und Zeitungen haben seit unserem Release im Frühjahr 2020 über Hedy geschrieben. Hier pflegen wir eine Liste:
        * [Java Magazine (Niederländisch), April 2023](images/Hedy_Javamagazine2023.pdf)
        * [Tech Optimism - A Solution to the IT Shortage (Niederländisch), August 2022](https://podcasts.apple.com/nl/podcast/techoptimisme-2-een-oplossing-voor-het-it-tekort/id1114136654?i=1000581523458)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcasts/26)
        * [Heise.de (Deutsch), Januar 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Niederländisch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanisch), Februar 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, Februar 2021](images/Hello_World_15_Hedy.pdf)
        * [DiScoro, Januar 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, Januar 2021](https://www.universiteitleiden.nl/en/news/2021/01/felienne-hermans-receives-dutch-prize-for-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanisch), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (Französisch), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Niederländisch), Oktober 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Niederländisch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Niederländisch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Getting started with Hedy
    text: |-
        Willkommen bei Hedy, wir freuen uns dir beim Loslegen zu helfen.

        Unsere [Lehranleitung](https://www.hedy.org/for-teachers/manual) enthält einen Überblick über alle Features im Detail, aber diese Seite enthält einen kurzen Überblick, damit du weißt was was ist, bevor du einsteigst.

        Einige Punkte die wichtig sind:
        * Hedy ist ein Werkzeug, das entwickelt wurde, um das Unterrichten einer Klasse von Kindern beim Programmieren zu unterstützen! Du kannst deinen eigenen Lektionen und Lehrpläne erzeugen und mitverfolgen, wie die Kinder voran kommen
        * Du musst nicht viel über Programmieren wissen, wenn du beginnst. Hedy geht auch für dich Schritt-für-Schritt vor!
        * Du kannst Hedy in deiner Muttersprache benutzen, da es in viele andere Sprachen übersetzt wurde!
        * Jedes Kind kann programmieren!! Hedy ist besonders praktisch für Kinder, die visuell beeinträchtigt sind, da Hedy das Material laut vorlesen kann ohne das man eine Maus benutzen muss
        * Wir sind hier um zu helfen, du kannst uns z.B. auf [Discord](https://discord.gg/8yY7dEme9r) finden oder du kannst uns eine [Mail schreiben](hello@hedy.org).
-   title: Was Lehrpersonen über Hedy sagen
teacher-guide:
-   title: Einführung zu Hedy
    key: intro
    subsections:
    -   title: Was ist Hedy?
        text: |-
            Hedy ist eine textuelle Programmiersprache, die speziell für (Pre-)Teens (10 bis 15 Jahre alt) entwickelt wurde.
            Im Gegensatz zu Programmiersprachen für Kinder, wie Scratch, verwendet Hedy keine Codeblöcke, sondern textuellen Code.
            Mit Hedy lernt man also, Code zu tippen, wie es echte Programmierer tun, aber in kleinen Schritten mit spielerischen Übungen.
            Auf diese Weise kann Hedy als Sprungbrett zu echten Programmiersprachen wie Python dienen, und das auf eine zugängliche und vor allem spaßige Weise!
            Wenn Sie mehr erfahren möchten, können Sie dieses <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">Video</a> über die Entwicklung von Hedy als Programmiersprache ansehen.
    -   title: Zielgruppe
        text: |-
            Hedy wurde für Schüler der Unter- und Mittelstufe entwickelt (10 – 15 Jahre).
            Es ist wichtig, dass die Schüler gut lesen können. Wir empfehlen, erst mit Hedy anzufangen, wenn die Schüler mindestens das Leseniveau der 3. Klasse erreicht haben.
            Schüler (und Lehrer!) brauchen keine Programmiererfahrung, bevor sie mit Hedy beginnen.
    -   title: Wie funktioniert Hedy?
        text: |-
            Hedy ist in Level unterteilt, in denen neue Befehle gelehrt werden. Jede Stufe enthält eine Vielzahl von Abenteuern, in denen die neu erlernten Befehle geübt werden können.
            Als Lehrer können Sie entscheiden, welche Abenteuer für Ihre Schüler zur Verfügung stehen. Werden sie in diesem Level ein Restaurant, eine Rechenmaschine oder ein Spukhaus bauen? Innerhalb jedes Levels sind die Abenteuer vom einfachsten zum schwierigsten geordnet.
            So werden Ihre Schüler immer wieder neu herausgefordert. Die Abenteuer können von den Schülern einzeln gelöst werden, oder Sie können sie in einem klassischen Unterricht einsetzen.

            Zu den Abenteuern gehört auch ein Code-Beispiel, damit auch weniger digital informierte Lehrer Hedy nutzen können!
            Natürlich ist Hedy auch für die kreativen Lehrer gedacht, die gerne ihre eigenen Unterrichtspläne und Abenteuer erstellen!

            Nachdem Sie alle Abenteuer eines bestimmten Levels programmiert haben, können Ihre Schüler ihr Wissen in einem Quiz testen.
            Sie können die Arbeit und den Fortschritt Ihrer Schüler auf der Klassenseite verfolgen.
    -   title: Geräte
        text: |-
            Hedy ist webbasiert, d.h. es funktioniert auf jedem Gerät mit einem Browser (Chrome, Firefox, Edge usw.), sodass Laptops, Chromebooks, Tablets und sogar Smartphones geeignet sind, um Hedy zu verwenden.
            Du musst nichts herunterladen, bevor du mit Hedy arbeitest, geh’ einfach auf die Website und schon kannst du loslegen!
    -   title: Die Hedy Community
        text: |-
            Alle Hedy-Lehrpersonen, Programmierer und Programmiererinnen und andere Fans sind auf unserem <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord-Server</a> willkommen. Dies ist der ideale Ort, um sich über Hedy auszutauschen: wir haben Channel, wo du deine coolen Projekte und Lektionen zeigen kannst, Channel um Fehler zu melden, und Channel um sich mit anderen Lehrpersonen und dem Hedy-Team zu unterhalten.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Hier</a> findest du ein Video darüber, wie man der Discord Community beitritt.
    -   title: Hedy und die DSGVO
-   title: Häufige Fehler
    key: häufige_fehler
    intro: |-
        Du kannst aus deinen Fehlern lernen, ganz besonders beim Programmieren! Fehler zu machen ist unausweichlich, und eine großartige Gelegenheit zum Lernen, jedoch kann es für Lehrpersonen eine Herausforderung sein den korrekten Fix für einen Fehler zu finden. Ganz besonders, wenn die Programme länger werden je weiter die Level fortschreiten. Deshalb haben wir eine Liste mit den häufigsten Fehlern und ihren Lösungen für jedes Level erstellt.
    levels:
    -   level: "1"
        sections:
        -   title: Schülerinnen und Schüler vergessen Befehle einzutippen
            example:
                error_text: Beispielsweise schreiben sie einen Satz ohne den drucke-Befehl zu benutzen.
                error_code: Hedy kann dies nicht ausgeben
                solution_text: Sag deinen Schülerinnen und Schüler eine Zeile immer mit einem Befehl zu starten.
                solution_code: "{print} Hedy kann dies drucken!"
        -   title: Schülerinnen und Schüler schreiben Befehle in Großbuchstaben
            example:
                error_text: Befehle funktionieren nicht mit Großbuchstaben.
                error_code: |-
                    Frage warum schlägt mein Code fehl?
                    Drucke Weil Ich Großbuchstaben benutze.
                solution_text: Entferne die Großbuchstaben.
                solution_code: |-
                    {ask} Warum funktioniert mein Code jetzt?
                    {print} Weil ich die Großbuchstaben entfernt habe!
        -   title: Schülerinnen und Schüler benutzen echo ohne frage
            example:
                error_text: Echo ist gemacht um Antworten wiederzugeben nachdem man sie mit dem frage-Befehl eingelesen hat. Ohne frage würde echo nichts tun.
                error_code: "{echo} Dein Name ist"
                solution_text: Füge einen frage-Befehl hinzu, um es zum Laufen zu bringen.
                solution_code: |-
                    {ask} Was ist dein Name?
                    {echo} Dein Name ist
        -   title: Schülerinnen und Schüler möchten ihr echo Wort (Variable) in der Mitte eines Satzes
            example:
                error_text: Und sie haben Recht! Deshalb werden sie im nächsten Level lernen echte Variablen zu benutzen.
                error_code: |-
                    {ask} Welche Programmiersprache macht am meisten Spaß?
                    {echo} ist die Beste!
                solution_text: "In Level 1 müssen wir es wie folgt belassen:"
                solution_code: |-
                    {ask} Welche Programmiersprache macht am meisten Spaß?
                    {echo} Die Beste ist...
        -   title: "Schildkröte: Schülerinnen und Schüler lassen die Schildkröte vom Bildschirm runter laufen"
            example:
                error_text: Schülerinnen und Schüler probieren oft große Zahlen mit der Schildkröte aus, was dazu führt, dass der Pfeil aus der Bildfläche geht.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: Im Beispiel denken die Schülerinnen und Schüler, dass der drehe-Befehl nicht funktioniert. Obwohl er dennoch funktioniert, kann man es außerhalb der Bildfläche nicht sehen. Benutze kleinere Zahlen, um zu verhindern, dass dies passiert.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Schildkröte: Schülerinnen und Schüler benutzen den Befehl rückwärts, aber der existiert nicht."
            example:
                error_text: Rückwärts ist kein Befehl.
                error_code: rückwärts 100
                solution_text: "Um die Schildkröte rückwärts gehen zu lassen, benutzt man den vorwärts-Befehl und eine negative Zahl. Zum Beispiel:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Schülerinnen und Schüler machen Tippfehler in ihren Befehlen
            example:
                error_text: Hedy kann keinen Befehl mit Tippfehler erkennen.
                error_code: prinnt Mach keine Tippfehler
                solution_text: Unterrichte deine Schülerinnen und Schüler im Lesen der Fehlermeldungen. Auf diese Weise können sie selbst herausfinden, was schiefgelaufen ist.
                solution_code: "{print} Mach keine Tippfehler"
        -   title: Schülerinnen und Schüler vergessen, dass sich der frage-Befehl geändert hat
            example:
                error_text: In diesem Level lernen Schülerinnen und Schüler Variablen kennen. Der frage-Befehl braucht ebenso eine Variable, aber Schülerinnen und Schüler vergessen dies.
                error_code: frage Was möchten Sie essen
                solution_text: In diesem Level musst du Hedy sagen, wo die Antwort gespeichert werden soll, sodass sie später benutzt werden kann. Dies nennt man eine Variable.
                solution_code: bestellung {is} Was möchten Sie essen
        -   title: Schülerinnen und Schüler versuchen den echo-Befehl zu verwenden
            example:
                error_text: Für einige Schülerinnen und Schüler könnte es frustrierend sein zu erfahren, dass der echo-Befehl nicht mehr funktioniert. Daher ist es sehr wichtig, die Vorteile der Benutzung von Variablen zu erklären. Zum Beispiel kannst du mehrere Variablen in einem Programm verwenden und du kannst sie beliebig in Sätze einbauen!
                error_code: |-
                    antwort {is} {ask} Warum funktioniert {echo} nicht mehr?!
                    {echo}
                solution_text: Benutze stattdessen eine Variable.
                solution_code: |-
                    antwort {is} {ask} Warum funktioniert {echo} nicht mehr?!
                    {print} antwort
        -   title: Schülerinnen und Schüler benutzen einen Variablennamen als normales Wort
            example:
                error_text: Im Beispiel unten wird 'Name' als Variable benutzt, aber auch als normaler Text. Die Ausgabe wird 'Hi mein Hedy ist Hedy' sein.
                error_code: |-
                    Name {is} Hedy
                    {print} Hi mein Name ist Name
                solution_text: Benutze also keine Wörter aus dem Text als Variablennamen. In Level 4 wird dies durch Anführungszeichen gelöst.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi ich bin name
        -   title: Schülerinnen und Schüler benutzen lange Variablennamen, die zwei Wörter enthalten.
            example:
                error_text: Eine Variable sollte mit einem Wort benannt werden. Du kannst einen Unterstrich verwenden, um zwei Wörter zu verbinden. Dies zählt als eins.
                error_code: gewählte Tür ist frage Welche Tür wählst du
                solution_text: Füge einen Unterstrich hinzu.
                solution_code: gewählte_tür {is} {ask} Welche Tür wählst du
        -   title: Schülerinnen und Schüler könnten zwei verschiedene Namen für die gleiche Variable verwenden
            example:
                error_text: In diesem Beispiel hat der Schüler "Pferd" und "Name" für die gleiche Variable verwendet.
                error_code: |-
                    Pferd {is} {ask} Wie heißt dein Pferd
                    {print} Dein Pferd heißt Name
                solution_text: Prüfe immer, ob die Variable durchgehend den gleichen Namen im Code hat. Kleine Unterschiede können schwer zu erkennen sein (z.B. Plural), sie werden jedoch den Code stören.
                solution_code: |-
                    Name {is} {ask} Wie heißt dein Pferd
                    {print} Dein Pferd heißt Name
    -   level: "3"
        sections:
        -   title: Schülerinnen und Schüler versuchen ganze Listen zu drucken
            example:
                error_text: Eine Liste kann nicht gedruckt werden. Du kannst nur ein Element der Liste ausgeben mit `{at}` `{random}`.
                error_code: |-
                    einkäufe {is} Äpfel, Milch, Schokolade
                    {print} einkäufe
                solution_text: Um eine Liste aller Einkäufe auszugeben, musst du sie nur nach einem `{print}`-Befehl platzieren. Sonst kannst du die Liste ausgeben, indem du `{at}` `{random}` nutzt.
                solution_code: |-
                    {print} Äpfel, Milch, Schokolade

                    oder

                    einkäufe {is} Äpfel, Milch, Schokolade
                    {print} einkäufe {at} {random}
        -   title: Schülerinnen und Schüler nutzen den Namen einer Variablen oder Liste als ganz normalen Text
            example:
                error_text: Dieses Problem ist wahrscheinlich auch in Level 2 aufgetreten. Nun kann es auch mit Listen passieren.
                error_code: |-
                    name {is} Hedy
                    {print} Hi mein Name ist name

                    oder

                    tier {is} Nashorn, Biene, Schwan
                    {print} Das beste Tier ist... tier {at} {random}
                solution_text: Verwende die Namen von Variablen oder Listen nicht in regulärem Text zur Ausgabe. In Level 4 wird dieses Problem mit Anführungszeichen gelöst.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi ich bin name

                    oder

                    tiere {is} Nashorn, Biene, Schwan
                    {print} Das beste Tier ist... tiere {at} {random}
        -   title: Schülerinnen und Schüler vergessen `{at}` `{random}`
            example:
                error_text: Wie im Beispiel
                error_code: |-
                    vögel {is} Spatz, Möwe, Rotkehlchen
                    {print} vögel random
                solution_text: Dieses Problem wird durch das Hinzufügen des Wortes at gelöst.
                solution_code: |-
                    vögel {is} Spatz, Möwe, Rotkehlchen
                    {print} vögel {at} {random}
        -   title: Schülerinnen und Schüler vergessen den `{print}` Befehl zu nutzen während sie auch den `{at}` `{random}` Befehl benutzen
            example:
                error_text: Oder manchmal schreiben sie `{at}` `{random}` an den Beginn der Zeile.
                error_code: |-
                    obst {is} Apfel, Kirsche, Banane
                    obst {at} {random}
                solution_text: Betone ggü. deinen Schülerinnen und Schülern, dass man immer drucke braucht um Text auszugeben.
                solution_code: |-
                    obst {is} Apfel, Kirsche, Banane
                    {print} obst {at} {random}
        -   title: Schülerinnen und Schüler vergessen Kommas in ihren Listen zu benutzen
            example:
                error_text: In einer Liste werden Elemente mit einem Komma getrennt.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: Nach jedem Element in deiner Liste sollte ein Komma sein
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Schülerinnen und Schüler versuchen den `{at}` `{random}` Befehl ohne eine Liste zu verwenden
            example:
                error_text: Zum Beispiel
                error_code: |-
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: Hedy kann nichts at random drucken, weil keine Liste existiert von der gewählt werden kann.
                solution_code: |-
                    clubs {is} Manchester United, FC Bayern München, FC Barcelona
                    {print} clubs {at} {random}
        -   title: Schülerinnen und Schüler versuchen add/remove ohne eine Liste zu verwenden
            example:
                error_text: Im unteren Beispiel ist "Namen" keine Liste, aber eine Variable. Du kannst nichts hinzufügen.
                error_code: |-
                    namen {is} Jake
                    dein_name {is} {ask} Wer bist du?
                    {add} dein_name {to} namen
                    {print} namen {at} {random}
                solution_text: Es muss zuerst eine Liste geben, daher musst du einen zweiten Namen hinzufügen, um aus Namen eine Liste zu machen, z.B. Amy. Wenn du Amy nicht in deiner Liste möchtest, kannst du sie sofort danach entfernen.
                solution_code: |-
                    namen {is} Jake, Amy
                    dein_name {is} {ask} Wer bist du?
                    {add} dein_name {to} namen
                    {print} namen {at} {random}
        -   title: Schülerinnen und Schüler vergessen zu/aus beim addiere/entferne zu verwenden
            example:
                error_text: Ohne zu/von funktionieren füge/entferne-Befehle nicht.
                error_code: |-
                    abenteuer {is} Geschichte, Papagei, Würfel
                    wahl {is} Welches Abenteuer gefällt dir am Besten?
                    {add} wahl
                    {remove} Würfel
                    {print} Ich mag Abenteuer {at} {random}
                solution_text: Hedy muss wissen zu welcher Liste ein Element hinzugefügt oder entfernt werden soll.
                solution_code: |-
                    Abenteuer {is} Geschichte, Papagei, Würfel
                    wahl {is} Welches Abenteuer gefällt dir am Besten?
                    füge wahl zu Abenteuer
                    entferne Würfel von Abenteuer
                    {print} Ich mag Abenteuer {at} {random}
    -   level: "4"
        sections:
        -   title: Schülerinnen und Schüler vergessen Anführungszeichen auf beiden Seiten des Textes
            example:
                error_text: In diesem Level benötigen drucke und frage Anführungszeichen. Eines vor dem Text und eines dahinter.
                error_code: |-
                    {print} Hallo
                    stimmung {is} {ask} 'Wie geht es dir?
                solution_text: Füge die richtigen Anführungszeichen hinzu.
                solution_code: |-
                    {print} 'Hallo'
                    stimmung {is} {ask} 'Wie geht es dir?'
        -   title: Schülerinnen und Schüler verwenden die falschen Anführungszeichen
            example:
                error_text: Es ist wichtig die Lektion mit einer Überprüfung zu beginnen, ob die Schülerinnen und Schüler wissen wie man einfache Anführungszeichen eintippt. Sonst könnten sie die "doppelten" oder die `schrägen` verwenden.
                error_code: |-
                    {print} `Willkommen im Restaurant`
                    essen {is} {ask} "Was möchten Sie bestellen?"
                solution_text: "Dies sind die richtigen Anführungszeichen:"
                solution_code: |-
                    {print} 'Willkommen im Restaurant'
                    essen {is} {ask} 'Was möchten Sie bestellen?'
        -   title: Schülerinnen und Schüler verwenden ein Apostroph in ihrem Text
            example:
                error_text: Ab diesem Level sind Apostrophe nicht erlaubt. Im Englischen werden sie oft benutzt, um Zusammenziehungen zu schreiben, wie z.B. you're, don't oder what's.
                error_code: "{print} 'Hedy's Restaurant darfst du nicht tippen'"
                solution_text: Du kannst die falsche Grammatik verwenden und das Apostroph einfach weglassen. Oder du kannst ` als Ersatz für das Apostroph verwenden.
                solution_code: |-
                    {print} 'Hedys ist erlaubt zu tippen'
                    {print} 'Und Hedy`s ist erlaubt'
    -   level: "5"
        sections:
        -   title: Schülerinnen und Schüler vergessen `{print}` innerhalb eines `{if}`-Befehls zu verwenden
            example:
                error_text: Schülerinnen und Schüler vergessen nach einem `{if}` oder `{else}` einen zweiten Befehl wie `{print}` oder `{ask}` zu verwenden.
                error_code: |-
                    {if} name {is} Hedy 'Großartig!'
                    {else}  Hedy {is} besser!
                solution_text: Füge den drucke-Befehl hinzu, um es zu reparieren.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Großartig!'
                    {else} {print} 'Hedy ist besser!'
        -   title: Schülerinnen und Schüler könnten zwei verschiedene Namen für die gleiche Variable verwenden
            example:
                error_text: In diesem Beispiel hat der Schüler oder die Schülerin 'Pferd' und 'Name' für die gleiche Variables benutzt.
                error_code: |-
                    Pferd {is} {ask} 'Wie heißt dein Pferd?'
                    {if} Name {is} Bonfire {print} 'cool'
                    {else} {print} 'weniger cool!'
                solution_text: Prüfe immer, ob die Variable durchgehend den gleichen Namen im Code hat. Kleine Unterschiede können schwer zu erkennen sein (z.B. Plural), sie werden jedoch den Code stören.
                solution_code: |-
                    Pferd {is} {ask} 'Wie heißt dein Pferd?'
                    {if} Pferd {is} Bonfire {print} 'cool'
                    {else} {print} 'weniger cool!'
        -   title: Schülerinnen und Schüler vergessen immer noch die Anführungszeichen auf beiden Seiten
            example:
                error_text: Programme mit falls-Befehl können sehr lang werden und Schülerinnen und Schüler tendieren dazu, die Anführungszeichen zu vergessen.
                error_code: |-
                    {if} name {is} Hedy {print} Spaß
                    {else} {print} 'bäh!
                solution_text: Benutze immer 2 Anführungszeichen in einem drucke-Befehl.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Spaß'
                    {else} {print} 'bäh!'
        -   title: Schülerinnen und Schüler nutzen Anführungszeichen um Variablennamen herum
            example:
                error_text: In diesem Level sind keine Anführungszeichen um Variablennamen herum.
                error_code: |-
                    {if}  name  {is} 'Hedy' {print} 'Spaß'
                    {else} {print} 'meh!'
                solution_text: Entferne die Anführungszeichen, um den Code zum Laufen zu kriegen.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Spaß'
                    {else} {print} 'bäh!
        -   title: Schülerinnen und Schüler verwenden lange Variablennamen bestehend aus zwei Worten
            example:
                error_text: Eine Variable sollte mit einem Wort benannt werden. Du kannst ein Apostroph verwenden, um zwei Wörter zu verbinden. Dies zählt als eins.
                error_code: gewählte Tür ist frage  Welche Tür wählst du?
                solution_text: Füge einen Unterstrich hinzu.
                solution_code: gewählte_tür {is} {ask} 'Welche Tür wählst du?'
        -   title: Schülerinnen und Schüler möchten, dass mehrere Antworten richtig sind
            example:
                error_text: Zum Beispiel lässt die Schülerin oder der Schüler Hedy all seinen Freunden sagen, dass sie lustig sind, aber anderen Klassenkameraden, dass sie es nicht sind.
                error_code: "{if} name {is} Jesse, David, Souf {print} 'Du bist lustig' {else} {print} 'Du bist nicht lustig'"
                solution_text: |-
                    Du kannst den `in` Befehl dafür verwenden. Er wird in einem höheren Level erklärt, aber er funktioniert bereits in Level 5.
                    Eine andere Lösung ist es, mehrere falls-Befehle und keinen sonst-Befehl zu verwenden. Der Nachteil ist, dass dies den anderen Mitschülern nicht sagen wird, dass sie nicht lustig sind.
                solution_code: |-
                    freunde {is} Jesse, David, Souf
                    name {is} {ask} 'Wer bist du?'
                    {if} name {in} freunde {print} 'Du bist lustig'
                    {else} {print} 'Du bist nicht lustig'

                    oder

                    name {is} {ask} 'Wer bist du?'
                    {if} name {is} Jesse {print} 'Du bist lustig'
                    {if} name {is} David {print} 'Du bist lustig'
                    {if} name {is} Souf {print} 'Du bist lustig'
        -   title: Die Schülerinnen und Schüler machen den Variablennamen zum Gleichen wie den Wert im `{if}`-Befehl
            example:
                error_text: Im Beispiel ist das Passwort 'Passwort'. Dies führt dazu, dass es immer richtig ist.
                error_code: |-
                    passwort {is} {ask} 'Was ist das Passwort?'
                    {if} passwort {is} passwort {print} 'Zugang gewährt'
                    {else} {print} 'Zugang verwehrt!'
                solution_text: Wähle einen anderen Namen für deine Variable.
                solution_code: |-
                    geheimes_passwort {is} {ask} 'Was ist das Passwort?'
                    falls geheimes_passwort {is} passwort {print} 'Zugang gewährt'
                    {else} {print} 'Zugang verwehrt!'
    -   level: "6"
        sections:
        -   title: Schülerinnen und Schüler kämpfen mit Anführungszeichen
            example:
                error_text: Einige Schüler haben Probleme damit, Anführungszeichen hinzuzufügen oder nicht. Wenn du Anführungszeichen hinzufügst, wird auf dem Ausgabebildschirm buchstäblich "5+5" angezeigt.
                error_code: "{print} '5 + 5'"
                solution_text: In diesem Code wird auf dem Ausgabebildschirm '10' ausgegeben.
                solution_code: "{print} 5 + 5"
        -   title: Schülerinnen und Schüler haben Schwierigkeiten mit dem Konzept Berechnungen mit einer Variablen durchzuführen
            example:
                error_text: "Einigen Schülerinnen und Schülern fällt es schwer, mit Variablen zu rechnen. Zeige ihnen sehr einfache Beispiele, wie z.B.:"
                error_code: |-
                    alter = {ask} 'Wie alt bist du?'
                    {print} 'Nächstes Jahr bist du ' alter + 1
                solution_text: Oder gehe noch einen Schritt weiter wie hier.
                solution_code: |-
                    preis = 0
                    {print} 'Willkommen in unserem Burger-Restaurant'
                    burger = {ask} 'Möchten Sie einen Burger?
                    falls burger = ja preis = preis + 10
                    getränk = {ask} 'Möchten Sie ein Getränk?
                    falls getränk = ja preis = preis + 4
                    {print} 'Das macht dann ' preis ' Euro bitte'
    -   level: "7"
        sections:
        -   title: Schülerinnen und Schüler vergessen ein Wort des Wiederholungsbefehls oder sie vergessen den Ausgabebefehl
            example:
                error_text: Stelle sicher, dass die Schülerinnen und Schüler wissen wie man sowohl den vollständigen Wiederholungsbefehl als auch den Ausgabebefehl verwendet.
                error_code: |-
                    {repeat} 3 {times}  Denn er ist ein toller Kerl
                    {repeat} 3 {times}  Das kann niemand leugnen!
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Schülerinnen und Schüler versuchen mehrere Zeilen zu wiederholen
            example:
                error_text: In diesem Level kannst du nur eine Zeile mehrfach wiederholen. In diesem Code wollte die Schülerin oder der Schüler 3 verschiedene Getränke ausgeben, aber es wird nicht funktionieren. Es wird die Frage 3 mal stellen und nur die letzte Antwort ausgeben.
                error_code: |-
                    {repeat} 3 {times} getränk = {ask} 'Was möchten Sie trinken?'
                    {print} getränk
                solution_text: Du solltest ins nächste Level gehen, um mehrere Zeilen wiederholen zu können. In diesem Level wirst du alles separat drucken müssen.
                solution_code: |-
                    getränk = {ask} 'Was möchten Sie trinken?'
                    {print} getränk
                    getränk = {ask} 'Was möchten Sie trinken?'
                    {print} getränk
                    getränk = {ask} 'Was möchten Sie trinken?'
                    {print} getränk
        -   title: Schülerinnen und Schüler erstellen Programme, die zu lang zum Ausführen brauchen
            example:
                error_text: In diesem Level ist es sehr leicht langen Code zu erstellen. Die Schülerinnen und Schüler dürfen keine Programme erstellen, die zu lange zum Ausführen brauchen (um unsere Server zu retten).
                error_code: "{repeat} 100 {times} {print} 'Wie oft kann ich dies wiederholen?'"
                solution_text: Stelle sicher, dass der Code nicht zu lang ist
                solution_code: "{repeat} 20 {times} {print} 'Dies ist genug'"
    -   level: "8"
        sections:
        -   title: Schülerinnen und Schüler benutzen die falsche Einrückung
            example:
                error_text: Einrückung ist ein neues Konzept in diesem Level, welches einigen Schülerinnen und Schülern schwerfällt. Stelle sicher, dass sie einige einfache Beispiele üben, bevor sie ein ganzes Programm damit erstellen.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hallo'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hallo'
        -   title: Schülerinnen und Schüler wiederholen nur 1 Zeile, obwohl sie mehrere Zeilen wiederholen wollten
            example:
                error_text: Zum Beispiel wollte die Schülerin oder der Schüler im Code unten die Getränkebestellung von 3 Leuten aufnehmen. Aber anstatt dessen hat das Programm 3 mal gefragt, aber nur eine Bestellung aufgeschrieben.
                error_code: |-
                    {repeat} 3 {times}
                        getränk = {ask} 'Was möchten Sie trinken?'
                    {print} getränk
                solution_text: |-
                    Im korrekten Code beginnt die dritte Zeile auch mit Einrückung. Auf diese Weise gehört sie zum wiederhole-Block und wird daher 3 mal wiederholt.
                    Zeige deinen Schülerinnen und Schülern diese Unterschiede, um ihnen dabei zu helfen zu verstehen, warum wir Einrückung brauchen, um unsere Programme zum Laufen zu bringen.
                solution_code: |-
                    {repeat} 3 {times}
                        getränk = {ask} 'Was möchten Sie trinken?'
                        {print} getränk
        -   title: Schülerinnen und Schüler möchten `{if}`-Befehle verschachteln oder `{if}` in eine Schleife packen
            example:
                error_text: |-
                    In diesem Level dürfen die Schülerinnen und Schüler noch keine `{if}`-Befehle in andere `{if}`-Befehle oder Wiederholungsschleifen stecken.
                    Im nächsten Level ist dies erlaubt.
                error_code: |-
                    geburtstag = {ask} 'Hast du Geburtstag?'
                    {if} geburtstag = ja
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: "Dies ist der korrekte Code für dieses Level:"
                solution_code: |-
                    geburtstag = {ask} 'Hast du Geburtstag?'
                    {if} geburtstag = ja
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Schülerinnen und Schüler erstellen Programme, die zu lang zum Ausführen brauchen
            example:
                error_text: In diesem Level ist es sehr leicht lang laufende Programme zu erstellen. Den Schülerinnen und Schülern ist es nicht erlaubt lang laufende Programme zu erstellen (um unsere Server zu retten).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'Wie oft kann ich dies wiederholen?'
                solution_text: Stelle sicher, dass die Programme nicht zu lange laufen
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'Dies ist genug'
        -   title: Die Schülerinnen und Schüler nutzen den `{if}`-Befehl, um zu prüfen, ob der Variablenwert das Gleiche ist wie der Variablenname
            example:
                error_text: |-
                    Wir haben diesen Fehler bei einigen unserer Schülerinnen und Schüler gesehen. Sie erstellen ein Passwort für ihren Computer, verwenden als Passwort jedoch 'Passwort'.
                    In Zeile 2 wird der Computer beauftragt zu prüfen, ob die Variable passwort das Gleiche ist wie die Variable passwort, also sich selbst. Was bedeutet, dass die Antwort immer ja ist.
                    Also wird mit diesem Code die Antwort immer 'Du kannst reinkommen' sein, was auch immer der Spieler einträgt.
                error_code: |-
                    passwort {is} {ask} 'Was ist das Passwort?'
                    {if} passwort {is} passwort
                        {print} 'Du kannst reinkommen'
                    {else}
                        {print} 'Du hast keine Erlaubnis'
                solution_text: Du kannst diesen Fehler beheben, indem du Anführungszeichen hinzufügst. Auf diese Weise weiß der Computer, dass das zweite Passwort eine Zeichenkette (also normaler Text) ist und kein Variablenname.
                solution_code: |-
                    passwort {is} {ask} 'Was ist das Passwort?'
                    {if} passwort {is} 'passwort'
                        {print} 'Du kannst reinkommen'
                    {else}
                        {print} 'Du hast keine Erlaubnis'
    -   level: "9"
        sections:
        -   title: Schülerinnen und Schüler machen Fehler bei der Einrückung
            example:
                error_text: Der schwerste Teil an diesem Level ist, die Einrückung hinzubekommen. Schülerinnen und Schüler lieben es, `{if}`-Befehle zu verschachteln, manchmal sogar innerhalb anderer verschachtelter `{if}`-Befehle. Mit der Einrückung Schritt zu halten kann ziemlich schwer sein.
                error_code: |-
                    {print} 'Robin geht in die Stadt'
                    ort = {ask} 'Geht Robin in den Laden, oder geht sie nach Hause?'
                    {if} ort {is} Laden
                        {print} 'Sie betritt den Laden.'
                        {print} 'Robin sieht ein interessant aussehendes Buch'
                        buch = {ask} 'Kauft Robin das Buch?'
                            {if} buch {is} ja
                    {print} 'Robin kauft das Buch und geht nach Hause'
                    {else}
                        {print} 'Robin verlässt den Laden und geht nach Hause'
                    {else}
                        {print} 'Robin geht nach Hause'
                solution_text: Dies ist der korrekte Code. Versuche all die verschiedenen Konstruktionen im Blick zu behalten, wenn du `{if}`-Befehle in andere `{if}`-Befehle steckst.
                solution_code: |-
                    {print} 'Robin geht in die Stadt'
                    ort = {ask} 'Geht Robin in den Laden, oder geht sie nach Hause?'
                    {if} ort {is} Laden
                        {print} 'Sie betritt den Laden.'
                        {print} 'Robin sieht ein interessant aussehendes Buch'
                        buch = {ask} 'Kauft Robin das Buch?'
                        {if} buch {is} ja
                            {print} 'Robin kauft das Buch und geht nach Hause'
                        {else}
                            {print} 'Robin verlässt den Laden und geht nach Hause'
                    {else}
                        {print} 'Robin geht nach Hause'
    -   level: "10"
        sections:
        -   title: Schülerinnen und Schüler benutzen den für-Befehl nicht richtig
            example:
                error_text: Wir sehen oft, dass die Schülerinnen und Schüler versuchen die Liste (in diesem Beispiel tiere) auszugeben, anstatt die Elemente in der Liste auszugeben.
                error_code: |-
                    tiere {is} Hund, Katze, Blobfisch
                    {for} tier {in} tiere
                      {print} 'Ich liebe ' tiere
                solution_text: Das Wort tiere in der letzten Zeile sollte zu tier geändert werden.
                solution_code: |-
                    tiere {is} Hund, Katze, Blobfisch
                    {for} tier {in} tiere
                      {print} 'Ich liebe ' tier
        -   title: Schülerinnen und Schüler vergessen die Einrückung
            example:
                error_text: Schülerinnen und Schüler tendieren dazu nach einem für-Befehl die Einrückung zu vergessen.
                error_code: |-
                    tiere {is} Hund, Katze, Blobfisch
                    {for} tier {in} tiere
                    {print} 'Ich liebe ' tiere
                solution_text: Du solltest nach einem für-Befehl Einrückung benutzen.
                solution_code: |-
                    tiere {is} Hund, Katze, Blobfisch
                    {for} tier {in} tiere
                      {print} 'Ich liebe ' tier
    -   level: "11"
        sections:
        -   title: Schülerinnen und Schüler vergessen Einrückung zu benutzen
            example:
                error_text: Stelle sicher, dass die Schülerinnen und Schüler Einrückung verwenden.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Schülerinnen und Schüler verstehen das i nicht
            example:
                error_text: |-
                    Manche Schülerinnen und Schüler verstehen nicht, dass i eine Variable ist. i wurde gewählt, weil es in Python-Programmen verwendet wird, aber du könntest genauso gut auch einen anderen Variablennamen verwenden.
                    Zum Beispiel, dieser Code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Könnte genauso gut mit diesem Code ersetzt werden. Es funktioniert genauso.
                solution_code: |-
                    {for} banane {in} {range} 1 {to} 5
                        {print} banane
    -   level: "12"
        sections:
        -   title: Schülerinnen und Schüler vergessen Anführungszeichen
            example:
                error_text: Schülerinnen und Schüler brauchen nun mehr Anführungszeichen als in vorigen Leveln. In diesem Beispiel wurden Anführungszeichen in der Liste und im `{if}`-Befehl vergessen.
                error_code: |-
                    superhelden = Spiderman, Batman, Iron Man
                    superheld = superhelden {at} {random}
                    {if} superheld = Batman
                        {print} 'IM BATMAN!'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    superhelden = 'Spiderman', 'Batman', 'Iron Man'
                    superheld = superhelden {at} {random}
                    {if} superheld {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Schülerinnen und Schüler nutzen Anführungszeichen bei Zahlen, die sie für Berechnungen verwenden wollen
            example:
                error_text: |-
                    Du kannst Anführungszeichen um Zahlen verwenden, aber nur falls du möchtest, dass der Computer denkt, dass es Text ist. Dies bedeutet, dass du keine Berechnungen mit den Zahlen machen kannst.
                    Im Beispiel unten kannst du keine Berechnungen mit der Zahl 25 machen, weil sie in Anführungszeichen steht.
                error_code: |-
                    punkte = '25'
                    antwort {is} {ask} 'Möchtest du einen Punkt?'
                    {if} antwort {is} 'ja'
                        punkte = punkte + 1
                        {print} punkte
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    punkte = 25
                    antwort {is} {ask} 'Möchtest du einen Punkt?'
                    {if} antwort {is} 'ja'
                        punkte = punkte + 1
                        {print} punkte
        -   title: Schülerinnen und Schüler verwenden Kommas anstatt Punkte in Dezimalzahlen
            example:
                error_text: Ab diesem Level können Dezimalzahlen benutzt werden, jedoch kannst du keine Kommas verwenden.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "Dies ist der korrekte Code:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: Schülerinnen und Schüler verwechseln `und` mit `oder`
            example:
                error_text: Beide Befehle können ähnlich erscheinen, aber ihre Funktion ist sehr verschieden.
                error_code: |-
                    spiel {is} {ask} 'Möchtest du ein Spiel spielen?'
                    zeit {is} {ask} 'Hast du Zeit zum Spielen?'
                    {if} spiel {is} 'ja' {or} zeit {is} 'ja'
                        {print} 'Lass uns spielen!'
                solution_text: In diesem Fall soll die Person auf beide Fragen mit ja antworten, also solltest du `und` benutzen.
                solution_code: |-
                    spiel {is} {ask} 'Möchtest du ein Spiel spielen?'
                    zeit {is} {ask} 'Hast du Zeit zum Spielen?'
                    {if} spiel {is} 'ja' {and} zeit {is} 'ja'
                        {print} 'Lass uns spielen!'
    -   level: "14"
        sections:
        -   title: Schülerinnen und Schüler verwechseln die < und > Zeichen
            example:
                error_text: Oft kennen die Schülerinnen und Schüler diese Zeichen bereits aus dem Mathematikunterricht. Aber, falls deine Schülerinnen und Schüler diese Zeichen noch nicht kennen, könnte es eine Hürde darstellen.
                error_code: |-
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter < 12
                        {print} 'Du bist älter als ich!'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter > 12
                        {print} 'Du bist älter als ich!'
        -   title: Schülerinnen und Schüler verwenden oft die falschen Zeichen für `!=` `<=` und `>=`
            example:
                error_text: Diese Zeichen sind möglicherweise für die meisten Schülerinnen und Schüler neu. Stelle sicher, dass du diese Zeichen deinen Schülerinnen und Schülern erklärst.
                error_code: |-
                    name = {ask} 'Wie heißt du?'
                    {if} name =  'Hedy'
                        {print} 'Du bist nicht Hedy'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    name = {ask} 'Wie heißt du?'
                    {if} name != 'Hedy'
                        {print} 'Du bist nicht Hedy'
        -   title: Schülerinnen und Schüler vergessen das == Zeichen zu benutzen
            example:
                error_text: In diesem Level dürfen Schülerinnen und Schüler weiterhin = oder ist benutzen. Aber in anderen Leveln oder in Python werden sie damit in Schwierigkeiten geraten. Also ist es besser, sie zu trainieren es zu benutzen.
                error_code: |-
                    name = {ask} 'Wie heißt du?'
                    {if} name = 'Hedy'
                        {print} 'Du bist cool!'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    name = {ask} 'Wie heißt du?'
                    {if} name == 'Hedy'
                        {print} 'Du bist cool!'
    -   level: "15"
        sections:
        -   title: Schülerinnen und Schüler vergessen die Einrückung in der Wiederholungsschleife
            example:
                error_text: Einrückung ist oft schwer für Schülerinnen und Schüler.
                error_code: |-
                    antwort = 0
                    {while} antwort != 25
                    antwort = {ask} 'Was ist 5 mal 5?'
                    {print} 'Eine richtige Antwort wurde gegeben'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    antwort = 0
                    {while} antwort != 25
                        antwort = {ask} 'Was ist 5 mal 5?'
                    {print} 'Eine richtige Antwort wurde gegeben'
    -   level: "16"
        sections:
        -   title: Schülerinnen und Schüler vergessen die Klammern
            example:
                error_text: Ab diesem Level sollten Listen in Klammern stehen.
                error_code: |-
                    eis = 'Erdbeer', 'Schokoladen'
                    {print} 'Ich liebe ' eis[{random}] 'eis'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    {print} 'Ich liebe ' eis[{random}] 'eis'
        -   title: Schülerinnen und Schüler benutzen die falschen Klammern
            example:
                error_text: Ab diesem Level sollten Listen in Klammern stehen.
                error_code: |-
                    eis = ('Erdbeer', 'Schokoladen')
                    {print} 'Ich liebe ' eis[{random}] 'eis'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    {print} 'Ich liebe ' eis[{random}] 'eis'
        -   title: Schülerinnen und Schüler vergessen die Anführungszeichen während sie sich auf die Klammern konzentrieren
            example:
                error_text: Schülerinnen und Schüler konzentrieren sich manchmal sehr auf den neuen Aspekt der Syntax, sodass sie die Anführungszeichen vergessen.
                error_code: |-
                    eis = [Erdbeer, Schokoladen]
                    {print} 'Ich liebe ' icecream[{random}] 'eis'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    {print} 'Ich liebe ' icecream[{random}] 'eis'
        -   title: Schülerinnen und Schüler verwenden immer noch den alten at random Befehl
            example:
                error_text: Schülerinnen und Schüler konzentrieren sich manchmal sehr auf den neuen Aspekt der Syntax, sodass sie die Anführungszeichen vergessen.
                error_code: |-
                    eis = [Erdbeer, Schokoladen]
                    {print} 'Ich liebe ' eis at random 'eis'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    {print} 'Ich liebe ' eis[{random}] 'eis'
        -   title: Schülerinnen und Schüler vergessen die Anführungszeichen während sie sich auf die Klammern konzentrieren
            example:
                error_text: Schülerinnen und Schüler sind manchmal sehr auf die neuen Aspekte der Syntax konzentriert, sodass sie die Anführungszeichen vergessen.
                error_code: |-
                    eis = [Erdbeer, Schokoladen]
                    {print} 'Ich liebe ' eis[{random}] 'eis'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    {print} 'Ich liebe ' eis[{random}] 'eis'
    -   level: "17"
        sections:
        -   title: Schülerinnen und Schüler benutzen `{elif}` wie `{else}`, also ohne Bedingung
            example:
                error_text: Der `{elif}` Befehl benötigt eine Bedingung dahinter. Er kann nicht wie `{else}` benutzt werden, ohne Bedingung.
                error_code: |-
                    farbe = {ask} 'Was ist deine Lieblingsfarbe?'
                    {falls} farbe == 'grün':
                        {print} 'Grün ist nett'
                    {elif}:
                        {print} 'Ich mag grün'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    farbe = {ask} 'Was ist deine Lieblingsfarbe?'
                    {if} farbe == 'grün':
                        {print} 'grün ist nett'
                    {elif} farbe == gelb:
                        {print} 'gelb ist OK'
                    {else}:
                        {print} 'Ich mag grün'
        -   title: Schülerinnen und Schüler vergessen den Doppelpunkt
            example:
                error_text: Nach jedem Befehl der Einrückung verlangt, sollte ein Doppelpunkt verwendet werden.
                error_code: |-
                    antwort = {ask} 'Wie geht es dir?'
                    {if} antwort {is} 'großartig'
                        {print} 'Ich auch!'
                    {elif} antwort {is} 'schlecht'
                        {print} 'Lass mich dich aufheitern!'
                    {else}
                        {print} 'Großartig!'
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    antwort = {ask} 'Wie geht es dir?'
                    {if} antwort {is} 'großartig':
                        {print} 'Ich auch!'
                    {elif} antwort {is} 'schlecht':
                        {print} 'Lass mich dich aufheitern!'
                    {else}:
                        {print} 'Großartig!'
    -   level: "18"
        sections:
        -   title: Schülerinnen und Schüler vergessen die Klammern
            example:
                error_text: Schülerinnen und Schüler vergessen Klammern um ihren Text zu setzen.
                error_code: "{print} 'mein Name ist Hedy!'"
                solution_text: "Dies ist der korrekte Code:"
                solution_code: "{print}('mein Name ist Hedy!')"
        -   title: Schülerinnen und Schüler verwenden weiterhin den frage-Befehl
            example:
                error_text: Der frage-Befehl wurde seit Level 1 benutzt. Also könnte es schwierig für die Schülerinnen und Schüler sein zu input anstelle von frage zu wechseln.
                error_code: |-
                    {print}('Mein Name ist Hedy!')
                    name = frage('Was ist dein Name?')
                    {print}('Also ist dein Name ', name)
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    {print}('Mein Name ist Hedy!')
                    name = {input}('Was ist dein Name?')
                    {print}('Also ist dein Name ', name)
        -   title: Schülerinnen und Schüler könnten die Klammern als Anführungszeichen verwenden
            example:
                error_text: Sie haben gelernt die Variablen außerhalb der Anführungszeichen zu halten, also könnten sie das Gleiche mit den Klammern tun. Was nicht der richtige Weg ist sie zu benutzen.
                error_code: |-
                    temperatur = 25
                    {print}('Es ist ') temperatur ('Grad draußen')
                solution_text: "Dies ist der korrekte Code:"
                solution_code: |-
                    temperatur = 25
                    {print}('Es ist ', temperatur, 'Grad draußen')
