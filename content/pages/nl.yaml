title: Hedy documentatie
home-sections:
-   title: Makkelijk leren programmeren!
    text: |-
        Veel scholen leren hun leerlingen al programmeren, in eerste instantie vaak met de Beebot of met Scratch, maar richting de bovenbouw van de basisschool en de
        onderbouw van de middelbare school zijn leerlingen toe aan een taal met tekstcodes zoals Python.

        Maar leren programmeren met Python of andere teksttalen is moeilijk, omdat de codes in het Engels zijn en
        omdat je veel tegelijk moet leren. Hedy is dan dé oplossing! Gratis te gebruiken en beter dan bestaande talen om
        drie redenen.

        1. Hedy is meertalig, dus je kan in het Nederlands programmeren
        2. Hedy is gradueel, dus je leert de concepten één voor één
        3. Hedy is gemaakt voor in de klas, je kan als docent de interface gemakkelijk aanpassen voor jouw klas
-   title: Programmeren in het Nederlands
    text: De meeste teksttalen werken met Engelse codes, maar met Hedy kan je in je eigen taal programmeren, dus gewoon in het Nederlands (of Turks, of Arabisch, of één van onze andere 47 talen). Staat jouw taal nog niet op de lijst? Dan kan je altijd zelf een nieuwe vertaling beginnen.
-   title: Stap voor stap leren
    text: Leren programmeren kan soms lastig zijn omdat je tegelijk concepten moet leren (zoals een als-dan of herhaling) en de syntax van de concepten (zoals aanhalingstekens en dubbele punten). In Hedy koppelen we dat los, je leert eerst een concept met simpele syntax, en later voegen we complexere syntax toe. Een bewezen manier om te leren programmeren!
-   title: Gemaakt voor in de klas
    text: |-
        Hedy is gemaakt voor leerlingen vanaf 10, en is speciaal ontworpen om in de klas te gebruiken.
        Zo kan je gebruik maken van de ingebouwde lessenserie met slides en opdrachten, maar kan je ook je eigen lessen maken en delen met andere docenten.
-   title: Programmeren in context
    text: Hedy laat leerlingen de breedte van programmeren zien. Je kan met Hedy interactieve verhalen maken, of tekeningen maken op je scherm of om te printen met een plotter of te borduren op een shirt! Of je kan je eigen spelletjes of apps maken met knoppen en keyboard acties.
-   title: Is Hedy gratis?
    text: |-
        Ja! Hedy is naast gratis ook 'Open source', dat betekent dat iedereen die al kan programmeren, ons kan helpen om nieuwe stukjes van Hedy te maken.
        Je kunt de code vinden op <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Als je Hedy leuk vindt, dan vinden we een <a href="https://github.com/sponsors/hedyorg?locale=nl" target="_blank">donatie</a> heel fijn!
-   title: Moet ik iets installeren?
    text: Nee, Hedy werkt in je 'browser', dat is het programma waarmee je nu ook deze site bekijkt, bijv. Chrome, Edge, of Firefox. Hedy doet het ook op je telefoon of je tablet.
-   title: Heb ik programmeerkennis nodig om Hedy lessen te geven?
    text: |-
        Nee, je kan meteen starten! Alle concepten worden stap voor stap uitgelegd in de slides en in de omgeving voor leerlingen.
        En als je een gratis lerarenaccount aanvraagt krijg je meteen toegang tot de lerarenhandleiding met uitleg over hoe je een les start en
        een lijst met veelgemaakte fouten per level.
join-sections:
-   title: Meehelpen om Hedy te laten groeien
    text: "# Je kunt Hedy op drie manieren helpen!"
-   title: De Hedy taal verbeteren
    text: |-
        Omdat Hedy een graduele taal is met commando's in meerdere talen is er nog een hoop te programmeren!
        Bekijk de bijbehorende issues op onze <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>.
-   title: Hedy vertalen
    text: |-
        Ben je geen programmeur? Geen probleem! Je kan ons ook helpen door de commando's, avonturen en foutmeldingen van Hedy <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">te vertalen</a>.
        Hieronder zie je de huidige status, help ons door een taal compleet te maken of voeg een nieuwe toe.
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help docenten op weg met Hedy
    text: |-
        Hedy is gemaakt voor docenten, zodat ze makkelijk programmeerlessen kunnen geven op school. Kan jij al programmeren?
        Dan kan je misschien een school in de buurt helpen te beginnen met Hedy. Op onze <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a> kunnen we je koppelen aan docenten.
learn-more-sections:
-   title: Stichting Hedy
    text: |-
        Het Hedy plaform wordt beheerd door de Stichting Hedy, Sportmanstaat 8, 2341 JG Oegstgeest, KvK nummer 94013985.

        Het bestuur van Stichting Hedy bestaat uit:

          * Felienne Hermans, voorzitter
          * Eelko Huizing, penningmeester
          * Renée Merbis, secretaris

        Het bestuur voert haar functie op vrijwillige basis uit en ontvangt geen salaris of andere beloning voor de verrichte werkzaamheden. De bestuursleden hebben recht op een onkostenvergoeding die zijn gemaakt voor het uitoefenen van de functie. 

-   title: We duiken nog dieper!
    text: |-
        Wil je meer weten? Felienne gaf een praatje op de European Code Week 2020 (in het Engels):

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

-   title: Hedy in het nieuws
    text: |-
        Websites en nieuwsbrieven hebben geschreven over Hedy sinds onze uitgifte in begin 2020. We houden hier een lijst bij:
          * [Java Magazine 04.2023](images/Hedy_Javamagazine2023.pdf)
          * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://podcasts.apple.com/nl/podcast/techoptimisme-2-een-oplossing-voor-het-it-tekort/id1114136654?i=1000581523458)
          * [Codeweek Podcast, July 2022](https://codeweek.eu/podcasts/26)
          * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
          * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
          * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
          * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
          * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
          * [IO Magazine, April 2021](https://ict-research.nl/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
          * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
          * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
          * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
          * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.universiteitleiden.nl/en/news/2021/01/felienne-hermans-receives-dutch-prize-for-ict-research-2021)
          * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
          * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
          * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
          * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
          * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
          * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
          * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Beginnen met Hedy
    text: |-
        Welkom bij Hedy, wij zijn blij jouw te helpen met het starten met Hedy.

        Onze [Leraren Handleiding](https://www.hedy.org/for-teachers/manual) heeft een overzicht van alle mogelijkheden in detail, echter deze pagina heeft een beknopte versie zodat je dat weet wat het is voordat je er in duikt. 

        Een paar hoogtepunten die belangrijk zijn om te weten: 
        * Hedy is een instrument ontworpen om het managen van een klas met kinderen die programmeren! Jij kan je eigen lessen creëren, lesplannen en volgen hoe kinderen het doen. 
        * Jij hoeft niet veel te weten over programmeren als je er mee begint, Heby werkt voor stap voor stap, ook voor jou!
        * Jij kunt Hedy in jouw eigen moedertaal gebruiken, omdat het vertaald is in heel veel talen.
        * Ieder kind kan programmeren!! Hedy is speciaal behulpzaam voor kinderen met visuele beperkingen omdat het allemaal hardop kan oplezen, zonder de noodzaak van het gebruik van een muis..
        * Wij zijn hier om te helpen, je kunt ons vinden bijvoorbeeld op [Discord](https://discord.gg/8yY7dEme9r) of je kan [mail-ons](hello@hedy.org).
-   title: Leraren over Hedy
    text: |-
        Een tijdje geleden hebben we een enquête onder leraren gehouden.
        We vroegen naar ideeën voor verbetering en Hedy's beste eigenschappen.
        Hieronder een aantal van de antwoorden:

        Simpele interface en goede voorbeelden. *(NL): groep 6-8*

        Meertalig programmeren en het hele graduele programmeren zelf. *(US) middelbare school*

        Het graduele introduceren van programmeren. *(Australië) middelbare school*

        De constructie is zo goed! *(NL) onderbouw HAVO-VWO*

        Ik kan de klas goed volgen. *(NL) groep 7-8*

        Gaat automatisch verder. *(NL) 2 HAVO-VWO*

        Zowel dat de uitleg in het NL kan (en code in EN) en dat het opbouwt in mogelijkheden.
        *(NL) plus klas groep 7*

        De 'echtheid' van programmeren, het lijkt op de realiteit. *(NL) plus klas groep 4-8*

        Stap voor stap activiteiten. Leuke activiteiten. *(NL) 1-3 HAVO-VWO*

        Hedy en haar graduele levels.... wat een idee!
        Ik wil jullie persoonlijk bedanken voor het maken hiervan. Ik kan jullie niet genoeg danken. Ik heb nog nooit zoveel enthousiasme in mijn klas gezien,
        als met Hedy. We zijn tot level 5 gegaan en zijn van plan nog een extra week in de klas en labs door te gaan voordat we overstappen op Python.
        *Pakistan*

        Ik vind Hedy echt heel gaaf en het is mooi qua opzet, wat het geschikt maakt voor basisonderwijs.
        Hedy's graduele concept werkt heel goed.
        De korte uitleg aan het begin van ieder level en de korte voorbeeldjes helpen de kinderen snel op weg met de nieuwigheden in het level.
        De verschillende avonturen die ze kunnen kiezen werken erg goed.
        Je ziet de kinderen de avonturen kiezen die ze aanspreekt en ze werken daarmee door de levels.
        Hedy is erg leuk voor kinderen die al goed zijn in programmeren en die een voorproefje willen van echt programmeren.
        Het is een goede voorbereiding op voortgezet onderwijs als daar meer ICT wordt onderwezen.
        *(NL) Montessori school*

        <img width="500px" src="static/images/teacherfeedback/Fkids1.JPG"></img>
teacher-guide:
-   title: Introductie Hedy
    key: intro
    subsections:
    -   title: Wat is Hedy?
        text: |-
            Hedy is een tekstuele programmeertaal speciaal ontwikkeld voor jongeren.
            In tegenstelling tot andere programmeertalen voor kinderen zoals Scratch, maakt Hedy geen gebruik van codeblokken, maar is het een tekstuele programmeertaal.
            Met Hedy leer je dus codes typen zoals de echte programmeurs dat doen, maar in kleine stapjes en met speelse opdrachten.
            Daarnaast kun je met Hedy programmeren in je eigen voorkeurstaal. Je kunt dus kiezen voor Nederlandse commando's!
            Zo functioneert Hedy als opstapje naar de talen zoals Python op een laagdrempelige en vooral leuke manier!
            Hier vind je een (Engelstalige) <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video</a> over hoe Hedy tot stand is gekomen.
    -   title: Doelgroep
        text: |-
            Hedy is ontwikkeld met het oog op kinderen in de bovenbouw van de basisschool en de onderbouw van het voortgezet onderwijs.
            Het is belangrijk dat de leerlingen goed kunnen lezen, dus AVI-M5 is wel een vereiste.
            De leerlingen (en leraren!) hoeven geen programmeerervaring te hebben om met Hedy aan de slag te kunnen.
    -   title: Hoe werkt Hedy?
        text: Hier vind je een <a href="https://www.youtube.com/watch?v=CvButplmN64" target="_blank">introductievideo</a> over Hedy, waarin Felienne de basis uitlegt.
    -   title: Apparaten
        text: |-
            Hedy werkt via internet en werkt op alle apparaten waar een browser (Google Chrome, Firefox, Edge etc) op staat, dus laptops, Chromebooks, tablets en telefoons zijn allemaal geschikt.
            Je hoeft niets te downloaden om met Hedy te kunnen werken, ga gewoon naar de website en dan ben je er al helemaal klaar voor!
    -   title: De Hedy Community
        text: |-
            Alle Hedy leerkrachten, programmeurs en andere fans zijn welkom op onze <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord server</a>. Dit is een goede plek om te praten over Hedy: We hebben kanalen waar je gave projecten en lesideeën kunt laten zien, kanalen om fouten (bugs) te melden en kanalen om te kletsen met andere leerkrachten en het Hedy team.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Hier</a> vind je een (Engelstalige) video over hoe jij je kunt aansluiten bij onze community.
    -   title: Hedy en de AVG
        text: |-
            Organisaties in de EU zijn verplicht zich te houden aan de AVG (Algemene Verordening Gegevensbescherming) indien persoonsgegevens verwerkt worden. 

            Omdat dat voor veel scholen een complex vraagstuk is, kun je alle programmeer-functionaliteiten van Hedy gebruiken zonder persoonsgegevens te delen. 
            De allereenvoudigste manier hiervoor is Hedy gebruiken zonder het aanmaken van accounts voor leerkracht en leerlingen. Alle functionaliteit is dan beschikbaar, muv van personalisering van levels, het opslaan van programma's van leerlingen en het bekijken van hun voortgang. Dat is beperkend, maar er zijn scholen die Hedy op die manier inzetten.

            Een tweede manier is om als leerkracht een account aan te maken met een mailadres zonder persoonsgegevens, bijv "leraar25@email.com". Behalve een mailadres, alleen nodig voor het resetten van je wachtwoord, hoef je geen persoonsgegevens te delen als je een lerarenaccount aanmaakt.
            Vervolgens kan je met je leerkrachtenaccount ook anonieme accounts aanmaken voor leerlingen, bijv regenboog-leerling1, regenboog-leerling2 etc (zie verder: Onderwijsvoorbereidingen). Op die manier kan je alle functionaliteit van Hedy gebruiken zonder het delen van persoonsgegevens van jezelf of je leerlingen.

            Mocht dit voor jouw context niet voldoen, dan kunnen we een dan kunnen we een verwerkersovereenkomst tekenen voor het verwerken van jullie persoonsgegevens.
-   title: Veelgemaakte fouten
    key: common_mistakes
    intro: |-
        Van fouten kun je leren en dat geldt al helemaal bij programmeren! Fouten maken is onvermijdelijk en helemaal niet erg, maar het kan als leerkrachten soms nog knap lastig zijn om foutjes van leerlingen op te sporen en op te lossen. Vooral als de programma's almaar langer worden, wanneer de leerlingen hogere levels bereiken. Daarom hebben wij hier per level een lijst gemaakt van de meest gemaakte fouten en de oplossingen.
    levels:
    -   level: "1"
        sections:
        -   title: Leerlingen vergeten de commando's te typen
            example:
                error_text: Zo vergeten leerlingen het print commando vaak.
                error_code: Hedy kan dit niet printen
                solution_text: Leer de leerlingen aan om altijd te beginnen met een commando.
                solution_code: "{print} Hedy kan dit wel printen!"
        -   title: Leerlingen typen commando's met hoofdletters
            example:
                error_text: Commando's werken niet als zij getypt worden met een hoofdletter.
                error_code: |-
                    Ask Waarom werkt mijn code niet?
                    Print Er moeten geen hoofdletters bij de commando's.
                solution_text: Haal de hoofdletters weg.
                solution_code: |-
                    {ask} Waarom werkt mijn code nu wel?
                    {print} Omdat ik de hoofdletters weggehaald heb!
        -   title: Leerlingen gebruiken echo zonder ask
            example:
                error_text: Het commando echo herhaalt het antwoord van een ask commando. Zonder ask werkt de echo dus niet.
                error_code: "{echo} Jouw naam is"
                solution_text: Voeg een vraag toe met een ask commando.
                solution_code: |-
                    {ask} Hoe heet jij?
                    {echo} Jouw naam is
        -   title: Leerlingen willen hun echo-woord (variabele) in het midden van de zin in plaats van aan het einde
            example:
                error_text: En groot gelijk hebben ze! Daarom leren ze in het volgende level variabelen gebruiken.
                error_code: |-
                    {ask} Wat is de leukste programmeertaal?
                    {echo} is de beste!
                solution_text: "In level 1 moeten we het hier op houden:"
                solution_code: |-
                    {ask} Wat is de leukste programmeertaal?
                    {echo} De beste is...
        -   title: "Tekenschildpad: Leerlingen laten het pijltje uit beeld lopen"
            example:
                error_text: Vaak vinden leerlingen het leuk om hoge getallen uit te testen in de turtle, waardoor het pijltje uit beeld loopt.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: Leerlingen denken dat het turn commando niet werkt, ondanks dat het doet wat het moest doen. Wat er gebeurde is dat het pijltje al buiten het beeld is gekomen. Gebruik kleinere getallen om dat te voorkomen.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Tekenschildpad: Leerlingen gebruiken het commando \"backward\", maar er is helemaal niet zo'n commando."
            example:
                error_text: Achteruit lopen doet de turtle met mingetallen. Dit kan verwarrend zijn voor leerlingen.
                error_code: backward 100
                solution_text: "Om de schildpad terug te laten gaan, gebruik het forward commando en een min-getal. Bijvoorbeeld:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Leerlingen maken spelfouten in de commando's
            example:
                error_text: Als een leerling een spelfout maakt in een commando, kan Hedy het commando niet herkennen.
                error_code: prinnt Maak geen spelfouten
                solution_text: Leer de leerlingen aan om de foutmeldingen te lezen. Deze geven namelijk aan welk woord fout gespeld is.
                solution_code: "{print} Maak geen spelfouten"
        -   title: Leerlingen vergeten dat het ask commando is veranderd
            example:
                error_text: In dit level leren de leerlingen werken met variabelen. Ook het ask commando gebruikt variabelen in dit level, wat nogal eens wordt vergeten door leerlingen.
                error_code: ask Wat wil je bestellen
                solution_text: In dit level moet je altijd aangeven waarin Hedy jouw antwoord moet opslaan, zodat je het later kunt gebruiken. Dat waarin noemt men dus een variabele.
                solution_code: bestelling {is} {ask} Wat wil je bestellen
        -   title: Leerlingen gebruiken het echo commando, wat niet werkt in level 2
            example:
                error_text: Voor sommige leerlingen kan het frusterend zijn dat het `{echo}` commando niet meer werkt. Het is daarom belangrijk om de voordelen van variabelen uit te leggen. Zo kun je bijvoorbeeld meerdere variabelen gebruiken, en kun je variabelen in een zin gebruiken, overal in een zin, meerdere variabelen, waar je maar wilt!
                error_code: |-
                    antwoord {is} {ask} Waarom werkt echo niet meer
                    echo
                solution_text: Gebruik in plaats van echo een variabele.
                solution_code: |-
                    antwoord {is} {ask} Waarom werkt echo niet meer
                    {print} antwoord
        -   title: Leerlingen gebruiken de naam van een variabele in een printcommando als woord
            example:
                error_text: In het voorbeeld hieronder wordt 'naam' gebruikt als variabele, maar ook als gewone tekst. De uitvoer van deze code wordt 'hoi mijn Hedy is Hedy', wat natuurlijk niet de bedoeling is.
                error_code: |-
                    naam {is} Hedy
                    {print} hoi mijn naam is naam
                solution_text: Gebruik daarom andere variabelenamen dan de tekst die je wil printen. In level 4 wordt dit probleem opgelost met aanhalingstekens.
                solution_code: |-
                    naam {is} Hedy
                    {print} hoi ik heet naam
        -   title: Leerlingen geven variabelen namen met meerdere woorden.
            example:
                error_text: |-
                    Je mag variabelen geen naam geven met twee woorden. Het moet altijd één woord zijn.
                    In het voorbeeld hieronder heeft een leerling de variabele bijvoorbeeld 'gekozen deur' genoemd. Dit is fout.
                error_code: gekozen deur is ask Welke deur kies jij
                solution_text: Voeg een laag streepje toe aan de variabelenaam. Zo wordt het gerekend als één woord.
                solution_code: gekozen_deur {is} {ask} Welke deur kies jij
        -   title: Leerlingen gebruiken twee verschillende namen voor dezelfde variabele
            example:
                error_text: In dit voorbeeld gebruikt een leerling bijvoorbeeld de namen 'paard' en 'naam' voor dezelfde variabele.
                error_code: |-
                    paard {is} {ask} Hoe heet jouw paard
                    {print} Jouw paard heet naam
                solution_text: Gebruik altijd dezelfde naam voor een variabele. Controleer ook of de variabelenaam enkelvoud of meervoud is, daar lees je gemakkelijk overheen (antwoord/antwoorden).
                solution_code: |-
                    naam {is} {ask} Hoe heet jouw paard
                    {print} Jouw paard heet naam
    -   level: "3"
        sections:
        -   title: Leerlingen proberen lijstjes te printen
            example:
                error_text: Een lijstje kan niet geprint worden. Je kunt wel een item uit een lijst printen met at random.
                error_code: |-
                    boodschappen {is} appels, melk, chocolade
                    {print} boodschappen
                solution_text: Om alle boodschappen te printen kun je ze gewoon achter een print commando zetten. Anders kun je het lijstje gebruiken met at random om een willekeurig item van het lijstje te printen.
                solution_code: |-
                    {print} appels, melk, chocolade

                    of

                    boodschappen {is} appels, melk, chocolade
                    {print} boodschappen {at} {random}
        -   title: Leerlingen gebruiken de naam van een variabele of lijstje in een printcommando als woord
            example:
                error_text: In het voorbeeld hieronder wordt 'naam' gebruikt als variabele, maar ook als gewone tekst. De uitveor van deze code wordt 'hoi mijn Hedy is Hedy', wat natuurlijk niet de bedoeling is.
                error_code: |-
                    naam {is} Hedy
                    {print} hoi mijn naam is naam

                    of

                    dier {is} nijlpaard, bij, zwaan
                    {print} het leukste dier is... dier {at} {random}
                solution_text: Gebruik daarom andere variabelenamen dan de tekst die je wil printen. In level 4 wordt dit probleem opgelost met aanhalingstekens.
                solution_code: |-
                    naam {is} Hedy
                    {print} hoi ik heet naam

                    of

                    dieren {is} nijlpaard, bij, zwaan
                    {print} het leukste dier is... dieren {at} {random}
        -   title: Leerlingen maken spelfouten in at random of vergeten een van de twee woorden
            example:
                error_text: Zo worden add en at soms verward. Of wordt at vergeten
                error_code: |-
                    dieren {is} hond, koe, meeuw
                    {print} dieren add random
                solution_text: Dit probleem wordt opgelost door de correcte spelling te gebruiken.
                solution_code: |-
                    dieren {is} hond, koe, meeuw
                    {print} dieren {at} {random}
        -   title: Leerlingen vergeten het print commando te gebruiken bij een at random
            example:
                error_text: Soms zetten leerlingen at random aan het begin van de zin, of ze vergeten het print commando.
                error_code: |-
                    fruit {is} appel, kers, banaan
                    fruit at random
                solution_text: Benadruk dat je Hedy iets wil laten printen, dus dat het printcommando nodig is.
                solution_code: |-
                    fruit {is} appel, kers, banaan
                    {print} fruit {at} {random}
        -   title: Leerlingen vergeten komma's in hun lijstjes
            example:
                error_text: In een lijst scheidt je de items met een komma. Als je de komma's vergeet herkent Hedy het lijstje niet.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: Na elk item in een lijst, komt er een komma
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Leerlingen proberen het `{at}` `{random}` commando te gebruiken zonder een lijst
            example:
                error_text: Zoals in het voorbeeld hieronder
                error_code: |-
                    voetbalclubs {is} Ajax
                    {print} voetbalclubs {at} {random}
                solution_text: In het voorbeeld hierboven valt er voor Hedy natuurlijk niets at random te kiezen, want er is geen lijstje gemaakt om uit te kiezen. Om at random te kunnen gebruiken is er dus echt een lijstje nodig.
                solution_code: |-
                    voetbalclubs {is} Ajax, PSV, Feyenoord
                    {print} voetbalclubs {at} {random}
        -   title: Leerlingen proberen add/remove te gebruiken zonder lijst
            example:
                error_text: In het voorbeeld hieronder is namen een variabele, maar geen lijstje. Je kunt hier dus niets aan toevoegen.
                error_code: |-
                    namen {is} Jake
                    jouw_naam {is} {ask} Hoe heet jij?
                    {add} jouw_naam {to_list} namen
                    {print} namen {at} {random}
                solution_text: Je moet dus eerst een lijstje hebben, dus moet je een tweede naam toevoegen (Amy) aan namen om het een lijstje te maken. Als je Amy niet wil gebruiken, kun je Amy wel weer verwijderen uit het lijstje met remove.
                solution_code: |-
                    namen {is} Jake, Amy
                    jouw_naam {is} {ask} Hoe heet jij?
                    {add} jouw_naam {to_list} namen
                    {print} namen {at} {random}
        -   title: Leerlingen vergeten het `{to}` of `{from}` gedeelte van `{add}` of `{remove}`
            example:
                error_text: Bij add hoort to en bij remove hoort from.
                error_code: |-
                    avonturen {is} verhaal, papegaai, dobbelsteen
                    keuze {is} {ask} Wat vind jij het leukste Hedy avontuur?
                    add keuze
                    remove dobbelsteen
                    {print} Ik hou van avonturen {at} {random}
                solution_text: Hedy moeten weten aan welk lijstje het nieuwe item moet worden toegevoegd of van welk lijstje het verwijderd moet worden.
                solution_code: |-
                    avonturen {is} verhaal, papegaai, dobbelsteen
                    keuze {is} {ask} Wat vind jij het leukste Hedy avontuur?
                    {add} keuze {to_list} avonturen
                    {remove} dobbelsteen {from} avonturen
                    {print} Ik hou van avonturen {at} {random}
    -   level: "4"
        sections:
        -   title: Leerlingen vergeten de aanhalingstekens aan beide kanten te zetten
            example:
                error_text: In dit level moeten er aanhalingstekens gezet worden bij print en ask commando's. Er moet een aanhalingsteken voor en een aanhalingsteken achter de tekst.
                error_code: |-
                    {print} Hallo
                    naam {is} {ask} 'Hoe heet jij?
                solution_text: Voeg de correcte aanhalingstekens toe.
                solution_code: |-
                    {print} 'Hallo'
                    naam {is} {ask} 'Hoe heet jij?'
        -   title: Leerlingen gebruiken de verkeerde aanhalingstekens
            example:
                error_text: Het is van belang om aan het begin van de les te demonstreren hoe je het correcte aanhalingsteken typt. Veel leerlingen weten dit teken namelijk nog niet te vinden op hun toetsenbord en kiezen dan een enkele aanhalingsteken ('') of de dubbele aanhalingstekens (""). Enkele schuine aanhalingstekens (``) zijn geen geldige aanhalingstekens op Hedy.
                error_code: |-
                    {print} `Welkom in het restaurant`
                    eten {is} {ask} "Wat wil je bestellen?"
                solution_text: "Zo gebruik je de aanhalingstekens correct:"
                solution_code: |-
                    {print} 'Welkom in het restaurant'
                    eten {is} {ask} 'Wat wil je bestellen?'
        -   title: Leerlingen gebruiken hoge komma's na een print commando
            example:
                error_text: Een hoge komma kan je niet gebruiken in een print commando. Je ziet het al aan de verkeerde verkeuring in de tekst.
                error_code: "{print} 'Er lopen twee oma's door het park'"
                solution_text: Je kunt ervoor kiezen om het woord fout te spellen door geen hoge komma te gebruiken, of je kunt de schuine komma gebruiken. Die zit linksboven naast de 1 toets op je toetsenbord.
                solution_code: |-
                    {print} 'Er lopen twee omas door het park'
                    {print} 'Er lopen twee oma`s door het park'
    -   level: "5"
        sections:
        -   title: Leerlingen vergeten het print commando in een if commando
            example:
                error_text: Nadat de leerlingen een if of else hebben gebruikt, vergeten ze vaak dat print nog steeds nodig is.
                error_code: |-
                    {if} naam {is} Hedy 'Mooi!'
                    {else}  Hedy {is} Lelijk!
                solution_text: Voeg print toe om de code kloppend te maken.
                solution_code: |-
                    {if} naam {is} Hedy {print} 'Mooi!'
                    {else} {print} 'Lelijk!'
        -   title: Leerlingen gebruiken twee verschillende namen voor dezelfde variabele
            example:
                error_text: In dit voorbeeld gebruikt een leerling bijvoorbeeld de namen 'paard' en 'naam' voor dezelfde variabele.
                error_code: |-
                    paard {is} {ask} 'Hoe heet jouw paard?'
                    {if} naam {is} Bonfire {print} 'leuk'
                    {else} {print} 'minder leuk!'
                solution_text: Gebruik altijd dezelfde naam voor een variabele. Controleer ook of de variabelenaam enkelvoud of meervoud is, daar lees je gemakkelijk overheen (antwoord/antwoorden).
                solution_code: |-
                    paard {is} {ask} 'Hoe heet jouw paard?'
                    {if} paard {is} Bonfire {print} 'leuk'
                    {else} {print} 'minder leuk!'
        -   title: Leerlingen vergeten beide aanhalingstekens bij een print commando
            example:
                error_text: Leerlingen vergeten vaak een aanhalingsteken aan het einde van hun tekst bij een print commando, vooral als dat print commando in een if commando staat.
                error_code: |-
                    {if} naam {is} Hedy {print} leuk
                    {else} {print} 'minder leuk!
                solution_text: Gebruik altijd twee aanhalingstekens per print commando, een vooraan en een achteraan.
                solution_code: |-
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!'
        -   title: Leerlingen gebruiken aanhalingstekens rond de naam van de variabele
            example:
                error_text: Er moeten (in dit level) geen aanhalingstekens om een variabele.
                error_code: |-
                    {if}  naam  {is} 'Hedy' {print} 'leuk'
                    {else} {print} 'minder leuk!'
                solution_text: Haal de aanhalingstekens weg, zodat de code werkt.
                solution_code: |-
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!
        -   title: Leerlingen geven variabelen namen bestaande uit meerdere woorden
            example:
                error_text: |-
                    In Hedy mag variabelen geen naam geven met spaties er in, of uit meerdere woorden. Een variabele moet altijd uit één woord bestaan. Leerlingen kunnen wel meerdere woorden verbinden met een liggend streepje (_), het underscore teken. Bijvoorbeeld 'gekozen_deur' (_)
                error_code: gekozen deur is ask  Welke deur kies jij?
                solution_text: Voeg een laag streepje toe aan de variabelenaam. Zo wordt het gerekend als één woord.
                solution_code: gekozen_deur {is} {ask} 'Welke deur kies jij?'
        -   title: Leerlingen willen dat bij de if meerdere antwoorden goed zijn
            example:
                error_text: Leerlingen willen vaak graag dat er meerdere antwoorden 'goed' zijn. In het voorbeeld hieronder wil de leerling bijvoorbeeld dat Hedy tegen hem en zijn vrienden zegt dat ze grappig zijn en tegen alle andere leerlingen dat ze niet grappig zijn.
                error_code: "{if} naam {is} Jesse, David, Souf {print} 'jij bent grappig' {else} {print} 'jij bent niet grappig'"
                solution_text: |-
                    Je kunt hierbij het `{in}` commando uitleggen. Dit wordt pas in latere hogere levels aangeleerd, maar werkt op level 5 wel al.
                    Een andere oplossing is om alleen `{if}` commando's te gebruiken, zonder een `{else}` commando. Het nadeel is dat Hedy zonder else commando natuurlijk geen antwoord geeft als je een andere naam hebt dan Jesse, David of Souf.
                solution_code: |-
                    vrienden {is} Jesse, David, Souf
                    naam {is} {ask} 'Wie ben jij?'
                    {if} naam {in} vrienden {print} 'leuk'
                    {else} {print} 'minder leuk'

                    of

                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Jesse {print} 'leuk'
                    {if} naam {is} David {print} 'leuk'
                    {if} naam {is} Souf {print} 'leuk'
        -   title: De leerlingen vullen bij ask hetzelfde in als bij de variabelenaam, dus de variabele wordt de zelfde waarde als de variabelenaam
            example:
                error_text: "In het voorbeeld hieronder was bijvoorbeeld het wachtwoord: 'wachtwoord'. Hedy zal hierbij altijd 'Je mag computeren!' printen."
                error_code: |-
                    wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} wachtwoord {is} wachtwoord {print} 'Je mag computeren!'
                    {else} {print} 'Verboden toegang!'
                solution_text: Kies dus een andere naam voor je variabele dan de waarde die je wil invullen.
                solution_code: |-
                    geheim_wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} geheim_wachtwoord {is} wachtwoord {print} 'Je mag er door!'
                    {else} {print} 'Verboden toegang!'
    -   level: "6"
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: In this code the output screen will print '10'.
                solution_code: "{print} 5 + 5"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:"
                error_code: |-
                    age = {ask} 'How old are you?'
                    {print} 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    {print} 'Welcome to our burger restaurant'
                    burger = {ask} 'Would you like a burger?'
                    {if} burger = yes price = price + 10
                    drink = {ask} 'Would you like a drink?'
                    {if} drink = yes price = price + 4
                    {print} 'That will be ' price ' euros please'
    -   level: "7"
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 print
                solution_text: "This is the correct code:"
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    {repeat} 3 {times} drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: "{repeat} 100 {times} {print} 'How many times can I repeat this?'"
                solution_text: Make sure the programs aren't too long
                solution_code: "{repeat} 20 {times} {print} 'This is enough'"
    -   level: "8"
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple snippets before making a whole program with it.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hello'
                solution_text: "This is the correct code:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                        {print} drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: "This is the correct code for this level:"
                solution_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'How many times can I repeat this?'
                solution_text: Make sure the programs aren't too long
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We hebben een gemeenschappelijke fout onder onze studenten gemerkt, ze proberen een programma te creëren dat een wachtwoord controleert, maar ze maken het wachtwoord 'password'.
                    In lijn 2 wordt de computer gevraagd te controleren of het variabele wachtwoord hetzelfde is als het variabele wachtwoord, dus zelf. Wat betekent dat het antwoord altijd ja is.
                    Dus met deze code is het antwoord altijd 'je kunt binnenkomen' wat de speler ook invult.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'password'
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
    -   level: "9"
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                            {if} book {is} yes
                    {print} 'Robin buys the book and goes home'
                    {else}
                        {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
    -   level: "10"
        sections:
        -   title: Leerlingen gebruiken het `{for}` commando niet correct
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                    {print} 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
    -   level: "11"
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: "This is the correct code:"
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    {for} banana {in} {range} 1 {to} 5
                        {print} banana
    -   level: "12"
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
                solution_text: "This is the correct code:"
                solution_code: |-
                    score = 25
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "This is the correct code:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: Leerlingen verwarren`{and}` met `{or}`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {or} time {is} 'yes'
                        {print} 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {and} time {is} 'yes'
                        {print} 'Lets play!'
    -   level: "14"
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 12
                        {print} 'You are older than I am!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name =  'Hedy'
                        {print} 'You are not Hedy'
                solution_text: "This is the correct code:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy'
                        {print} 'You are cool!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
    -   level: "15"
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                solution_text: "This is the correct code:"
                solution_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    -   level: "16"
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate')
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream at random ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
    -   level: "17"
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}
                        {print} 'I like green'
                solution_text: "This is the correct code:"
                solution_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great':
                        {print} 'Me too!'
                    {elif} answer {is} 'bad':
                        {print} 'Let me cheer you up!'
                    {else}:
                        {print} 'Im great!'
    -   level: "18"
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: "{print} 'my name is Hedy!'"
                solution_text: "This is the correct code:"
                solution_code: "{print}('my name is Hedy!')"
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    {print}('My name is Hedy!')
                    name = ask('What is your name?')
                    {print}('So your name is ', name)
                solution_text: "This is the correct code:"
                solution_code: |-
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    {print}('It is ') temperature ('degrees outside')
                solution_text: "This is the correct code:"
                solution_code: |-
                    temperatuur = 25
                    {print}('Het is ', temperatuur, 'graden buiten')

