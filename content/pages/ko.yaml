title: Hedy 문서
home-sections:
-   title: 텍스트 프로그래밍이 쉬워졌습니다!
    text: |-
        전세계의 많은 학교들과 선생님들은 그들의 학생들에게 프로그래밍을 가르치기를 원합니다. 처음에 이것은 종종 비봇 로봇에서 부터 시작하여 장난기 많은 도구들로 이루어집니다
        스크래치 주니어 또는 스크래치. 이러한 도구를 사용한 후 아이들은 종종 파이썬과 같은 더 강력한 텍스트 프로그래밍 언어로 이동하기를 원합니다.

        그러나 파이썬은 영어로만 제공되기 때문에 어렵고 복잡한 프로그래밍 개념과 구문을 학습자가 한 번에 학습해야 하기 때문에 어렵다.
        Hedy는 텍스트 프로그래밍 언어를 쉽게 시작할 수 있는 방법입니다! Hedy는 세 가지 면에서 자유롭게 사용할 수 있고, 오픈 소스이며, 다른 텍스트 프로그래밍 언어와는 다르게 세 가지 면에서 자유롭습니다.

        1. Hedy는 여러 언어를 사용합니다. 당신은 자신의 언어로 Hedy를 사용할 수 있습니다
        2. Hedy는 점진적이기 때문에, 당신은 한 번에 하나의 개념과 그것의 구문을 배울 수 있다
        3. Hedy는 교실을 위해 만들어졌으며, 교사들이 그들의 학생의 경험을 완전히 맞춤화할 수 있게 해준다
-   title: 다국어 프로그래밍
    text: 거의 모든 텍스트 프로그래밍 언어에 영어 키워드 for나 repeat 등이 있지만, Hedy는 모든 언어에서 사용할 수 있습니다! 현재 네덜란드어, 스페인어, 아랍어, 터키어, 중국어, 힌디어 등 47개 언어를 지원하고 있습니다. 여러분의 언어를 사용할 수 없는 경우 언제든지 번역을 시작할 수 있습니다.
-   title: 차근 차근 배우기
    text: "학생들에게 프로그래밍 개념(예: if-else 또는 루프)과 구문(예: 따옴표 또는 둥근 괄호)을 동시에 알려줘야 하기 때문에 프로그래밍 언어를 가르치기 어려울 수 있습니다. 반면 Hedy는 비교적 간단한 문법으로 시작하여 점차 정교해집니다. 과학적으로 입증된 교육 방법이죠!"
-   title: 수업을 위해 만든 언어
    text: |-
        Hedy는 10세 이상의 아이들에게 적합하며 수업에서 사용할 수 있도록 설계되었습니다.
        교사들은 무료로 기본 제공되는 수업 계획서를 사용할 수도 있지만, 직접 수업을 설계해서 Hedy 사용자 인터페이스에 로드할 수도 있습니다.
-   title: 상황에 맞는 프로그래밍
    text: Hedy는 가능한 한 가장 넓은 방식으로 프로그래밍을 보여주며, 다양하고 흥미로운 방식으로 사용될 수 있습니다. Hedy는 디지털 반응형 이야기, 화면에 보여질 수 있지만 펜 플로터로 그릴 수도 있고 셔츠에 자수를 놓을 수도 있는 다양한 그림의 창조를 가능하게 하며, 버튼과 키보드 동작으로 게임이나 앱을 만드는 데 사용될 수 있습니다.
-   title: Hedy는 무료인가요?
    text: |-
        네! Hedy는 '오픈 소스'이므로, 누구나 Hedy를 더 나아질 수 있도록 도와주실 수 있습니다.
        저희 코드는 <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>에서 찾으실 수 있습니다.
        Hedy를 좋아하시고 후원하기를 원하신다면 저희는 소정의 <a href="https://github.com/sponsors/hedyorg" target="_blank">후원금</a>을 받고 있습니다 (그리고 정말로 감사드립니다)!
-   title: 프로그램을 설치해야 하나요?
    text: 아니요. Hedy는 브라우저에서 동작 하는데, 이것은 여러분이 이 페이지를 보는 데 사용하고 있는 프로그램입니다. 대부분 Chrome이나 Edge 또는 Firefox일 것입니다. Hedy는 핸드폰과 태블릿에서도 사용 가능 합니다.
-   title: Hedy와 함께 수업하려면 프로그래밍 경험이 필요한가요?
    text: |-
        아니요, 경험은 필요 없습니다. 모든 개념은 학습자를 위한 슬라이드와 인터페이스에서 설명됩니다.
        무료 교사용 계정을 만들면 선생님용 설명서에서 수업 방법과 흔히 하는 실수에 대한 정보를 얻을 수 있습니다.
join-sections:
-   title: Hedy 지원하기
    text: "# Hedy를 지원할 수 있는 방법은 세 가지가 있습니다!"
-   title: 언어 향상
    text: |-
        Hedy의 점진적이고 다언어적인 특성은 많은 흥미로운 기술적인 도전들을 만든다.
        이슈를 발견하면 <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>로 알려주세요.
-   title: Hedy 번역
    text: |-
        프로그래머 아니에요? 문제없어요! Hedy를 지원하는 또 다른 방법은 <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">키워드, 오류 메시지, 모험</a>은 다른 내용을 번역하는 것이다.
        현재 상태입니다. 언어를 완료하거나 새 언어를 추가할 수 있도록 도와주십시오!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="번역 상황" /></a>
-   title: 선생님들이 시작할 수 있도록 도와주세요
    text: |-
        Hedy는 수업시간에 프로그래밍 수업을 제공할 때 선생님들을 지원하기 위해 고안되었습니다. 우리는 수업을 만들고, 수업을 맞춤화하고, 선생님의 학생들이 어떻게 하는지 볼 수 있는 옵션과 같은 구체적인 선생님 특징들을 가지고 있습니다.
        만약 여러분이 Hedy를 좋아한다면, 선생님들이 시작하는 것을 돕기 위해 여러분이 알고 있는 학교에 연락할 수 있습니다! 우리는 <a href="https://discord.gg/8yY7dEme9r" target="_blank">discord</a>를 통해 여러분이 학교나 선생님을 찾는 것을 도울 수 있습니다.
learn-more-sections:
-   {}
-   title: 더 자세히 알아보기!
    text: |-
        Hedy의 철학과 디자인에 대해 더 알고 싶으신가요? 2022년 Felienne가 StrangeLoop Conference에서 한 강연을 확인해보세요::

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: 뉴스속의 Hedy
    text: |-
        2020년 초 Hedy가 출시된 이후 일부 웹사이트와 신문들은 Hedy에 관해 글을 써왔다. 우리는 여기에 목록을 보관하고 있다:
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Hedy와 시작하기
teacher-guide:
-   title: 소개
    key: intro
    subsections:
    -   title: Hedy는 무엇입니까?
        text: |-
            Hedy는 텍스트 프로그래밍 언어로, 10~15세 청소년을 위해 특별히 개발되었다.
            스크래치와 같은 아이들을 위한 프로그래밍 언어와는 대조적으로, Hedy는 코드 블록을 사용하지 않고 텍스트 코드를 사용한다.
            그래서 Hedy와 함께라면 실제 프로그래머들처럼 코드를 입력하는 방법을 배울 수 있을 것입니다. 하지만 작은 레벨로 장난기 많은 연습을 통해 말이죠.
            이런 방식으로 Hedy는 파이썬과 같은 실제 프로그래밍 언어를 쉽게 접근할 수 있고 대부분 재미있는 방식으로 사용할 수 있다!
            더 알고 싶다면 프로그래밍 언어로서의 Hedy의 개발 모습을 담은 <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">이 영상</a>을 보면 된다.
    -   title: 서비스를 이용하는 사용자
        text: |-
            Hedy는 중학생과 중학생(10~15세)을 염두에 두고 개발되었습니다.
            학생들이 잘 읽을 수 있도록 하는 것이 중요합니다. 학생들이 적어도 3학년 읽기 레벨을 달성하기 전에는 Hedy부터 시작하지 않을 것을 권장드립니다.
            학생들(그리고 선생님들!)은 Hedy와 함께 시작하기 전에 프로그래밍 경험이 필요하지 않습니다.
    -   title: Hedy는 어떻게 작동하나요?
        text: |-
            Hedy는 새로운 명령어를 가르치는 레벨로 나뉜다. 각 레벨에는 새로 배운 명령어를 연습하기 위한 다양한 모험이 포함되어 있다.
            선생님으로서 학생들에게 어떤 모험이 가능한지 결정하게 된다. 그들이 레스토랑, 계산기, 유령의 집을 이 레벨으로 만들 것인가? 각 레벨 내에서, 모험은 가장 쉬운 것부터 가장 어려운 것까지 배열된다.
            그래서 여러분의 학생들은 계속해서 도전을 받게 됩니다. 모험은 학생들이 개별적으로 할 수도 있고, 고전적인 수업에 사용할 수도 있습니다.

            이 모험에는 정보가 부족한 교사들도 Hedy를 사용할 수 있도록 하기 위한 코드 예시도 포함되어 있습니다!
            물론 Hedy는 또한 그들만의 수업 계획과 모험을 만드는 것을 좋아하는 창의적인 선생님들을 만족시켜요!

            특정 레벨의 모든 모험을 프로그래밍한 후 학생들은 퀴즈에서 자신의 지식을 시험할 수 있다.
            수업 페이지에서 학생들의 일과 진행 상황을 추적할 수 있습니다.
    -   title: 기기
        text: |-
            Hedy는 웹 기반이므로 브라우저가 있는 모든 디바이스(구글 크롬, 파이어폭스, 엣지 등)에서 작동하므로 노트북, 크롬북, 태블릿, 심지어 스마트폰까지 Hedy를 사용하기에 적합하다.
            Hedy와 함께 일하기 전에 아무것도 다운로드 할 필요가 없습니다. 웹사이트에 들어가시면 모든 준비가 완료됩니다!
    -   title: Hedy 커뮤니티
        text: |-
            <a href="https://discord.gg/8yY7dEme9r " target="_blank">Discord 서버</a>에 가입하신 것을 환영합니다. 이곳은 멋진 프로젝트와 교훈을 보여줄 수 있는 채널, 버그를 보고할 수 있는 채널, 그리고 다른 선생님들과 그리고 Hedy 팀과 이야기할 수 있는 채널이 있습니다.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI " target="_blank">여기서</a> 디스코드 커뮤니티 가입 방법에 대한 동영상을 확인할 수 있다.
-   title: 수업 준비
    key: preparations
    subsections:
    -   {}
    -   title: 수업 만들기
        text: |-
            교사로서 학생들을 위한 수업을 만들 수 있다. 이 수업에서 학생들의 계정과 프로그램을 볼 수 있고 학생들의 진행 상황을 관찰할 수 있다.
            <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">이 동영상</a> 은 Hedy에서 클래스를 빠르게 만드는 방법을 보여줍니다.
    -   {}
    -   {}
    -   title: 수업 커스터마이징
    -   text: |-
            To add students to your class go to the class page by clicking in the class name on the 'for teachers' page. Then click 'add students'. There are 2 ways to let your students join your class: You can create accounts for them, or they could create their own accounts.
            **학생용 계정을 만듭니다**
            여러분의 수업에 학생들을 추가하는 가장 쉬운 방법은 그들을 위한 계정을 만드는 것입니다. 이것은 '학생 계정 만들기' 버튼을 클릭하고 그들을 위한 사용자 이름과 비밀번호를 기입함으로써 이루어질 수 있습니다.
            학생들은 여러분이 선택한 사용자 이름과 비밀번호로 로그인 할 수 있습니다. 그 후에, 그들이 원한다면 사용자 이름이나 비밀번호를 바꿀 수 있고 여러분의 반에 남아있을 것입니다.
            <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">이 동영상</a>을 통해 가장 빠르고 쉬운 방법으로 학생을 수업에 추가하는 방법을 보여줍니다..

            **학생들이 직접 계정을 만듭니다**
            학생들도 독자 분이 한 것처럼, Hedy 웹사이트에 가서 자신들만의 계정을 만들 수 있습니다. 그들을 수업에 참여시키기 위해서는 단순히 초대 링크를 클릭하기만 하면 됩니다.
            수업 페이지에서 초대 링크를 찾아 학생들에게 보낼 수 있다. 학생들이 링크를 클릭할 때 반드시 Hedy에 로그인해야 원활하게 작동할 수 있음을 유의해야 한다.
            'Invite by username' 버튼을 사용하여 수동으로 학생을 수업에 초대할 수도 있습니다.
    -   title: 선호하는 언어
        text: |-
            학생들이 프로필을 만들 때 그들은 '선호하는 언어'를 선택하게 되어 있다. Hedy는 항상 이 선택된 언어로 채워질 것이다.
            이 언어를 변경하려면 나중에 '내 계정'과 '내 개인 설정'으로 다시 이동해야 합니다.

            **영어 외 사용자용**
            모험의 언어를 자신의 언어로 바꿀 수 있을 뿐만 아니라 키워드(예: '인쇄' 또는 '묻다')가 어떤 언어로 되어 있어야 하는지도 선택할 수 있다.
            이렇게 하면 학생들에게 영어 키워드로 코딩하는 법을 가르칠 수 있지만, 학생들이 자신의 언어로 프로그래밍하도록 할 수도 있습니다. 예를 들어, 네덜란드 학생들은 '질문' 대신 'vraag' 명령어를 사용할 수 있습니다.
            If a student wants to switch languages, they can click the keyword switcher. It will switch the keywords from English to the preferred language and back.
            Fun fact! Students are allowed program in both English and their own language at the same time! So, if they have trouble remembering some keywords in English, but easily remember other ones they can use both at the same time.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0b3122e6-ff22-43d7-b8b6-62f47f485293" width="100">

            **비디오**
            <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">이 동영상</a>에서는 선호 언어를 설정하고 키워드를 선호 언어로 변경하는 방법을 보여줍니다..
    -   title: 프로그램 저장중
        text: |-
            로그인하면 프로필 아이콘 옆에 내 프로그램이 표시됩니다.
            이 옵션은 학생들에게도 적용됩니다. 내 프로그램에서 작업한 모든 프로그램을 찾을 수 있습니다.
            기본적으로 프로그램은 코드를 실행할 때 10초마다 기본 이름으로 '내 프로그램'에 저장됩니다
            프로그램의 레벨(예: story 5)을 입력합니다. 프로그램을 새 이름으로 저장하려면 이름 표시줄에 새 이름을 입력합니다.
            현재 탭당 레벨당 하나의 프로그램만 저장할 수 있습니다.

            프로그램 이름 옆에 있는 공유 단추를 사용하여 프로그램을 공유할 수도 있습니다.
            이 프로그램들은 모두가 보고 사용할 수 있도록 <a href="https://hedy.org/explore" target="_blank">탐색 페이지</a>에 게시될 것입니다.
            프로그램을 공유 해제하려면 '내 프로그램'으로 이동하여 '공유 해제'를 클릭합니다.

            종이 평면 아이콘은 프로그램들을 수업의 선생님에게 전달하는데 사용될 수 있다. 전달되었던 프로그램들은 더 이상 편집 가능하지 않을 것이다.
-   title: Hedy와 수업하기
    key: teaching
    subsections:
    -   title: Hedy와 수업하기
        text: |-
            Hedy는 각각 다른 새로운 기술을 가르치는 많은 다른 레벨들을 포함하고 있다. 우리는 수업마다 한 레벨씩 가르치는 것을 추천드립니다.
            이것은 학생들에게 다음 레벨로 넘어가기 전에 새로운 명령어나 개념을 완전히 파악하고 그것을 가지고 연습할 수 있는 시간을 줍니다.
            우리는 이 구조를 수업에 사용합니다. 소개, 새로운 개념과 명령어, 어떻게 실행시키고, 퍼즐과 퀴즈 등입니다.
    -   title: 슬라이드
    -   {}
    -   title: 소개
    -   text: |-
            새로운 개념과 명령어는 일부 학생들이 완전히 이해하기 매우 어려울 수 있습니다.
            그렇기 때문에 학생들에게 새로운 명령어를 적절하게 사용할 수 있도록 모델링하는 것이 중요합니다.
            특히 일부 학생들이 프로그래밍에 대한 경험이 전혀 없는 하위 레벨에서는 새로운 추상적 개념을 이해하기 어려울 수 있다.
            예를 많이 보여주면 추상적인 개념(예: '변수란 무엇인가?')이 더 잘 인식되고 이해하기 쉬워진다('봐, 변수가 강아지로 변했다').
-   {}
-   key: features
    subsections:
    -   {}
    -   title: 실행 시켜보자
    -   {}
    -   title: 나의 업적
        text: |-
            화면 오른쪽 상단에 있는 사용자 이름을 클릭하면 내 업적으로 이동할 수 있습니다. 이 페이지에서는 <a href="https://hedycode.com/my-achievements" target="_blank">업적</a>이 수집됩니다. 학생들에게도 이러한 페이지가 있습니다.
            마우스로 배지 위를 맴돌면 배지를 획득하는 방법이 나옵니다. 배지에도 숨겨진 배지가 있는데, 배지를 획득하는 방법을 스스로 찾아봐야 합니다.
            성과에 대한 자세한 정보를 원하시면, 이 <a href="https://www.youtube.com/watch?v=-FjmKejukCs " target="_blank">비디오</a>를 확인하세요.
    -   title: 하이 스코어
        text: |-
            <a href="www.https://hedy.org/high점수s" target="_blank">이 페이지</a> 에서는 모든 Hedy 사용자들의 하이 스코어를 볼 수 있습니다.
             <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">이 비디오</a>에서 여러분은 고득점에 대해 더 많이 배울 수 있습니다.
    -   title: 디버거
        text: |-
            학생 코드가 작동하지 않는 건가요? 오류가 있는 게 분명해요! 디버거를 사용해서 그 오류를 찾을 수 있어요.
            디버거는 코딩 화면의 무당벌레 버튼입니다. 그걸 누르면 코드를 한 줄 한 줄로 실행해 실수를 찾을 수 있습니다.
            실수를 발견했습니까? 빨간색 중지 버튼을 누르면 디버거가 종료됩니다.
    -   title: 큰 소리로 읽기
        text: 프로그램의 출력을 큰 소리로 읽으시길 원하시나요? 그러면 코딩 화면의 '코드 실행' 버튼 아래에 있는 큰 소리로 읽기 기능을 사용할 수 있습니다.
    -   title: 프로그래머 모드
        text: |-
            모든 모험에 정신이 팔려있는 것일까요, 아니면 긴 프로그램을 만들고 싶나요? 그런 다음, 코딩 화면의 하단에 있는 '프로그래머 모드' 스위치를 확인하세요.
            프로그래머 모드를 사용하면 학생과 함께 더 큰 코딩 화면을 사용할 수 있습니다.
    -   title: 컨닝 페이퍼
        text: |-
            모든 레벨에는 이 이모티콘 🤔이 있는 버튼이 있다. 여러분과 여러분의 학생들은 거기서 "컨닝 페이퍼"을 찾을 수 있다. 이 컨닝 페이퍼에서 여러분은 이 레벨에서 사용할 수 있는 모든 명령어의 정확한 형태를 찾을 수 있다.
            그래서 만약 여러분이 명령어가 어떻게 작동하는지 잊어버렸다면, 그냥 컨닝 페이퍼를 엿보기만 하면 됩니다!
    -   title: 비디오
        text: <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">이 동영상</a>은 당신에게 컨닝 페이퍼와 키워드 바꾸기과 같은 Hedy의 더 많은 특징들을 보여준다.
-   {}
-   title: 연습문제에 대한 답
    key: 대답
    intro: |-
        모든 연습문제에 대한 답은 'Hedy_answers'라는 사용자 계정의 공개 프로필에서 찾을 수 있다. 우리는 종종 학생들이 자신의 창의성을 답안에 사용하도록 권장하기 때문에, 이러한 답안은 가능한 정답이 어떻게 생겼는지에 대한 지침일 뿐이다.

        'Hedy_answers' 프로필로 이동하려면, <a href="https://hedy.org/user/hedy_answers " target="_blank">여기</a>를 클릭하십시오.
-   title: 흔한 실수
    key: 흔한_실수
    intro: |-
        여러분은 특히 코딩에서 여러분의 실수로부터 배울 수 있습니다!
        실수를 하는 것은 피할 수 없는 것이고, 배울 수 있는 좋은 기회이지만, 선생님들에게는 실수에 대한 정확한 해결책을 찾는 것이 도전이 될 수 있습니다!
        특히 레벨이 올라갈수록 코드가 점점 길어지기 때문에 레벨별로 실수가 자주 발생하는 리스트와 그 해결책을 만들어 보았습니다.
    levels:
    -   level: "1"
        sections:
        -   title: 학생들이 명령어를 입력하는 것을 잊어버린다
            example:
                error_text: 예를 들어 학생들은 print 명령어를 사용하지 않고 문장을 타이핑한다.
                error_code: Hedy 이것을 print할 수 없다
                solution_text: 학생들에게 항상 명령어로 코드 줄을 시작하도록 가르쳐야 합니다.
                solution_code: "{print} Hedy는 이것을 print할 수 있다!"
        -   title: 학생들은 명령어를 처음 입력할 때 대문자를 사용하기도 한다
            example:
                error_text: 명령어가 대문자일 경우 작동하지 않습니다.
                error_code: |-
                    Ask 나의 코드가 왜 실행되지 않지?
                    Print 왜냐하면 내가 대문자를 사용했기 때문이다.
                solution_text: 대문자를 제거한다.
                solution_code: |-
                    {ask} 나의 코드가 왜 잘 실행되지?
                    {print} 왜냐하면 내가 대문자를 제거해서이다!
        -   title: 학생들은 ask 명령어 없이 echo 명령어를 사용하기도 한다
            example:
                error_text: echo 명령어는 ask 명령어 이 후에 대답을 반복하도록 되어 있다. ask 명령어를 사용하지 않으면 echo 명령어는 아무것도 할 수 없다.
                error_code: "{echo} 너의 이름은"
                solution_text: ask 명령어를 추가하여 작동시킵니다.
                solution_code: |-
                    {ask} 너의 이름은 무엇이니?
                    {echo} 나의 이름은
        -   title: 학생들은 그들의 echo 명령어로 만들어진 변수가 문장의 중간에 있기를 원한다
            example:
                error_text: 그리고 그들이 맞아요! 그래서 그들은 다음 레벨에서 적절한 변수를 사용하는 법을 배우게 될 것입니다.
                error_code: |-
                    {ask} 어떤 프로그래밍 언어가 재밌어?
                    {echo} 가장 재밌는 언어는!
                solution_text: "레벨 1에서는 이 상태를 유지해야 합니다:"
                solution_code: |-
                    {ask} 어떤 프로그래밍 언어가 재밌어?
                    {echo} 최고는...
        -   title: "거북이: 학생들은 거북이를 화면에서 걷게 했습니다"
            example:
                error_text: 학생들은 자주 거북이를 사용할 때 큰 숫자를 시도하는 것을 좋아하는데, 이것은 화살이 화면을 벗어나 걷게 만든다.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: 예를 들어, 학생들은 명령어가 작동하지 않는다고 생각하는 경향이 있습니다. 작동하더라도 화면 밖에서는 그런 현상을 볼 수 없습니다. 이런 현상이 발생하지 않도록 작은 숫자를 사용하세요.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "거북이: 학생들은 명령어를 거꾸로 사용하지만, 그런 명령어는 존재하지 않습니다"
            example:
                error_text: backward는 정확한 명령어가 아닙니다.
                error_code: backward 100
                solution_text: "거북이를 뒤로 가게 하려면 forward 명령어와 음수(마이너스)를 사용합니다. 예를 들어:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: 학생들은 가끔 잘못된 명령어를 입력한다
            example:
                error_text: Hedy는 타이핑하는 명령어를 인식하지 못한다.
                error_code: prinnt 이 문장 타이핑 하지마
                solution_text: 학생들에게 오류 메시지를 읽는 법을 가르치세요. 이 방법으로 학생들은 무엇이 잘못되었는지 스스로 알아낼 수 있습니다.
                solution_code: "{print} 이 문장 타이핑 하지마"
        -   title: 학생들은 ask 명령어가 바뀌었다는 것을 잊어버립니다
            example:
                error_text: 이 레벨에서는 학생들은 변수에 대해 배운다. ask 명령어도 변수가 필요하지만 학생들은 이것을 잊어버린다.
                error_code: ask 어떤거 드시겠어요
                solution_text: 이 레벨에서는 Hedy에게 답을 저장할 위치를 알려주어야 나중에 사용할 수 있다. 이를 변수라고 한다.
                solution_code: order {is} {ask} 어떤거 드시겠어요
        -   title: 학생들은 echo 명령어를 사용하려고 한다
            example:
                error_text: 일부 학생들에게는 echo 명령어가 더 이상 작동하지 않는다는 것을 알게 되면 실망할 수 있습니다. 그렇기 때문에 변수를 사용하는 것의 장점을 설명하는 것이 매우 중요합니다. 예를 들어, 코드에 여러 개의 변수를 사용할 수 있고, 문장에서 원하는 곳에 변수를 넣을 수 있습니다!
                error_code: |-
                    대답 {is} {ask} 왜 echo가 작동하지 않지
                    echo
                solution_text: 변수를 사용하세요.
                solution_code: |-
                    대답 {is} {ask} 왜 echo가 작동하지 않지
                    {print} 대답
        -   title: 학생들은 변수명을 사용하거나 일반적인 단어로 사용하는 경향이 있습니다
            example:
                error_text: 아래 예제에서는 '이름'이라는 단어가 변수로 사용되지만 일반 단어로도 사용됩니다. 이 코드의 출력은 '안녕 내 Hedy 은 Hedy'가 될 것입니다.
                error_code: |-
                    이름 {is} Hedy
                    {print} 안녕 내 이름 은 이름
                solution_text: 그래서 본문에서 사용하고 싶은 단어를 변수 이름으로 사용하지 마세요. 4레벨에서는 따옴표'로 풀립니다.
                solution_code: |-
                    이름 {is} Hedy
                    {print} 안녕 나는 이름 야
        -   title: 학생들은 두 단어를 포함하는 긴 변수 이름을 사용합니다.
            example:
                error_text: 변수 이름은 하나의 단어로 지어져야 합니다. 두 단어를 연결하기 위해 언더바_를 사용할 수 있어요. 그것은 하나의 변수로 인식됩니다.
                error_code: 선택된 문 is ask 어떤 문을 선택했니
                solution_text: 언더바_를 사용합시다.
                solution_code: 선택된_문 {is} {ask} 어떤 문을 선택했니
        -   title: 학생들은 같은 변수에 대해 두 개의 다른 이름을 사용할 수 있습니다
            example:
                error_text: 이 예제에서 학생은 동일한 변수에 대해 '강아지'와 '이름'을 사용했습니다.
                error_code: |-
                    강아지 {is} {ask} 너의 강아지는 뭐라고 부르니
                    {print} 너의 강아지 이름
                solution_text: "코드 변수의 이름이 같은지 항상 확인해야 한다. 약간의 차이는 발견하기 어려울 수 있지만(예: 복수) 코드를 방해한다."
                solution_code: |-
                    이름 {is} {ask} 너의 강아지는 뭐라고 부르니
                    {print} 너의 강아지 이름
    -   level: "3"
        sections:
        -   title: 학생들은 전체 목록을 print하려고 한다
            example:
                error_text: 목록을 인쇄할 수 없습니다. {at} {random}(으)로 목록에서 항목 하나만 인쇄할 수 있습니다.
                error_code: |-
                    식료품점 {is} 사과, 우유, 초콜렛
                    {print} 식료품점
                solution_text: 모든 식료품 목록을 인쇄하려면 {print} 명령 뒤에 입력하기만 하면 됩니다. 그렇지 않으면 목록을 사용하여 {at} {random}이(가) 포함된 하나의 품목을 인쇄할 수 있습니다.
                solution_code: |-
                    {print} 사과, 우유, 초콜렛

                    or

                    식료품점 {is} 사과, 우유, 초콜렛
                    {print} 식료품점 {at} {random}
        -   title: 학생들은 변수 또는 목록의 이름을 일반 단어로 사용합니다
            example:
                error_text: 이 문제는 레벨 2에서도 발생했을 것입니다. 이제 목록에서도 발생할 수 있어요.
                error_code: |-
                    이름 {is} Hedy
                    {print} 나의 이름 은 이름 이다

                    또는

                    동물 {is} 코뿔소, 꿀벌, 백조
                    {print} 최고의 동물은... 동물 {at} {random}
                solution_text: print할 때 일반 단어의 변수 이름이나 목록을 사용하지 마십시오. 레벨 4에서는 따옴표'로 이 문제를 해결합니다.
                solution_code: |-
                    이름 {is} Hedy
                    {print} 안녕 나는 이름 이야

                    또는

                    동물들 {is} 코뿔소, 꿀벌, 백조
                    {print} 최고의 동물은... 동물들 {at} {random}
        -   title: 학생들은 `{at}` `{random}`에서 `{at}`을 잊어버린다
            example:
                error_text: 예를 들면
                error_code: |-
                    새들 {is} 참새, 갈매기, 벌새
                    {print} 새들 random
                solution_text: 이 문제는 단어를 추가하면 해결됩니다.
                solution_code: |-
                    새들 {is} 참새, 갈매기, 벌새
                    {print} 새들 {at} {random}
        -   title: 학생들은 `{at}` `{random}` 명령어를 사용할 때는 `{print}` 명령어를 사용하는 것을 잊어버린다
            example:
                error_text: 맨 앞줄에 `{at}` '{random}'을 붙이기도 합니다.
                error_code: |-
                    과일 {is} 사과, 체리, 바나나
                    과일 {at} {random}
                solution_text: 텍스트를 print하려면 항상 print가 필요하다는 것을 학생들에게 강조합니다.
                solution_code: |-
                    과일 {is} 사과, 체리, 바나나
                    {print} 과일 {at} {random}
        -   title: 학생들은 그들의 목록에 쉼표,를 사용하는 것을 잊는다
            example:
                error_text: 목록에서 항목은 쉼표,로 구분됩니다.
                error_code: |-
                    피자들 {is} 버섯 양파 콤비네이션
                    {print} 피자들 {at} {random}
                solution_text: 목록의 각 항목 뒤에 쉼표,가 있어야 합니다
                solution_code: |-
                    피자들 {is} 버섯, 양파, 콤비네이션
                    {print} 피자들 {at} 랜덤
        -   title: 학생들은 리스트 없이 `{at}` `{random}`를 사용하려고 한다
            example:
                error_text: 예를 들면..
                error_code: |-
                    축구클럽들 {is} 맨체스터 유나이티드
                    {print} 축구클럽들 {at} {random}
                solution_text: Hedy는 아무 것도 임의로 인쇄할 수 없는데, 그 이유는 선택할 수 있는 목록이 없기 때문이다.
                solution_code: |-
                    축구클럽들 {is} 맨체스터 유나이티드, 바이에른 뮌헨, FC 바르셀로나
                    {print} 축구클럽들 {at} {random}
        -   title: 학생들은 목록 없이 추가/제거를 사용하려고 합니다
            example:
                error_text: 아래 예제의 '이름들'는 변수입니다. 여기에는 어떤 것도 추가할 수 없습니다.
                error_code: |-
                    이름들 {is} Jake
                    너의_이름 {is} {ask} 너는 누구니?
                    {add} 너의_이름 {to} 이름들
                    {print} 이름들 {at} {random}
                solution_text: 먼저 목록이 있어야 하기 때문에 에이미처럼 이름을 목록으로 바꾸기 위해 두 번째 이름을 추가해야 합니다. 에이미를 목록에 넣지 않으려면 그 다음에 제거를 사용하여 제거할 수 있습니다.
                solution_code: |-
                    이름들 {is} Jake, Amy
                    너의_이름 {is} {ask} 너는 누구니?
                    {add} 너의_이름 {to} 이름들
                    {print} 이름들 {at} {random}
        -   title: 학생들이 추가/제거할 때 사용하는 것을 잊어버림
            example:
                error_text: to/from add/remove 명령어가 없으면 작동하지 않습니다.
                error_code: |-
                    모험 {is} 스토리, 앵무새, 주사위
                    선택 {is} 너는 어떤 모험을 좋아해?
                    {add} 선택
                    {remove} 주사위
                    {print} 나는 모험 {at} {random}
                solution_text: Hedy는 어떤 목록에 항목을 add/remove해야 하는지 알아야 한다.
                solution_code: |-
                    모험 {is} 스토리, 앵무새, 주사위
                    선택 {is} 너는 어떤 모험을 좋아해?
                    {add} 선택 {to_list} 모험
                    {remove} dice {from} 모험
                    {print} 나는 모험 {at} {random}
    -   level: "4"
        sections:
        -   title: 학생들은 본문 양쪽에 따옴표'를 사용하는 것을 잊는다
            example:
                error_text: 이 레벨에서는 따옴표'가 필요하다. 본문 앞에 하나, 뒤에 하나.
                error_code: |-
                    {print} 안녕
                    기분 {is} {ask} '너는 어때?
                solution_text: 올바른 따옴표'를 추가한다.
                solution_code: |-
                    {print} '안녕'
                    기분 {is} {ask} '너는 어때?'
        -   title: 학생들은 잘못된 따옴표'를 사용한다
            example:
                error_text: 학생들이 따옴표'를 제대로 치는 법을 알고 있는지 확인하면서 수업을 시작하는 것이 중요하다. 그렇지 않으면 그들은 "쌍따옴표"나 "다른문자"를 사용할 수도 있다 `.
                error_code: |-
                    {print} `식당에 어서오세요`
                    음식 {is} {ask} "어떤거 드시겠어요?"
                solution_text: "이것들이 정확한 따옴표'입니다:"
                solution_code: |-
                    {print} '식당에 어서오세요'
                    음식 {is} {ask} '어떤거 드시겠어요?'
        -   title: 학생들은 그들의 텍스트에 아포스트로피를 사용한다
            example:
                error_text: 이 레벨부터는 따옴표'를 사용하실 수 없습니다. 영어에서는 you're, don't 또는 what's 같이 따옴표'를 자주 사용합니다.
                error_code: "{print} 'You're not allowed to type this'"
                solution_text: 따옴표'대시에 `문자를 사용하거나 문장에서 따옴표'를 제거하는 것이 좋습니다.
                solution_code: |-
                    {print} 'Youre allowed to type this'
                    {print} 'And you`re able to do this'
    -   level: "5"
        sections:
        -   title: 학생들이 {if} 명령어에서 {print}를 사용하는 것을 잊어버립니다
            example:
                error_text: 학생들이 `{if}`나 `{else}`를 사용한 후에는 `{print}`나 `{ask}` 같은 두 번째 명령어를 사용하는 것을 잊어버립니다.
                error_code: |-
                    {if} 이름 {is} Hedy '대단해!'
                    {else}  Hedy 는 괜찮네!
                solution_text: print 명령어을 추가하여 수정합니다.
                solution_code: |-
                    {if} 이름 {is} Hedy {print} '대단해!'
                    {else} {print} 'Hedy 는 괜찮네!'
        -   title: 학생들은 같은 변수에 대해 두 개의 다른 이름을 사용할 수 있습니다
            example:
                error_text: 이 예제에서 학생은 동일한 변수에 대해 '강아지'과 '이름'을 사용했습니다.
                error_code: |-
                    강아지 {is} {ask} '강아지 이름이 뭐니?'
                    {if} 이름 {is} 코코 {print} '멋진데'
                    {else} {print} '별로야!'
                solution_text: "코드 전체에 걸쳐 변수의 이름이 같은지 항상 확인해야 한다. 약간의 차이는 발견하기 어려울 수 있지만(예: 복수) 코드를 방해한다."
                solution_code: |-
                    강아지 {is} {ask} '강아지 이름이 뭐니'
                    {if} 강아지 {is} 코코 {print} '멋진데!'
                    {else} {print} '별로야!'
        -   title: 학생들은 여전히 양쪽의 인용문을 잊어버린다
            example:
                error_text: "`if` 명령어를 사용하는 코드는 매우 길어질 수 있고 학생들은 따옴표'를 사용하는 것을 잊어버리는 경향이 있다."
                error_code: |-
                    {if} 이름 {is} Hedy {print} 재밌다
                    {else} {print} '그냥 그래!
                solution_text: print 명령에는 항상 따옴표' 2개를 사용합니다..
                solution_code: |-
                    {if} 이름 {is} Hedy {print} '재밌다'
                    {else} {print} '그냥 그래!'
        -   title: 학생들은 변수 이름을 중심으로 따옴표'를 사용한다
            example:
                error_text: 이 레벨에서는 변수 이름 주위에 따옴표'가 없습니다.
                error_code: |-
                    {if}  이름  {is} 'Hedy' {print} '재밌다'
                    {else} {print} '그냥 그래!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    {if} 이름 {is} Hedy {print} '재밌다'
                    {else} {print} '그냥 그래!
        -   title: 학생들은 두 단어를 포함하는 긴 변수 이름을 사용한다
            example:
                error_text: 변수 이름은 하나의 단어로 지어져야 한다. 두 단어를 연결하기 위해 언더바_를 사용할 수 있다. 이 변수는 한개로 인식된다.
                error_code: 선택된 문 is ask  너가 어떤 문을 골랐지?
                solution_text: Add an under점수.
                solution_code: 선택된_문 {is} {ask} '너가 어떤 문을 골랐지?'
        -   title: 학생들은 여러 개의 답이 맞길 원한다
            example:
                error_text: 예를 들어 이 학생 Hedy는 그의 모든 친구들에게는 재미있지만, 다른 반 친구들은 그렇지 않다고 말할 것이다.
                error_code: "{if} 이름 {is} 철수, 길동, 영희 print  너는 재미있어  {else} {print} '저는 재미없어'"
                solution_text: |-
                    여기에서 `in` 명령어를 사용할 수 있다.. 더 높은 레벨에서 자세히 설명됩니다만, 5단계에서 사용 하실수 있습니다.
                    다른 해결책은 if 명령어를 여러 개 사용하고 다른 명령어는 사용하지 않는 것이다. 단점은 다른 반 친구들에게 그들이 재미없다고 말하지 않는다는 것이다.
                solution_code: |-
                    친구들 {is} 철수, 길동, 영희
                    이름 {is} {ask} '너는 누구니?'
                    {if} 이름 {in} 친구들 {print} '너는 재미있어'
                    {else} {print} '너는 재미없어'

                    또는

                    이름 {is} {ask} '너는 누구니?'
                    {if} 이름 {is} 철수 {print} '너는 재미있어'
                    {if} 이름 {is} 길동 {print} '너는 재미있어'
                    {if} 이름 {is} 영희 {print} '너는 재미있어'
        -   title: 학생들은 변수 이름을 `{if}` 문의 값과 동일하게 만듭니다
            example:
                error_text: 아래 예제에서 비밀번호는 '비밀번호'입니다. 그러면 항상 정확하게 됩니다.
                error_code: |-
                    비밀번호 {is} {ask} '이거 비밀번호가 뭐지?'
                    {if} 비밀번호 {is} 비밀번호 {print} '승인 되었습니다'
                    {else} {print} '거부 되었습니다!'
                solution_text: 다른 변수 이름을 선택합니다.
                solution_code: |-
                    비밀_암호 {is} {ask} '이거 암호가 뭐지'
                    {if} 비밀_암호 {is} 암호 {print} '승인 되었습니다!'
                    {else} {print} '거부 되었습니다!'
    -   level: "6"
        sections:
        -   title: 학생들은 따옴표' 때문에 어려움을 겪는다
            example:
                error_text: 일부 학생들은 따옴표'를 붙이거나 붙이지 않기도 한다. 따옴표'를 추가하면 출력 화면에 문자 그대로 '5+5'가 표시됩니다.
                error_code: "{print} '5 + 5'"
                solution_text: 이 코드에서 출력 화면은 '10'으로 print됩니다.
                solution_code: "{print} 5 + 5"
        -   title: 학생들은 변수를 가지고 수학을 한다는 개념에 어려움을 겪는다
            example:
                error_text: "어떤 학생들은 변수를 가지고 수학을 하는 것을 어려워 할 것입니다. 그들에게 아주 간단한 예를, 보여주려고 노력하세요:"
                error_code: |-
                    나이 = {ask} '당신은 나이가 몇살이에요?'
                    {print} '다음 연도 당신의 나이는 ' 나이 + 1
                solution_text: 아니면 이렇게 해보세요.
                solution_code: |-
                    가격 = 0
                    {print} '저희 햄버거 가게에 오신걸 환영합니다'
                    햄버거 = {ask} '햄버거 드시겠어요?'
                    {if} 햄버거 = 네 가격 = 가격 + 10
                    음료수 = {ask} '음료수는 어떤거 드시겠어요?'
                    {if} 음료수 = 네 가격 = 가격 + 4
                    {print} '결제 금액은 ' 가격 ' 달러 입니다'
    -   level: "7"
        sections:
        -   title: 학생들은 repeat 명령어 중 하나를 잊어버리거나, print 명령어를 잊어버립니다
            example:
                error_text: 학생들이 전체 repeat 명령어과 print 명령어를 모두 사용하는 것을 알고 있는지 확인합니다.
                error_code: |-
                    {repeat} 3 {times}  그는 쾌활한 좋은 친구니까
                    {repeat} 3 print
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    {repeat} 3 {times} {print} '그는 쾌활한 좋은 친구니까'
                    {repeat} 3 {times} {print} '아무도 부인할 수 없는 것!'
        -   title: 학생들은 여러 줄을 반복하려고 한다
            example:
                error_text: 이 레벨에서는 한 줄의 코드만 여러 번 반복할 수 있다. 이 코드에서 학생은 세 개의 다른 음료를 인쇄하기를 원했지만 작동하지 않는다. 질문을 3번 하고 마지막 답만 인쇄한다.
                error_code: |-
                    {repeat} 3 {times} 음료수 = {ask} '어떤거 드시겠어요?'
                    {print} 음료수
                solution_text: 여러 줄을 반복하려면 다음 단계로 넘어가야 합니다. 따라서 이 레벨에서는 모든 것을 따로 인쇄해야 합니다..
                solution_code: |-
                    음료수 = {ask} '어떤거 드시겠어요?'
                    {print} 음료수
                    음료수 = {ask} '어떤거 드시겠어요?'
                    {print} 음료수
                    음료수 = {ask} '어떤거 드시겠어요?'
                    {print} 음료수
        -   title: 학생들은 실행하는데 너무 오랜시간이 걸리는 프로그램을 만든다
            example:
                error_text: 이 레벨에서는 긴 코드를 만드는 것이 매우 쉽습니다. 학생들은 (서버를 저장하기 위해) 로딩하는 데 시간이 오래 걸리는 프로그램을 수 없습니다.
                error_code: "{repeat} 100 {times} {print} '몇 번이나 반복할 수 있나요?'"
                solution_text: 코드가 너무 길지 않은지 확인합니다
                solution_code: "{repeat} 20 {times} {print} '이정도면 충분해요'"
    -   level: "8"
        sections:
        -   title: 학생들은 들여쓰기를 잘못 사용한다
            example:
                error_text: 들여쓰기는 이 레벨의 새로운 개념이며, 일부 학생들에게는 사용하기 어려운 것이다. 전체 프로그램을 만들기 전에 간단한 코드를 연습해야 한다.
                error_code: |-
                    {repeat} 3 {times}
                    {print} '안녕'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} '안녕'
        -   title: 학생들은 여러 줄을 반복하고 싶을 때 한 줄만 반복한다
            example:
                error_text: 예를 들어, 아래 코드에서 학생은 3명의 음료수 주문을 받기를 원했지만, 대신 프로그램은 3번의 주문을 요청했지만, 1번의 주문만을 적었다..
                error_code: |-
                    {repeat} 3 {times}
                        음료수 = {ask} '어떤거 드시겠어요?'
                    {print} 음료수
                solution_text: |-
                    올바른 코드에서 세 번째 줄도 들여쓰기로 시작한다. 이런 식으로 반복 블록에 속하므로 3번 반복한다.
                    학생들에게 이러한 차이점을 보여주는 것은 학생들이 프로그램을 작동시키기 위해 들여쓰기가 필요한 이유를 이해하는 데 도움이 될 수 있습니다.
                solution_code: |-
                    {repeat} 3 {times}
                        음료수 = {ask} '어떤거 드시겠어요?'
                        {print} 음료수
        -   title: 학생들은 `{if}`개의 문장을 묶거나, `{if}`개의 문장을 고리 안에 넣으려고 한다
            example:
                error_text: |-
                    이 레벨에서 학생들은 다른 `{if}` 문장 안에 `{if}` 문장을 넣거나 반복 루프 안에 넣을 수 없다.
                    다음 레벨에서는 이것이 허용됩니다.
                error_code: |-
                    birthday = {ask} '오늘 너 생일이니?'
                    {if} birthday = 네
                        {repeat} 3 {times}
                            {print} '축하해 축하해 축하해!'
                solution_text: "이 레벨에 정확히 맞는 코드입니다:"
                solution_code: |-
                    생일 = {ask} '오늘 너 생일이니?'
                    {if} 생일 = 네
                        {print} '축하해 축하해 축하해!'
                        {print} '축하해 축하해 축하해!'
                        {print} '축하해 축하해 축하해!'
        -   title: 학생들은 실행하는데 너무 오랜시간이 걸리는 프로그램을 만든다
            example:
                error_text: 이 레벨에서는 긴 코드를 만드는 것이 매우 쉽다. 학생들은 (서버를 저장하기 위해) 로딩하는 데 오래 걸리는 프로그램을 만드는 것이 허용되지 않는다.
                error_code: |-
                    {repeat} 100 {times}
                        {print} '이거 몇 번이나 반복할 수 있나요?'
                solution_text: 코드가 너무 길지 않게 해주세요
                solution_code: |-
                    {repeat} 20 {times}
                        {print} '이정도면 충분해'
        -   title: 학생들은 `{if}` 명령어를 사용하여 변수 값이 변수 이름과 동일한지 확인한다
            example:
                error_text: |-
                    우리는 몇몇 학생들에 의해 이 실수를 본 적이 있다. 그들은 컴퓨터의 암호를 만들지만, 암호는 '암호'로 만든다.
                    2행에서 컴퓨터는 가변 암호가 가변 암호와 동일한지, 확인하도록 요청된다. 그 말은 대답은 항상 네 라는 뜻이지.
                    그래서 이 코드를 사용하면 플레이어가 무엇을 입력하든지 항상 '들어 오셔도 되요'으로 대답할 수 있습니다.
                error_code: |-
                    암호 {is} {ask} '이거 암호가 뭐지?'
                    {if} 암호 {is} 암호
                        {print} '들어 오셔도 되요'
                    {else}
                        {print} '들어 오시면 안되요'
                solution_text: 따옴표를' 추가하면 이 실수를 해결할 수 있습니다. 이 방법으로 컴퓨터는 `{if} 암호 {is} '암호'`의 두 번째 암호가 변수 이름이 아닌 문자열 값(따라서 일반 텍스트)임을 알 수 있습니다.
                solution_code: |-
                    암호 {is} {ask} '이거 암호가 뭐지?'
                    {if} 암호 {is} '암호'
                        {print} '들어 오셔도 되요'
                    {else}
                        {print} '들어 오시면 안되요'
    -   level: "9"
        sections:
        -   title: 학생들은 들여쓰기로 실수를 한다
            example:
                error_text: 이 레벨에서 가장 어려운 점은 들여쓰기를 맞추는 것이다. 학생들은 `{if`} 문장을 묶는 것을 매우 좋아하는데, 때로는 다른 `{if}` 문장 안에 묶어서 쓰기도 한다. 들여쓰기를 추적하는 것은 상당히 어려워질 수 있다.
                error_code: |-
                    {print} '로빈은 시내를 걷고있다'
                    위치 = {ask} '로빈은 가게에 들어가나요, 아니면 집에 가나요?'
                    {if} 위치 {is} 가게
                        {print} '로빈이 가게에 들어갔다.'
                        {print} '로빈은 책을 찾아본다'
                        책 = {ask} '로빈은 그 책을 사니요?'
                            {if} 책 {is} 네
                    {print} '로빈은 책을 사고 집으로 간다'
                    {else}
                        {print} '로빈은 가게를 떠나 집으로 간다'
                    {else}
                        {print} '로빈은 집에 간다'
                solution_text: 이것이 정확한 코드이다. 다른 `{if}` 문들 안에 `{if}` 문들을 넣을 때 모든 다른 구성들을 추적하도록 하라.
                solution_code: |-
                    {print} '로빈은 시내를 걷고있다'
                    위치 = {ask} '로빈은 가게에 들어가나요, 아니면 집에 가나요?'
                    {if} 위치 {is} 가게
                        {print} '로빈이 가게에 들어갔다.'
                        {print} '로빈은 책을 찾아본다'
                        책 = {ask} '로빈은 그 책을 사니요?'
                        {if} 책 {is} 네
                            {print} '로빈은 책을 사고 집으로 간다'
                        {else}
                            {print} '로빈은 가게를 떠나 집으로 간다'
                    {else}
                        {print} '로빈은 집에 간다'
    -   level: "10"
        sections:
        -   title: 학생들이 for 명령어을 올바르게 사용하지 않아요
            example:
                error_text: "우리는 종종 학생들이 목록의 항목 대신에 목록을 print하려고 노력하는 것을 봅니다. (예: 동물들)."
                error_code: |-
                    동물들 {is} 강아지, 고양이, 물고기
                    {for} 동물 {in} 동물들
                      {print} '나는 좋아해 ' 동물들
                solution_text: 마지막 줄에 있는 동물들 은 동물로 바꿔야 한다..
                solution_code: |-
                    동물들 {is} 강아지, 고양이, 물고기
                    {for} 동물 {in} 동물들
                      {print} '나는 좋아해 ' 동물
        -   title: 학생들은 들여쓰기를 잊어버립니다
            example:
                error_text: 학생들은 명령어 뒤에 들여쓰기를 사용하는 것을 잊는 경향이 있다.
                error_code: |-
                    동물들 {is} 강아지, 고양이, 물고기
                    {for} 동물 {in} 동물들
                    {print} '나는 좋아해 ' 동물들
                solution_text: for 명령어 뒤에 들여쓰기를 사용해야 합니다.
                solution_code: |-
                    동물들 {is} 강아지, 고양이, 물고기
                    {for} 동물 {in} 동물들
                      {print} '나는 좋아해 ' 동물
    -   level: "11"
        sections:
        -   title: 학생들이 들여쓰기를 잊어버립니다
            example:
                error_text: 학생들이 들여쓰기를 사용하는지 확인합니다.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: 학생들은 i를 이해하지 못한다
            example:
                error_text: |-
                    어떤 학생들은 i가 변수라는 것을 이해하지 못한다. i가 선택되는 이유는 파이썬 프로그래밍에서 사용되기 때문이지만, 다른 변수 이름을 쉽게 사용할 수 있기 때문이다.
                    예를 들어, 이 코드는:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: 이 코드로 대체할 수도 있어요. 똑같이 작동해요.
                solution_code: |-
                    {for} 바나나 {in} {range} 1 {to} 5
                        {print} 바나나
    -   level: "12"
        sections:
        -   title: 학생들은 따옴표'를 잊어버린다
            example:
                error_text: 학생들은 이전 레벨보다 지금 더 많은 따옴표를 필요로 한다. 이 예제에서 따옴표는 목록과 `{if}` 명령에서 잊혀졌다.
                error_code: |-
                    슈퍼히어로모임 = 스파이더맨, 배트맨, 아이언맨
                    슈퍼히어로 = 슈퍼히어로모임 {at} {random}
                    {if} 슈퍼히어로 = 배트맨
                        {print} '나는 배트맨이다!'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    슈퍼히어로모임 = '스파이더맨', '배트맨', '아이언맨'
                    슈퍼히어로 = 슈퍼히어로모임 {at} {random}
                    {if} 슈퍼히어로 {is} '배트맨'
                        {print} '나는 배트맨이다!'
        -   title: 학생들은 계산에 사용하기를 원하는 숫자에 따옴표'를 사용한다
            example:
                error_text: |-
                    당신은 숫자에 따옴표'를 사용할 수 있지만, 당신이 컴퓨터가 그것들을 텍스트로 생각하기를 원할 때만 그렇다. 이것은 당신이 숫자를 가지고 계산을 할 수 없다는 것을 의미한다.
                    아래 예제에서 숫자 25는 따옴표'로 표시되어 있기 때문에 수학을 할 수 없습니다.
                error_code: |-
                    점수 = '25'
                    대답 {is} {ask} '점수를 원하시나요?'
                    {if} 대답 {is} '네'
                        점수 = 점수 + 1
                        {print} 점수
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    점수 = 25
                    대답 {is} {ask} '점수를 원하시나요?'
                    {if} 대답 {is} '네'
                        점수 = 점수 + 1
                        {print} 점수
        -   title: 학생들은 십진법 숫자의 마침표 대신 쉼표,를 사용한다
            example:
                error_text: 이 레벨부터는 십진수를 사용할 수 있지만 쉼표는 사용할 수 없습니다.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: 학생들은 `and`와 `or`를 혼동한다
            example:
                error_text: 두 명령은 유사하게 보일 수 있지만 기능은 매우 다릅니다.
                error_code: |-
                    게임 {is} {ask} '너 나랑 같이 놀래?'
                    시간 {is} {ask} '너 시간은 괜찮지?'
                    {if} 게임 {is} '네' {or} 시간 {is} '네'
                        {print} '놀자!'
                solution_text: 이 경우에는, 두 질문 모두에 대해 예 라고 대답해야 하며, 그래서 당신은 `and`를 사용해야 한다.
                solution_code: |-
                    게임 {is} {ask} '너 나랑 같이 놀래?'
                    시간 {is} {ask} '너 시간은 괜찮지?'
                    {if} 게임 {is} '네' {and} 시간 {is} '네'
                        {print} '놀자!'
    -   level: "14"
        sections:
        -   title: 학생들은 < 및 > 기호를 혼동한다
            example:
                error_text: 종종, 학생들은 이미 수학 수업에서 나온 이러한 기호들에 익숙합니다. 하지만 학생들이 아직 이러한 기호들을 모른다면, 그들은 그것에 대해 어려움을 겪을 수 있습니다.
                error_code: |-
                    나이 = {ask} '당신은 나이가 몇살이에요?'
                    {if} 나이 < 12
                        {print} '당신이 저보다 나이가 많네요!'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    나이 = {ask} '당신은 나이가 몇살이에요?'
                    {if} 나이 > 12
                        {print} '당신이 저보다 나이가 많네요!'
        -   title: 학생들은 `!=` `<=` 그리고 `>=`를 잘못 표기한다
            example:
                error_text: 이 기호들은 아마도 대부분의 학생들에게 새로운 기호일 것입니다. 반드시 이 기호들을 학생들에게 설명해주세요.
                error_code: |-
                    이름 = {ask} '너 이름이 뭐야?'
                    {if} 이름 =  'Hedy'
                        {print} '너는 Hedy가 아니야'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    이름 = {ask} '너 이름이 뭐야?'
                    {if} 이름 != 'Hedy'
                        {print} '너는 Hedy가 아니야'
        -   title: 학생들이 == 사인을 사용하는 것을 잊어버립니다
            example:
                error_text: 이 레벨에서는 학생들이 =나 is를 사용할 수 있습니다. 하지만 다른 레벨 혹은 python에서 어려움에 처할지도 모릅니다. 그래서 미리 사용하도록 훈련시키는 것이 가장 좋습니다.
                error_code: |-
                    이름 = {ask} '너 이름이 뭐야?'
                    {if} 이름 = 'Hedy'
                        {print} '멋진데!'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    이름 = {ask} '너 이름이 뭐야?'
                    {if} 이름 == 'Hedy'
                        {print} '멋진데!'
    -   level: "15"
        sections:
        -   title: 학생들은 그 동안 들여쓰기를 잊어버립니다
            example:
                error_text: 학생들은 보통 들여쓰기가 어렵다.
                error_code: |-
                    대답 = 0
                    {while} 대답 != 25
                    대답 = {ask} '5 곱하기 5 는 무엇이지?'
                    {print} '정답은 '
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    대답 = 0
                    {while} 대답 != 25
                        대답 = {ask} '5 곱하기 5 는 무엇이지?'
                    {print} '정답은 '
    -   level: "16"
        sections:
        -   title: 학생들은 괄호를 잊어버린다
            example:
                error_text: 이 레벨부터 목록은 괄호 안에 있어야 한다.
                error_code: |-
                    아이스크림 = '딸기', '초콜렛'
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    아이스크림 = ['딸기', '초콜렛']
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
        -   title: 학생들은 잘못된 괄호를 사용한다
            example:
                error_text: 이 레벨부터 목록은 괄호 안에 있어야 한다.
                error_code: |-
                    아이스크림 = ('딸기', '초콜렛')
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    아이스크림 = ['딸기', '초콜렛']
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
        -   title: 학생들은 괄호에 집중하면서 따옴표'를 잊어버린다
            example:
                error_text: 학생들은 가끔 새로운 배운 구문에 집중하여 따옴표를 잊어버리기도 한다.
                error_code: |-
                    아이스크림 = [딸기, 초콜렛]
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
                solution_text: "이것이 올바른 코드입니다:"
                solution_code: |-
                    아이스크림 = ['딸기', '초콜렛']
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
        -   title: 학생들은 여전히 옛것을 임의의 명령으로 사용한다
            example:
                error_text: 학생들은 가끔 새로운 배운 구문에 집중하여 따옴표를 잊어버리기도 한다.
                error_code: |-
                    아이스크림 = [딸기, 초콜렛]
                    {print} '나는 좋아해 ' 아이스크림 at 랜덤 ' 아이스크림'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    아이스크림 = ['딸기', '초콜렛']
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
        -   title: 학생들은 괄호에 집중하면서 따옴표'를 잊어버린다
            example:
                error_text: 학생들은 때로 문법의 새로운 면에 매우 집중하여 따옴표'를 잊어버리기도 한다.
                error_code: |-
                    아이스크림 = [딸기, 초콜렛]
                    {print} '나는 좋아해 ' 아이스크림[{random}] ' 아이스크림'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    아이스크림 = ['딸기', '초콜렛']
                    {print} '나는 ' 아이스크림[{random}] ' 아이스크림을 좋아해'
    -   level: "17"
        sections:
        -   title: Students use `{elif}` like `{else}`, so without a condition
            example:
                error_text: "`{elif}` 명령어는 조건이 있어야 한다. 조건 없이는 `{else}`처럼 사용할 수 없다."
                error_code: |-
                    색깔 = ask '너가 좋아하는 색깔은 무엇이니?'
                    {if} 색깔 == '녹색':
                        {print} '녹색은 멋있어'
                    {elif}:
                        {print} '나는 녹색을 좋아해'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    색깔 = {ask} '너가 좋아하는 색깔은 무엇이니?'
                    {if} 색깔 == '녹색':
                        {print} '녹색은 멋있어'
                    {elif} 색깔 == 노랑:
                        {print} '노랑 좋아'
                    {else}:
                        {print} '나는 녹색을 좋아해'
        -   title: 학생들은 대장을 잊어버린다
            example:
                error_text: 들여쓰기가 필요한 각 명령 뒤에는 콜론:을 사용해야 합니다.
                error_code: |-
                    대답 = ask '잘 지내니?'
                    {if} 대답 {is} '좋아'
                        {print} '나도!'
                    {elif} 대답 {is} '안좋아'
                        {print} '힘내!'
                    {else}
                        {print} '나는 좋아!'
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    대답 = {ask} '잘 지내니?'
                    {if} 대답 {is} '좋아':
                        {print} '나도!'
                    {elif} 대답 {is} '안좋아':
                        {print} '힘내!'
                    {else}:
                        {print} '나는 좋아!'
    -   level: "18"
        sections:
        -   title: 학생들은 괄호를 사용하는 것을 잊는다
            example:
                error_text: 학생들은 그들의 텍스트에서 괄호를 사용하는 것을 잊게 될 수 있다.
                error_code: "{print} '나의 이름은 Hedy야!'"
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: "{print}('나의 이름은 Hedy이다!')"
        -   title: 학생들은 여전히 ask 명령어을 사용합니다
            example:
                error_text: ask 명령어는 레벨 1 부터 사용되어왔기 때문에 학생들이 ask 대신 입력으로 전환하기가 어려울 수 있습니다.
                error_code: |-
                    {print}('나의 이름은 Hedy이다!')
                    이름 = ask('너 이름이 뭐야?')
                    {print}('그래서 나의 이름은 ', 이름)
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    {print}('나의 이름은 Hedy이다!')
                    이름 = {input}('너 이름이 뭐야?')
                    {print}('그래서 나의 이름은 ', 이름)
        -   title: 학생들은 괄호를 따옴표'로 사용할 수 있다
            example:
                error_text: 그들은 변수를 따옴표'를 밖에 두는 법을 배웠기 때문에 괄호 안에서도 같은 일을 할 수 있다. 이것은 그 변수들을 사용하는 올바른 방법이 아니다.
                error_code: |-
                    온도 = 25
                    {print}('지금 바깥은 ') 온도 ('도 이다')
                solution_text: "이것이 정확한 코드입니다:"
                solution_code: |-
                    온도 = 25
                    {print}('지금 바깥은 ', 온도, '도 이다')
