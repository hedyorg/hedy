title: 海蒂（Hedy）文档
home-sections:
-   title: 文本编程变得更容易!
    text: |-
        世界各地的许多学校和老师都想教学生编程。 最初，这通常是通过有趣的工具来完成的，从 Beebot 机器人到
        Scratch Junior 或 Scratch。 使用此类工具后，孩子们通常希望转向更强大的文本编程语言，例如 Python。

        然而Python很难，因为它只有英文版本，并且要求学习者立即学习复杂的编程概念和语法。
        Hedy 是开始使用文本编程语言的简单方法！ Hedy 可以免费使用、开源，并且在三个方面不同于任何其他文本编程语言。(欢迎加入<a href="https://qqls8fdp51y.feishu.cn/invite/member/A73SK6juNyHLuzw0">"Hedy中国社区"</a>一起在中国推广 Hedy ;注意,这是免费飞书社群;)

        1. Hedy是多语言的，您可以用自己的语言使用Hedy
        2. Hedy 是循序渐进的，因此你可以同时学习其中的概念和其中的语法。
        3. Hedy 专为课堂打造，让教师能够完全定制学生的体验
-   title: 多语言编程
    text: 虽然几乎所有的文本编程语言都只有英文关键词，如`for`或`repeat`，但你可以用任何语言来使用海蒂编程！我们目前支持 *47* 种不同的语言，包括西班牙语、阿拉伯语、简体中文和印地语。如果海蒂编程没有你的语言的版本，你可以随时开始用新的语言翻译海蒂编程。
-   title: 循序渐进的学习
    text: 学习编程语言可能会让人不知所措，因为学习者必须同时学习概念（例如 if-else 或循环）和语法（例如引号或圆括号）。 在 Hedy ，概念首先由很少的语法引入，然后进行细化。这种学习方法经过了科学验证！
-   title: 为教学而生
    text: |-
        海蒂编程专为课堂使用而设计，这些课程适合 10 岁及以上的孩子。
        教师可以使用我们提供的免费内置教案，也可以自己编写教案并将其加载到海蒂编程的用户界面中。
-   title: 在上下文中编程
    text: '"Hedy以最广泛的方式呈现编程，并可以以各种令人兴奋的方式使用。海蒂允许创建数字和交互式的故事，多彩的绘画，可以显示在屏幕上，也可以用笔绘图器绘制或绣在衬衫上，并可以使用按钮和键盘来创建游戏或应用程序。'
-   title: 海蒂是免费的吗？
    text: |-
        是的！海蒂编程是“开源”的，这意味着每个人都可以帮助我们让海蒂编程变得更好。
        你可以在 <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a> 上找到我们的代码。
        如果你喜欢海蒂编程并想做出贡献，我们乐意接受（并非常感谢）<a href="https://github.com/sponsors/hedyorg" target="_blank">捐赠</a>！
-   title: 我需要安装什么吗?
    text: 不需要。海蒂编程可以通过浏览器直接运行，浏览器就是您现在查看这个页面所使用的程序。你可以选择使用 Chrome、Edge 或 Firefox等浏览器。海蒂编程也可以在你的手机或平板电脑上运行。
-   title: 我需要编程经验才能使用海蒂教学吗？
    text: |-
        没有必要。在幻灯片和学习者的界面中所有的概念都得到了解释。
        如果你创建了一个免费的教师账户，你还可以获得教师手册，
        其中包括教学建议以及学生容易出错的地方。
join-sections:
-   title: 支持海蒂
    text: '# 您有3种方式可以支持海蒂！'
-   title: 改善语言
    text: |-
        海蒂编程的渐进性和多语言性带来了很多有趣的技术挑战。
        在<a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github上可以找到这些问题</a> 。
-   title: 翻译海蒂
    text: |-
        你不是一个程序员？没问题！另一种支持海蒂编程的方式是通过<a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">，翻译关键词、错误信息、探险或其他内容</a> 。
        这是目前的状况，请帮助我们完成一种已有语言的翻译工作，或者添加一种新的语言来翻译海蒂编程！
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: 帮助教师入门
    text: |-
        海蒂编程旨在支持教师在课堂上教编程课程。我们有特定的教师功能，例如创建班级、自定义班级和查看学生表现的选项。
        如果您喜欢海蒂编程，您可以联系您认识的学校来帮助教师了解和尝试海蒂编程！我们可以通过<a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a>帮助您找到学校或老师。
learn-more-sections:
-   text: "Hedy 由 Hedy 基金会 (Stichting Hedy) 维护，地址：Sportmanstaat 8, 2341 JG Oegstgeest，荷兰商会编号 94013985。\n\n基金会董事会由以下人员组成：\n\n* Felienne Hermans，总裁\n* Eelko Huizing，财务\n* Renée Merbis，秘书\n\nStichting Hedy 董事会不会因其工作而获得任何经济报酬。 "
    title: Hedy 基金会
-   title: 深潜！
    text: |-
        想了解更多关于海蒂的理念和设计吗？请看翡丽娜（Felienne）在 2022 年 StrangeLoop 会议上的演讲：

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: 海蒂时事
    text: |-
        自 2020 年初发布以来，一些网站和报纸对 Hedy 进行了报道。我们在此保留一个列表：
        * [Java 杂志 04.2023](images/Hedy_Javamagazine2023.pdf)
        * [技术乐观 - IT 短缺的解决方案（荷兰语），2022 年 8 月](https://podcasts.apple.com/nl/podcast/techoptimisme-2-een-oplossing-voor-het-it-tekort/id1114136654?i=1000581523458)
        * [Codeweek 播客，2022 年 7 月](https://codeweek.eu/podcasts/26)
        * [Heise.de（德语），2022 年 1 月](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta，2021 年 11 月](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives（荷兰语），CodeWeek 特别 2021 年 10 月](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - 鬼屋挑战，2021 年 9 月](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com，2021 年 4 月](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO 杂志，2021 年 4 月](https://ict-research.nl/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software（西班牙语），2021 年 2 月](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World 杂志，2021 年 2 月](images/Hello_World_15_Hedy.pdf)
        * [Discoro，2021 年 1 月](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne 凭借 Hedy 荣获荷兰 ICT 研究奖，2021 年 1 月](https://www.universiteitleiden.nl/en/news/2021/01/felienne-hermans-receives-dutch-prize-for-ict-research-2021)
        * [SlashDot，2020 年 8 月](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta（西班牙语），2020 年 8 月](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez（法语），2020 年 8 月](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives（荷兰语），2020 年 10 月](images/artikel_vives.pdf)“Met Hedy 成为程序员”
        * [莱顿大学，2020 年 4 月](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare（荷兰语），2020 年 4 月](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect（荷兰语），2020 年 4 月](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: 开始使用海蒂
    text: |-
        欢迎来到 海蒂，我们很乐意帮助您开始使用 海蒂。

        我们的[教师手册](https://www.hedy.org/for-teachers/manual) 详细概述了所有功能，但此页面有一个简短的概述，以便您在深入了解之前知道它是什么。

        需要了解的一些重要要点：
        * Hedy 是一款旨在帮助管理儿童编程课堂的工具！ 您可以创建自己的课程、课程计划并跟踪孩子们的表现。
        * 如果你开始，你不需要了解很多编程，Hedy 一步一步工作，也适合你！
        * 您可以用您的母语使用 Hedy，因为它已被翻译成许多其他语言！
        * 每个孩子都会编程！ Hedy 对于有视力问题的孩子特别有帮助，因为它可以大声朗读材料，而无需鼠标。
        * 我们随时为您提供帮助，您可以在 [Discord](https://discord.gg/8yY7dEme9r) 上找到我们，也可以 [给我们发送电子邮件](hello@hedy.org)。
-   title: 关于 海蒂 老师
    text: |-
        世界各地的老师都表达了对 Hedy 的热爱，其中一些老师与我们分享道：

        * 非常鼓舞人心！这是一个很好的方法，让您自己和学生都更容易学习编程。玩起来非常有趣，而且有很大的潜力可以与学生一起使用。我认为这是一个非常好的工具！我相信这是孩子们开始学习编程的一种有价值的方式。Python 和编码一直非常令人兴奋，因为学习的门槛很高。现在一切都低了一些，而且有人解释说这实际上可以很容易。我很高兴看到 Hedy 努力让用户尽可能地轻松上手编程！*
        荷兰：数学教师培训（中学）

        *简单的界面和很好的例子。*教师：3-6 年级（小学）

        *多语言编程和循序渐进的编程概念本身。*美国：中学，6-8 年级

        *引入编程的循序渐进性质。*澳大利亚：高中

        *自动继续。*荷兰：2 HAVO-VWO

        *解释可以用荷兰语（代码可以用英语），并且它具有越来越多的可能性。*荷兰：Plus 班级组

        *但是 Hedy 及其循序渐进的水平……真是个好主意，我想亲自感谢您创造了这个。我对您感激不尽。此外，我从未见过我的学生像 Hedy 那样参与和热情。我们已经讲到了第 5 级，计划在开始学习 Python 之前，在课堂和实验室再花一周时间学习。* 巴基斯坦

        *编程的“真实性”，它与现实中的情况非常相似。* 荷兰：Plus 班级 4 至 8 人

        *循序渐进的活动。有趣的活动。* 荷兰：1e 所有级别，2e VWO/HAVO 2e VWO +，3e HAVO 3e VWO

        *我非常喜欢 Hedy，而且它的设置也很好，非常适合在小学使用。Hedy 的循序渐进方法非常有效。每个级别开头的简短说明和简短的示例程序有助于让孩子们快速了解所选级别的新内容。孩子们可以选择的不同作业也非常有效。你会看到孩子们选择他们喜欢的作业，然后他们开始通过各个级别与他们一起工作。对于擅长编程并想体验真正的编程语言的孩子来说，Hedy 非常有趣。那里一旦开设更多的 ICT 教育，就可以为进入中学做好很好的准备。* 荷兰：Oegstgeest Montessori 学校

        *建筑非常好。* 荷兰：初中 HAVO-VWO

        *我可以跟上课堂的节奏。* 荷兰：7 和 8 组

        ![Felienne 教孩子们](/images/teacherfeedback/Fkids1.JPG) *Felienne 教孩子们* ![孩子们了解 Hedy](/images/teacherfeedback/Fkids2.JPG) *孩子们了解 Hedy*
teacher-guide:
-   title: 简介
    key: 简介
    subsections:
    -   title: 海蒂（Hedy）是什么？
        text: |-
            海蒂（Hedy ）是一种文本编程语言，专为10 至 15 岁青少年开发。
            与 Scratch 等儿童编程语言相比，海蒂（Hedy ）不使用模块，而是使用文本代码。
            因此，借助海蒂（Hedy ），您将学习如何像真正的程序员一样输入代码，但要通过有趣的练习分小步进行。
            通过这种方式，海蒂（Hedy ）可以通过一种可交互且非常有趣的方式作为真正的编程语言（如 Python）的基础！
            如果您想了解更多，你可以观看这个 <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">视频</a>关于 海蒂（Hedy ）作为编程语言的发展历程。
    -   title: 目标群体
        text: |-
            海蒂（Hedy ）是以中小学生（10-15 岁）为目标开发。
            对学生们来说，能够很好地阅读是很重要的。 我们建议在学生至少达到三年级阅读水平之前不要开始使用 海蒂（Hedy ）。
            在开始使用海蒂（Hedy ） 之前，学生（和老师！）不需要任何编程经验。
    -   title: 海蒂（Hedy ）是如何工作的？
        text: |-
            海蒂（Hedy ）分为多个级别，在这些级别中教授新命令。每个级别都包含各种冒险活动来练习新学到的命令。
            作为老师，您可以决定哪些冒险活动适合您的学生。在这个级别他们会开餐厅、设计计算器或鬼屋吗？在每个级别中，冒险活动都是按照从易到难的顺序排列的。
            因此，您的学生将不断接受挑战。冒险活动可以由学生单独完成，或者您可以在课堂教学中指导他们。

            冒险活动还包括一个代码范例，以确保数字化知识较少的教师也能够使用海蒂（Hedy） ！
            当然，海蒂（Hedy ）也迎合了喜欢自己设计课程和冒险活动的有创意的老师！

            在编写一定级别的所有冒险活动的程序之后，您的学生可以在测验中测试他们对这些知识的掌握程度。
            您可以在课程页面上追踪学生的作业和学习进度。
    -   title: 设备
        text: |-
            海蒂（Hedy）是基于网络的编程语言，这意味着它可以在任何有浏览器的设备上使用（谷歌浏览器、火狐浏览器、Edge等），因此笔记本电脑、铬笔记本、平板电脑甚至智能手机都适合使用海蒂（Hedy）。
            在使用海蒂（Hedy）之前，不需要下载任何东西，只要进入网站就可以了！
    -   title: 海蒂（Hedy ）社区
        text: |-
            欢迎所有海蒂编程的老师、程序员和其他爱好者加入我们的<a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord服务器</a>。这是聊海蒂编程的理想场所：我们有一些聊天频道，在那里你可以展示你很酷的项目和课程，有一些聊天频道可以报告错误（bug），还有一些聊天频道可以与其他老师和海蒂编程创作团队聊天。
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">在这里</a>你可以找到一个关于如何加入Discord社区的视频。
    -   title: 海蒂和GDPR
        text: |-
            欧盟的组织在处理个人数据时必须遵守GDPR(通用数据保护条例)。
            因为这对许多学校来说是一个复杂的问题，所以你可以使用Hedy的所有编程功能，而无需共享个人数据。
            最简单的方法是使用Hedy，而无需为老师和学生创建帐户。没有帐户，所有功能都是可用的，除了个性化级别，保存学生的课程和查看他们的进度。这是有限的，但也有学校以这种方式使用海蒂。

            第二种方法是教师创建一个没有个人数据的电子邮件地址帐户，例如“docent25@email.com”。创建教师账号时，除了需要邮箱地址重置密码外，您不需要分享任何信息。
            使用教师帐户，您可以为学生创建匿名帐户，例如rainbow-student1, rainbow-student2等(详细手册请参阅“教学准备”)。这样你就可以使用Hedy的所有功能，包括保存进度，而不需要分享你自己或你的学生的个人数据。

            如果上述内容不足以满足您的需求，我们可以签署处理协议来处理您的个人数据。
-   title: 常见错误
    key: 常见错误
    intro: |-
        你可以从你的错误中学习，特别是在编码方面!
        犯错误是不可避免的，也是一个很好的学习机会，但对于教师来说，如何找到正确方法纠正错误是一个挑战！
        特别是随着级别的提高，程序变得越来越长。这就是为什么我们列出了每个级别中常犯的错误，以及它们的改正方法。
    levels:
    -   level: '1'
        sections:
        -   title: 学生忘记键入命令
            example:
                error_text: 例如，他们在不使用打印命令的情况下键入句子。
                error_code: Hedy 无法打印此内容
                solution_text: 教您的学生始终以命令开始一行代码。
                solution_code: 打印Hedy可以打印此内容!
        -   title: 学生在键入命令时使用大写字母
            example:
                error_text: 如果用大写字母键入命令，那么这个命令将不起作用。
                error_code: |-
                    询问 为什么我的代码会失败？
                    打印 因为我使用大写字母键入命令。
                solution_text: 删除大写字母。
                solution_code: |-
                    询问为什么我的代码现在有效？
                    打印 因为我删除了大写字母！
        -   title: 学生在没有使用询问的情况下使用了回声命令
            example:
                error_text: 回声命令的作用是在发出询问命令后重复一个答案。没有询问命令，回声命令就不会做任何事情。
                error_code: 回声 你的名字是
                solution_text: 添加 询问命令以使其正常工作。
                solution_code: |-
                    询问 你叫什么名字？
                    回声 你的名字是
        -   title: 学生希望他们的回声词（变量）位于句子的中间
            example:
                error_text: 而他们是对的! 这就是为什么他们将在下一阶段学习如何使用适当的变量。
                error_code: |-
                    询问哪种编程语言最有趣？
                    回声是最好的！
                solution_text: 在级别 1 中，我们必须将其保持在以下位置：
                solution_code: |-
                    询问 哪种编程语言最有趣？
                    回声 最好的是...
        -   title: 海龟：学生让海龟走出屏幕
            example:
                error_text: 通常学生喜欢在使用海龟时尝试比较大的数字，这会导致箭头走出屏幕。
                error_code: |-
                    向前 300
                    旋转 90
                solution_text: 在这个例子中，学生们倾向于认为旋转命令不起作用。尽管它确实在起作用，但你看不到屏幕外发生了什么。你可以使用较小的数字来防止这种情况的发生。
                solution_code: |-
                    向前 100
                    旋转 90
        -   title: '海龟: 学生们使用向后命令，但是这个命令不存在'
            example:
                error_text: 向后不是一个命令。
                error_code: 向后 100
                solution_text: 要使海龟后退，你要使用向前命令和一个负数。比如说：
                solution_code: 向前 -100
    -   level: '2'
        sections:
        -   title: 学生在键入命令中出现拼写错误
            example:
                error_text: Hedy无法识别带有拼写错误的命令。
                error_code: 打印不要出现拼写错误!
                solution_text: 教会你的学生们阅读错误信息。这样他们就能自己找出出错的原因。
                solution_code: 打印 不要出现拼写错误!
        -   title: 学生们忘记了询问命令已经改变
            example:
                error_text: 在这个级别，学生们将学习变量。 询问命令也需要一个变量，但学生们忘记了这一点。
                error_code: 询问你想吃什么?
                solution_text: 在这个级别中，您必须告诉 Hedy 将答案保存在哪里，以便以后使用。这称为变量。
                solution_code: 订单是询问你想吃什么？
        -   title: 学生尝试使用回声命令
            example:
                error_text: 对于一些学生来说，得知 回声 命令不再起作用可能会令人沮丧。这就是为什么解释使用变量的优点非常重要的原因。例如，您可以在代码中使用多个变量，并且可以将它们放在句子中的任何位置！
                error_code: |-
                    答案是询问为什么回声不再起作用？！
                    回声
                solution_text: 用一个变量来代替。
                solution_code: |-
                    答案是询问为什么回声不再起作用？！
                    打印答案
        -   title: 学生在打印命令中使用变量名作为单词
            example:
                error_text: 在下面的例子中，词汇‘名字’被用作一个变量，但也是一个普通文本。这段代码的输出结果将是‘嗨，我的海蒂是海蒂’。
                error_code: |-
                    名字是Hedy
                    打印 嗨，我的名字是名字
                solution_text: 所以不要用你想在文本中使用的词作为变量名。在第 4 级中，这个问题是用引号解决的。
                solution_code: |-
                    名字是Hedy
                    打印 嗨，我是名字
        -   title: 学生们使用包含两个单词的长变量名。
            example:
                error_text: 一个变量应该用一个词来命名。你可以用下划线来连接两个词。这样也可以算作一个词。
                error_code: 选择门是询问你选择哪个门？
                solution_text: 添加一个下划线。
                solution_code: 选择_门是询问你选择哪个门？
        -   title: 学生们可能对同一个变量使用两个不同的名称
            example:
                error_text: 在这个例子中，学生用'马'和'名字'来表示同一个变量。
                error_code: |-
                    马是询问你的马叫什么？
                    打印你的马叫名字
                solution_text: 始终检查变量在整个代码中是否具有相同的名称。微小的差异可能很难发现（例如复数），但它们会干扰代码的运行。
                solution_code: |-
                    名字是问你的马叫什么？
                    打印你的马叫名字
    -   level: '3'
        sections:
        -   title: 学生们尝试打印整个列表
            example:
                error_text: 无法打印列表。您只能用{at} {random} 命令打印列表中的一个项目。
                error_code: |-
                    食品是苹果，牛奶，巧克力
                    打印食品
                solution_text: 要打印所有食品的列表，您只需将它们放在`{print}`命令之后即可。否则，您可以使用`{at}` `{random}`命令打印列表中的一个项目。
                solution_code: |-
                    {print}苹果，牛奶，巧克力

                    或

                    食品们{is}苹果，牛奶，巧克力
                    {print}食品们 {at} {random}
        -   title: 学生使用变量或列表的名称作为常规文本
            example:
                error_text: 此问题可能也发生在级别 2 中。现在，列表也可能发生这种情况。
                error_code: |-
                    名字{is}海蒂
                    {print} 嗨，我的名字是名字

                    或

                    动物们 {is}犀牛，蜜蜂，天鹅
                    {print}最好的动物是...动物们 {at} {random
                solution_text: 不要在常规文本中使用变量或列表的名称并打印。在第 4 级中，这个问题是用引号解决的。
                solution_code: |-
                    名字{is}海蒂
                    {print}嗨，我是名字

                    或

                    动物们{is} 犀牛，蜜蜂，天鹅
                    {print}最好的动物是...动物们{at} {random}
        -   title: 学生忘记 `{at}` `{random}`中的 `{at}`
            example:
                error_text: 如例所示
                error_code: |-
                    鸟类是麻雀，海鸥，知更鸟
                    随机地打印鸟类
                solution_text: 这个问题可以通过添加单词 at 来解决。
                solution_code: |-
                    鸟类们{is}麻雀，海鸥，知更鸟
                    {print}鸟类们{at} {random}
        -   title: 学生在使用`{at}` `{random}` 命令时忘记了使用 `{print}`命令
            example:
                error_text: 或者他们有时会把 `{at}` `{random}`放在一行代码的开头位置。
                error_code: |-
                    水果{is}苹果、樱桃、香蕉
                    水果 {at} {random}
                solution_text: 向您的学生强调始终需要用打印命令才能打印文本。
                solution_code: |-
                    水果{is}苹果，樱桃，香蕉
                    {print}水果{at} {random}
        -   title: 学生忘记在列表中使用逗号
            example:
                error_text: 在列表中，项目之间用逗号隔开。
                error_code: |-
                    披萨们 {is} 蘑菇披萨金枪鱼披萨四季披萨
                    {print} 披萨们{at} {random}
                solution_text: 在列表上的每个项目之后都应该有一个逗号
                solution_code: |-
                    披萨是蘑菇披萨, 金枪鱼披萨, 四季披萨
                    随机地打印披萨
        -   title: 学生尝试在没有列表的情况下使用`{at}` `{random}`命令
            example:
                error_text: 例如
                error_code: |-
                    俱乐部们{is}曼联
                    {print}俱乐部们{at} {random}
                solution_text: Hedy 不能随机地打印任何东西，因为没有可供选择的列表。
                solution_code: |-
                    俱乐部们{is} 曼联、拜仁慕尼黑、巴塞罗那
                    {print}俱乐部们{at} {random}
        -   title: 学生尝试在没有列表的情况下使用添加/删除功能
            example:
                error_text: 在下面的示例中，“名字”不是一个列表，而是一个变量。您不能向其添加任何内容。
                error_code: |-
                    名字是杰克
                    你的_名字问你是谁？
                    向名字添加你的_名字
                    随机地打印名字
                solution_text: 首先必须有一个列表，因此您必须添加第二个名字才能将名字转换为列表，例如艾米。如果您不希望艾米在您的列表中，则可以使用“删除”将其删除。
                solution_code: |-
                    名字是杰克，艾米
                    你的_名字是询问你是谁？
                    将 你的_名字添加到名字中
                    随机地打印名字
        -   title: 学生们忘记了在添加/删除命令中使用到/从
            example:
                error_text: 没有 到/从，添加/删除命令将不起作用。
                error_code: |-
                    冒险是故事、鹦鹉、骰子
                    选择是 你最喜欢哪个冒险活动？
                    添加选择
                    移除骰子
                    打印我爱随机选择的冒险活动
                solution_text: Hedy必须知道这个项目应该被添加到哪个列表中/从哪个列表中删除。
                solution_code: |-
                    冒险活动是故事、鹦鹉、骰子
                    选择是 你最喜欢哪个冒险活动？
                    在冒险活动中添加选择
                    从冒险活动中删除骰子
                    打印我爱随机选择的冒险活动
    -   level: '4'
        sections:
        -   title: 学生忘记在文本的两边使用引号
            example:
                error_text: 在这个级别打印和询问需要一组引号。一个在文本之前，一个在文本之后。
                error_code: |-
                    打印你好
                    心情是询问'你好吗？
                solution_text: 添加正确的引号。
                solution_code: |-
                    打印'你好'。
                    心情是询问'你好吗？'
        -   title: 学生使用了错误的引号
            example:
                error_text: 重要的是，在开始上课时要检查学生是否知道如何正确地键入引号。否则，他们可能会使用 "双引号 "或斜的引号`。
                error_code: |-
                    print `欢迎来到本餐厅`。
                    食物是询问 "你想点什么？"
                solution_text: 这些是正确的引号：
                solution_code: |-
                    打印 '欢迎来到本餐厅'
                    食物是问'你想点什么？'
        -   title: 学生在文本中使用撇号
            example:
                error_text: 从这一级开始，不允许使用撇号。它们在英语中经常被用于缩略语，如you're, don't或what's。
                error_code: 打印'不允许键入此内容'
                solution_text: 你可以选择使用错误的语法，直接不使用撇号。或者你可以把`作为一个撇号来使用。
                solution_code: |-
                    打印'允许键入此内容'
                    打印'并且您可以执行此操作'
    -   level: '5'
        sections:
        -   title: 学生忘记在如果命令中使用打印
            example:
                error_text: 在学生使用“如果”或“否则”后，他们忘记使用第二个命令，如打印或询问。
                error_code: |-
                    如果名字是Hedy '太好了！'
                    否则'Hedy更好！'
                solution_text: 添加打印命令以修复它。
                solution_code: |-
                    如果名字是 Hedy 打印 'Great!'
                    else 打印 'Hedy 更好！'
        -   title: 学生可能对同一个变量使用两个不同的名称
            example:
                error_text: 在这个例子中，学生用'马'和'名字'来表示同一个变量。
                error_code: |-
                    马是询问'你的马叫什么？'
                    如果名字是 篝火 打印 '酷'
                    否则打印'不太酷！'
                solution_text: 始终检查变量在整个代码中是否具有相同的名字。微小的差异可能很难发现（例如复数），但它们会干扰代码。
                solution_code: |-
                    马是询问'你的马叫什么？'
                    如果名字是 篝火 打印 '酷'
                    否则打印'不太酷！'
        -   title: 学生们仍然忘记了两边的引号
            example:
                error_text: 使用'如果'命令的代码可能会变得很长，学生往往会忘记使用引号。
                error_code: |-
                    如果名字是Hedy，则打印 好玩
                    否则打印 '嗯!
                solution_text: 在打印命令中始终使用两个引号。
                solution_code: |-
                    如果名字是 Hedy 打印 '好玩'
                    否则打印'嗯！'
        -   title: 学生在变量名两边使用引号
            example:
                error_text: 在此级别中，变量名称两边没有引号。
                error_code: |-
                    如果 '名字' 是 'Hedy' 打印 '好玩'
                    否则打印'嗯！'
                solution_text: 删除引号以使代码正常工作。
                solution_code: |-
                    如果名字是 Hedy 打印 '好玩'
                    否则打印'嗯！
        -   title: 学生使用包含两个单词的长变量名
            example:
                error_text: 一个变量应该用一个词来命名。你可以用下划线来连接两个词。这样也可以算作一个词。
                error_code: 选择的门是询问'你选哪个门？'
                solution_text: 添加一个下划线。
                solution_code: 选择_门 是 询问 '你选哪个门？'
        -   title: 学生希望多个答案都是正确的
            example:
                error_text: 例如这个学生Hedy告诉他所有的朋友，他们很有趣，但其他同学会被告知他们不有趣。
                error_code: 如果名字是杰西，大卫，苏夫打印'你很有趣', 否则打印'你不好笑'
                solution_text: |-
                    你可以使用`in`命令来实现。这在更高的级别上有解释，但它在第5级上确实已经工作了。
                    另一个解决方案是使用多个'如果'命令，没有'否则'命令。缺点是它不会告诉其他同学他们并不有趣。
                solution_code: |-
                    朋友们是杰西、大卫、苏夫
                    名字是询问'你是谁？'
                    如果名字在朋友中, 那么打印'你很有趣'
                    否则就打印'你不好笑'

                    或

                    名字是询问'你是谁？'
                    如果名字是杰西那么则打印'你很有趣'
                    如果姓名是大卫那么打印'你很有趣'
                    如果姓名是苏夫那么打印'你很有趣'
        -   title: 学生们使变量名与'如果'语句中的值相同
            example:
                error_text: 在下面的例子中，密码是 'password'. 这将导致它始终是正确的.
                error_code: |-
                    密码是询问 '密码是什么?'
                    如果密码是密码，打印'允许进入'
                    否则打印'拒绝访问！'
                solution_text: 为你的变量选一个不同的名字。
                solution_code: |-
                    保密_密码是询问 '密码是什么'
                    如果 保密_密码 是密码 打印'授予访问权限！'
                    否则打印 '访问被拒绝！'
    -   level: '6'
        sections:
        -   title: 学生在引号中挣扎
            example:
                error_text: 有些学生在添加引号或不添加引号时很纠结。如果你加了引号，输出屏幕上就会真的显示'5+5'。
                error_code: 打印 '5 + 5'
                solution_text: 在这段代码中，输出屏幕将打印'10'。
                solution_code: 打印 5 + 5
        -   title: 学生们对用变量做数学这个概念感到困惑
            example:
                error_text: 有些学生会发现很难用变量做数学。尝试向他们展示非常简单的示例，例如：
                error_code: |-
                    年龄=询问'你现在多大了？'
                    打印'明年你的年龄是'年龄+ 1
                solution_text: 或者像这样更进一步。
                solution_code: "价格=0\n打印 '欢迎来到我们的汉堡店' \n汉堡 = 询问 '你想吃汉堡吗？'\n如果汉堡 =是 价格 = 价格 + 10\n饮料 = 询问 '你想喝饮料吗？'\n如果饮料 = 是 价格 = 价格 + 4\n打印 '那将是 ' 价格 ' 欧元"
    -   level: '7'
        sections:
        -   title: 学生们忘记了重复命令中的一个词，或者他们忘记了打印命令
            example:
                error_text: 确保学生知道同时使用完整的重复命令和打印命令。
                error_code: |-
                    重复3次'因为他是一个快乐的好人'
                    重复 3 打印'没有人可以否认！'
                solution_text: 这是正确的代码：
                solution_code: |-
                    重复3次 打印 '因为他是一个快乐的好伙伴'
                    重复3次 打印 '没有人可以否认！'
        -   title: 学生尝试重复多行
            example:
                error_text: 在此级别中，您只能多次重复一行代码。在这段代码中，学生想打印3种不同的饮料，但它不起作用。它会问这个问题3次，只打印最后一个答案。
                error_code: |-
                    重复3次 饮料 = 询问'你想喝什么？'
                    打印饮料
                solution_text: 您应该进入下一个级别，以便能够重复多行。因此，在这个级别上，您必须单独打印所有内容。
                solution_code: |-
                    饮料 = 询问'你想喝什么？'
                    打印饮料
                    饮料 = 询问'你想喝什么？'
                    打印饮料
                    饮料 =询问'你想喝什么？'
                    打印饮料
        -   title: 学生编写的程序运行时间过长
            example:
                error_text: 在这个级别中，编写长代码非常容易。不允许学生编写需要很长时间才能加载的程序（以保护我们的服务器）。
                error_code: 重复100次打印'我可以重复多少次？'
                solution_text: 确保代码不会太长
                solution_code: 重复20次打印'这就足够了'
    -   level: '8'
        sections:
        -   title: 学生用错了缩进
            example:
                error_text: 缩进是这个级别的一个新概念，对于一些学生来说很难使用。确保他们在使用它编写整个程序之前先练习编写一些简单的代码。
                error_code: |-
                    重复 3 次
                    打印'你好'
                solution_text: 这是正确的代码：
                solution_code: |-
                    重复 3 次
                        打印'你好'
        -   title: 当学生想重复多行时，他们只需要重复1行就行了
            example:
                error_text: 例如，在下面的这段代码中，学生想知道3个人各自点了哪种饮料。但这段代码只问了1次，而不是3次。
                error_code: |-
                    重复3次
                        饮料 = 询问'你想喝什么？'
                    打印饮料
                solution_text: |-
                    在正确的代码里第三行有行首空格。这么一来它也属于“重复格”， 因此被重复3次。
                    向学生们展示这些差别能帮助他们理解为何在运行代码时，需要行首空格。
                solution_code: |-
                    重复3次
                        饮料 = 询问'你想喝什么？'
                        打印饮料
        -   title: 学生想要嵌套如果语句，或者把如果语句放在一个循环中
            example:
                error_text: |-
                    在这个级别中，学生还不允许将如果语句放在其他如果语句中或重复循环中。
                    在下一级中，这是被允许的。
                error_code: |-
                    生日 = 询问 '是你的生日吗？'
                    如果生日=是
                        重复3次
                            打印'嗨，嗨，祝贺！'
                solution_text: 这是该级别的正确代码：
                solution_code: |-
                    生日 = 询问 '是你的生日吗？'
                    如果生日=是
                            打印'嗨，嗨，祝贺！'
                            打印'嗨，嗨，祝贺！'
                            打印'嗨，嗨，祝贺！'
        -   title: 学生编写的程序运行时间过长
            example:
                error_text: 在这个级别中，编写长代码非常容易。不允许学生编写需要很长时间才能加载的程序（以保护我们的服务器）。
                error_code: |-
                    重复100次
                        print '我可以重复多少次？'
                solution_text: 确保代码不会太长
                solution_code: |-
                    重复 20 次
                        打印'这就足够了'
        -   title: 学生使用if（如果）命令检查变量值是否与变量名相同
            example:
                error_text: |-
                    我们已经看到一些学生犯了这个错误。他们为自己的计算机设置了一个密码，但他们把密码设为 “密码”。
                    在第2行，计算机被要求检查变量密码是否与变量密码相同，所以自己和自己是相同的。这意味着答案永远是“是”。
                    所以用这段代码，无论玩家填写什么，答案永远是'你可以进来'。
                error_code: |-
                    密码是询问'密码是什么？'
                    如果密码是密码
                        打印'你可以进来'
                    否则
                        打印'您不许进来'
                solution_text: 你可以通过添加引号来解决这个错误。这样计算机就知道 "如果密码是 '密码'"中的第二个密码是一个字符串值（所以是普通文本），而不是变量名。
                solution_code: |-
                    密码是询问'密码是什么？'
                    如果密码是'密码'
                        打印'你可以进来'
                     否则
                        打印'您不许进来'
    -   level: '9'
        sections:
        -   title: 学生使用缩进时出错
            example:
                error_text: 这个级别最困难的部分是正确的使用缩进。学生喜欢嵌套if（如果）语句，有时甚至在其他嵌套if（如果）语句中。追踪缩进可能会变得非常困难。
                error_code: |-
                    打印'罗宾在市中心散步'
                    位置 = 询问'Robin 是去商店还是回家？'
                    如果位置是商店
                        打印print '她进了商店。'
                        打印 '罗宾看到一本有趣的书'
                        书 = 询问'Robin 买书了吗？'
                            如果书是是
                    打印 '罗宾买了书，然后回家了'
                    否则
                        打印'罗宾离开商店回家了'
                    否则
                        打印'罗宾回家'
                solution_text: 这就是正确的代码。当把if（如果）语句放在其他if（如果）语句中时，请尝试追踪所有不同的结构。
                solution_code: |-
                    打印'罗宾正在市中心散步'
                    位置 = 询问'罗宾是要进商店，还是要回家？'
                    如果位置是商店
                        打印'她进入了商店。'
                        打印'罗宾看到一本看起来很有趣的书'
                        书 = 询问 '罗宾买了这本书吗？'
                        如果书是是
                            打印'罗宾买了这本书，然后回家了'
                        否则
                            打印'罗宾离开商店回家了' 。
                    否则
                        打印'罗宾回家了'
    -   level: '10'
        sections:
        -   title: 学生不能正确使用for（取）命令
            example:
                error_text: 我们经常看到学生尝试打印列表（在示例中的动物们）而不是列表中的项目。
                error_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                      打印'我爱'动物们
                solution_text: 最后一行中的“动物们”一词应改为“动物”。
                solution_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                      打印'我爱'动物
        -   title: 学生们忘记缩进了
            example:
                error_text: 学生们经常忘记在for（取）命令后使用缩进。
                error_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                    打印'我爱'动物
                solution_text: 你应该在for（取）命令后使用缩进。
                solution_code: |-
                    动物们是狗，猫，水滴鱼
                    取动物们中的动物
                      打印'我爱'动物
    -   level: '11'
        sections:
        -   title: 学生忘记使用行首空格
            example:
                error_text: 确保学生使用缩进。
                error_code: |-
                    取 i 在 1 到 5 的范围内
                    打印i
                solution_text: 这就是正确的代码：
                solution_code: |-
                    取 i，在 1 到 5的范围内
                        打印 i
        -   title: 学生们不理解i的意思
            example:
                error_text: |-
                    有些学生不理解i是一个变量。之所以选择i，是因为在Python编程中经常使用它，但你也可以很容易地使用不同的变量名。
                    例如，这段代码：
                error_code: |-
                    取 i 在 1 到 5 的范围内
                    打印i
                solution_text: 也可以用这段代码来代替。它的作用是一样的。
                solution_code: |-
                    取香蕉在 1 到 5 的范围内
                        打印香蕉
    -   level: '12'
        sections:
        -   title: 学生们忘记引号了
            example:
                error_text: 与以前的级别相比，学生现在需要使用更多的引号。在此示例中，引号在列表和 if （如果）命令中被遗忘。
                error_code: |-
                    超级英雄们 = 蜘蛛侠、蝙蝠侠、钢铁侠
                    超级英雄=随机的超级英雄们
                    如果超级英雄 = 蝙蝠侠
                        打印'我是蝙蝠侠！'
                solution_text: 这就是正确的代码：
                solution_code: |-
                    超级英雄们 = '蜘蛛侠'、'蝙蝠侠'、'钢铁侠'
                    超级英雄=随机的超级英雄们
                    如果超级英雄 = '蝙蝠侠'
                        打印'我是蝙蝠侠！'
        -   title: 学生在他们想要用于计算的数字上使用引号
            example:
                error_text: |-
                    如果你想让电脑把数字识别成文字，你也能把他们放在引号里。这也代表了你无法使用这些数字来进行计算。
                    在以下的例子里， 你无法使用数字25进行计算， 因为它在引号里。
                error_code: |-
                    分数 = '25'
                    答案是 问 '你要多一分吗?'
                    如果 答案 是 '是'
                        分数 = 分数 + 1
                        打印分数
                solution_text: '这是正确的代码:'
                solution_code: |-
                    分数 = 25
                    答案是 问 '你要多一分吗?'
                    如果 答案 是 '是'
                        分数 = 分数 + 1
                        打印分数
        -   title: 学生在十进制数里使用了逗号而非句号
            example:
                error_text: 从这个级别开始你能使用十位数，但不能使用逗号.
                error_code: 打印 2,5 + 2,5
                solution_text: '这是正确的代码:'
                solution_code: 打印 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: 学生搞混了 `和` 与 `或`
            example:
                error_text: 两个指令虽然可能看起来类似，然而它们拥有不同的功能.
                error_code: |-
                    游戏是问“你想玩游戏吗？”
                    时间是问'你有时间玩吗？
                    如果游戏是“是”或时间是“是”
                         打印“让我们玩吧！”
                solution_text: 在这种情况下，这个人应该在两个问题上都回答“是”，所以你应该使用“and”。
                solution_code: |-
                    游戏是问“你想玩游戏吗？”
                    时间是问'你有时间玩吗？
                    如果游戏是“是”或时间是“是”
                         打印“让我们玩吧！”
    -   level: '14'
        sections:
        -   title: 学生混淆“<” 和 “> ”符号
            example:
                error_text: 通常，学生已经从数学课上熟悉了这些符号。 但是，如果您的学生还不知道这些标志，他们可能会遇到挑战。
                error_code: |-
                    年龄=询问'你现在多大了？'
                    如果 年龄<12
                        打印 '我比你大'
                solution_text: 这是正确的代码：
                solution_code: |-
                    年龄=询问'你现在多大了？'
                    如果 年龄>12
                        打印 '你比我大'
        -   title: 学生错误地使用`!=` `<=` 和 `>=`
            example:
                error_text: 这些符号对大多数学生来说可能是新的。一定要向你的学生解释这些符号。
                error_code: |-
                    姓名=提问'你叫什么名字'
                    如果 姓名 =<'海蒂'
                        打印 '你不是海蒂'
                solution_text: 这是正确的代码：
                solution_code: |-
                    姓名=提问'你叫什么名字'
                    如果 姓名 !='海蒂'
                        打印 '你不是海蒂'
        -   title: 学生忘记使用==符号
            example:
                error_text: 在这一关，学生仍然可以使用=或is。但在其它时候，或者在python中，他们可能会因此遇到麻烦。所以最好是训练他们使用它。
                error_code: |-
                    姓名=提问'你叫什么名字'
                    如果 姓名 = '海蒂'
                        打印'你很酷！'
                solution_text: 这是正确的代码：
                solution_code: |-
                    姓名=提问'你叫什么名字'
                    如果 姓名 == '海蒂'
                        打印'你很酷！'
    -   level: '15'
        sections:
        -   title: 学生们忘记了while循环中的缩进
            example:
                error_text: 缩进对学生来说通常很难。
                error_code: |-
                    答案=0
                    只要 答案!=25
                    答案=提问'5乘5等于多少？'
                    打印 '回答正确'
                solution_text: 这是正确的代码：
                solution_code: |-
                    答案=0
                    只要 答案!=25
                        答案=提问'5乘5等于多少？'
                    打印 '回答正确'
    -   level: '16'
        sections:
        -   title: 学生忘记加括号
            example:
                error_text: 从这关起，列表需要放在括号里。
                error_code: |-
                    冰淇淋='草莓口味','巧克力口味'
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
                solution_text: 这是正确的代码：
                solution_code: |-
                    冰淇淋=['草莓口味','巧克力口味']
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
        -   title: 学生们使用错误的括号
            example:
                error_text: 从这关起，列表需要放在括号里。
                error_code: |-
                    冰淇淋=('草莓口味','巧克力口味'}
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
                solution_text: 这是正确的代码：
                solution_code: |-
                    冰淇淋=['草莓口味','巧克力口味']
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
        -   title: 学生们把注意力集中在括号上而忘记了引号
            example:
                error_text: 学生们有时非常关注新学的语法，而忘记了引号。
                error_code: |-
                    冰淇淋=[草莓口味,巧克力口味]
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
                solution_text: 这是正确的代码：
                solution_code: |-
                    冰淇淋=['草莓口味','巧克力口味']
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
        -   title: 学生们仍然使用旧的随机命令
            example:
                error_text: 学生们有时非常关注新学的语法，而忘记了引号。
                error_code: |-
                    冰淇淋=[草莓口味,巧克力口味]
                    打印 '我喜欢' 随机的冰淇淋'冰淇淋
                solution_text: 这是正确的代码：
                solution_code: |-
                    冰淇淋=['草莓口味','巧克力口味']
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
        -   title: 学生们把注意力集中在括号上而忘记了引号
            example:
                error_text: 学生们有时非常关注新学的语法，而忘记了引号。
                error_code: |-
                    冰淇淋=[草莓口味,巧克力口味]
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
                solution_text: 这是正确的代码：
                solution_code: |-
                    冰淇淋=['草莓口味','巧克力口味']
                    打印 '我喜欢' 冰淇淋[随机]'冰淇淋
    -   level: '17'
        sections:
        -   title: 学生们像`{else}`一样使用 `{elif}`，所以没有条件
            example:
                error_text: '`{elif}` 命令后面需要一个条件。 它不能像`{else}`一样无条件地使用。'
                error_code: |-
                    color = ask '你最喜欢的颜色是什么?'
                    if color == '绿色':
                        print '绿色很漂亮'
                    elif:
                        print '我喜欢绿色'
                solution_text: '这是正确的代码:'
                solution_code: |-
                    color = ask '你最喜欢的颜色是什么?'
                    if color == '绿色':
                        print '绿色很漂亮'
                    elif color == 黄色:
                        print '黄色也可以'
                    else:
                        print '我喜欢绿色'
        -   title: 学生忘记冒号
            example:
                error_text: 在每个需要缩进的命令之后，应使用冒号。
                error_code: |-
                    answer = ask '你好嘛?'
                    {if} answer {is} '很好':
                        {print} '我也是!'
                    {elif} answer {is} '不好':
                        {print} '让我为你加油!'
                    {else}:
                        {print} '我很好!'
                solution_text: '这是正确的代码:'
                solution_code: |-
                    answer = ask '你好嘛?'
                    if answer is '很好':
                        print '我也是!'
                    elif answer is '不好':
                        print '让我为你加油!'
                    else:
                        print '我很好!'
    -   level: '18'
        sections:
        -   title: 学生忘记使用括号
            example:
                error_text: 学生会忘记在文本两边加上括号。
                error_code: print '我的名字是海蒂!'
                solution_text: '这是正确的代码:'
                solution_code: print('我的名字是海蒂!')
        -   title: 学生仍然会使用ask命令
            example:
                error_text: 从第一级开始就使用了ask命令。因此学生可能很难切换到input而不是ask。
                error_code: |-
                    print('我的名字是海蒂!')
                    name = ask('你的名字呢?')
                    print('那么你的名字是 ', name)
                solution_text: '这是正确的代码:'
                solution_code: |-
                    print('我的名字是海蒂!')
                    name = input('你的名字呢?')
                    print('那么你的名字是 ', name)
        -   title: 学生可以使用括号作为引号
            example:
                error_text: 他们已经学会将变量保留在引号之外，因此他们可能会对括号做同样的事情。 但这不是正确使用它们的方法。
                error_code: |-
                    temperature = 25
                    print('室外温度 ') temperature ('摄氏度')
                solution_text: '这是正确的代码:'
                solution_code: |-
                    temperature = 25
                    print('室外温度是 ', temperature, '摄氏度')
