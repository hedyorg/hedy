levels:
    1:
        intro: |-
            ### Printen en invoer
            Aan het einde van de les kun jij:
            * Code schrijven die tekst print
            * Een verhaal met invoer maken
        exercises:
        -   type: text
            contents: |-
                ### Opdrachten
                Een computer doet niet zomaar zelf iets, je moet een computer altijd een opdracht geven. Zo'n opdracht heet commando. Om code uit te printen, gebruiken we de code `print`.
    
                ### Tekst printen    
                Je hebt net op het bord de `print` opdracht gezien.
                Een `print` opdracht print een woord uit, als het tussen aanhalingstekens staat. Bijvoorbeeld zo `print hallo`.
                #### Opdracht 1: Voorspel de uitvoer
        -   type: output
            code: "print Hallo allemaal"
            answer: "Hallo allemaal"
            lines: '1'
        -   type: output
            code: "print goedemorgen"
            answer: "goedemorgen"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 2: Foutje?
                Soms sluipt er een foutje in je code. Dat is niet erg, maar Hedy kan je code dan niet goed lezen.
                Welke van deze code zijn fout, denk jij?
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "prnt Hallo allemaal!"
            answer: "Fout"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print print"
            answer: "Goed"
        -   type: text
            contents: |-
                ### Invoer vragen
    
                Alleen tekst is een beetje saai. Je kan in Hedy ook om _invoer_ vragen. Invoer is tekst die je aan de computer geeft.
                De computer onthoudt die tekst en kan die later weer aan jou laten zien.
                Deze code toont de vraag 'Hoe heet jij?'
    
                ```hedy
                ask Hoe heet jij?
                ```
    
                ### Invoer laten zien
    
                Alleen een ask slaat het antwoord op, maar laat het niet zien. Daarvoor heb je de opdracht `echo` nodig. Die laat het antwoord zien op het einde van de zin.
                Bijvoorbeeld zo:
    
                ```hedy
                ask Hoe heet jij?
                echo dus jij heet: 
                ```
    
                Als iemand die Maan heet deze code zou gebruiken, dan wordt de uitvoer:
    
                ```
                dus jij heet: Maan
                ```
    
                Let op, het komt precies zo in beeld als het er staat, dus met hetzelfde hoofdlettergebruik en de dubbele punt erbij!
    
                #### Opdracht 3: Voorspel de uitvoer
    
                Voorspel wat de uitvoer van deze codes is. Doe alsof je je eigen naam hebt ingevuld.

        -   type: output
            code: |-
                ask Hoe heet jij?
                echo dus jij heet:
            answer: "dus jij heet: **naam**"
            lines: '2'
        -   type: output
            code: |-
                ask Hoe heet jij?
                echo Leuk om je te ontmoeten,
            answer: "Leuk om je te ontmoeten, **naam**"
            lines: '2'
        -   type: text
            contents: |-
                #### Opdracht 4: Programmeer-woorden 
    
                Iedere les gaan we nieuwe woorden leren, deze les ook. Weet jij wat deze termen betekenen? Leg het uit je eigen woorden.
        -   type: define
            word: commando
            answer: "Een opdracht die je aan de computer geeft, bijv print."
            lines: '1'
        -   type: define
            word: invoer
            answer: "Wat je intikt, als Hedy een ask venster laat zien."
            lines: '1'
        -   type: define
            word: uitvoer
            answer: "Wat Hedy op het scherm zet als je op Uitvoeren drukt, in het rechterscherm."
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 5: Codes
    
                We hebben tot nu toe 3 codes geleerd: `print`, `ask` en `echo`. Wat doen die? Leg het uit in je eigen woorden. 

        -   type: define
            word: het commando `print`
            answer: "Zet tekst op het scherm."
            lines: '1'
        -   type: define
            word: het commando `ask`
            answer: "Vraagt om invoer van de gebruiker."
            lines: '1'
        -   type: define
            word: het commando `echo`
            answer: "Herhaalt de invoer van de gebruiker."
            lines: '1'
    2:
        intro: |-
            ### Variabelen
    
            Aan het einde van de les kun jij:
    
            * Iets opslaan in een variabele
            * Een verhaal en tekening maken waarin je een variabele gebruikt
        exercises:
        -   type: text
            contents: |-
                ### Variabele opslaan en gebruiken
    
                Je hebt net op het bord de `is` opdracht gezien. 
                Een `is` opdracht slaat iets op in de computer, en geeft het een naam. We noemen dat een variabelen.
                Wat in de variabele is opgeslagen noemen we de waarde van de variabele.
            code: |-
                naam is Mo
                print naam
        -   type: text
            contents: |-
                #### Opdracht 1: Omcirkel het juiste stukje code
        -   type: circle
            goal: variabelen
            code: |-
                naam is Hedy
                print Hallo naam
                leeftijd is 17
                print Jij bent leeftijd jaar oud
            answer: "Op alle regels"
        -   type: circle
            goal: plekken waar een variabele **wordt ingesteld**
            code: |-
                naam is Hedy
                print Hallo naam
                leeftijd is 17
                print Jij bent leeftijd jaar oud
            answer: "Op regel 1 en 3"
        -   type: circle
            goal: plekken waar een variabele **wordt gebruikt**
            code: |-
                naam is Hedy
                print Hallo naam
                leeftijd is 17
                print Jij bent leeftijd jaar oud
            answer: "Op regel 2 en 4"
        -   type: text
            contents: |-
                #### Opdracht 2: Voorspel de uitvoer           
                Tip: Vind je het lastig om de uitvoer te voorspellen? Gebruik dan dit stappenplan:
    
                1. Omcirkel de plek waar een variabele wordt ingesteld
                2. Omcirkel de plek waar de variabele wordt gebruikt
                3. Trek een lijn tussen deze plekken
                4. Zet de waarde (aan de rechterkant van de `is`) op de plek van het gebruik.
    # TODO Voorbeeldje?
        -   type: output
            code: |-
                naam is Mo
                print Goed bezig naam!
            answer: "Goed bezig Mo!"
            lines: '1'
        -   type: output
            code: |-
                naam is Mo
                print Goed bezig Mo!
            answer: "Goed bezig Mo!"
            lines: '1'
        -   type: output
            code: |-
                voornaam is Layla
                print Goedemorgen naam!
            answer: "Goedemorgen Layla!"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                achternaam is Jansen
                print Goedemorgen achternaam!
            answer: "Goed"

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                naam is
                print Goedemorgen naam!
            answer: "Fout. naam wordt niet ingesteld"

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                naam is Jansen
                print Goedemorgen meneer naam!
                print Hallo meneer naam!
            answer: "Goed. Je mag een variabele meer dan eens gebruiken"
        -   type: text
            contents: |-
                ### Invoer vragen
    
                Alleen tekst opslaan is nog niet krachtig. In level 1 hebben we de code `ask` gezien.
    
                Die code mag je nu combineren met een `is`. Dat gaat zo:
            code: |-
                naam is ask Hoe heet jij?

        -   type: text
            contents: |-
                ### Invoer laten zien
                Je kan nu gewoon met een `print` het antwoord laten zien, zonder `echo`.
            code: |-
                naam is ask Hoe heet jij?
                print dus jij heet: naam

        -   type: text
            contents: |-
                Als iemand die Maan heet deze code zou gebruiken, dan wordt de uitvoer: `dus jij heet: Maan`
                #### Opdracht 4: Voorspel de uitvoer            
                Voorspel wat de uitvoer van deze codes is. Doe alsof je je eigen naam hebt ingevuld.
        -   type: output
            code: |-
                naam is ask Hoe heet jij?
                print dus jij heet: naam
            answer: "Dus jij heet: **naam**"
            lines: '1'
        -   type: output
            code: |-
                toestand is ask Hoe gaat het met jou?
                print Dus het gaat toestand met jou
            answer: "Dus het gaat **goed** met jou"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 5: Programmeer-woorden
                We hebben deze les weer nieuwe woorden geleerd! Leg ze uit je eigen woorden.
        -   type: define
            word: variabele
            answer: "Een naam die je geeft aan iets, bijv voornaam of leeftijd."
            lines: '1'
        -   type: define
            word: waarde
            answer: "Wat je opslaat in een variabele, bijv Henk of 12."
            lines: '1'
        -   type: define
            word: instellen
            answer: "Het instellen van een variabele met een is code"
            lines: '1'
        -   type: define
            word: interactief
            answer: "Een programma waarbij een gebruiker invoer kan geven."
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 6: Codes
                We hebben nieuwe codes geleerd: `is`, `is ask` samen. Wat doen die? Leg het uit in je eigen woorden.
        -   type: define
            word: het commando `is`
            answer: "Waarde (rechts van de is) opslaan in een variabele (links van de is)"
            lines: '1'
        -   type: define
            word: het commando `is ask`
            answer: "Vraagt om invoer van de gebruiker en die opslaan in de variabele links van de is."
            lines: '1'
    3:
        intro: |-
            ### Lijsten en willekeurigheid
            Aan het einde van de les kun jij:
    
            * Meerdere dingen opslaan in een variabele, zo'n variabele heet een lijst.
            * Een verhaal maken waarin willekeurige dingen gebeuren.
            * Een tekening maken waarin willekeurige dingen verschijnen.
        exercises:
        -   type: text
            contents: |-
                ### Variabelen
                Je hebt net op het bord de `is` opdracht gezien met een lijst. 
                Net als bij een gewone variabele, slaan we iets op in een lijst met `is`.
            code: |-
                vrienden is Mo, Layla, Denny
                print Ik ga vandaag naar vrienden at random

        -   type: text
            contents: |-
                #### Opdracht 1: Omcirkel het juiste stukje code              

        -   type: circle
            goal: lijsten
            code: |-
                vandaag is maandag
                klassen is 1HC, 1HB, 1HA
                lokalen is 011, 304, 305, OLC
            answer: "klassen en lokalen"
        -   type: circle
            goal: plek(ken) waar tekst uit een lijst wordt gebruikt
            code: |-
                klassen is 1HC, 1HB, 1HA
                print vandaag heeft klassen at random vrij!
            answer: "Op het einde van regel 2"
        -   type: text
            contents: |-
                #### Opdracht 2: Voorspel de uitvoer
                Vind je het lastig? Gebruik dan weer het stappenplan om variabele-uitvoer te voorspellen.
    
                1. Omcirkel de plek waar de lijst wordt ingesteld
                2. Omcirkel de plek waar de lijst wordt gebruikt
                3. Trek een lijn tussen deze plekken
                4. Bij een `at` `random` mag je zelf willekeurig iets uit de lijst kiezen.
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal
                print Vandaag les van docenten at random!
            answer: Vandaag les van **keuze uit docenten**
            lines: '1'
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal
                print De docent vandaag is Hermans.
            answer: De docent vandaag is Hermans.
            lines: '1'
        -   type: output
            code: |-
                weer is zonnig, regen, wolken, onweer
                print Wat is het lekker weer vandaag!
            answer: Wat is het lekker weer vandaag!
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                weer is zonnig, regen, wolken, onweer
                print Bah! De computer loopt weer vast.
            answer: "Fout. Je kan een lijst niet printen."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                docenten is Hermans
                print Vandaag alweer docenten at random
            answer: "Fout, docenten is geen lijst"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                docenten is onweer, regen, ijzel
                print Vandaag alweer docenten at random!
            answer: "Goed, de naam hoeft niet te kloppen voor de computer."
        -   type: text
            # [Teacher] Dit zijn alle avonturen zonder `add to` en `remove from`.[/Teacher]
            # Misschien ook nog even mooier weergeven?
            contents: |-
                ## Avonturen
                Dit is een goed moment voor deze avonturen:
                Introductie
                Willekeurig
                Dobbelsteen
                Steen, papier, schaar
                Muziek
                Waarzegger
                Restaurant
                Spookhuis
                Afwas?
        -   type: text
            contents: |-
                ### Lijsten aanpassen
    
                Tot nu toe hebben we lijsten steeds aan het begin van het programma ingesteld.
            code: |-
                antwoorden is ja, nee, misschien
                print Het antwoord is antwoorden at random
        -   type: text
            contents: |-
                Maar soms wil je dat de gebruiker van een programma ook opties kan toevoegen.
                Dat doe je met een `add` en een `to` commando. Je kan ook iets uit een lijst verwijderen, met `remove` en `from`.

            code: |-
                dieren is 🐿, 🦔, 🦇, 🦉
                dier is ask Wat zou het kunnen zijn?
                add dier to dieren
                print het was een dieren at random
        -   type: text
            contents: |-
                #### Opdracht 4: Goed of fout?

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                letters is a,b,c,d
                remove a to letters
            answer: "Fout. Bij remove hoort from, niet to."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                eten is pizza, friet, kapsalon
                remove kroket from eten
            answer: "Goed, je mag iets verwijderen dat niet in de lijst zit. Maar dat heeft natuurlijk geen nut."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                eten is pizza, friet, kapsalon
                add pizza to eten
            answer: "Goed, je mag iets toevoegen dat al in de lijst zit. Dan staat het twee keer op de lijst."
        -   type: text
            contents: |-
                #### Opdracht 5: Schrijf de code
                Kijk goed naar de uitvoer, en schrijf er een passende code bij.
                **Zorg ervoor dat er steeds minstens een willekeurige keuze in je programma zit, dus niet alleen een print!**
        -   type: input
            answer: |-
                nummers is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                print Welkom bij de bingoavond
                print De drie geluksnummers zijn:
                print nummers at random en print nummers at random en print nummers at random
            output: |-
                Welkom bij de bingoavond
                De drie geluksnummers zijn:
                5 en 3 en 10
        -   type: input
            answer: |-
                films is Avengers, Barbie, Inside Out
                print We gaan vanavond naar de film.
                print We kiezen: films at random
            output: |-
                We gaan vanavond naar de film.
                We kiezen: Inside Out

        -   type: text
            contents: |-
                #### Opdracht 6: Programmeerwoorden
                We hebben deze les weer nieuwe programmeerwoorden geleerd! Leg ze uit je eigen woorden.

        -   type: define
            word: lijst
            answer: "Een variabele waarin meerdere waardes kunnen worden opgeslagen"
            lines: '1'
        -   type: define
            word: willekeurig
            answer: "Iets dat door de computer wordt uitgekozen."
            lines: '1'
        -   type: define
            word: toevoegen
            answer: "Iets in een lijst erbij zetten"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 7: Codes
                De code `is` is in dit level veranderd, en we hebben ook nieuwe codes geleerd.
                Wat doen die? Leg het uit in je eigen woorden.
        -   type: define
            word: "het commando `is` (Let op: `is` kan dus meerdere dingen doen!)"
            answer: "Waarde (rechts van de is) opslaan in een variabele of lijst (links van de is)"
            lines: '1'
        -   type: define
            word: "het commando `add to` "
            answer: "Voeg iets aan een lijst toe. Het element om toe te voegen staat tussen `add` en `to`, en de lijst staat erachter."
            lines: '1'
        -   type: define
            word: "het commando `remove from` "
            answer: "Verwijdert iets uit een lijst. Het element om te verwijderen staat tussen `add` en `to`, en de lijst staat erachter."
            lines: '1'
        -   type: define
            word: "het commando `at random` "
            answer: "Kiest een willekeurig element uit de lijst."
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?

        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    4:
        intro: |-
            ## Aanhalingstekens
            Aan het einde van de les:
    
            * snap jij waarom aanhalingstekens nodig zijn in programmeren.
            * kan jij aanhalingstekens op de goede plek in code zetten.
            * kan jij foutmeldingen over aanhalingstekens goed lezen.
        exercises:
        -   type: text
            contents: |-
                ### Aanhalingstekens
    
                We hebben geleerd om aanhalingstekens te gebruiken, als iets letterlijk zo in beeld moet komen.
                We gebruiken aanhalingstekens bij `print` en bij `ask`.
            code: |-
                vriend is ask 'Hoe heet jij?'
                print 'Leuk! Ik ga naar de stad met ' vriend
        -   type: text
            contents: |-
                #### Opdracht 1: Maak de code af.
                Deze opdrachten doe je in twee stappen:
                1. Zet op de juiste plekken aanhalingstekens in de code.
                2. Staat alles goed? Voorspel dan wat de uitvoer van de code is.

        -   type: output
            code: |-
                print Hallo allemaal!
                print Welkom bij Hedy
            answer: |-
                Hallo allemaal!
                Welkom bij Hedy
            lines: '2'
        -   type: text
            contents: |-
                Vergeet niet deze opdrachten in twee stappen te doen, eerst de aanhalingstekens links.
                Dan de code rechts!

        -   type: output
            code: |-
                naam is Hermans
                lokaal is 305
                print Vandaag hebben we les van naam in lokaal!
            answer: "Vandaag hebben we les van Hermans in 305!"
            lines: '1'
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal
                print De docent vandaag is docenten at random.
            answer: "De docent vandaag is Hermans"
            lines: '1'
        -   type: output
            code: |-
                weer is zonnig, regen, wolken, onweer
                print Wat is het lekker weer vandaag!
            answer: "Wat is het lekker weer vandaag!"
            lines: '1'
        -   type: output
            code: |-
                print Wat is het lekker weer vandaag!
                naam is Bassie
            answer: "Wat is het lekker weer vandaag!"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 2: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print 'Daar lopen twee lama's'"
            answer: "Fout. Er staat een aanhalingsteken tussen de enkele aanhalingstekens."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print 'De lama wandelt op straat"
            answer: "Fout. De aanhalingstekens moeten altijd in paren gebruikt worden."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                print "Daar lopen twee oma's"
            answer: "Goed! Als je twee aanhalingstekens gebruikt dan kan je wel oma's schrijven."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                print 'De lama wandelt op straat'
                print "Wat een avontuur"
            answer: "Goed. Je mag aanhalingstekens door elkaar gebruiken, als ze per regel maar hetzelfde zijn!"
        -   type: text
            contents: |-
                #### Ask
                Vergeet niet dat je ook bij `ask` aanhalingstekens gebruikt!
    
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "ask 'Zie jij die twee konijnen daar?'"
            answer: "Fout. Vergeet niet bij ask een variabele te gebruiken!"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "naam is ask 'Hoe heet jij?"
            answer: "Fout. Aanhalingstekens moeten altijd in paren gebruikt worden."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                aantal is ask "Hoeveel capibara's lopen daar?"
            answer: "Goed."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                aantal is ask "Hoeveel capibara's lopen daar?"
                print 'Dat zijn er aantal'
            answer: "Fout. Het woord aantal wordt geprint en niet de variabele"
        -   type: text
            contents: |-
                #### Opdracht 4: Schrijf de code
                Kijk goed naar de uitvoer, en schrijf er een passende code bij.

        -   type: input
            answer: |-
                print 'Welkom bij de bingoavond'
                print 'Hier komt het eerste getal...!'
            output: |-
                Welkom bij de bingoavond
                Hier komt het eerste getal...!

        -   type: input
            answer: |-
                print 'We gaan vanavond naar de film.'
                film is ask 'Waar heb jij zin in?'
            output: |-
                We gaan vanavond naar de film.
                Waar heb jij zin in?
        -   type: text
            contents: |-
                #### Opdracht 5: Programmeerwoorden
                We hebben deze les weer nieuwe programmeerwoorden geleerd! Leg ze uit je eigen woorden.
        -   type: define
            word: aanhalingstekens
            answer: "Hoge komma's, die je gebruikt als je iets letterlijk wilt printen."
            lines: '1'
        -   type: define
            word: het om aanhalingstekens te gebruiken in Hedy?
            answer: "Je gebruikt aanhalingstekens wanneer iets door de computer precies zo moet worden geprint."
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 6: Codes
                We hebben ook nieuwe codes geleerd in level 4.
        -   type: define
            word: het commando `clear`?
            answer: "Maakt het scherm leeg"
            lines: '1'
        -   type: define
            word: het commando `color`?
            answer: "Verandert de kleur van de turtle"
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    5:
        intro: |-
            ## if else
            Aan het einde van de les:
            * hoe je de computer kan laten reageren op invoer.
        exercises:
        -   type: text
            contents: |-
                ### Keuzes maken
                Tot nu toe voerde Hedy altijd alle regels code uit. Vanaf nu kan je met een `if` bepaalde regels uitvoeren, alleen in bepaalde gevallen.
                De code die je na `if` schrijft, noem je een conditie.
                In dit voorbeeld is de conditie `vriend is Jasmijn`.
            code: |-
                vriend is ask 'Hoe heet jij?'
                if vriend is Jasmijn print 'Hallo!' else print 'Nee, jij niet!'
        -   type: text
            contents: |-
                #### Opdracht 1: Onderstreep de condities
                Wat is een conditie? Onderstreep in deze codes steeds de conditie.
        -   type: circle
            goal: de conditie
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is vrijdag print 'Ja' else print 'Nee'
            answer: "vandaag is vrijdag"
        -   type: circle
            goal: de conditie
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is zaterdag print 'Geen school vandaag' 
                else print 'Helaas wel'
            answer: "vandaag is zaterdag"
        -   type: circle
            goal: de conditie
            code: |-
                leeftijd is ask 'Hoe oud ben jij?'                    
                if leeftijd is 16 print 'Perfecto'
                else print 'Jij bent te jong!'
            answer: "leeftijd is 16"
        -   type: text
            contents: |-
                #### Opdracht 2: Omcirkel de juiste regels
                Welke code wordt uitgevoerd? Omcirkel alleen die stukken.
                Doe alsof het vandaag vrijdag is, en jij 12 jaar bent.

        -   type: circle
            goal: code die wordt **uitgevoerd**
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is vrijdag print 'Ja' else print 'Nee'
            answer: "print 'Ja'"
        -   type: circle
            goal: code die wordt **uitgevoerd**
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is zaterdag print 'Geen school vandaag' 
                else print 'Helaas wel'
            answer: "print 'Helaas wel'"
        -   type: circle
            goal: code die wordt **uitgevoerd**
            code: |-
                leeftijd is ask 'Hoe oud ben jij?'                    
                if leeftijd is 16 print 'Perfecto' 
                else print 'Jij bent te jong!'
            answer: "print 'Jij bent te jong!'"
        -   type: text
            contents: |-
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                leeftijd is ask 'Hoe oud ben jij?'                    
                if leeftijd is 16 print 'Perfecto' else 'Jij bent te jong!'
            answer: "Fout. Er staat geen print achter else"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                dier is ask 'Wat voor dier is dat?'                    
                if dier is Lama print 'Beeeee'
            answer: "Goed! Er hoeft geen else code te staan"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print \"Daar lopen twee oma's\""
            answer: "Goed! Als je twee aanhalingstekens gebruikt dan kan je wel oma's schrijven."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                if naam Hedy 
                print 'Programmeren is leuk!'
            answer: "Fout, de is mist."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                ask 'Hoe heet deze school?'
                if school is LK print 'Ja!'
            answer: "Fout. Er staat geen variabele bij ask."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                aantal is ask "Hoeveel capibara's lopen daar?"
                if aantal is 5 print 'Dat zijn er dan aantal'
            answer: "Fout. Het woord aantal wordt geprint en niet de variabele"
        -   type: text
            contents: |-
                #### Opdracht 4: Voorspel de uitvoer
                Wat is de uitvoer van deze programma's? 
                Let op! Soms staat er random in een programma. Dan moet je zelf kiezen wat Hedy zou kiezen.
                Er kunnen dan dus meerdere antwoorden goed zijn!

        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal                    
                docent is docenten at random                    
                if docent is Hermans print 'Hoera!'
            answer: "Hoera! of niks"
            lines: '1'
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal                    
                docent is docenten at random                    
                if docent is Hermans print 'Jammer!' else print 'Hoera!'
            answer: "Hoera! of Jammer!"
            lines: '1'
        -   type: output
            code: |-
                getallen is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10                    
                print 'Welkom bij de bingoavond'                    
                getal is getallen at random                    
                if getal is 10 print 'Gewonnen!' else print 'Helaas'
            answer: |-
                Welkom bij de bingoavond
                Gewonnen! of Helaas
            lines: '2'
        -   type: output
            code: |-
                getal is ask 'Wat is jouw lievelingsgetal?'                    
                if getal is 10 print 'Mijne ook!'
            answer: "Mijne ook! of niks"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 5: Programmeerwoorden
                We hebben deze les weer nieuwe programmeerwoorden geleerd! Leg ze uit je eigen woorden.

        -   type: define
            word: conditie
            answer: "Iets dat waar of niet waar is. Het staat achter de code `if`"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 6: Codes
                We hebben ook nieuwe codes geleerd in level 5.

        -   type: define
            word: het commando `if`
            answer: "Bepaalt welke regel wordt uitgevoerd. Als de conditie waar is, wordt de code erachter uitgevoerd."
            lines: '1'
        -   type: define
            word: het commando `else`
            answer: "Bepaalt welke regel wordt uitgevoerd. Als de conditie niet waar is, wordt de code erachter uitgevoerd."
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?

        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    6:
        intro: |-
            ## Rekenen
            Aan het einde van de les weet jij:
            * hoe je met Hedy kan rekenen
        exercises:
        -   type: text
            contents: |-
                ### Rekenen
                Een belangrijke taak die computers goed kunnen uitvoeren is rekenen.
    
                De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5`.
                De min gaat ook goed, dat is `5 - 5`. 
                De keer is een beetje anders, die programmeer je met het sterretje (boven de 8): `5 * 5`.
                Gedeeld door gaat met een schuine streep vooruit: `5 / 5`.
    
                Let op! Rekencode hoeft niet tussen aanhalingstekens.

            code: |-
                print 'vijf keer vijf is ' 5 * 5
        -   type: text
            contents: |-
                #### Opdracht 1: Voorspel the uitvoer
                Wat is de uitvoer van deze programma's?
        -   type: output
            code: |-
                print 'twee plus tien is ' 2 * 10
                print 5 * 5 ' is 30 min 5'
                print 10 / 2
            answer: |-
                twee plus tien is 20
                25 is 30 min 5
                5
            lines: '3'
        -   type: text
            contents: |-
                #### Opdracht 2: Rekenen
                Deze opdracht doe je weer in stappen. 
                1. Maak eerst de codes af, op een logische manier door iets in te vullen op de streepjes.
                2. Is de code af? Vul dan in wat de uitvoer van de code wordt.
        -   type: output
            code: |-
                print 'vijf plus tien is ' ___
                print 'zes min vijf is ' ___
                print 'honderd gedeeld door vijf is ' ___
                ___ _________________________ 4 * 12
            answer: |-
                vijf plus tien is 50
                zes min vijf is 1
                honderd gedeeld door vijf is 20
                vier keer twaalf is 48
            lines: '4'
        -   type: text
            contents: |-
                ### Opdracht 2: Rekenen met ask en variabelen
                Je kan een rekensom ook opslaan in een variabele, vergelijken met een `ask` en een som uitvoeren in een `if`.
                Dat gaan we nu oefenen. 
                Voorspel wat de uitvoer van deze programma's is.
                Bij een `ask` en `random` mag je zelf kiezen wat het antwoord wordt, maar het moet wel kunnen!
        -   type: output
            code: |-
                som = 2 * 5
                print 'Het antwoord op deze som is ' som
            answer: |-
                Het antwoord op deze som is 10
            lines: '1'
        -   type: output
            code: |-
                goede_antwoord = 142 / 2
                jouw_antwoord = ask 'Wat is 142 gedeeld door twee?'
                if goede_antwoord = jouw_antwoord
                print 'Knap werk!'
                else print 'Helaas pindakaas'
            answer: |-
                'Knap werk!' of 'Helaas pindakaas'
            lines: '1'
        -   type: output
            code: |-
                getallen is 2, 4, 6, 7, 9, 11, 17
                getal is getallen at random
                print 'Hoeveel is ' getal ' keer 7?'
            answer: |-
                Hoeveel is 7 keer 7? (of een ander getal uit 2, 4, 6, 9, 11, 17)
            lines: '1'
        -   type: output
            code: |-
                lievelings is ask 'Wat is je lievelingsgetal?'
                print '3 keer ' lievelings ' is ' 3 * lievelings
            answer: |-
                3 keer 6 (bijvoorbeeld) is 18
            lines: '1'
        -   type: text
            contents: |-
                ### Opdracht 3: Invoer
                Je krijgt nu weer een uitvoer te zien. Schrijf een programma dat bij deze uitvoer kan horen.
                Let op: vaak zijn er meerdere antwoorden goed, je mag zelf iets kiezen, als het maar kan.
                Kijk ook goed naar het aantal streepjes!
        -   type: input
            answer: |-
                print 'Dit is een heel groot getal:' 4*17
            output: |-
                Dit is een heel groot getal: 68
        -   type: input
            answer: |-
                print 1000/10 ' is het antwoord op 1000/10.'
            output: |-
                100 is het antwoord op 1000/10.
        -   type: input
            answer: |-
                getallen is 1,2,3,4,5,6,7,8,9,10
                print getallen at random * 7 ' is een willekeurig getal uit de tafel van 7'
            output: |-
                14 is een willekeurig getal uit de tafel van 7
        -   type: text
            contents: |-
                #### Opdracht 4: Programmeerwoorden
                We hebben deze les nieuwe programmeertekens geleerd. We oefenen ze nog een keer.
        -   type: define
            word: "keer"
            answer: "*"
            lines: '1'
        -   type: define
            word: "gedeeld door"
            answer: "/"
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    7:
        intro: |-
            ## Herhalen!
            Aan het einde van de les kan jij:
            * een regel code meerdere keren uitvoeren
        exercises:
        -   type: text
            contents: |-
                ### Herhaling
                Soms wil je één regel code meerdere keren herhalen, bijvoorbeeld in een liedje of verhaal.
            code: |-
                repeat 5 times print 'Baby shark!'
        -   type: text
            contents: |-
                #### Opdracht 1: Voorspel de uitvoer
                Wat is de uitvoer van deze programma's?
        -   type: output
            code: |-
                repeat 3 times print 'Baby shark!'
            answer: |-
                Baby shark!
                Baby shark!
                Baby shark!
            lines: '3'
        -   type: output
            code: |-
                repeat 1 times print 'Hallo allemaal!'
            answer: |-
                Hallo allemaal!
            lines: '1'
        -   type: output
            code: |-
                a is 4
                repeat a times print 'Hallo allemaal!'
            answer: |-
                Hallo allemaal!
                Hallo allemaal!
                Hallo allemaal!
                Hallo allemaal!
            lines: '4'
        -   type: text
            contents: |
                ### Opdracht 2: Invoer
                Je krijgt nu weer een uitvoer te zien. Schrijf een programma dat bij deze uitvoer kan horen.
    
                Let op: vaak zijn er meerdere antwoorden goed, je mag zelf iets kiezen, als het maar kan.
                Kijk ook goed naar het aantal streepjes!
        -   type: input
            answer: |-
                print 'Hallo allemaal!'
                repeat 2 times print 'Dit is een regel'
            output: |-
                Hallo allemaal!
                Dit is een regel
                Dit is een regel
            lines: '2'
        -   type: input
            answer: |-
                print 'Dit is regel 1'
                print 'Dit is regel 2'
                print 'Dit is regel 3'
            output: |-
                Dit is regel 1
                Dit is regel 2              
                Dit is regel 3
            lines: '3'
        -   type: text
            contents: |-
                ### Opdracht 3: Goed of fout?
                Lees de code goed, en bepaal of deze code een foutmelding oplevert.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                print 'De prins riep steeds om hulp'
                repeat 3 times 'Help!'
            answer: Fout, print mist
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                forward 100
                repeat 3 times turn 90
            answer: Goed
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                mensen = mama, papa, Emma, Sophie
                repeat 7 times print 'De afwasser is ' mensen
            answer: Fout, at random mist
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                dobbel = 1, 2, 3, 4, 5, 6
                repeat 5 times print 'Jij gooit: ' dobbel at random
            answer: Goed
        -   type: text
            contents: |-
                #### Opdracht 4: Programmeerwoorden
                We hebben deze les een nieuw programmeerwoord geleerd: `repeat`.
        -   type: define
            word: "repeat"
            answer: "een regel code herhalen"
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    8:
        intro: |-
            ## Herhalen!
            Aan het einde van de les kan jij:
            * meerdere regels code meerdere keren uitvoeren
        exercises:
        -   type: text
            contents: |-
                ### Herhaling
                Misschien heb je al gezien dat de herhaling nu maar heel simpel is, maar één regel.
                Vaak wil je meerdere regels herhalen, om een complexer programma te maken.
                Dat gaat in Hedy, en ook in Python, met inspringen!
                Inspringen betekent spaties voor regels code zetten.
            code: |-
                repeat 5 times
                    print 'Baby shark!'
        -   type: text
            contents: |-
                #### Opdracht 1: Welke regels worden er herhaald?
    
                Tip: Kijk goed welke regels inspringen, oftewel met spaties beginnen!
        -   type: circle
            goal: inspringen
            code: |-
                repeat 3 times
                    print 'Baby shark!'
                    print 'Tudu tudu tudu!'                  
                print 'Baby shark!'
            answer: Regels 2 en 3
        -   type: circle
            goal: inspringen
            code: |-
                print 'Hallo!'
                repeat 2 times
                    print 'Ja, hallo allemaal'
            answer: Regel 3
        -   type: circle
            goal: inspringen
            code: |-
                naam is ask 'Hoe heet jij?'
                if naam is Hedy
                    print 'Ja'
                else
                    print 'Nee'
            answer: Geen regels! Bij if spring je wel in, maar worden regels niet herhaald!

        -   type: text
            contents: |-
                #### Opdracht 2: Voorspel de uitvoer
                Wat is de uitvoer van deze programma's?
        -   type: output
            code: |-
                print 'Hallo!'
                repeat 1 times 
                    print ':)'
            answer: |-
                Hallo!
                :)
        -   type: output
            code: |-
                print 'Hallo!'
                repeat 5 times 
                    print ':('
                print 'En klaar!'
            answer: |-
                Hallo!
                :(
                :(
                :(
                :(
                :(
                En klaar!
        -   type: text
            contents: |
                ## If en else
                Ook bij `if` en `else` moet je inspringen gebruiken. Zo kan je als een conditie waar of niet waar is, ook meerdere regels uitvoeren.
    
                ### Opdracht 3: Voorspel de uitvoer
    
                Voorspel de uitvoer van deze codes.
        -   type: output
            code: |-
                naam is ask 'Hoe heet jij?'
                if naam is Hedy
                    print 'Ja'
                else
                    print 'Nee'
            answer: 'Nee'
            lines: '1'
        -   type: output
            code: |-
                getallen is 1, 2, 3, 4, 5, 6, 7
                keuze is getallen at random
                if keuze is vijf
                    print 'Hoera!'
                    print 'Hoera!'
                else
                    print 'Jammer hoor'
            answer: 'Jammer hoor'
            lines: '2'
        -   type: output
            code: |-
                dobbel = 1, 2, 3, 4, 5, 6
                repeat 3 times 
                    print 'Jij gooide: ' dobbel at random
                    print 'Het spel is nu afgelopen'
            answer: |-
                Jij gooide: <1, 2, 3, 4, 5 of 6 >
                Het spel is nu afgelopen
                Jij gooide: <1, 2, 3, 4, 5 of 6 >
                Het spel is nu afgelopen
                Jij gooide: <1, 2, 3, 4, 5 of 6 >
                Het spel is nu afgelopen
            lines: '6'
        -   type: text
            contents: |-
                ### Opdracht 4: Goed of fout?
                Lees de code goed, en bepaal of deze code een foutmelding oplevert.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                naam is Hermans
                if naam is Senkal
                  print 'Hoera!'
                else
                print 'Pech'
            answer: Fout, er is niet ingesprongen bij else
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                nummer is 10
                  if nummer is 5
                print 'Hoera!'
                  else
                print 'Pech'
            answer: Fout, er is verkeerd ingesprongen
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                mensen = mama, papa, Emma, Sophie
                repeat 7 times print 'De afwasser is ' mensen at random
            answer: Fout, repeat mag niet meer op één regel
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                dag is ask 'Welke dag is het?'
                if dag is vrijdag
                  print 'Hoera!'
            answer: Goed
        -   type: text
            contents: |-
                #### Opdracht 5: Schrijf de code
                Je krijgt uitvoer in beeld, en jij moet er kloppende code bij schrijven. Gebruik een `repeat` waar het kan
    
                Kijk ook goed naar het aantal regels code dat je nodig hebt!
        -   type: input
            answer: |-
                repeat 4 times
                    print 'Joehoe!'
            output: |-
                Joehoe!
                Joehoe!  
                Joehoe!
                Joehoe!
        -   type: input
            answer: |-
                repeat 2 times
                    print 'Vader Jacob...'
                repeat 2 times
                    print 'Slaapt gij nog?'
                repeat 2 times
                    print 'Alle klokken luiden!'
                repeat 2 times
                    print 'Bim bam bom!'
            output: |-
                Vader Jacob...
                Vader Jacob...  
                Slaapt gij nog?
                Slaapt gij nog?
                Alle klokken luiden!
                Alle klokken luiden!
                Bim bam bom!
                Bim bam bom!
        -   type: text
            contents: |-
                #### Opdracht 6: Programmeerwoorden
                We hebben deze les een nieuw programmeerwoord geleerd: inspringen.
        -   type: define
            word: "Hoe laat je een regel code inspringen?"
            answer: "een regel code laten beginnen met spaties"
            lines: '1'

        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
