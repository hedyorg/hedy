levels:
    1:
        exercises:
        -   contents: "### Ejercicios\nUn ordenador no hace algo por sí mismo. Siempre debe darle una tarea a un ordenador. Dicha tarea se denomina comando. Para imprimir el código, utilizamos el comando `imprimir`.\n\n### Imprimir texto\nEn la pantalla acabas de leer el comando `imprimir`.\nUn comando `imprimir` imprime una palabra, cuando está entre comillas. Por ejemplo `imprimir hola`.\n##### Ejercicio 1: Predecir el resultado"
            type: text
        -   type: output
            code: imprimir Hola a todos
            answer: Hola a todos
            lines: '1'
        -   type: output
            code: imprimir buenos días
            answer: goedemorgen
            lines: '1'
        -   type: text
            contents: "#### Ejercicio 2: ¿Error?\nA veces se cuela un error en tu código. No es gran cosa, pero Hedy no puede leer correctamente tu código.\n¿Cuál de estos programas piensas que está mal?"
        -   options:
            -   Correcto
            -   Incorrecto
            code: prnt ¡Hola a todos!
            answer: Incorrecto
            type: MC-code
        -   answer: Correcto
            options:
            -   Correcto
            -   Incorrecto
            code: imprimir imprimir
            type: MC-code
        -   type: text
            contents: "### Pedir información\n\nSolo el texto es un poco aburrido. También puedes pedir _entrada_ en Hedy. Entrada es el texto que le das al ordenador.\nEl ordenador recuerda ese texto y te lo puede mostrar más tarde.\nEste código muestra la pregunta '¿Cómo te llamas?'\n\n```hedy\npreguntar ¿Cómo te llamas?\n```\n\n### Mostrar la entrada\n\nEl comando preguntar guarda la respuesta, pero no la muestra todavía. Para eso necesitarás el comando `eco`. `eco` mostrará la respuesta al final de la frase.\nAsí:\n\n```hedy\npreguntar ¿cómo te llamas?\neco así que te llamas:\n```\n\nSi alguien llamado Olivia usara este código, el resultado sería:\n\n```hedy\nasí que te llamas Olivia\n```\n\nTen en cuenta que el ordenador imprimirá el texto exactamente como lo has introducido. Por tanto, ¡con los dos puntos y el mismo uso de mayúsculas o minúsculas!\n\n#### Ejercicio 3: Predecir el resultado\n\nPredice el resultado de estos programas. Imagina que has introducido tu propio nombre."
        -   answer: 'así que te llamas: **nombre**'
            code: "preguntar ¿cómo te llamas?\neco así que te llamas:"
            type: output
            lines: '2'
        -   lines: '2'
            type: output
            code: "preguntar ¿Cómo te llamas?\neco Encantado de conocerte,"
            answer: Encantado de conocerte, **nombre**
        -   contents: "#### Ejercicio 4: Vocabulario de programación\n\nEn cada lección vamos a aprender palabras nuevas, incluso en esta lección. ¿Sabes qué significan estos términos? Explícalo con tus propias palabras."
            type: text
        -   type: define
            word: comando
            answer: Una tarea que le darás al ordenador, p. ej., imprimir.
            lines: '1'
        -   answer: Lo que escribes en el ordenador cuando Hedy muestra una pantalla de pregunta
            type: define
            lines: '1'
            word: entrada
        -   answer: Lo que Hedy muestra en la pantalla de la derecha después de que hayas pulsado el botón 'ejecutar código'.
            lines: '1'
            type: define
            word: resultado
        -   type: text
            contents: "#### Ejercicio 5: Comandos\n\nYa hemos aprendido 3 comandos: `imprimir`, `preguntar` y `eco`. ¿Qué hacen? Explícalo con tus propias palabras."
        -   answer: Muestra texto por pantalla.
            lines: '1'
            type: define
            word: el comando `imprimir`
        -   lines: '1'
            answer: Pide al usuario que introduzca datos.
            type: define
            word: el comando `preguntar`
        -   type: define
            word: el comando `eco`
            answer: Repite los datos introducidos por el usuario.
            lines: '1'
        intro: "### Imprimir y entrada\nAl final de esta lección, podrás:\n* Escribir código que imprima texto\n* Crear una historia con entrada"
    2:
        exercises:
        -   type: text
            code: "nombre es Mo\nimprimir nombre"
            contents: "### Uso de variables\n\nAcabas de ver el comando `es` en la pantalla.\nUn comando `es` guarda algo en la memoria del ordenador y le asigna un nombre. Lo llamamos variable.\nLo que se guarda en la variable se llama valor de la variable."
        -   type: text
            contents: '#### Ejercicio 1: Marca el fragmento de código correcto'
        -   goal: variables
            code: "nombre es Hedy\nimprimir Hola nombre\nedad es 17\nimprimir Tienes edad años"
            answer: En todas las líneas
            type: circle
        -   type: circle
            answer: Líneas 1 & 3
            goal: lugares donde se **establece** la variable
            code: "nombre es Hedy\nimprimir Hola nombre\nedad es 17\nImprimir Tienes edad años"
        -   answer: Líneas 2 y 4
            type: circle
            goal: lugares donde las variables se **utilizan**
            code: "nombre es Hedy\nimprimir Hola nombre\nedad es 17\nimprimir Tienes edad años"
        -   type: text
            contents: "##### Ejercicio 2: Predecir el resultado\nConsejo: ¿Te cuesta predecir el resultado? Sigue estos pasos:\n\n1. Marcar el lugar donde se establece una variable\n2. Marcar el lugar donde se utiliza una variable\n3. Trazar una línea entre estos dos lugares\n4. Escriba el valor (lo que viene después de `es`) en el lugar donde se utiliza la variable."
        -   answer: ¡Gran trabajo Mo!
            code: "nombre es Mo\nimprimir ¡Buen trabajo nombre!"
            lines: '1'
            type: output
        -   code: "nombre es Mo\nimprimir ¡Gran trabajo Mo!"
            answer: ¡Gran trabajo Mo!
            lines: '1'
            type: output
        -   type: output
            lines: '1'
            code: "nombre es Layla\nimprimir ¡Buenos días nombre!"
            answer: ¡Buenos días Layla!
        -   type: text
            contents: "#### Ejercicio 3: ¿Error?\nLee los programas cuidadosamente ¿Cuáles son los correctos?"
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Correcto
            code: "apellido es Johnson\nimprimir ¡Buenos días apellido!"
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. Nombre no está establecido.
            code: "nombre es\nimprimir ¡Buenos días, nombre!"
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Correcto. Se permite que utilices una variable varias veces.
            code: "nombre es Johnson\nimprimir ¡Buenos días mr nombre!\nimprimir ¡Hola mr nombre!"
            type: MC-code
        -   type: text
            code: nombre es preguntar ¿Cómo te llamas?
            contents: "### Pedir información\n\nSolo guardar texto no es muy útil. En el nivel 1 hemos visto el comando `preguntar`.\n\nDesde ahora se permite que combines `preguntar`con `es`, tal que así:"
        -   type: text
            code: "nombre es preguntar ¿Cómo te llamas?\nimprimir así que te llamas: nombre"
            contents: "### Mostrar entrada\nCon las variables, ya no necesitamos más `eco`. Simplemente utiliza `imprimir` para mostrar la respuesta."
        -   type: text
            contents: "Si alguien llamado Olivia utilizase este código, el resultado sería: `así que te llamas: Olivia`\n### Ejercicio 4: Predecir el resultado\nPredice el resultado de estos programas. Imagina que has utilizado tu propio nombre."
        -   code: "nombre es preguntar ¿Cómo te llamas?\nimprimir así que te llamas: nombre"
            lines: '1'
            type: output
            answer: 'así que te llamas: **nombre**'
        -   code: "animo es preguntar ¿Qué tal estas hoy?\nimprimir Así que hoy te sientes animo"
            type: output
            lines: '1'
            answer: Así que hoy te sientes **animo**
        -   type: text
            contents: "#### Ejercicio 5: Vocabulario de programación\n¡Hemos aprendido nuevas palabras en este nivel! Explícalas con tus propias palabras."
        -   type: define
            word: variable
            answer: Nombre que se le da a algo, como un apellido o una edad.
            lines: '1'
        -   type: define
            word: valor
            lines: '1'
            answer: Lo que se guarda en una variable, como Andrés o 12.
        -   word: ajuste
            lines: '1'
            type: define
            answer: Puedes establecer una variable con un comando `es`
        -   type: define
            answer: Un programa en el que un usuario puede introducir datos.
            lines: '1'
            word: interactivo
        -   type: text
            contents: "#### Ejercicio 6: Comandos\nHemos aprendido nuevos comandos: `es` y `es preguntar` juntos. ¿Qué hacen? Explícalo con tus propias palabras."
        -   type: define
            word: el comando `es`
            answer: Guardar un valor (tras `es`) en una variable (antes de `es`)
            lines: '1'
        -   answer: Pedir al usuario que introduzca datos y guardarlos en una variable.
            type: define
            word: el comando `es preguntar`
            lines: '1'
        intro: "### Variables\nAl final de esta lección, puedes:\n* Guardar algo en una variable\n* Crear una historia o dibujar utilizando variables"
    3:
        exercises:
        -   code: "amigos es Mo, Layla, Danny\nimprimir Hoy visitaré amigos en aleatorio"
            type: text
            contents: "### Variables\nAcabas de ver el comando `es`utilizado con una lista.\nComo cualquier otra variable, utilizamos `es`para guardar algo."
        -   type: text
            contents: '#### Ejercicio 1: Marca el fragmento de código correcto'
        -   type: circle
            goal: listas
            code: "hoy es lunes\nclases es 1HC, 1HB, 1HA\naulas es 011, 304, 305, 501"
            answer: clases y aulas
        -   goal: lugar(es) donde se utiliza el texto de una lista
            code: "clases es 1HC, 1HB, 1HA\nimprimir ¡hoy clases en aleatorio tienen el día libre!"
            type: circle
            answer: El final de la línea 2
        -   type: text
            contents: "##### Ejercicio 2: Predecir el resultado\n¿Te cuesta predecir el resultado? Sigue estos pasos de nuevo para predecir el resultado de la variable:\n1. Marcar el lugar donde se establece una variable\n2. Marcar el lugar donde se utiliza una variable\n3. Trazar una línea entre estos dos lugares\n4. Elige un elemento aleatorio de la lista cuando se utiliza `en` `aleatorio`."
        -   lines: '1'
            type: output
            code: "profesores es Hermans, Merbis, Bagci, Senkal\nimprimir ¡Hoy te darán clase preforesores en aleatorio!"
            answer: ¡Hoy te darán clase **elige un profesor**!
        -   answer: El profesor de hoy es Hermans.
            type: output
            lines: '1'
            code: "profesores es Hermans, Merbis, Bagci, Senkal\nimprimir El profesor de hoy es Hermans."
        -   code: "tiempo es soleado, lluvioso, nublado, tormentoso\nimprimir ¡Qué maravilloso día tiempo!"
            answer: ¡Qué maravilloso día tiempo!
            lines: '1'
            type: output
        -   type: text
            contents: "#### Ejercicio 3: ¿Error?\nLee los programas cuidadosamente ¿Cuáles son los correctos?"
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. No puedes imprimir una lista
            code: "rocas es guijarros, piedras, cantos rodados\nimprimir ¡Me encanta programar! ¡Esto rocas!"
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. Profesores no es una lista
            code: "profesores es Hermans\nimprimir Hoy será profesores en aleatorio"
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            code: "profesores es soleado, lluvioso, nublado, tormentoso\nimprimir Hoy será profesores en aleatorio"
            answer: Correcto, al ordenador no le importa si el nombre de variable no tiene sentido.
            type: MC-code
        -   type: text
            contents: "## Aventuras\nEs un buen momento para empezar con estas aventuras:\nIntroducción\nAleatorio\nDados\nPiedra, papel, tijera\nMúsica\nEl adivino\nRestaurante\nLa casa embrujada\nPlatos"
        -   code: "respuestas es sí, no, quizás\nimprimir La respuesta es respuestas en aleatorio"
            contents: "### Ajustar listas\n\nHasta ahora siempre hemos establecido nuestras listas al inicio del programa."
            type: text
        -   type: text
            contents: "Pero a veces quieres que el usuario añada elementos a la lista.\nPuedes utilizar el comando `añadir a` para ello. También puedes eliminar elementos de la lista con `borrar de`."
            code: "animales es 🐿, 🦔, 🦇, 🦉\nanimal es preguntar ¿Qué hace ese sonido?\nañadir animal a animales\nimprimir Fue... animales en aleatorio"
        -   type: text
            contents: '#### Ejercicio 4: ¿Correcto o incorrecto?'
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. Es `borrar de`, no `borrar a`.
            code: "letras es a,b,c,d\nborrar a a letras"
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            code: "comida es pizza, patatas, tacos\nborrar hamburguesa de comida"
            answer: Correcto, se permite que borres algo que no está en la lista. Pero no tiene sentido hacerlo
            type: MC-code
        -   code: "comida es pizza, patatas, tacos\nañadir pizza a comida"
            answer: Correcto, se permite que añadas algo a una lista dos o varias veces.
            options:
            -   Correcto
            -   Incorrecto
            type: MC-code
        -   type: text
            contents: "#### Ejercicio5: Escribe el código\nEcha un buen vistazo al resultado y escribe un código correspondiente a él.\n**Asegúrate que tu código contiene al menos una opción aleatoria, ¡así no utilizaras solo imprimir!**"
        -   type: entrada de datos
            output: "¡Bienvenido a la noche de bingo!\nLos 3 números de la suerte son:\n5 y 3 y 10"
            answer: "numeros es 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nimprimir ¡Bienvenido a la noche de bingo!\nimprimir Los 3 números de la suerte son:\nimprimir numeros en aleatorio y imprimir numeros en aleatorio y imprimir numeros en aleatorio"
        -   type: entrada de datos
            output: "Esta noche vamos a ver una película.\nElegimos: Al revés"
            answer: "peliculas es Los vengadores, Barbie, Al revés\nimprimir Esta noche vamos a ver una película.\nimprimir Elegimos: peliculas en aleatorio"
        -   type: text
            contents: "#### Ejercicio 6: Vocabulario de programación\n¡Hemos vuelto a aprender nuevas palabras de programación! Explícalas con tus propias palabras."
        -   type: define
            word: lista
            answer: Una variable en la que almacenar varios valores
            lines: '1'
        -   word: aleatorio
            answer: Elegido por el ordenador.
            lines: '1'
            type: define
        -   lines: '1'
            type: define
            word: añadir
            answer: poner algo en una lista
        -   type: text
            contents: "#### Ejercicio 7: Comandos\nEl comando `es` ha cambiado en este nivel y hemos aprendido algunos comandos nuevos.\n¿Qué hacen? Explícalo con tus propias palabras."
        -   type: define
            word: 'El comando `es`(Ten en cuenta: ¡ahora `es` puede hacer muchas cosas!)'
            answer: Guardar el valor (antes de es) en una variable o lista (tras es)
            lines: '1'
        -   type: define
            word: 'El comando `añadir a` '
            answer: 'Añadir un elemento a una lista. Tiene el siguiente aspecto: añadir elemento a lista'
            lines: '1'
        -   answer: 'Eliminar un elemento de una lista. Tiene el siguiente aspecto: eliminar elemento de lista'
            lines: '1'
            type: define
            word: 'El comando `borrar de` '
        -   type: define
            word: 'El comando `en aleatorio` '
            answer: Elige un elemento aleatorio de una lista.
            lines: '1'
        -   contents: '#### ¿Qué opinas?'
            type: text
        -   type: pregunta
            lines: '1'
            text: ¿Qué ejercicio te ha gustado más de este nivel?
        -   text: ¿Qué te ha gustado de este ejercicio?
            type: pregunta
            lines: '5'
        -   lines: '1'
            text: ¿Qué ejercicio te ha gustado menos de este nivel?
            type: pregunta
        -   type: pregunta
            text: ¿Qué no te ha gustado de ese ejercicio?
            lines: '5'
        intro: "### Listas y aleatoriedad\nAl final de esta lección, puedes:\n* Guardar varios elementos en una variable, lo que denomina una lista.\n* Crear una historio en la que ocurren cosas aleatorias.\n* Crear un dibujo en el que se dibujan cosas aleatorias."
    4:
        intro: "## Comillas\nAl final de esta lección, puedes:\n* entender por qué se necesitan comillas en la programación.\n* poner comillas en los lugares correctos.\n* comprender los mensajes de error sobre el uso indebido de las comillas."
        exercises:
        -   type: text
            code: "amigo es preguntar '¿cómo te llamas?'\nimprimir '¡Genial! Iré al centro comercial con ' amigo"
            contents: "### Comillas\n\nHemos aprendido a usar comillas, cuando un texto necesita aparecer literalmente de esa manera en la pantalla.\nUtilizamos comillas con `imprimir` y `preguntar'."
        -   type: text
            contents: "##### Ejercicio 1: Terminar el código.\nRealiza este ejercicio en dos pasos:\n1. Coloca las comillas correctamente en el código.\n2. ¿Lo hiciste? Entonces predice el resultado de este código."
        -   answer: "¡Hola a todos!\nBienvenido a Hedy"
            lines: '2'
            type: output
            code: "imprimir ¡Hola a todos!\nimprimir Bienvenido a Hedy"
        -   contents: No te olvides de hacer ambos pasos de este ejercicio. Pon las comillas en el lado izquierdo y el código en el lado derecho.
            type: text
        -   answer: ¡Hoy Hermans imparte la clase en el aula 305!
            lines: '1'
            type: output
            code: "nombre es Hermans\nclase es 305\nimprimir ¡Hoy nombre imparte la clase en el aula clase!"
        -   answer: Hoy da clase Hermans
            lines: '1'
            type: output
            code: "profesores es Hermans, Merbis, Bagci, Senkal\nimprimir Hoy da clase profesores en aleatorio."
        -   type: output
            code: "rocas es guijarros, piedras, cantos rodados\nimprimir ¡Me encanta programar! ¡Esto rocas!"
            answer: ¡Me encanta programar! Esto rocas
            lines: '1'
        -   code: "imprimir ¡Hoy hace un tiempo estupendo!\nnombre es Bozo"
            answer: ¡Hoy hace un tiempo estupendo!
            lines: '1'
            type: output
        -   contents: "#### Ejercicio 2: ¿Error?\nLee los programas cuidadosamente ¿Cuáles son los correctos?"
            type: text
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. No puedes utilizar un apóstrofo cuando utilizas las comillas simples.
            type: MC-code
            code: imprimir 'Iré al zoológico mañana'
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. Necesitas comillas al final de la frase.
            code: imprimir 'He visto una llama en el zoo
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            code: imprimir "Creo que daré de comer a la llama"
            answer: ¡Correcto! Puedes utilizar el apóstrofo cuando utilizas las comillas dobles.
            type: MC-code
        -   options:
            -   Correcto
            -   Incorrecto
            code: "imprimir 'La llama se escapó a la calle'\nimprimir \"Qué aventura\""
            answer: ¡Correcto! No tienes que utilizar las mismas comillas en cada frase, pero te lo recomendamos
            type: MC-code
        -   type: text
            contents: "#### Preguntar\n¡Recuerda utilizar comillas después de `preguntar` también!\n\n#### Ejercicio 3: ¿Error?\n¡Lee los programas cuidadosamente! ¿Cuáles son correctos?"
        -   options:
            -   Correcto
            -   Incorrecto
            code: preguntar '¿Ves esos dos conejos?'
            answer: Incorrecto. ¡Recuerda utilizar una variable con preguntar!
            type: MC-code
        -   answer: Incorrecto. Necesitas un par de comillas.
            code: nombre es preguntar 'Cómo te llamas
            options:
            -   Correcto
            -   Incorrecto
            type: MC-code
        -   code: dueño es preguntar "¿Es esa la capibara de Jack o de Lucy?"
            answer: Correcto.
            options:
            -   Correcto
            -   Incorrecto
            type: MC-code
        -   code: "dueño es preguntar \"¿Es esa la capibara de Jack o de Lucy?\"\nimprimir 'Es de dueño'"
            options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. Se imprimirá la palabra 'dueño', no el valor de la variable
            type: MC-code
        -   type: text
            contents: "#### Ejercicio 4: Escribe el código\nEcha un vistazo al resultado y escribe un código que se ajuste a él."
        -   output: "Bienvenido a la noche de bingo\n¡Aquí viene el primer número...!"
            answer: "imprimir 'Bienvenido a la noche de bingo'\nimprimir '¡Aquí viene el primer número...!'"
            type: entrada
        -   output: "Esta noche vamos a ir al cine\n¿Qué tipo de película te apetece?"
            answer: "imprimir 'Esta noche vamos a ir al cine'\npelicula es preguntar '¿Qué tipo de película te apetece?'"
            type: entrada
        -   contents: "#### Ejercicio 5: Vocabulario de programación\n¡Hemos aprendido nuevas palabras de programación! Explícalas con tus propias palabras."
            type: text
        -   type: define
            word: comillas
            answer: Apóstrofos que utilizas para imprimir o decir algo.
            lines: '1'
        -   word: ¿cómo utilizar las comillas en Hedy?
            answer: Puedes utilizar las comillas cuando quieras imprimir el texto literal en la pantalla
            lines: '1'
            type: define
        -   contents: "#### Ejercicio 6: Comandos\nTambién hemos aprendido algunos comandos nuevos en el nivel 4."
            type: text
        -   type: define
            lines: '1'
            word: el comando `limpiar`
            answer: Vacía la pantalla
        -   type: define
            answer: cambia el color de la tortuga
            lines: '1'
            word: el comando `color`
        -   type: text
            contents: '#### ¿Qué opinas?'
        -   type: pregunta
            lines: '1'
            text: ¿Qué ejercicio te ha gustado más de este nivel?
        -   type: pregunta
            text: ¿Qué te ha gustado?
            lines: '5'
        -   text: ¿Qué ejercicio te ha gustado menos de este nivel?
            lines: '1'
            type: pregunta
        -   text: ¿Qué no te ha gustado?
            lines: '5'
            type: pregunta
    5:
        intro: "## si sino\nAl final de esta lección, puedes:\n* deja que el ordenador reaccione a diferentes entradas."
        exercises:
        -   type: text
            code: "amigo es preguntar \"¿Cómo te llamas?\"\nsi amigo es Yasmine imprimir \"¡Hola Yasmine!\" sino imprimir \"¡No, no me refería a ti!\""
            contents: "### Tomando decisiones\nHasta ahora Hedy siempre ejecutaba todas y cada una de las líneas de código. A partir de ahora puedes dejar que sólo ejecute ciertas líneas en ciertos casos, con un `si`.\nEl código que sigue detrás del `si` se llama condicional.\nEn este ejemplo la condición es `amigo es Yasmine`."
        -   type: text
            contents: "#### Ejercicio 1: Marca las condiciones\n¿Qué es una condicional? ¡Marca las condicionales en los siguientes programas!"
        -   answer: hoy es viernes
            goal: la condicional
            code: "hoy es preguntar '¿Qué día es?'\nsi hoy es viernes imprimir 'Sí' sino imprimir 'No'"
            type: circle
        -   type: circle
            goal: la condicional
            code: "hoy es preguntar '¿Qué día es hoy?'\nsi hoy es sábado imprimir '¡Hoy no hay colegio!'\nsino imprimir 'Tienes que ir al colegio'"
            answer: hoy es sábado
        -   goal: la condicional
            answer: edad es 16
            type: circle
            code: "edad es preguntar '¿Cuántos años tienes?'\nSi edad es 16 imprimir 'Perfecto'\nsino imprimir '¡Eres demasiado joven!'"
        -   type: text
            contents: "##### Ejercicio 2: Marcar las líneas correctas\n ¿Qué código se ejecutará? Marque solo esas partes.\nFinge que hoy es viernes y tienes 12 años."
        -   type: circle
            goal: el código que se **imprimirá**
            code: "hoy es preguntar '¿Qué día es hoy?'\nsi hoy es viernes imprimir 'Viva' sino imprimir 'No'"
            answer: imprimir '¡hurra!'
        -   type: circle
            goal: el código que se **imprimirá**
            code: "hoy es preguntar '¿Qué día es hoy?'\nsi hoy es sábado imprimir '¡No hay escuela hoy!'\nsino imprimir 'Tienes que ir a la escuela'"
            answer: imprimir 'Tienes que ir a la escuela'
        -   type: circle
            goal: el código que se **imprimirá**
            code: "edad es preguntar '¿Cuántos años tienes?'\nsi edad es 16 imprimir 'Perfecto'\nsino imprimir '¡Eres demasiado joven!'"
            answer: imprimir '¡Eres demasiado joven!'
        -   type: text
            contents: "#### Ejercicio 3: ¿Error?\n¡Lee atentamente los programas! ¿Cuáles son los correctos?"
        -   type: MC-code
            options:
            -   Correcto
            -   Incorrecto
            code: "La edad es preguntar '¿Cuántos años tienes?'\nSi la edad es 16, escribe \"¡Correcto!\". De lo contrario, \"¡Eres demasiado joven!\""
            answer: Incorrecto. No hay ningún `imprimir` después de `sino`
        -   type: MC-code
            options:
            -   Correcto
            -   Incorrecto
            answer: ¡Correcto! No siempre necesitas un `sino`
            code: "animal es preguntar '¿Qué clase de animal es ese?'\nsi animal es llama, imprimir 'Bahhhhh'"
        -   type: MC-code
            options:
            -   Correcto
            -   Incorrecto
            answer: ¡Correcto! Puedes utilizar el apóstrofo cuando uses comillas dobles.
            code: imprimir "¡Estoy tan feliz!"
        -   type: MC-code
            options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. Tiene que haber un `es`en la primera línea.
            code: "si nombre Hedy\nimprimir '¡Programar es divertido!'"
        -   type: MC-code
            code: "preguntar '¿A qué escuela vas?'\nsi escuela es LK imprimir '¡Sí!'"
            options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. No hay variables en la primera línea.
        -   type: MC-code
            code: "cantidad es preguntar \"¿cuántos capibaras hay por ahí?\"\nsi cantidad es 5 imprimir 'Hay cantidad capibaras por allí.'"
            options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto. La variable cantidad se imprime como texto.
        -   contents: "#### Ejercicio 4: Predecir el resultado\n¿Cuál será el resultado de estos programas?\n¡Atención! A veces se utiliza `aleatorio` en un programa. Puedes elegir tú mismo un elemento aleatorio.\n¡Esto significa que varias respuestas pueden ser correctas!"
            type: text
        -   code: "profesores es Hermans, Merbis, Bagci, Senkal\nprofesor es profesores en aleatorio\nsi profesor es Hermans imprimir '¡Viva!'"
            type: output
            answer: ¡Hurra! o sin resultado
            lines: '1'
        -   lines: '1'
            answer: ¡Que mal! o ¡Hurra!
            code: "profesores es Hermans, Merbis, Bagci, Senkal\nprofesor es profesore en aleatorio\nsi profesor es Hermans, imprimir \"¡Qué lástima!\" sino imprimir \"¡Viva!\""
            type: output
        -   lines: '2'
            type: output
            answer: "¡Bienvenido a la noche del bingo!\n¡Gané! o Qué pena"
            code: "números es 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nimprimir '¡Bienvenido a la noche de bingo!'\nnúmero es números en aleatorio\nsi número es 10 imprimir '¡Gané!' o imprimir 'Que pena'"
        -   type: output
            lines: '1'
            code: "número es preguntar '¿Cuál es tu número favorito?'\nsi número es 10, imprimir '¡El mío también!'"
            answer: ¡También el mio! o sin resultado
        -   type: text
            contents: "#### Ejercicio 5: Vocabulario de programación\n¡Hemos aprendido nuevo vocabulario de programación en esta lección! Explícalo con tus propias palabras."
        -   answer: Algo que es verdadero o falso. Sigue detrás del `si`.
            type: define
            word: conditional
            lines: '1'
        -   type: text
            contents: "#### Ejercicio 6: Comandos\nHemos aprendido algunos comandos nuevos en el nivel 5."
        -   word: el comando `si`
            lines: '1'
            answer: Decide qué código se ejecutará. Si el condicional es verdadero, se ejecutará el código que hay detrás.
            type: define
        -   type: define
            lines: '1'
            word: el comando `sino`
            answer: Decide qué código se ejecutará. Si el condicional es falso, se ejecutará el código que hay detrás.
        -   type: text
            contents: '#### ¿Qué opinas?'
        -   type: pregunta
            text: ¿Qué ejercicio te ha gustado más de este nivel?
            lines: '1'
        -   text: ¿Qué te ha gustado?
            lines: '5'
            type: pregunta
        -   text: ¿Qué ejercicio te ha gustado menos de este nivel?
            lines: '1'
            type: pregunta
        -   type: pregunta
            lines: '5'
            text: ¿Qué no te ha gustado?
    6:
        intro: "## Matemáticas\nAl final de esta lección, puedes:\n* utilizar las matemáticas en Hedy"
        exercises:
        -   type: text
            code: imprimir 'cinco veces cinco es ' 5 * 5
            contents: "### Matemáticas\nHacer cálculos es una tarea importante para los ordenadores.\n\nLa suma se realiza con el signo más normal: `5 + 5`.\nLa resta también se hace con el signo menos normal: `5 - 5`.\nCon las multiplicaciones puede parecer un poco diferente de lo habitual, utilizamos el asterisco (por encima del 8): `5 * 5`.\nLa división se hace con la barra diagonal: `5 / 5`.\n\nTen en cuenta que el código matemático no necesita comillas."
        -   type: text
            contents: "#### Ejercicio 1: Predice el resultado\n¿Cuál crees que será el resultado de estos programas?"
        -   lines: '3'
            type: output
            answer: "dos más diez es 20\n25 es 30 menos 5\n5"
            code: "imprimir 'dos más diez es ' 2 * 10\nimprimir 5 * 5 ' es 30 menos 5'\nimprimir 10 / 2"
        -   type: text
            contents: "#### Ejercicio 2: Matemáticas\nSigue estos pasos para completar el ejercicio:\n1. Termina los programas rellenando una suma en las líneas. El código tiene que tener sentido.\n2. ¿Has terminado? Escribe cuál crees que será el resultado del código."
        -   type: output
            lines: '4'
            code: "imprimir 'cinco más diez es ' __\nimprimir 'seis menos cinco es ' ___\nimprimir 'cien dividido por cinco es ' ___\n___ _________________________ 4 * 12"
            answer: "cinco más diez es 50\nseis menos cinco es 1\ncien dividido entre cinco es 20\ncuatro veces doce es 48"
        -   type: text
            contents: "### Ejercicio 2: Matemáticas con preguntar y variables\nTambién puede guardar una suma en una variable, compararla con `preguntar' y ejecutarla con un `si`.\nVamos a practicar eso ahora.\nPredice el resultado de estos programas.\nCuando se utilizan `preguntar`y `aleatorio`, puedes inventarte tus propias respuestas."
        -   type: output
            lines: '1'
            answer: La respuesta a la suma es 10
            code: "suma = 2 * 5\nimprimir 'La respuesta a esta suma es ' suma"
        -   type: output
            answer: ¡Gran trajabo! o ¡Mala suerte!
            lines: '1'
            code: "respuesta_correcta = 142 / 2\ntu_respuesta = preguntar '¿Cuánto es 142 dividido por 2?'\nsi respuesta_correcta es tu_respuesta\nimprimir 'Gran trabajo'\nsino imprimir '¡Qué pena!'"
        -   type: output
            lines: '1'
            answer: '¿Cuánto es 7 veces 7? (o cualquier otro número de la lista: 2, 4, 6, 9, 11, 17)'
            code: "numeros es 2, 4, 6, 7, 9, 11, 17\nnumero es numeros en aleatorio\nimprimir '¿Cuánto es ' numero ' veces 7?'"
        -   answer: 3 veces 6 (por ejemplo) es 18
            lines: '1'
            type: output
            code: "favorito es preguntar '¿Cuál es tu número favorito?'\nimprimir '3 veces ' favorito ' es ' 3 * favorito"
        -   type: text
            contents: "### Ejercicio 3: Entrada\nSe te mostrará un resultado. Escribe un programa que pueda producir este resultado.\nTen en cuenta: Varias respuestas pueden ser correctas. Elige la que quieras, siempre que sea correcta.\nRellena todas las líneas, ¡así que fíjate bien en la cantidad de líneas!"
        -   type: entrada
            answer: imprimir 'Este es un número muy grande:' 4*17
            output: 'Este es un número muy grande: 68'
        -   type: entrada
            answer: imprimir 1000/10 ' es la respuesta a 1000/10.'
            output: 100 es la respuesta a 1000/10.
        -   type: entrada
            answer: "numeros is 1,2,3,4,5,6,7,8,9,10\nimprimir numeros en aleatoio * 7 ' es un múltiplo aleatorio de 7'"
            output: 14 es un múltiplo aleatorio de 7
        -   type: text
            contents: "#### Ejercicio 4: Vocabulario de programación\nHemos aprendido a utilizar algunos signos nuevos en nuestro código. ¿Qué signos se utilizan en qué casos?"
        -   type: define
            word: veces
            lines: '1'
            answer: '*'
        -   word: dividido por
            type: define
            answer: /
            lines: '1'
        -   type: text
            contents: '#### ¿Qué te ha parecido?'
        -   lines: '1'
            type: pregunta
            text: ¿Qué ejercicio te ha gustado más de este nivel?
        -   text: ¿Qué te ha gustado?
            type: pregunta
            lines: '5'
        -   lines: '1'
            text: ¿Qué ejercicio te ha gustado menos de este nivel?
            type: pregunta
        -   text: ¿Qué no te ha gustado?
            lines: '5'
            type: pregunta
    7:
        intro: "## ¡Repetir!\nAl final de esta lección, podrás:\n* ejecutar una línea de código varias veces"
        exercises:
        -   code: repetir 5 veces imprimir '¡Baby shark!'
            contents: "### Repetición\nA veces quieres repetir una línea de código varias veces, por ejemplo en una canción o una historia."
            type: text
        -   type: text
            contents: "#### Ejercicio 1: Predecir el resultado\n¿Cuál será el resultado de estos programas?"
        -   lines: '3'
            answer: "¡Baby shark!\n¡Baby shark!\n¡Baby shark!"
            code: repetir 3 veces imprimir '¡Baby shark!'
            type: output
        -   type: output
            code: repetir 1 vez imprimir '¡Hola a todos!'
            answer: ¡Hola a todos!
            lines: '1'
        -   lines: '4'
            code: "a es 4\nrepetir una vez imprimir 'Hola a todos'"
            type: output
            answer: "¡Hola a todos!\n¡Hola a todos!\n¡Hola a todos!\n¡Hola a todos!"
        -   type: text
            contents: "### Ejercicio 2: Entrada\nEcha un vistazo al resultado. Escribe un programa que pueda pertenecer a este resultado.\n\nTen en cuenta: Pueden ser correctas varias respuestas. Elige la que quieras, mientras sea correcta.\nRellena todas las líneasFill up all the lines, ¡así que fíjate bien en la cantidad de líneas!\n"
        -   type: entrada
            answer: "imprimir '¡Hola a todos!'\nrepetir 2 veces imprimir 'Esto es una línea.'"
            output: "¡Hola a todos!\nEsto es una línea.\nEsto es una línea."
            lines: '2'
        -   type: entrada
            output: "Esta es la línea 1\nEsta es la línea 2\nEsta es la línea 3"
            lines: '3'
            answer: "imprimir 'Esta es la línea 1'\nimprimir 'Esta es la línea 2'\nimprimir 'Esta es la línea 3'"
        -   contents: "### Ejercicio 3: Correcto o incorrecto\nPresta mucha atención a los programas y decide si provocarán un mensaje de error o no."
            type: text
        -   answer: Incorrecto, falta imprimir
            type: MC-code
            code: "imprimir 'El príncipe seguía gritando pidiendo ayuda'\nrepetir 3 veces '¡Ayuda!'"
            options:
            -   Correcto
            -   Incorrecto
        -   options:
            -   Correcto
            -   Incorrecto
            type: MC-code
            answer: Correcto
            code: "avanzar 100\nrepetir 3 veces girar 90"
        -   type: MC-code
            options:
            -   Correcto
            -   Incorrecto
            answer: Incorrecto, falta en aleatorio
            code: "gente = mamá, papá, Emma, Sophie\nrepetir 7 veces imprimir 'La vajilla será lavada por ' gente"
        -   options:
            -   Correcto
            -   Incorrecto
            answer: Correcto
            code: "opciones = 1, 2, 3, 4, 5, 6\nrepetir 5 veces imprimir 'Lanzaste: ' opciones en aleatorio"
            type: MC-code
        -   type: text
            contents: "#### Ejercicio 6: Vocabulario de programación\n¡Hemos vuelto a aprender una nueva palabra de programación! Explícala con tus propias palabras."
        -   lines: '1'
            answer: repetir una línea varias veces
            type: define
            word: repetir
        -   contents: '#### ¿Qué te ha parecido?'
            type: text
        -   type: pregunta
            text: ¿Qué ejercicio te ha gustado más de este nivel?
            lines: '1'
        -   lines: '5'
            type: pregunta
            text: ¿Qué te ha gustado?
        -   text: ¿Qué ejercicio te ha gustado menos de este nivel?
            type: pregunta
            lines: '1'
        -   lines: '5'
            type: pregunta
            text: ¿Qué no te ha gustado?
    8:
        intro: "## ¡Repetir!\nAl final de esta lección, serás capaz de:\n* repetir varias líneas de código"
        exercises:
        -   type: text
            code: "repetir 5 veces\n    imprimir 'Baby shark!'"
            contents: "### Repetición\nTal vez te hayas dado cuenta de que antes sólo podías repetir 1 línea de código, muy simple.\nA menudo se desea repetir varias líneas, para hacer un programa más complejo.\nEn Hedy, y también en Python, ¡esto se hace con la indentación!\nLa indentación significa empezar una ñínea con un par de espacios."
        -   type: text
            contents: "#### Ejercicio 1: ¿Qué líneas se repetirán?\n\nConsejo: Presta mucha atención a la indentación (empezar una línea con espacios)."
        -   type: circle
            goal: indentación
            code: "repetir 3 veces\n    imprimir 'Baby shark!'\n    imprimir 'Tudu tudu tudu!'                  \nimprimir 'Baby shark!'"
            answer: Líneas 2 y 3
        -   type: circle
            goal: indentación
            code: "imprimir '¡Hola!'\nrepetir 2 veces\n    imprimir 'Sí, hola a todos'"
            answer: Línea 3
        -   type: circle
            goal: indentación
            code: "nombre es preguntar '¿Cómo te llamas?'\nis name es Hedy\n    imprimir 'Sí'\nsino\n    imprimir 'No'"
            answer: ¡Sin líneas! Hay indentación debido a el si y sino, pero no se repetirán líneas.
        -   type: text
            contents: "#### Ejercicio 2: Predecir el resultado\n¿Cuál será el resultado de estos programas?"
        -   code: "imprimir '¡Hola!'\nrepetir 1 vez \n    imprimir ':)'"
            type: output
            answer: "¡Hola!\n:)"
        -   type: output
            code: "imprimir '¡Hola!'\nrepetir 5 veces \n    imprimir ':('\nimprimir '¡Hecho!'"
            answer: "¡Hola!\n:(\n:(\n:(\n:(\n:(\n¡Hecho!"
        -   type: text
            contents: "## Si y sino\nAl utilizar `si` y `sino` tembién necesitas la indentación. De esta manera puedes ejecutar varias líneas cuando una condición es verdadera o falsa.\n\n### Ejercicio 3: Predecir la salida\n\nPredice el resultado de estos programas.\n"
        -   code: "nombre es preguntas '¿Cómo te llamas?'\nsi nombre es Hedy\n    imprimir 'Sí'\nsino\n    imprimir 'No'"
            type: output
            answer: No
            lines: '1'
        -   code: "números es 1, 2, 3, 4, 5, 6, 7\nopción es números en aleatorio\nsi opción es cinco\n    imprimir '¡Hurra!'\n    imprimir '¡Hurra!'\nsino\n    imprimir '¡Oh no!'"
            answer: ¡Oh no!
            lines: '2'
            type: output
        -   type: output
            code: "dados = 1, 2, 3, 4, 5, 6\nrepetir 3 veces \n    imprimir 'Sacaste: ' dados en aleatorio\n    imprimir 'Juego terminado'"
            answer: "Sacaste: < 1, 2, 3, 4, 5, ó 6>\nJuego terminado\nSacaste: < 1, 2, 3, 4, 5, ó 6>\nJuego terminado\nSacaste: < 1, 2, 3, 4, 5, ó 6>\nJuego terminado"
            lines: '6'
        -   contents: "### Ejercicio 4: ¿Correcto o incorrecto?\nPresta mucha atención a los programas y decide si provocarán un mensaje de error o no."
            type: text
        -   code: "nombre es Hermans\nsi nombre es Senkal\n  imprimir '¡Hurra!'\nsino\nimprimir 'Mala suerte'"
            answer: Incorrecto, no hay indentación después de sino
            options:
            -   Correcto
            -   Incorrecto
            type: MC-code
        -   type: MC-code
            options:
            -   Correcto
            -   Incorrecto
            code: "número es 10\n  si número es 5\nimprimir '¡Hurra!'\n  sino\nimprimir 'Mala suerte'"
            answer: Incorrecto, la indentación se usó al revés.
        -   type: MC-code
            code: "gente = mamá, papá, Emma, Sophie\nrepetir 7 veces imprimir 'La vajilla será lavada por ' gente en aleatorio"
            answer: Incorrecto, ya no puedes utilizar el comando repetir solo en una línea.
            options:
            -   Correcto
            -   Incorrecto
        -   type: MC-code
            answer: Bien
            options:
            -   Correcto
            -   Incorrecto
            code: "día es preguntar '¿Qué día es?'\nsi día es viernes\n    imprimir '¡Sí!'"
        -   contents: "#### Ejercicio 5: Escribir el código\nEcha un buen vistazo al resultado y escribe un código correspondiente. Utiliza `repetir` si es posible.\n\n¡Cuidado con la cantidad de líneas que necesita tu código!"
            type: text
        -   answer: "repetir 4 veces\n    imprimir '¡Yuju!'"
            type: entrada
            output: "¡Yuju!\n¡Yuju!\n¡Yuju!\n¡Yuju!"
        -   type: entrada
            answer: "repetir 2 veces\n    imprimir '¿Estás durmiendo?'\nrepetir 2 veces\n    imprimir 'Hermano John'\nrepetir 2 veces\n    imprimir '¡Suenan las campanas de la mañana!'\nrepetir 2 veces\n    imprimir '¡Ding Dang Dong!'"
            output: "¿Estás durmiendo?\n¿Estás durmiendo?\nHermano John\nHermano John\n¡Suenan las campanas de la mañana!\n¡Suenan las campanas de la mañana!\nDing Dang Dong\nDing Dang Dong"
        -   type: text
            contents: "#### Ejercicio 6: Vocabulario de programación\nHemos vuelto a aprender un nuevo término de programación: ¡indentación! Explícalo con tus propias palabras."
        -   type: define
            word: ¿Cómo creas una indentación?
            answer: Comenzando una línea con varios espacios
            lines: '1'
        -   type: text
            contents: '#### ¿Qué te ha parecido?'
        -   type: pregunta
            text: ¿Qué ejercicio te ha gustado más de este nivel?
            lines: '1'
        -   type: pregunta
            text: ¿Qué te ha gustado?
            lines: '5'
        -   type: pregunta
            text: ¿Qué ejercicio te ha gustado menos de este nivel?
            lines: '1'
        -   lines: '5'
            type: pregunta
            text: ¿Qué no te ha gustado?

