levels:
    0:
        1:
            header: 欢迎来到海蒂!
            text: Hedy是一种编程语言。
        2:
            header: 编程
            text: |-
                编程是使用计算机的语言向计算机发出指令。

                这样的语言被称为 "编程语言"。
        3:
            header: 编程语言
            text: |-
                也许您已经了解一些编程语言？
                一些例子是：
                * Scratch
                * Python
                * HTML
        4:
            header: 编程
            text: |-
                如果你会编程，你可以做很多很酷的事情：
                * 创作互动故事
                * 用计算机绘图，并将其画在纸上或织物上
                * 开发你自己的应用程序也就是APP，并在你的手机上使用这个应用程序
        5:
            header: Hedy编程
            text: 在Hedy中，我们使用特殊代码，如`{print}`。
            code: '{print} 欢迎进入海蒂!'
        6:
            header: Hedy编程
            text: 代码词将显示为粉红色。
            code: '{print} 欢迎来海蒂!'
        7:
            header: Hedy编程
            text: 我们使用代码下方的“运行代码”按钮开始运行代码。
            code: '{print} 欢迎来海蒂!'
        8:
            header: Hedy编程
            text: 输出的内容显示在右侧。
            code: '{print} 欢迎来海蒂!'
        9:
            header: Hedy编程
            text: 输出也可以是一个图形。
            code: "{forward} 100\n{turn} {left}"
    1:
        1:
            header: 欢迎来到第1级!
            text: |-
                我们将从第1级开始，用Hedy创作故事!

                我们需要三个文本代码来创作互动故事。
        2:
            text: |-
                可以在级别 1 中使用的第一个指令是`{print}`。

                `{print}` 用于在屏幕上显示文本。
            code: '{print} Put text on the screen'
            header: '{print}'
        3:
            header: '{print} 命令'
            text: |-
                你可以随意地修改 `{print}` 命令后面的文字。

                你也可以再添加一行 `{print}` 命令，来打印多行文字。
            code: |-
                {print}欢迎来到海蒂！
                {print} 现在就开始编程吧！
        4:
            header: Hedy 第1 级：{echo}
            text: |-
                在第1级中，你可以使用的最后一个指令是`{ask}`.

                `{ask}`用于重复提问的回答.
            code: |-
                {print} 欢迎来到你自己的石头剪刀布！
                {ask}你会选择什么？
        5:
            header: 编程
            text: |-
                正如您在前面的示例中所看到的。 如果您使用`{ask}`命令，您可以提出问题。
                但是答案不会显示在输出屏幕中。

                如果您确实希望显示答案，可以使用此级别的最后一个命令：`{echo}`。
                `{echo}` 用于重复 `{ask}` 的答案。
            code: |-
                {print} 你好！
                {ask}你叫什么名字？
                {echo}你好
        6:
            header: 编程!
            text: |-
                使用`{print}`, `{ask}` 和 `{echo}` ，您已经可以创建一个小故事了。
                现在是尝试鹦鹉、故事和石头剪刀布冒险的好时机。
            editor: /hedy/1
        7:
            header: 编程!
            text: 可以用标记黄色箭头的按钮复制例子。
            editor: /hedy#print_command
        8:
            header: 用海龟绘图画画！
            text: 黄色箭头按钮可用于复制示例。
            editor: /hedy#print_command
        9:
            header: 用海龟画画：{forward}
            text: '`{forward}` 用于让海龟向前移动。'
        10:
            header: '用海龟绘图画画: {turn}'
            text: '`{turn}` 用于让海龟向左转或向右转。'
            code: '{forward} 50'
        11:
            header: 与乌龟一起画画：{turn}
            text: '`{turn}` 用于让海龟向左或向右转。'
            code: "{forward} 50\n{turn} {left}"
        12:
            header: 调试
            text: 调试代码意味着消除代码中的错误。 我们一起调试一下这段代码。 单击瓢虫按钮启动调试器。
            code: |-
                我是 DJ 海蒂
                {print}你想听什么歌？
                {ask}我也喜欢那首歌！
                {print} 接下来... {echo}
            debug: 对
        13:
            header: 来开始体验编程的乐趣吧！
            text: 享受第一关的冒险！
    2:
        1:
            header: 欢迎来到第 2 级
            text: |-
                在这个级别中，你将学习使用变量。

                变量是一个可以用来存储信息的词。

                例如：姓名、年龄或最喜欢的运动队。
        2:
            text: 要创建或“ set”变量，我们使用 `{is}`命令
            code: |-
                名字 {is} 海蒂
                年龄 {is} 15
                {print} 姓名年龄 岁
            header: 变量
        3:
            header: 交互的
            text: |-
                我们还可以通过提问来设置变量。

                问题的答案存储在变量中。

                这样我们就不需要`{echo}`命令。
            code: |-
                姓名 {is} {ask} 你叫什么名字？
                {print} 你好名字
        4:
            text: 既然我们使用了变量，我们就可以使用多个变量，而不仅仅是一个`{echo}`命令。
            code: |-
                姓名 {is} {ask} 你叫什么名字？
                {print} 你好名字
                年龄 {is} {ask} 你多大了？
                {print} 姓名年龄 岁。
            header: 多个变量
        5:
            header: 暂停
            text: 您还可以使用`{sleep}` 命令暂停代码一段时间。
            code: |-
                {print} 我最喜欢的颜色是...
                {sleep} 2
                {print} 绿色！
        6:
            header: 暂停 5
            text: |-
                如果希望暂停时间更长，可以在`{sleep}`命令后添加一个数字。

                如果需要，甚至可以使用变量而不是数字来决定睡眠命令的持续时间。
            code: |-
                暂停 {is} 10
                {print} 我最喜欢的颜色是...
                {sleep} 暂停
                {print} 绿色！
        7:
            header: 调试
            text: 调试代码意味着消除代码中的错误。 我们一起调试一下这段代码。 单击瓢虫按钮启动调试器。
            code: |-
                {print} 欢迎来到甜甜圈店！
                填充 {is} 您想要什么样的填充？
                {print} 您已选择...填充！ 嗯！
                配料 {ask} 您想要什么类型的配料？
                浇头很好吃！
                {print} 我去拿你的甜甜圈。 {睡觉}
                {print} 给你！ 一个带有馅料的甜甜圈！
                {ask} 祝你有美好的一天！
            debug: 对
        8:
            header: 来开始编程的乐趣吧！
            text: 享受第 2 关的冒险！
    3:
        1:
            header: 欢迎来到第 3 级
            text: 在此级别中，您将学习如何创建列表、添加和删除列表中的项目以及从该列表中随机选择一个项目。
        2:
            header: 列一个清单
            text: |-
                您可以使用 `{is}`创建一个列表。

                用逗号分隔列表中的项目。
            code: 动物 {is} 狗、猫、袋鼠
        3:
            header: 随机
            text: |-
                您可以通过 `{at}` `{random}`命令使用该列表。
                计算机将随机选择列表中的一项。
                每次运行此代码时，输出都会有所不同。
            code: |-
                动物 {is} 狗, 猫, 袋鼠
                {print} 动物 {at} {random}
        4:
            header: 随意造句
            text: 您也可以在句子中使用`{at}` `{random}`命令。
            code: |-
                我最喜欢的动物是动物 {is} 狗, 猫, 袋鼠
                {print} 我最喜欢的动物是动物 {at} {random}
        5:
            text: |-
                您可以使用`{add}` `{to}`命令将项目添加到列表中。

                您可以选择要添加到列表中的内容，也可以将`{add}` `{to}`命令与`{ask}` 命令结合使用。
                这样您就可以让玩家决定将哪些内容添加到列表中。
            code: |-
                animals {is} 狗, 猫, 袋鼠
                like {is} {ask} 你最喜欢的动物是什么？
                {add} like {to_list} animals
                {print} 我选择 animals {at} {random}
            header: 添加
        6:
            header: 从......中去除
            text: |-
                与`{add}` `{to}`命令相反的是  `{remove}` `{from}` 命令。
                该命令从列表中删除一个项目。
            code: |-
                animals {is} 狗, 猫, 袋鼠
                dislike {is} {ask} 你不喜欢什么 animals ？
                {remove} dislike {from} animals
                {print} 我选择 animals {at} {random}
        7:
            header: 调试
            text: 我们来调试一下这段代码吧！
            code: |-
                music_genres {is}摇滚,流行,金属,独立,爵士乐
                chosen_genre 是音乐{at} {random}
                {print} 让我们听听当选的流派
                不错{ask}你喜欢这种类型吗？
                {from} chosen_genre {remove} selected_genre
                second_choice {is} music_genres
                {print} 还是您更喜欢... second_choice {at} {random}
                {remove} second_choice {to} music_genres
                {print} 我最喜欢music_genre {random}！
            debug: 对
        8:
            header: 让我们开始工作吧！
            text: 享受第 3 关的冒险！
    4:
        1:
            header: 欢迎来到第 4 级
            text: 在本级别中，你将学习如何使用引号。
            code: '{print} ''带引号打印！'''
        2:
            header: 问题
            text: 在前面的关卡中，你可能遇到过这个问题：
            code: |-
                name {is} 苏菲
                {print} 我的名字是 name
            debug: 对
        3:
            header: 用引号修复它
            text: |-
                在本关卡中，我们将通过使用引号来解决这个问题。

                这也使我们的代码看起来更像“真正的”Python 代码。
        4:
            header: 带引号的打印
            text: 每次使用 `{print}` 命令时，都需要将要显示在屏幕上的文本放在引号中。
            code: '{print} ''带引号打印！'''
        5:
            header: 带引号的ask
            text: 这也适用于 `{ask}` 命令。
            code: name {is} {ask} '请问你的姓名？'
        6:
            header: 引号和变量
            text: |-
                你不希望变量名称打印在屏幕上。
                这就是为什么变量应该被排除在引号之外，如下所示：
            code: |-
                name {is} 哈利
                {print} '你好' name
        7:
            header: 引号和变量
            text: |-
                当变量名用在句子中间时，必须将变量放在引号之外。
                然而，句子的其余部分确实需要引号。 看起来像这样:
            code: |-
                name {is} 哈利
                {print} '你好' name '，你好吗？'
        8:
            header: 引号和缩写
            text: |-
                当心！ 既然使用了引号，则不能在缩写中使用引号。

                请尝试在下面的屏幕中打印诸如“you're”或“I'm”之类的缩写，看看会发生什么......
            code: '{print} ''''这行不通！'''
            debug: 对
        9:
            header: 清除
            text: |-
                在本级别中，你还将学习 {clear} 命令。
                使用此命令，可以擦除输出屏幕上的所有文本。

                请注意，你也应该配合使用睡眠命令。 如果不这样做，计算机将在你阅读之前擦除所有文本！
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} '惊喜!'
        10:
            header: 调试
            text: 来调试一下这段代码吧！
            code: |-
                {clear}
                {print} 去海滩真是美好的一天！
                {ask}“你想建造沙堡还是在海里游泳？”
                {print} '您想要活动'
                {print} '我也想这样做'
                {print}“看看这些美丽的贝壳！”
                颜色 {is} '橙色、银色、白色、棕色'
                {print}“我喜欢{随机}的颜色！”
                选择{is} {ask}你喜欢哪一个？
            debug: 对
        11:
            header: 预备，准备，开始！
            text: 享受第 4 关的冒险！
    5:
        1:
            header: 欢迎来到第 5 级
            text: 在本级别中，你将学习使用 3 个新命令：`{if}`, `{else}` 和 `{in}`.。
        2:
            text: |-
                `{if}` 命令允许你在两个选项之间进行选择。
                在此示例中，如果给定的答案是 `Hedy`，计算机将打印`'nice'`。
                如果答案不是 `Hedy`，计算机将不执行任何操作。
            code: |-
                name {is} {ask} '你叫什么名字？'
                {if} name {is} 海蒂 {print} '赞'
            header: 如果
        3:
            header: 不要忘记打印
            text: |-
                使用`{if}`命令时，不要忘记使用`{print}`命令。
                这段代码不会工作！
            code: '{if} name {is} 海蒂 ''赞'''
            debug: 对
        4:
            header: 否则
            text: |-
                使用 `{if}` 命令时，还可以添加 `{else}` 命令。
                如果答案是 `Hedy`，计算机会打印`'nice'`。
                但如果答案是别的，计算机会打印`'boo'`
            code: '{if} 名字 {is} 海蒂 {print} ''很好'' {else} {print} ''吁！'''
        5:
            header: 长行
            text: |-
                你可能已经注意到，当同时使用`{if}`和`{else}`命令时，代码行可能会变得很长。

                可以选择将命令分开并将它们放在两行中，如下所示：
            code: |-
                {if} name {is} 海蒂 {print} '赞'
                {else} {print} '吁！'
        6:
            header: 另一个新命令
            text: |-
                如果你已经练习过`{if}` 和 `{else}`命令，也可以尝试 `{in}` 命令。

                使用 `{in}` ，你可以让计算机检查某个项目是否在列表中，例如：

                请注意 `Hedy` 区分大小写。 这意味着如果您回答`"Green"`而不是`"green"`，`Hedy` 将打印`"meh"`。
            code: |-
                pretty_colors {is} 绿色、黄色
                favorite_color {is} {ask} '你最喜欢的颜色是什么？'
                {if} favorite_color {in} pretty_colors {print} '漂亮！'
                {else} {print} '嗯'
        7:
            header: 调试
            text: 来调试一下这段代码吧！
            code: |-
                {print} 欢迎来到七彩航空安全！
                boarding_pass {is} {ask} '您有登机牌吗？'
                {if} bording_pass yes {print} 太棒了！
                {else}请准备好您的登机牌。
                passport {is} '我可以看一下您的护照吗？'
                {if} passport {is} 是 '谢谢'
                {else}“没有护照就不能飞行”
                declare {is} {ask} 您有什么要声明的吗？
                {if} declare {is} 是
                item_to_declare {is} {ask} '您想声明什么'
                {else} 好吧
                {print}谢谢。 请前往 A22 登机口。'
            debug: 对
        8:
            header: 我们走吧！
            text: 享受第 5 关的冒险！
    6:
        1:
            header: 欢迎来到第 6 级
            text: 在这个级别中，我们将在代码中添加数学。
        2:
            header: 添加
            text: 如果要计算加法，只需使用加号即可。
            code: '{print} ''5 加 5 是 '' 5 + 5'
        3:
            header: 减法
            text: 如果要减，可以使用减号。
            code: '{print} ''5 减 5 是 '' 5 - 5'
        4:
            header: 乘法
            text: 如果要进行乘法，可以使用星号。
            code: '{print} ''5 乘 5等于'' 5 * 5'
        5:
            text: 您可以使用斜杠进行除法。
            code: '{print} ''5 除以 5 is '' 5 / 5'
            header: 除以
        6:
            header: 总结
            text: 总之，您可以使用 +、-、* 和 / 来进行数学运算。
            code: |-
                {print} '5 加 5 是 ' 5 + 5
                {print} '5 减 5 是 ' 5 - 5
                {print} '5 乘以 5 是 ' 5 * 5
                {print} '5 除以 5 是 ' 5 / 5
        7:
            text: |-
                从现在开始，您还可以使用 = 符号代替 `{is}` 命令。
                这适用于数字和单词，也适用于 `{if}` 或 `{else}`命令之后。
            code: |-
                name = 海蒂
                answer = 20 + 4
            header: The = symbol
        8:
            header: 使用变量计算
            text: 你可以使用数字进行计算，但也可以使用变量进行计算，如下所示：
            code: |-
                number_1 = {ask} '填写第一个数字：'
                number_2 = {ask} '填写第二个数字：'
                correct_answer = number_1 * number_2
                {print} number_1 ' 乘以 ' number_2 ' 为 ' correct_answer
        9:
            header: 调试
            text: 让我们调试代码!
            code: |-
                {print} '这是水上乐园售票机'
                {print} '价目表：12岁以下儿童3美元，成人5美元'
                {print} '周一有 25% 折扣'
                amount_of_children = '您想要多少张儿童票？'
                amount_of_adults = '您想要多少张成人票？'
                day_of_the_week = {ask} '今天是星期几？'
                {clear}
                child_price = amount_of_children* 3
                adult_price = amount_of_adults + 5
                total_price = adult_price * 儿童价格
                {if} 天 {is} 星期一
                总total_price = total_price* 0.25
                {print} '这将是' total_price
            debug: 对
        10:
            header: 让我们开始工作吧！
            text: 享受第 6 关的冒险！
    7:
        1:
            header: 欢迎来到第7关
            text: 在本级别中，你将学习如何根据需要多次重复一行代码。
        2:
            header: 重复3次
            text: |-
                如果你想重复一行代码，可以使用 `{repeat}` 3 `{times}` 代码。
                如果您想多次重复该行，只需更改数字即可。

                例如：如果您正在编写一个故事，其中您的角色大声呼救 5 次，则可能如下所示：
            code: |-
                {print} '王子不断呼救'
                {repeat} 5 {times} {print} '救命！'
                {print} '为什么没有人帮助我？'
        3:
            header: 别忘记print命令
            text: 使用重复命令时，不要忘记`{print}`命令。
            code: '{repeat} 5 {times} ''救命!'''
            debug: 对
        4:
            header: 重复ask命令
            text: 你还可以多次重复 `{ask}`, `{if}` 或 `{else}` 命令。
            code: |-
                {repeat} 2 {times} answer = {ask} '你知道你可以多次问一个问题吗？'
                {if} answer {is} 是 {repeat} 2 {times} {print} '你已经知道了！'
                {else} {repeat} 3 {times} {print} '你学到了新东西！'
        5:
            header: 调试
            text: 让我们调试代码!
            code: |-
                {print} 你被困在荒岛上。
                {repeat} 3 '救命！'
                rescued = {ask} 有人来救援吗？
                {if} rescued 是 {is}
                {print} 幸运！
                {else} {repeat} 3 次 “救命！”
                rescued =“现在怎么样？”
                {if}是
                {print} '万岁！'
                {else}“太可惜了……哦，好吧……是时候建造一个避难所并寻找一些食物了。”
            debug: 对
        6:
            header: 预备，准备，开始！
            text: 享受第七关的冒险吧！
    8:
        1:
            header: 欢迎来到第8关
            text: 在本级别中，你将学习使用缩进使 `{repeat}`, `{if}` 和 `{else}` c命令适用于多行代码。
        2:
            header: 之前的{repeat} 命令
            text: |-
                在前面的关卡中，`{repeat}`命令如下所示：

                你只能重复一行代码。
            code: '{repeat} 5 {times} {print} ''救命!'''
            debug: 对
        3:
            header: 现在的{repeat} 命令
            text: |-
                在此级别中，你可以重复多行代码。 为此，你必须告诉计算机哪些行属于同一行并且应该重复。
                你可以通过使用缩进来完成此操作。

                在要重复的每一行的开头使用 4 个空格（或一个制表符），如下所示：
            code: |-
                {repeat} 5 {times}
                     {print} '大家好'
                     {print} '这将打印 5 次'
        4:
            header: 现在的 {repeat} 命令
            text: |-
                如果需要，你可以在 `{repeat}` 命令之后继续，无需缩进。
                不以缩进开头的行将不会重复。
            code: |-
                {repeat} 3 {times}
                     {print} '你好！'
                {print} '我们已经完成重复了！'
        5:
            header: 之前的 if 和 else
            text: |-
                `{if}` 和 `{else}` 命令也是如此。
                这些是之前的命令：
            code: |-
                {if} name {is} 海蒂 {print} '赞'
                {else} {print} '吁！'
            debug: 对
        6:
            header: 现在的 if 和 else
            text: |-
                现在这些 `{if}` 和 `{else}` 命令。
                `{if}` 和 `{else}` 命令后面的每一行都以缩进开头。
            code: |-
                name = {ask} '你叫什么名字？'
                {if} 名字 {is} 海蒂
                     {print}“欢迎海蒂”
                {else}
                     {print} '欢迎程序员！'
        7:
            header: 停止缩进
            text: 就像使用 `{repeat}` 命令一样，你可以停止使用缩进，并且行将始终显示。 不仅仅是该陈述是否属实。
            code: |-
                name = {ask} '你叫什么名字？'
                {if} name {is} 海蒂
                     {print}“欢迎海蒂”
                {else}
                     {print} '欢迎程序员！'
                {print} '3..2..1.. 开始编程！'
        8:
            header: if语句在 if 语句之内
            text: |-
                你可能想过尝试将 if 命令放入重复命令中，或放入另一个 if 命令中。
                目前，这还不可能。 在更高的级别中，这是允许的，但现在让我们首先集中练习使用适当缩进的 `{if}` `{else}` 和 `{repeat}` 命令。
        9:
            header: 调试
            text: 让我们调试代码!
            code: |-
                {print} '海蒂轮 巴士票机'
                区域 1 = 市政厅、图书馆、校园、市场
                区域 2 = 游泳池、滑板公园、购物中心、机场
                destination = '你想去哪里？'
                {if} destination {in} 区域 1
                {print} destination '位于区域 1'
                price=3欧元
                     {if} destination {is} 区域2
                {print} destination '位于区域 2'
                price=6
                ticket_type = {ask} '按 1 获取单次使用票。
                按 2 购买往返机票：'
                {if} ticket_type = 1
                {print} '您选择了一次性门票'
                {else}
                         {print} '您选择了往返机票'
                price*2
                {print} '这将付'price'欧元'
            debug: 对
        10:
            header: 让我们来看看冒险吧！
            text: 享受第8关的冒险吧！
    9:
        1:
            header: 欢迎来到第9关
            text: |-
                在此级别中，您可以在 `{if}` 或 `{repeat}`命令之后使用多行代码。

                您甚至可以将`{repeat}` 命令放入另一个`{repeat}` 命令中。
        2:
            header: '`{repeat}`后面的多行'
            text: 您可以在此级别中组合 `{repeat}`和`{if}`。
            code: |-
                {repeat} 3 {times}
                    food = {ask} '你想要什么？'
                    {if} food {is} 披萨
                        {print} '好极了！'
                    {else}
                        {print} '披萨更好吃'
        3:
            header: 缩进很重要!
            text: 缩进对于告诉计算机哪些行应该重复以及哪些行只能运行一次非常重要。
            code: |-
                {repeat} 3 {times}
                    {print} '此行将重复...'
                    {print} '这也是......'
                {print} '但是这个不会！'
        4:
            header: '`{if}`后面的多行'
            text: 你还可以在“{if}”之后使用多行
            code: |-
                continue = {ask} '你想继续吗？'
                {if} 继续 = 是
                    sure = {ask} '你确定吗？'
                    {if} sure {is} 是的
                        {print} '我们将继续'
                    {else}
                        {print} '你不确定'
                {else}
                    {print} '您不想继续'
        5:
            header: 缩进很有必要
            text: 同样，缩进仍然非常重要，可以在代码中产生很大的差异。
            code: |-
                continue = {ask} '你想继续吗？'
                {if} continue = yes
                    sure = {ask} '你确定吗？'
                    {if} sure {is} yes
                        {print} '我们将继续'
                {else}
                    {print} '你不确定'
        6:
            header: '`{if}` 在`{repeat}`之内'
            text: |-
                现在你可以在这些命令之后使用多行代码，你也可以将它们放在一起。
                一探究竟:
            code: |-
                {repeat} 3 {times}
                    food = {ask} '你想要什么？'
                    {if} food {is} 披萨
                        {print} '好极了！'
                    {else}
                        {print} '披萨更好吃'
        7:
            header: 注意缩进
            text: 请注意，此代码的第四行和第六行以 8 个缩进空格开头。
            code: |-
                {repeat} 3 {times}
                    food = {ask} '你想要什么？'
                    {if} food {is} 披萨
                        {print} “好极了！”
                    {else}
                        {print} '披萨更好吃'
        8:
            header: 调试
            text: 让我们调试代码!
            code: |-
                {print}'欢迎来到 海蒂跳，你的跳伞冒险！'
                people = {ask} '今天你和多少人一起跳？'
                {print}'出于安全原因，我们会问你们所有人一些问题。'
                extra_instructions_people = a, b
                {repeat} 3 {times}
                     name = {ask} '你叫什么名字？'
                jumped_before = '你以前跳过伞吗，'name'？'
                {if} jumped_before no
                {print} '不用担心，您会在 13 号房间获得额外的安全说明'
                {add}name{to} extra_instructions_people
                {else}
                {print}'有趣！'
                {print} '感谢大家填写安全问题。 享受你的跳跃吧！'
            debug: 对
        9:
            header: 我们走吧！
            text: 享受第9关的冒险吧！
    10:
        1:
            header: 欢迎来到第10关
            text: 在本级别中，您将学习一个新命令：`{for}`。
        2:
            text: 使用 for 可以创建一个列表并使用该列表上的所有项目。 `{for}` 创建一个块，就像重复(repeat)一样，块中的所有行都需要以缩进（4 个空格）开头。
            code: |-
                animals = 狗、猫、水滴鱼
                {for} 动物 {in} animals
                     {print} '我爱' 动物
            header: for 指令
        3:
            text: 在这里您可以看到 `{for}` 命令的另一个示例：
            code: |-
                days = 周一、周二、周三、周四、周五、周六、周日
                命名 = 妈妈、爸爸、艾玛、苏菲
                {for} day {in} days
                     {print} 命名 {at} {random} ' 在 ' day '洗碗'
            header: for 指令
        4:
            header: 调试
            text: 让我们调试代码
            code: |-
                {print} '女士们先生们！'
                {print}“一晚，只在马戏团海蒂住一晚！”
                acts=从大炮中射出,走钢丝,把自己装进手提箱,
                people = 不可思议的艾里斯, 艾哈迈德, 神奇的弗朗西斯,
                     {for}people{in}行为
                selected_person {is}个人{random}
                     selected_person ' will ' 行动
                {add} selected_person {from} 人
                {print} '今晚来看我们的节目！'
                {print} '门票只能在柜台购买'
            debug: 对
        5:
            header: 是时候编程了!
            text: 享受第10关的冒险吧！
    11:
        1:
            header: 欢迎来到第11关
            text: |-
                在此级别中，我们添加了一种新形式的 `{for}`命令。 在早期的级别中，我们将 for 与列表一起使用，但我们也可以将 for 与数字一起使用。

                这样我们就不再需要 `{repeat}` 命令了。
        2:
            text: 新的 for 命令如下所示：
            code: |-
                {for} counter {in} {range} 1 {to} 10
                    {print} counter
                {print} '是否准备好, 现在开始!'
            header: for 指令
        3:
            text: |-
                在上一张幻灯片中，变量被命名为 `'counter'`，因为它正在倒计时。
                当然，可以为你想要的变量使用任何名称。
                在这种情况下，Python 等编程语言中使用的变量的标准名称是`'i'`。
                看起来像这样：
            header: 变量 i
            code: "number = 10\n{for} i {in} {range} 1 {to} 10\n    {print} i * number"
        4:
            header: 调试
            text: 让我们调试代码!
            code: |-
                factor {is} {ask} '您需要哪个乘法表？'
                {repeat} {for} numbers{in} {range} 1 {to} 10 {times}
                     {print} 这是 factor 的乘法表
                     {print} 数字 'x' factor ' = 'i * factor
            debug: 对
        5:
            header: 让我们开始编程!
            text: 享受第11关的冒险吧！
    12:
        1:
            header: 欢迎来到第12关
            text: |-
                从这个级别开始，您可以使用十进制数，并且引号有一些变化。
                您还可以从此级别开始使用功能！
        2:
            header: 引号
            text: |-
                此级别对引号的使用进行了一些更改。
                从现在开始，**所有文本**都需要用引号引起来。 这包括变量值、列表中的项目以及 {if} 命令之后的文本。
            code: |-
                name = '海蒂机械人'
                {print} '你好' name
        3:
            header: 小数
            text: |-
                从这个级别开始，您还可以使用十进制数字。 这可以让您的餐厅等项目变得更好！

                数字不需要引号。
            code: |-
                {print} '十进制数现在需要使用点'
                {print} 2.5 + 2.5
        4:
            header: 函数!
            text: |-
                在此级别中，您将学习如何使用函数。函数是可以轻松多次使用的代码块。使用函数可以帮助我们组织可以反复使用的代码片段。若要创建函数，请使用 define 并为函数命名。然后将函数中所需的所有行放在定义行下方的缩进块中。在代码中留一个空行，使其看起来美观整洁。干得好！您已经创建了一个函数！

                现在，每当我们需要该代码块时，我们只需使用带有函数名称的来调用它！我们不必再次键入该代码块。
        5:
            header: 一闪一闪亮星星！
            text: |-
                在此程序中，您将看到一个函数示例。
                让我们看看如果你填写歌曲的其余部分会发生什么！
            code: |-
                {define} twinkle
                    {print} '闪烁'
                    {print} '...'

                {call} twinkle
                {print} '高于世界如此之高'
                {print} “就像天空中的钻石”
                {call} twinkle
        6:
            header: 功能
            text: 正如您在示例中看到的，函数是一个可以随时调用的代码块。您可以使用“{定义}”来设置函数，并使用“{叫}”来使用它。
        7:
            header: 调试
            text: 让我们调试代码!
            code: |-
                {call} new_member
                {print} '新会员你好！'
                用户名 = {ask} '您的用户名是什么？'
                密码 = '你的密码是什么？'
                {print} '欢迎来到我们的俱乐部！'

                用户名 = {ask} '请输入您的用户名。 您是新会员吗？ 输入 新会员'
                {if} 用户名 = 新会员
                {call}新会员
                     {else}
                         密码 = {ask} '请输入密码'
            debug: 对
        8:
            header: 准备好尝试了吗？
            text: 享受12级的冒险！
    13:
        1:
            header: 欢迎来到第13关
            text: |-
                我们现在要学习 `{and}` 和 `{or}`！ 如果要检查两个语句，则不必使用两个 if，而是可以使用 and 和 or。
                从现在开始，您还可以在函数中使用参数。
        2:
            header: and命令
            text: |-
                `{and}` 命令始终与 {if} 命令结合使用。
                这样你就可以检查 2 个陈述是否正确。 例如：
            code: |-
                name = {ask} '你叫什么名字？'
                年龄 = {ask} '你的年龄是多少？'
                {if} name {is} 'Hedy' {and} 年龄 {is} 2
                     {print} “你是真正的海蒂！”
        3:
            header: The {or} command
            text: |-
                `{or}` 与 `{and}` 命令的工作方式相同，但两个语句中只有一个必须为真。

                让我们看看将 `{and}`更改为 `{or}`时会发生什么。
            code: |-
                name = {ask} '你叫什么名字？'
                {if} name {is} 'Hedy' {or} name {is} 'hedy'
                     {print}“欢迎！！”
        4:
            header: 带参数的函数
            text: 现在，您已经学习了如何使用函数，您将学习如何使用带有 **argument** 的函数。参数是在函数中使用的变量。它不在函数外部使用。
        5:
            header: 例如
            text: |-
                在此示例中，您将看到如何在函数中使用参数“place”。
                运行代码并将“ocean”和“sea”更改为其他名称，然后查看会发生什么。
            code: |-
                {define} song {with} 地点
                    {print} "我的邦妮在这个地方"

                {call} song {with} "海洋"
                {call} song {with} "海"
                {call} song {with} "海洋"
        6:
            header: 变量示例
            text: |-
                您还可以将函数与问题结合起来。

                如果您进行这些更改，会发生什么：
                ```
                {define} song {with} place
                    print '我的邦妮在' place

                answer {is} {ask} '我的邦妮在哪里？'
                {call} song {with} answer
                ```
            code: |-
                {define} song {with} place
                    {print} '我的邦妮在' place

                {call} song {with} "海洋"
                {call} song {with} "海"
                {call} song {with} "海洋"
        7:
            header: 还有更多问题！
            text: |-
                现在，我们将更多问题与函数结合在一起。键入此代码，看看会发生什么。

                请注意变量和参数的名称相同。这是允许的。
                它让你感到困惑吗？只是使用不同的名称，这也是允许的。
                ```
                用名字、地点定义歌曲
                打印 '我的 ' 名字 ' 是 ' 地方

                名字是问“谁？”
                地方是问“他们在哪里？”
                用名字、地点叫歌
                ```
            code: |-
                {define} song {with} place
                     {print} '我的邦妮在' place

                {call} song {with} "海洋"
                {call} song {with} "海"
                {call} song {with} "海洋"
        8:
            header: 调试
            text: 让我们调试代码!
            code: |-
                {define}幸福{with}名字
                     {print} '🥳'
                {print} G
                {print} A
                {print}B
                {print} '聚会，' 名字
                {define}悲伤
                {print}'😞'
                {print} E
                {print}D
                {print} C
                {print} '希望你感觉好点，' name

                name = {ask} '你的'name'是什么？'
                mood = {ask} '你高兴还是悲伤？'
                {if}mood=快乐
                     {call}幸福{with}name
                {else}mood=悲伤
                     {define}悲伤{to}name
            debug: 对
        9:
            header: 出发！
            text: 享受 13 级的冒险！
    14:
        1:
            header: 欢迎来到第14关
            text: 在这个关卡中，你将学习一些可以帮助你改进程序的新符号，比如>。您还将学习如何使用函数的返回值。
        2:
            text: |-
                这些是您可以使用的新符号：

                   > 表示大于...

                   >= 表示大于或等于...

                   < 表示小于...

                   <= 表示小于或等于...

                你可以像这样使用它们：
            code: |-
                age = {ask} '你多大了？'
                {if} age < 13
                     {print} '你比我年轻！'
                {else}
                     {print} '你比我大！'
            header: 符号
        3:
            text: |-
                您还可以使用：

                == 意思是 相同。

                != 意思是 不是

                == 用于 `{if}` 语句中。
            code: |-
                answer = {ask} '你想了解更多吗？'
                {if} answer == '是'
                     {print} '前往下一次冒险！'
                {if} answer != '是'
                     {print} '这太可惜了！'
            header: 符号
        4:
            header: 返回值
            text: 在前面的级别中，您已经学习了创建函数并对其使用参数。函数的另一个重要用途是让它为您计算一些东西。你可以给函数一个计算，它会给你计算的答案。此答案称为**返回值**。
        5:
            header: 返回值
            text: 例如，在此代码中，函数 算新价将计算任何项目的新价格。它将为您提供新价格作为返回值。
            code: |-
                {define} calculate_new_price {with} amount, percentage
                    percentage = percentage / 100
                    discount_amount = amount * percentage
                    {return} amount - discount_amount

                old_price = {ask} '价格标签上的价格是多少？'
                discount = {ask} '折扣百分比是多少？'

                new_price = {call} calculate_new_price {with} old_price, discount
                {print} '新价格为 ' new_price ' 美元'
        6:
            header: 调试
            text: 让我们调试这段代码！
            code: |-
                item = 'not bought'
                {print} '我想买这件商品'
                price == {ask} '多少钱?'
                {if} price less than or the same as 10
                    {print} '买它!'
                    item = 'bought'
                {if} price is more than 10 {and} less than or the same as 20
                    {print} '还好'
                    item = 'bought'
                {if} price is more than 20 {and} less than 50
                    {print} '有一点贵!'
                {if} price is more than or the same as 50
                    {print} '算了吧!'
                {if} item =! bought
                    {print} '哎，我不买了'
                {else}
                    {print} '我买了！谢谢你'
            debug: 真的
        7:
            header: 让我们开始工作吧！
            text: 享受14级的冒险！
    15:
        1:
            header: 欢迎来到第15关
            text: 在本级别中，你将了解“{while}”循环。
        2:
            text: |-
                我们将学习一种新循环，即 while 循环！ 只要语句为真，循环就会继续。 所以不要忘记更改循环中的值。

                在示例代码中，我们将继续下去，直到给出正确答案。 如果从未给出正确答案，循环将永远不会结束！
            code: |-
                answer = 0
                {while} answer != 25
                     answer = {ask} '5 乘以 5 是多少？'
                {print} '已给出正确答案'
            header: '{while}'
        3:
            code: |-
                numbers = 1, 2

                {for} i {in} {range} 3 {to} 50
                    {add} x {to} numbers
                    i = + 1

                random_number = numbers {random}
                guesses = 10

                {while} guess = 0
                    answer = '猜猜我的数字:'
                    {if} answer >= random_number
                        {print} '小了'
                        guesses = guesses -1
                    {if} answer > random_number
                        {print} '大了!'
                        guesses = guesses
                    {else} answer = random_number
                        {print} '对了'
                        guesses = 10
            debug: '对的'
            header: 调试
            text: 来调试代码!
        4:
            header: 让我们开始尝试！
            text: 享受15级的冒险吧！
    16:
        1:
            header: 欢迎来到第16关
            text: 在本级别中，你将了解[方括号]以及如何使用它们。
        2:
            header: 方括号
            text: 我们将以 Python 方式创建列表，用方括号将列表括起来！ 我们还保留每个项目周围的引号，就像我们在之前的级别中学到的那样。 我们使用方括号来指出列表中的位置。 at random 命令不能再使用。
            code: |-
                friends = ['艾哈迈德'，'本'，'凯登']
                {print} friends[1] '是列表中的第一个朋友。'
                {print} friends[2] '是列表中的第二个朋友。'
                {print} friends[3] '是列表中的第三位朋友。'
                #现在我们用变量i来匹配两个列表
                lucky_numbers = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                     {print} friends[i] '的幸运数字是 ' lucky_numbers[i]
        3:
            code: |-
                {print} '友情测试'
                {subjects} = ['song', 'movie', 'food', 'drink']
                answers_player_1 = []
                answers_player_2 = []
                score = 100

                {for} i {in} {range} 1 {to} 4
                    answer = {ask} '你最爱的' subjects[i]
                {add} answer {to} answers_player_1

                {print} '玩家2，轮到你了!'
                {for} i {in} {range} 0 {to} 4
                    answer_player_2 = {ask} '什么是玩家1 最喜爱的 ' subjects
                    {add} answer_player_2 {in} answers_player_2
                    {if} answers_player_2[2] == answers_player_1[1]
                        {print} '对了!'
                    {else}
                        {print} '错了!'
                    score = score - 25

                {print} '玩家2，你的分数 ' score '%'

                {if} score = 100
                    {print} '你是位超赞的朋友'
                {if} score < 100 {or} score >= 50
                    {print} '你能作的更好'
                {else} score < 50
                    {print} '你真的认识这个人吗?!'
            debug: '对的'
            header: 调试
            text: 来调试代码!
        4:
            header: 让我们开始尝试！
            text: 享受16级的冒险吧！
    17:
        1:
            header: 欢迎来到第17关
            text: 在本级别中，你将学习如何使用冒号以及 elif 命令。
        2:
            text: '现在我们要稍微改变一下缩进。 每次我们需要缩进时，我们都需要在缩进之前的行添加 : 。'
            code: |-
                prices = ['100 万美元', '苹果派', '什么都没有']
                your_price = prices[{random}]
                {print} '你赢了 ' your_price
                {if} your_price == '100万美元' ：
                     {print}'是啊！ 你好有钱！'
                {else}:
                     {print} '下次祝你好运..'
            header: 冒号
        3:
            header: 否则如果/Elif
            text: 在这个关卡中你还可以使用一个新命令：elif。 elif 是 else if 的缩写，当您想要创建 3 个（或更多！）选项时需要它。 一起来一探究竟！
            code: |-
                价格 = ['100 万美元', '苹果派', '什么都没有']
                your_price = 价格[{random}]
                {print} '你赢了 ' your_price
                {if} your_price == '100万美元':
                     {print}'是啊！ 你好有钱！'
                {elif} your_price == '一个苹果派':
                     {print} '可爱的苹果派！'
                {else}:
                     {print} '下次祝你好运..'
        4:
            code: |-
                {define} ask_direction
                    direction = {ask} '你想去哪里?'
                    {if} direction = '后退'
                        {turn} 180
                    {else} direction == '右'
                        {turn} 90
                    {else} direction == '左'
                        {turn} 270
                        {forward} 100

                continue = 'yes'

                {while} continue == 'yes'
                    {print} ask_direction
                    {sleep}
                    continue = '你想再画一些吗?'
                    {sleep}
            debug: '对的'
            text: 来调试代码!
            header: 调试
        5:
            header: 我们来试一下！
            text: 享受第17关的冒险吧！
    18:
        1:
            header: 欢迎来到第十八关
            text: 恭喜！ 你已到达 海蒂 的最后一关！ 在此处创建的代码可以复制到真实的 Python 环境（例如 replit 或 PyCharm），并且你可以在那里继续学习！ 但请注意，Python 只能读取英文命令，因此如果你一直在使用其他语言，则现在需要切换到英文。
        2:
            header: Python方式
            text: |-
                我们得到了真正的 Python 代码！ 这意味着从现在开始我们需要在 print 和 range 中使用括号。

                另外，如果要打印多个项目，则需要用逗号分隔它们。

                为了获取 Python 代码，我们需要进行的最后一个更改是将询问更改为输入。

                单击 'print' 选项卡查看所有示例。
            editor: /hedy/18
        3:
            header: 最后的冒险！
            text: 享受第 18 关的最后冒险吧！
