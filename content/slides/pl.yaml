levels:
    0:
        1:
            header: Witaj w Hedy!
            text: Hedy jest językiem programowania.
        2:
            header: Programowanie
            text: |-
                Programowanie to wydawanie instrukcji komputerowi, przy użyciu języka komputera.

                Taki język nazywany jest "językiem programowania".
        3:
            header: Język programowania
            text: |-
                Może znasz już jakieś języki programowania?
                Oto kilka przykładów:
                * Scratch
                * Python
                * HTML
        4:
            header: Programowanie
            text: |-
                Jeśli potrafisz programować, możesz zrobić wiele fajnych rzeczy:
                * Budować interaktywne historie
                * Tworzyć rysunki komputerowe i rysować je na papierze lub tkaninie
                * Tworzyć własne aplikacje do wykorzystania na swoim telefonie
        5:
            header: Programowanie w Hedy
            text: W Hedy używamy specjalnych kodów, takich jak `{print}`.
            code: '{print} Witaj w Hedy!'
        6:
            header: Programowanie w Hedy
            text: Słowa kodowe będą wyświetlane na różowo.
            code: '{print} Witaj w Hedy!'
        7:
            header: Programowanie w Hedy
            text: Kod uruchamiamy przyciskiem Uruchom kod znajdującym się pod kodem.
            code: '{print} Witaj w Hedy!'
        8:
            header: Programowanie w Hedy
            text: Dane wyjściowe są wyświetlane po prawej stronie.
            code: '{print} Witaj w Hedy!'
        9:
            header: Programowanie w Hedy
            text: Dane wyjściowe mogą być również rysunkiem.
    1:
        1:
            header: Witamy na poziomie 1!
            text: |-
                Poziom 1 rozpoczniemy od tworzenia historii w Hedy!

                Do stworzenia interaktywnych historii potrzebujemy trzech kodów tekstowych.
        2:
            text: |-
                Pierwszym kodem, którego możesz użyć na poziomie 1 jest `{print}`.

                `{print}` służy do wyświetlania tekstu na ekranie.
            code: '{print} Pokaż tekst na ekranie'
        3:
            header: Komenda {print}
            text: |-
                Możesz zmienić tekst po poleceniu wydruku, aby wypisać dowolny tekst.

                Ewentualnie, możesz wypisać kilka linijek tekstu przez dodanie kolejnej linii kodu również zaczynającej się komendą `{print}`.
            code: '{print} Witaj w Hedy!

                {print} Zacznij programować!'
        4:
            text: |-
                Drugim kodem tekstowym, którego możesz użyć w poziomie 1 jest `{ask}`.

                `{ask}` służy do zadania pytania, na które użytkownik może odpowiedzieć.
            code: |-
                {print} Witaj we własnej grze w kamień, papier i nożyce!
                {ask} Co wybierzesz?
        5:
            text: |-
                Jak mogliście zobaczyć w poprzednim przykładzie. Jeśli użyjecie komendy `{ask}`, możecie zadać pytanie.
                Odpowiedź jednak nie wyświetla się na ekranie.

                Jeśli chcecie, aby odpowiedź się wyświetliła, możecie użyć ostatniej komendy tego poziomu: `{echo}`.
                `{echo}` używa się, aby powtórzyć odpowiedź do pytania zadanego komendą `{ask}`.
            code: |-
                {print} Witaj!
                {ask} Jak masz na imię?
                {echo} witaj
        6:
            header: Programowanie!
            text: |-
                Korzystając z komend `{print}`, `{ask}` i `{echo}` możecie już stworzyć małą opowieść.
                To dobry moment na spróbowanie swoich sił z przygodami takimi, jak Papuga, Opowieść i Kamień, Papier, Nożyce.
        7:
            header: Programowanie!
            text: Przygody są dostępne w zakładkach.
        8:
            header: Programowanie!
            text: Użyj zółtych strzałek, aby skopiować przykłady.
            editor: /hedy/1
        9:
            header: Rysowanie z żółwiem
            text: '`{forward}` służy do przesuwania żółwia do przodu.'
        10:
            header: 'Rysowanie za pomocą żółwia: {turn}'
            text: '`{turn}` służy do tego, aby żółw skręcił w lewo lub w prawo.'
        11:
            header: 'Rysowanie za pomocą żółwia: {forward}'
            text: '`{turn}` służy do tego, aby żółw mógł skręcać w lewo lub w prawo.'
        12:
            header: Debuggowanie
            text: Debuggowanie kodu oznacza pozbycie się błędów w kodzie. Zdebugujmy ten kod razem. Kliknij przycisk biedronki, aby uruchomić debugger.
            code: |-
                Jestem DJ Hedy
                {print} Jaką piosenkę chciałbyś usłyszeć?
                {ask} Też lubię tę piosenkę!
                {print} Następnie... {echo}
        13:
            header: Niech rozpocznie się zabawa z programowaniem!
            text: Ciesz się przygodami na poziomie 1!
    2:
        1:
            header: Witaj na poziomie 2
            text: |-
                Na tym poziomie nauczysz się używać zmiennych.

                Zmienna to słowo, którego można użyć do przechowywania informacji.

                Na przykład: imię, wiek lub ulubiona drużyna sportowa.
        2:
            header: Zmienne
            text: Aby utworzyć lub „ustawić” zmienną, używamy polecenia `{ is } `
            code: |-
                imię {is} Hedy
                wiek {is} 15
                {print} imię ma wiek lat
        3:
            header: Interaktywny
            text: |-
                Możemy również ustawić zmienną, zadając pytania.

                Odpowiedź na pytanie jest przechowywana w zmiennej.

                W ten sposób nie potrzebujemy polecenia `{ echo }`.
            code: |-
                imię {is} {ask} Jak masz na imię?
                {print} Cześć imię
        4:
            header: Wiele zmiennych
            text: Teraz, gdy używamy zmiennych, możemy użyć wielu zmiennych zamiast tylko jednego polecenia `{ echo }`.
            code: |-
                imię {is} {ask} Jakie jest twoje imię?
                {print} Cześć imię
                wiek {is} {ask} Ile masz lat?
                {print} imię ma wiek lat.
        5:
            header: Polecenie sleep
            text: Możesz także użyć polecenia `{ sleep }`, aby wstrzymać kod na chwilę.
            code: |-
                {print} Mój ulubiony kolor to...
                {sleep} 2
                {print} zielony!
        6:
            header: Polecenie sleep 5
            text: |-
                Możesz dodać liczbę po poleceniu { sleep }`, jeśli chcesz, aby pauza była dłuższa.

                Jeśli chcesz, możesz nawet użyć zmiennej zamiast liczby, aby zdecydować o czasie trwania polecenia sleep.
            code: |-
                pauza {is} 10
                {print} Mój ulubiony kolor to...
                {sleep} pauza
                {print} zielony!
        7:
            header: Debuggowanie
            text: Debugowanie kodu oznacza pozbycie się błędów w kodzie. Zdebuggujmy ten kod razem. Kliknij przycisk biedronki, aby uruchomić debugger.
            code: |-
                {print} Witamy w sklepie z pączkami!
                nadzienie {is} Jakiego rodzaju nadzienie chciałbyś?
                {print} Wybrałeś... nadzienie! Yum!
                polewa {ask} Jaki rodzaj polewy chciałbyś?
                polewa jest pyszna!
                {print} Pójdę po twojego pączka. {sleep}
                {print} Proszę bardzo! Pączek z nadzieniem i plewą!
                {ask} Miłego dnia!
        8:
            header: Niech rozpocznie się przygoda z programowaniem!
            text: Ciesz się przygodami na poziomie 2!
    3:
        1:
            header: Witaj na poziomie 3
            text: Na tym poziomie dowiesz się, jak utworzyć listę, dodać i usunąć elementy z list oraz wybrać losowy element z tej listy.
        2:
            header: Tworzenie listy
            text: |-
                Tworzysz listę za pomocą `{ is }`.

                Oddziel elementy na liście przecinkiem.
            code: zwierzęta {is} psy, koty, kangury
        3:
            header: Losowo
            text: |-
                Możesz użyć listy za pomocą polecenia `{ at }` `{ random }`.
                Komputer losowo wybierze jeden element listy.
                Za każdym razem, gdy uruchamiasz ten kod, dane wyjściowe będą się różnić.
            code: |-
                zwierzęta {is} psy, koty, kangury
                {print} zwierzęta {at} {random}
        4:
            header: Losowo w zdaniu
            text: Możesz także użyć polecenia `{ at }` `{ random }` w zdaniu.
            code: |-
                zwierzęta {is} psy, koty, kangury
                {print} Moim ulubionym zwierzęciem są zwierzęta {at} {random}
        5:
            header: Dodaj do
            text: |-
                Możesz dodać elementy do listy za pomocą polecenia `{ add }` `{ to }`.

                Możesz wybrać, co dodać do listy lub użyć polecenia `{ add }` `{ to }` w połączeniu z poleceniem` { ask } `.
                W ten sposób możesz pozwolić graczowi zdecydować, co dodać do listy.
            code: |-
                zwierzęta {is} pies, kot, kangur
                lubić {is} {ask} Jakie jest twoje ulubione zwierzę?
                {add} lubić {to_list} zwierzęta
                {print} Wybieram zwierzęta {at} {random}
        6:
            header: Usuń z
            text: |-
                Przeciwieństwem polecenia `{add}` {to}` jest polecenie`{remove}` `{from}`.
                To polecenie usuwa element z listy.
            code: |-
                zwierzęta {is} pies, kot, kangur
                nie_lubić {is} {ask} Jakiego zwierzęcia nie lubisz?
                {remove} nie_lubić {from} zwierzęta
                {print} Wybieram zwierzęta {at} {random}
        7:
            header: Debuggowanie
            text: Zdebugguj ten kod!
            code: |-
                gatunki_muzyki {is} rock, pop, metal, indie, jazz
                wybrany_gatunek is muzyka {at} {random}
                {print} Posłuchajmy wybranego gatunku
                fajny {ask} Czy lubisz ten gatunek??
                {remove} wybrany_gatunek {from} wybrany_gatunek
                drugi_wybór {is} gatunki_muzyki
                {print} a może wolisz... drugi_wybór {at} {random}
                {remove}drugi_wybór {to} gatunki_muzyki
                {print} Lubię gatunki_muzyki {random} best!
        8:
            header: Zabierajmy się do roboty!
            text: Ciesz się przygodami na poziomie 3!
    4:
        1:
            header: Witaj na poziomie 4
            text: Na tym poziomie nauczysz się używać cudzysłowów.
            code: '{print} ''polecenie print z cytatami!'''
        2:
            header: problem
            text: 'Na poprzednich poziomach mogłeś napotkać ten problem:'
            code: |-
                imię {is} Sophie
                {print} Moje imię to imię
        3:
            header: Naprawianie go znakami cudzysłowu
            text: |-
                Na tym poziomie rozwiążemy ten problem za pomocą cudzysłowów.

                To sprawia, że nasz kod wygląda bardziej jak „prawdziwy” kod Pythona.
        4:
            header: Znaki cudzysłowu z poleceniem print
            text: Za każdym razem, gdy używasz polecenia `{print}`, musisz umieścić tekst, który chcesz wyświetlać na ekranie, w cudzysłowie.
            code: '{print} ''polecenie print z cytatami!'''
        5:
            header: Znaki cudzysłowu z poleceniem ask
            text: Dotyczy to również polecenia `{ ask }`.
            code: imię {is} {ask} 'imię proszę?'
        6:
            header: Znaki cudzysłowu i zmienne
            text: |-
                Nie chcesz, aby nazwy zmiennych były wyświetlane na ekranie.
                Dlatego zmienne należy pominąć w cudzysłowie, w następujący sposób:
            code: |-
                imię {is} Harry
                {print} 'Cześć ' imię
        7:
            header: Znaki cudzysłowu i zmienne
            text: |-
                Gdy nazwy zmiennych są używane w środku zdania, należy pominąć zmienne w cudzysłowie.
                Reszta zdania wymaga jednak cudzysłowu. To wygląda tak:
            code: |-
                imię {is} Harry
                {print} 'Cześć ' imię ', jak się masz?'
        8:
            header: Znaki cudzysłowu i skrótowce
            text: |-
                Bądź ostrożny! Teraz, gdy używasz cudzysłowu, nie możesz używać apostrofów w skurczach.

                Spróbuj wydrukować skurcz typu "you're" lub "I'm" na ekranie poniżej i zobacz, co się stanie....
            code: '{print} ''To się nie uda!'''
        9:
            header: komenda Clear
            text: "Na tym poziomie nauczysz się także polecenia { clear }.\nZa pomocą tego polecenia możesz wyczyścić cały tekst z ekranu wyjściowego.\n\nUważaj, aby zawsze używać polecenia uśpienia. Jeśli tego nie zrobisz, komputer wyczyści cały tekst, zanim będziesz mógł go przeczytać!"
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} 'NIESPODZIANKA!'
        10:
            header: Debuggowanie
            text: Zdebuggujmy ten kod!
            code: |-
                {clear}
                {print} Co za przyjemny dzień, żeby pójść na plażę!
                {ask} 'Chcesz zbudować zamek z piasku lub popływać w oceanie?'
                {print} 'Chciałbyś czynność '
                {print} 'Też chciałbym to zrobić'
                {print} 'Spójrz na te piękne muszle!'
                kolory {is} 'pomarańczowy, srebrny, biały, brązowy'
                {print} 'Uwielbiam kolory {at} {random}!'
                wybór {is} {ask} Która ci się podoba?
        11:
            header: Do biegu, gotowi, start!
            text: Ciesz się przygodami na poziomie 4!
    5:
        1:
            header: Witamy na poziomie 5
            text: 'Na tym poziomie nauczysz się używać 3 nowych poleceń: `{ if }`, `{ else } `i` { w } `.'
        2:
            text: |-
                Polecenie `{ if }` pozwala wybrać jedną z dwóch opcji.
                W tym przykładzie komputer wydrukuje 'ładnie', jeśli podana odpowiedź to Hedy.
                Jeśli odpowiedź nie brzmi Hedy, komputer nic nie zrobi.
            code: |-
                imię {is} {ask} 'Jak masz na imię?'
                {if} imię {is} Hedy {print} 'fajnie'
        3:
            header: Nie zapomnij napisać
            text: |-
                Korzystając z polecenia `{ if }`, nie zapomnij użyć polecenia `{ print }`.
                Ten kod nie będzie działał!
            code: '{if} imię {is} Hedy ''fajnie'''
        4:
            header: Polecenie else
            text: |-
                Korzystając z polecenia `{ if }`, możesz również dodać polecenie `{ else }`.
                Jeśli odpowiedź brzmi Hedy, komputer wyświetli 'fajnie'.
                Ale jeśli odpowiedź jest czymś innym, komputer wyświetli „boo”'
            code: '{if} imię {is} Hedy {print} ''fajnie'' {else} {print} ''boo!'''
        5:
            header: Długie linie
            text: |-
                Być może zauważyłeś, że twoje linie mogą być bardzo długie, gdy masz zarówno polecenie `{ if }`, jak i polecenie `{ else }`.

                Możesz rozdzielić polecenia i umieścić je w 2 wierszach, takich jak:
            code: |-
                {if} imię {is} Hedy {print} 'fajnie'
                {else} {print} 'boo!'
        6:
            header: Kolejne nowe polecenie
            text: |-
                Jeśli ćwiczyłeś z poleceniami `{ if }` i` { else } `, możesz także wypróbować polecenie` { in } `.

                Za pomocą `{ in }` możesz pozwolić komputerowi sprawdzić, czy element znajduje się na liście, na przykład:

                Pamiętaj, że Hedy jest wrażliwa na przypadki. Oznacza to, że jeśli odpowiesz „Zielony” zamiast „zielony”, Hedy wydrukuje „meh”".
            code: |-
                ładne_kolory {is} zielony, żółty
                ulubiony_kolor {is} {ask} 'Jaki jest twój ulubiony kolor?'
                {if} ulubiony_kolor {in} ładne_kolory {print} 'ładny!'
                {else} {print} 'meh'
        7:
            header: Debuggowanie
            text: Zdebuggujmy ten kod!
            code: |-
                {print} Witamy w HedyAir Security!
                karta_pokładowa {is} {ask} 'Czy masz kartę pokładową??'
                {if} karta_pokładowa tak {print} Wspaniale!
                {else} Proszę przygotować kartę pokładową.
                paszport {is} 'Czy mogę zobaczyć twój paszport?'
                {if} paszport {is} tak 'dziękuję'
                {else} 'Nie możesz latać bez paszportu'
                zgłosić {is} {ask} Czy masz coś do zgłoszenia?
                {if} zgłosić {is} tak
                przedmioty_do_zgłoszenia {is} {ask} 'Co chciałbyś zgłosić'
                {else} W porządku
                {print} Dziękuję. Proszę przejść do bramy A22.'
        8:
            header: Chodźmy!
            text: Ciesz się przygodami na poziomie 5!
    6:
        1:
            header: Witamy na poziomie 6
            text: Na tym poziomie dodajemy matematykę do naszych kodów.
        2:
            header: Dodawanie
            text: Jeśli chcesz obliczyć dodatek, po prostu użyj znaku plus.
            code: '{print} ''5 dodać 5 to '' 5 + 5'
        3:
            header: Odejmowanie
            text: Jeśli chcesz odjąć, możesz użyć znaku minus.
            code: '{print} ''5 minus 5 to '' 5 - 5'
        4:
            header: Mnożenie
            text: Jeśli chcesz wykonywać mnożenie, możesz użyć gwiazdki.
            code: '{print} ''5 razy 5 to '' 5 * 5'
        5:
            header: Dzielenie
            text: Możesz użyć ukośnika do podziału.
            code: '{print} ''5 dzielone na 5 to '' 5 / 5'
        6:
            header: Podsumowanie
            text: Podsumowując, możesz używać +, -, * i / do matematyki.
            code: |-
                {print} '5 dodać 5 to ' 5 + 5
                {print} '5 minus 5 to ' 5 - 5
                {print} '5 razy 5 to ' 5 * 5
                {print} '5 dzielone na 5 to ' 5 / 5
        7:
            header: Symbol =
            text: |-
                Odtąd możesz także używać symbolu = zamiast polecenia `{ is }`.
                Dotyczy to zarówno liczb, jak i słów, a także poleceń `{ if }` lub `{ else }`.
            code: |-
                imię = Hedy
                odpowiedź = 20 + 4
        8:
            header: Obliczenia ze zmiennymi
            text: 'Możesz używać obliczeń z liczbami, ale możesz także używać zmiennych do wykonywania obliczeń, takich jak:'
            code: |-
                liczba_1 = {ask} 'Wypełnij pierwszą liczbę:'
                liczba_2 = {ask} 'Wypełnij druga liczbę:'
                poprawna_odpowiedź = liczba_1 * liczba_2
                {print} liczba_1 ' razy ' liczba_2 ' to ' poprawna_odpowiedź
        9:
            header: Debuggowanie
            text: Zdebugguj ten kod!
            code: |-
                {print} 'To automat biletowy parku wodnego'
                {print} 'Cennik: Dzieci poniżej 12 lat $ 3, Dorośli $ 5'
                {print} 'Poniedziałki zniżka 25%'
                liczba_dzieci = 'Ile biletów dla dzieci chciałbyś?'
                liczba_dorosłych = 'Ile biletów dla dorosłych chciałbyś?'
                dzień_tygodnia = {ask} 'Jaki jest dzień?'
                {clear}
                cena_dziecka = liczba_dzieci * 3
                cena_dorosłych = liczba_dorosłych + 5
                całkowita_cena = adult_price * child_price
                {if} dzień {is} poniedziałek
                całkowita_cena = całkowita_cena * 0.25
                {print} 'Za wszystko należy się
        10:
            header: Zabierajmy się do roboty!
            text: Ciesz się przygodami na poziomie 6!
    7:
        1:
            header: Witamy na poziomie 7
            text: Na tym poziomie nauczysz się powtarzać wiersz kodu tyle razy, ile chcesz.
        2:
            header: powtórz 3 razy
            text: |-
                Jeśli chcesz powtórzyć wiersz kodu, możesz użyć kodu `{repeat}`3` { times }`.
                Jeśli chcesz powtórzyć linię więcej razy, po prostu zmień liczbę.

                Na przykład: jeśli programujesz historię, w której twoja postać krzyczy o pomoc 5 razy, może to wyglądać następująco:
            code: |-
                {print} 'Książę wciąż wołał o pomoc'
                {repeat} 5 {times} {print} 'Pomocy!'
                {print} 'Dlaczego nikt mi nie pomoże??'
        3:
            header: Nie zapomnij polecenia print
            text: Podczas korzystania z polecenia powtarzania nie zapomnij o poleceniu `{ print }`.
            code: '{repeat} 5 {times} ''Pomocy!'''
        4:
            header: Powtórz polecenie ask
            text: Możesz także wielokrotnie powtarzać polecenie `{ ask }`, `{ if }` lub `{ else }`.
            code: |-
                {repeat} 2 {times} odpowiedź = {ask} 'Czy wiesz, że możesz zadać pytanie wiele razy?'
                {if} odpowiedź {is} tak {repeat} 2 {times} {print} 'Już to wiedziałeś!'
                {else} {repeat} 3 {times} {print} 'Nauczyłeś się czegoś nowego!'
        5:
            header: Debuggowanie
            text: Zdebuggujmy ten kod!
            code: |-
                {print} Utknąłeś na bezludnej wyspie.
                {repeat} 3 'Pomocy!'
                uratowany = {ask} Czy ktoś przyszedł na ratunek?
                {if} uratowany tak {is}
                {print} Szczęściarz
                {else} {repeat} 3 {times} 'POMOCY!'
                uratowany = 'A teraz?'
                {if} tak
                {print} 'Hurra!
                {else} 'Szkoda... No cóż ... czas zbudować schronienie i znaleźć jedzenie.'
        6:
            header: Do biegu, gotowi, start!
            text: Ciesz się przygodami na poziomie 7!
    8:
        1:
            header: Witamy na poziomie 8
            text: Na tym poziomie nauczysz się używać wcięcia, aby polecenia `{repeat}`, `{if}` i `{else}` działały dla wielu wierszy kod.
        2:
            header: 'polecenia {repeat} przed'
            text: |-
                Na poprzednich poziomach polecenie `{repeat}` wyglądało następująco:

                Możesz powtórzyć tylko jeden wiersz kodu.
            code: '{repeat} 5 {times} {print} ''Pomocy!'''
        3:
            header: 'Polecenia {repeat} teraz'
            text: |-
                Na tym poziomie możesz powtórzyć wiele wierszy kodu. Aby to zrobić, musisz powiedzieć komputerowi, które linie należą do siebie i powinny zostać powtórzone.
                Robisz to za pomocą wcięcia.

                Użyj 4 spacji (lub jednego tab) na początku każdej linii, którą chcesz powtórzyć, w następujący sposób:
            code: |-
                {repeat} 5 {times}
                    {print} 'Cześć wszystkim'
                    {print} 'Zostanie to napisane 5 razy ”'
        4:
            header: 'Polecenia {repeat} teraz'
            text: |-
                Jeśli chcesz, możesz kontynuować po poleceniu `{repeat}` bez wcięcia.
                Linie, które nie zaczynają się od wcięcia, nie będą się powtarzać.
            code: |-
                {repeat} 3 {times}
                    {print} 'Cześć!'
                {print} 'Skończyliśmy powtarzać!'
        5:
            header: polecenie if i else przed
            text: |-
                To samo dotyczy poleceń `{ if }` i` { else }`.
                Były to polecenia wcześniej:
            code: |-
                {if} imię{is} Hedy {print} 'fajnie'
                {else} {print} 'boo!'
        6:
            header: Polecenie if i else teraz
            text: |-
                Są to teraz polecenia `{ if }` i `{ else }`.
                Każda linia po poleceniach '{ if }' i `{ else } `zaczyna się od wcięcia.
            code: |-
                imię = {ask} 'Jak masz na imię?'
                {if} imię {is} Hedy
                    {print} 'Witaj Hedy'
                {else}
                    {print} 'Witaj programisto!'
        7:
            header: zatrzymanie wcięcia
            text: Podobnie jak w przypadku polecenia `{repeat}`, możesz przestać używać wcięcia, a wiersze będą zawsze wyświetlane. Nie tylko jeśli stwierdzenie jest prawdziwe.
            code: "imię = {ask} 'jak masz na imię?'\n{if} imię {is} Hedy\n    {print} 'Witaj Hedy'\n{else}\n    {print} 'Witaj programisto!' \n{print} '3..2..1.. Zacznij programować!'"
        8:
            header: wyrażenie if wewnątrz wyrażenia if
            text: |-
                Być może pomyślałeś o próbie umieszczenia polecenia if w poleceniu repeat lub w innym poleceniu if.
                Na razie nie jest to jeszcze możliwe. Na wyższych poziomach będzie to dozwolone, ale na razie skupmy się na ćwiczeniu poleceń { if } `{ else }` i `{repeat}` z właściwym wcięciem pierwszy.
        9:
            header: Debuggowanie
            text: Zdebugguj ten kod!
            code: |-
                {print} 'Automat biletowy busa HedyWheels
                strefa_1 = Ratusz, biblioteka, kampus, rynek
                strefa_2 = Basen, Skate Park, centrum handlowe, lotnisko
                miejsce_docelowe = 'Gdzie chcesz iść?'
                {if} miejsce_docelowe {in} strefa 1
                {print} miejsce_docelowe 'is w strefa 1'
                cena = 3 euros
                    {if} miejsce_docelowe {is} strefa_2
                {print} miejsce_docelowe 'jest w strefa 2'
                cena = 6
                rodzaje_biletów = {ask} 'Naciśnij 1, aby uzyskać bilet jednorazowego użytku
                Naciśnij 2, aby uzyskać bilet w obie strony:'
                {if} rodzaje_biletów = 1
                {print} 'Wybrałeś bilet jednorazowego użytku'
                {else}
                        {print} Wybrałeś bilet w obie strony'
                cena * 2
                {print} 'Za wszystko należy się euro'
        10:
            header: Sprawdźmy przygody!
            text: Ciesz się przygodami na poziomie 8!
    9:
        1:
            header: Witamy na poziomie 9
            text: |-
                Na tym poziomie możesz użyć wielu wierszy kodu po poleceniu `{ if }` lub po poleceniu `{repeat}`.

                Możesz nawet umieścić polecenie `{repeat}` w innym poleceniu `{repeat}`.
        2:
            header: Wiele linii po `{repeat}`
            text: Na tym poziomie możesz łączyć `{repeat}` i `{if}`.
            code: |-
                {repeat} 3 {times}
                    posiłek = {ask} 'Co chcesz zjeść?'
                    {if} posiłek {is} pizza
                        {print} 'dobrze!'
                    {else}
                        {print} 'pizza jest lepsza'
        3:
            header: Wcięcie ma znaczenie!
            text: Wcięcie jest bardzo ważne, aby powiedzieć komputerowi, które linie należy powtórzyć, a które linie należy uruchomić tylko raz.
            code: |-
                {repeat} 3 {times}
                    {print} 'Ta linia zostanie powtórzona...'
                    {print} 'Ta też...'
                {print} 'ale ta nie będzie !'
        4:
            header: Wiele linii po `{ if }`
            text: Możesz także użyć wielu linii po `{ if }`
            code: |-
                kontynuować = {ask} 'Chcesz kontynuować?'
                {if} kontynuować = tak
                    pewien = {ask} 'Czy jesteś tego pewny?'
                    {if} pewien {is} tak
                        {print} 'będziemy kontynuować'
                    {else}
                        {print} 'Nie jesteś pewien'
                {else}
                    {print} 'nie chcesz kontynuować'
        5:
            header: Wcięcie ma znaczenie
            text: Ponownie wcięcie jest nadal bardzo ważne i może mieć duży wpływ na kod.
            code: |-
                kontynuować = {ask} 'Chcesz kontynuować?'
                {if} kontynuować = tak
                    pewien = {ask} 'Jesteś tego pewny?'
                    {if} pewien {is} tak
                        {print} 'Będziemy kontynuować'
                {else}
                    {print} 'Nie jesteś pewien'
        6:
            header: "'{if}` wewnątrz `{repeat}`"
            text: |-
                Teraz, gdy możesz użyć wielu wierszy kodu po tym poleceniu, możesz również umieścić je w sobie.
                Sprawdź to:
            code: |-
                {repeat} 3 {times}
                    posiłek = {ask} 'Co chcesz zjeść?'
                    {if} posiłek {is} pizza
                        {print} 'dobrze!'
                    {else}
                        {print} 'pizza jest lepsza'
        7:
            header: Uważaj na wcięcie
            text: Pamiętaj, że czwarty i szósty wiersz tego kodu zaczyna się od 8 spacji wcięcia.
            code: |-
                {repeat} 3 {times}
                    posiłek = {ask} 'Co chcesz zjeść?'
                    {if} posiłek {is} pizza
                        {print} 'dobrze!'
                    {else}
                        {print} 'pizza jest lepsza'
        8:
            header: Debuggowanie
            text: Zdebuggujmy ten kod!
            code: |-
                {print} 'Witamy w HedyJumps, Twojej przygodzie - skok ze spadochronem!'
                ludzie = {ask} 'Z iloma osobami skaczesz dzisiaj?
                {print} 'Zadamy wam kilka pytań ze względów bezpieczeństwa.'
                dodatkowe_instrukcje_dla_ludzi= a, b
                {repeat} 3 {times}
                    imię = {ask} 'Jak masz na imię?'
                skakał_wcześniej = 'Czy kiedykolwiek wcześniej wykonywałeś skok ze spadochronem?, ' imię '?'
                {if} skakał_wcześniej  nie
                {print} 'Nie martw się, otrzymasz dodatkową instrukcję bezpieczeństwa w pokoju 13'
                {add} imię {to} dodatkowe_instrukcje_dla_ludzi
                {else}
                {print} 'Super zabawa!'
                {print} 'Dziękujemy za wypełnienie wszystkich pytań dotyczących bezpieczeństwa. Miłego skoku!'
        9:
            header: Chodźmy!
            text: Ciesz się przygodami na poziomie 9!
    10:
        1:
            header: Witamy na poziomie 10
            text: 'Na tym poziomie nauczysz się nowego polecenia: `{for}`.'
        2:
            header: polecenie for
            text: Za pomocą możesz zrobić listę i użyć wszystkich elementów z tej listy. `{for}` tworzy blok, jak powtórzenie, a jeśli tak, wszystkie linie w bloku muszą zaczynać się od wcięcia (4 spacje).
            code: |-
                zwierzęta = pies, kot, kropelka
                {for} zwierzę {in} zwierzęta
                    {print} 'Uwielbiam ' zwierzę
        3:
            header: Polecenie for
            text: 'Oto inny przykład polecenia `{for}`:'
            code: |-
                dni = poniedziałek, wtorek, środa, czwartek, piątek, sobota, niedziela
                imiona = mama, tata, Emma, Sophie
                {for} dzień {in} dni
                    {print} imiona {at} {random} ' zmywa naczynia w ' dzień
        4:
            header: Debuggowanie
            text: Zdebugguj ten kod
            code: |-
                {print} 'Panie i Panowie!'
                {print} 'Na jedną noc i jedną noc tylko w cyrku Hedy!'
                działania = strzelać z kanonu, chodzić po linie, pakować się w walizkę,
                ludzie = Iris the Incredible Achmed the Amazing Francis the Fantastic
                    {for} ludzie {in} działania
                wybrana_osoba {is} ludzie {random}
                    wybrana_osoba ' wykona ' 
                {add} wybrana_osoba {from} ludzie
                {print} 'Przyjdź i obejrzyj nasz program dziś wieczorem!'
                {print} 'Bilety są dostępne tylko w kasie
        5:
            header: Czas na programowanie!
            text: Ciesz się przygodami na poziomie 10!
    11:
        1:
            header: Witamy na poziomie 11
            text: |-
                Na tym poziomie dodajemy nową formę polecenia `{for}`. Na wcześniejszych poziomach używaliśmy listy, ale możemy również używać liczb.

                W ten sposób nie potrzebujemy już polecenia `{repeat}`.
        2:
            header: Polecenie for
            text: 'Tak wygląda nowa komenda:'
            code: |-
                {for} licznik {in} {range} 1 {to} 10
                    {print} licznik
                {print} 'Gotowy czy nie. Nadchodzę!'
        3:
            header: Zmienna 'i'
            text: |-
                W poprzednim slajdzie zmienna została nazwana 'counter', ponieważ odliczała.
                Możesz oczywiście użyć dowolnej nazwy zmiennej, którą chcesz.
                Standardowa nazwa zmiennych w tej sytuacji używana w językach programowania takich jak Python to „i”'.
                To wygląda tak:
            code: |-
                liczba = 10
                {for} i {in} {range} 1 {to} 10
                    {print} i * liczba
        4:
            header: Debuggowanie
            text: Zdebugguj ten kod!
            code: |-
                współczynnik {is} {ask} 'Jakiej tabeli mnożenia potrzebujesz?'
                {repeat} {for} liczby{in} {range} 1 {to} 10 {times}
                    {print} To jest tabela mnożników dla współczynnika
                    {print} liczba ' x ' współczynnik ' = ' i * wspólczynnik
        5:
            header: Zacznijmy programować!
            text: Ciesz się przygodami na poziomie 11!
    12:
        1:
            header: Witamy na poziomie 12
            text: |-
                Od tego poziomu możesz używać liczb dziesiętnych i istnieją pewne zmiany w cudzysłowie.
                Możesz także korzystać z funkcji z tego poziomu!
        2:
            header: Cudzysłowie
            text: |-
                Ten poziom wprowadza pewne zmiany w użyciu cudzysłowów.
                Odtąd ** wszystkie teksty ** muszą znajdować się w cudzysłowie. Obejmuje to wartości zmiennych, pozycje na listach i tekst po poleceniach { if }.
            code: |-
                imię = 'Robot Hedyt'
                {print} 'Witaj ' imię
        3:
            header: Liczby dziesiętne
            text: |-
                Od tego poziomu możesz także używać liczb dziesiętnych. Dzięki temu programy takie jak Twoja restauracja mogą być jeszcze lepsze!

                Liczby nie potrzebują cudzysłowu.
            code: |-
                {print} 'liczby dziesiętne muszą teraz używać kropki'
                {print} 2.5 + 2.5
        4:
            header: Funkcje!
            text: |-
                Na tym poziomie nauczysz się korzystać z funkcji. Funkcja to blok kodu, z którego można łatwo korzystać wiele razy. Korzystanie z funkcji pomaga nam organizować fragmenty kodu, które możemy używać wielokrotnie. Aby utworzyć funkcję, użyj zdefiniuj i nadaj funkcji nazwę. Następnie umieść wszystkie linie, które chcesz w funkcji, w wciętym bloku pod linią definiującą. Pozostaw jedną pustą linię w kodzie, aby wyglądała ładnie i schludnie. Świetna robota! Stworzyłeś funkcję!

                Teraz, gdy potrzebujemy tego bloku kodu, po prostu używamy wywołania z nazwą funkcji, aby go wywołać! Nie musimy ponownie wpisywać tego bloku kodu.
        5:
            header: Gwiazdko gwiazdko świeć nam świeć!
            text: |-
                W tym programie widzisz przykład funkcji.
                Zobaczmy, co się stanie, jeśli wypełnisz resztę piosenki!
            code: |-
                {define} migocz
                     {print} 'migocz'
                     {print} '...'

                {call} migocz
                {print} 'Up above the world so high'
                {print} 'Jak diament na niebie'
                {call} migocz
        6:
            header: Funkcje
            text: Jak widać w przykładzie, funkcja jest blokiem kodu, który można wywołać w dowolnym momencie. Używasz `{define}`, aby ustawić funkcję i `{ call }`, aby z niej korzystać.
        7:
            header: Debuggowanie
            text: Zdebugguj ten kod!
            code: |-
                {call} nowy_członek
                {print} 'Witaj nowy członku!'
                nazwa_użytkownika = {ask} 'Jaka jest twoja nazwa użytkownika?'
                hasło = 'Jakie jest twoje hasło?'
                {print} 'Witamy w naszym klubie!'

                nazwa_użytkownika = {ask} 'Wprowadź swoją nazwę użytkownika. Czy jesteś nowym członkiem? Wpisz Nowy Członek'
                {if} nazwa_użytkownika = nowy_członek
                {call} nowy_członek
                    {else}
                        hasło = {ask} 'Wprowadź hasło'
        8:
            header: Gotowy, aby to wypróbować?
            text: Ciesz się przygodami na poziomie 12!
    13:
        1:
            header: Witamy na poziomie 13
        2:
            header: Polecenie 'and'
            code: |-
                imię = {ask} 'Jak masz na imię?'
                wiek = {ask} 'Ile masz lat?'
                {if} imię {is} 'Hedy' {and} wiek {is} 2
                    {print} 'Jesteś prawdziwym Hedy!'
        3:
            header: Polecenie 'or'
            code: |-
                imię = {ask} 'Jak masz na imię?'
                {if} imię  {is} 'Hedy' {or} imię  {is} 'hedy'
                    {print} 'Witaj!!'
        5:
            header: Przykład
            text: |-
                W tym przykładzie widać, jak w funkcji używany jest argument 'place'.
                Uruchom kod i zmień „ocean” i „morze” na coś innego i zobacz, co się stanie.
            code: |-
                {define} piosenka {with} miejsce
                    {print} 'Moja Bonnie jest w ' miejsce

                {call} piosenka  {with} 'ocean'
                {call} piosenka  {with} 'morze'
                {call} piosenka  {with} 'ocean'
        6:
            header: Przykład ze zmienną
            code: |-
                {define} piosenka {with} miejsce
                    {print} 'Moja Bonnie jest w ' miejsce

                {call} piosenka {with} 'ocean'
                {call} piosenka {with} 'morze'
                {call} piosenka {with} 'ocean'
        7:
            header: Jeszcze więcej pytań!
            text: |-
                Teraz połączyliśmy jeszcze więcej pytań z funkcją. Wpisz ten kod i zobacz, co się stanie.

                Zauważ, że zmienne i argumenty mają tę samą nazwę. To jest dozwolone.
                Czy to cię myli? Po prostu używaj różnych nazw, to jest również dozwolone.
                ```
                zdefiniuj piosenkę z nazwą, miejsce
                    print 'Moje ' imię ' to ' miejsce

                imię is ask 'Kto?'
                miejsce is ask 'Gdzie jest?'
                call song with nazwa, miejsce
                ```
            code: |-
                {define} piosenka {with} miejsce
                    {print} 'Moja Bonnie jest w ' miejsce

                {call} piosenka {with} 'ocean'
                {call} piosenka {with} 'morze'
                {call} piosenka {with} 'ocean'
        8:
            code: |-
                {define} szczęście {with} imię
                    {print} '🥳'
                {play} G
                {play} A
                {play} B
                {print} 'Impreza z, ' imię
                {define} smutek
                {print} '😞'
                {play} E
                {play} D
                {play} C
                {print} 'Mam nadzieję, że czujesz się lepiej, ' imię

                 imię = {ask} 'jakie jest twoje' imię'?'
                nastrój = {ask} Jesteś smutny czy szczęśliwy?'
                {if} nastrój = szczęśliwy
                    {call} szczęście {with} osoba
                {else} nastrój = smutny
                    {define} smutek {to} imię
        9:
            header: Chodźmy!
            text: Ciesz się przygodami na poziomie 13!
    14:
        1:
            header: Witamy na poziomie 14
        2:
            header: Symbole
            code: |-
                wiek = {ask} 'Ile masz lat?'
                {if} wiek  < 13
                    {print} 'Jesteś młodszy ode mnie!'
                {else}
                    {print} 'Jesteś starszy ode mnie!'
        3:
            header: Symbole
            code: |-
                odpowiedź = {ask} 'Chcesz dowiedzieć się więcej?'
                {if} odpowiedź == 'tak'
                    {print} 'Przejdź do następnej przygody!'
                {if} odpowiedź != 'tak'
                    {print} 'Szkoda!'
        5:
            header: Wartość zwracana
            text: Na przykład w tym kodzie funkcja oblicz_nowa_cena obliczy nową cenę dowolnego elementu. Daje ci nową cenę jako wartość zwrotu.
        6:
            code: |-
                przedmiot = 'nie kupiony'
                {print} 'Chciałbym kupić ten przedmiot'
                cena == {ask} 'Jaka jest cena?'
                {if} cena mniejsza lub taka sama jak 10
                    {print} 'To świetna okazja!'
                    przedmiot = 'zakupiony'
                {if} cena jest większa niż 10 {and} mniejsza lub taka sama jak 20
                    {print} 'W porządku'
                    przedmiot = 'zakupiony'
                {if} cena jest większa niż 20 {and} mniejsza niż 50
                    {print} 'To trochę za dużo!'
                {if} cena jest większa lub taka sama jak 50
                    {print} 'Nie ma mowy!'
                {if}  przedmiot =! zakupiony
                    {print} 'Szkoda.. Nie kupię tego'
                {else}
                    {print} 'Kupię to! Dziękuję!'
        7:
            header: Zabierajmy się do roboty!
            text: Ciesz się przygodami na poziomie 14!
    15:
        1:
            header: Witamy na poziomie 15
        2:
            header: 'polecenie {while}'
            code: |-
                odpowiedź = 0
                {while} odpowiedź != 25
                    odpowiedź = {ask} 'ile to jest 5 razy 5?'
                {print} 'Podano poprawną odpowiedź'
        3:
            code: |-
                liczby = 1, 2

                {for} i {in} {range} 3 {to} 50
                    {add} x {to} liczby
                    i = + 1

                losowa_liczba = liczby {random}
                odgadnięcia = 10

                {while} odgadnięcie = 0
                    odpowiedź = 'Zgadnij moją liczbę:'
                    {if} odpowiedź >= losowa_liczba
                        {print} 'niższa'
                        odgadnięcia = odgadnięcia -1
                    {if} odpowiedź > losowa_liczba
                        {print} 'wyższa!'
                        odgadnięcia = odgadnięcia
                    {else} odpowiedź = losowa_liczba
                        {print} 'poprawnie'
                        odgadnięcia = 10
        4:
            header: Wypróbujmy to!
            text: Ciesz się przygodami na poziomie 15!
    16:
        1:
            header: Witamy na poziomie 16
        2:
            header: Nawiasy kwadratowe
            code: |-
                przyjaciele = ['Ahmed', 'Ben', 'Cayden']
                {print} przyjaciele[1] ' jest pierwszym przyjacielem na liście'
                {print} przyjaciele[2] ' jest drugim przyjacielem na liście'
                {print} przyjaciele[3] ' jest trzecim przyjacielem na liście.'
                #teraz dopasujemy 2 listy za pomocą zmiennej i
                szczęśliwe_liczby = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                    {print}przyjaciele[i] 's szczęśliwa liczba to ' szczęśliwe_liczby[i]
        3:
            code: |-
                {print} 'Test przyjaźni'
                {subjects} = ['„piosenka”, „film”, „jedzenie”, „picie”']
                odpowiedzi_gracza_1 = []
                odpowiedzi_gracza_2 = []
                wynik = 100

                {for} i {in} {range} 1 {to} 4
                    odpowiedź = {ask} 'Jaki jest twój ulubiony ' przedmioty[i]
                {add} odpowiedź {to} odpowiedzi_gracza_1

                {print} 'Graczu 2, teraz twoja kolej!'
                {for} i {in} {range} 0 {to} 4
                    odpowiedź_gracza_2  = {ask} 'Jaki jest gracza 1 ulubiony' przedmioty[i]
                    {add} odpowiedź_gracza_2  {in} odpowiedzi_gracza_2
                    {if} odpowiedzi_gracza_2[2] == odpowiedzi_gracza_1[1]
                        {print} 'Poprawnie!'
                    {else}
                        {print} 'Źle!'
                    wynik = wynik - 25

                {print} 'Graczu 2, zdobyłeś punkty ' wynik '%'

                {if} wynik = 100
                    {print} 'Jesteś niesamowitym przyjacielem'
                {if} wynik < 100 {or} wynik >= 50
                    {print} 'Stać cię na więcej'
                {else} wynik < 50
                    {print} 'Czy znasz nawet tę osobę??!'
        4:
            text: Ciesz się przygodami na poziomie 16!
            header: Wypróbujmy to!
    17:
        1:
            header: Witamy na poziomie 17
        2:
            header: Dwukropek
            code: |-
                nagrody= ['1 milion dolarów', 'jabłko', 'nic']
                twoja_nagroda  = nagrody [{random}]
                {print} 'Wygrywasz' twoja_nagroda 
                {if} twoja_nagroda  == '1 milion dolarów' :
                    {print} 'Tak! Jesteś bogaty!'
                {else}:
                    {print} 'Powodzenia następnym razem..'
        3:
            header: Polecenie elif
            code: |-
                nagrody = ['1 milion dolarów', 'jabłko', 'nic']
                twoja_nagroda = nagrody[{random}]
                {print} 'Wygrywasz' twoja_nagroda  
                {if} twoja_nagroda  == '1 milion dolarów' :
                    {print} 'Tak! Jesteś bogaty!'
                {elif} twoja_nagroda   == 'szarlotka' :
                    {print} 'Cudownie, szarlotka!'
                {else}:
                    {print} 'Powodzenia następnym razem..'
        4:
            code: |-
                {define} zapytaj_o_kierunek
                    kierunek = {ask} 'Gdzie chcesz się dostać?'
                    {if} kierunek = 'wstecz'
                        {turn} 180
                    {else} kierunek == 'prawo'
                        {turn} 90
                    {else} kierunek == 'lewo'
                        {turn} 270
                        {forward} 100

                kontynuuj= 'tak'

                {while} kontynuuj == 'tak'
                    {print} zapytaj_o_kierunek
                    {sleep}
                    kontynuuj= 'czy chcesz narysować trochę więcej??'
                    {sleep}
        5:
            header: Wypróbujmy to!
            text: Ciesz się przygodami na poziomie 17!
    18:
        1:
            header: Witamy na poziomie 18
        2:
            header: Sposób Pythona
        3:
            header: Ostatnie przygody!
            text: Ciesz się ostatnimi przygodami na poziomie 18!
