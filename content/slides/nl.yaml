levels:
    0:
        1:
            header: Welkom bij Hedy!
            text: Hedy is een programmeertaal.
        2:
            header: Programmeren
            text: |-
                Programmeren betekent de computer opdrachten geven, in de taal van de computer.

                Dat noemen we een programmeertaal.
        3:
            header: Programmeertaal
            text: |-
                Misschien ken je al wel een andere programmeertaal?
                Bijvoorbeeld:
                * Scratch
                * Python
                * HTML
        4:
            header: Programmeren
            text: |-
                Als je kan programmeren, dan kan je met code:
                * Interactieve verhalen maken
                * Tekeningen maken en die printen op papier of op een shirt
                * Je eigen apps maken voor op je telefoon
        5:
            header: Programmeren met Hedy
            text: In Hedy gebruiken we speciale codes, zoals `{print}`.
            code: '{print} Welkom bij Hedy!'
        6:
            header: Programmeren met Hedy
            text: De code woorden worden in Hedy altijd roze.
            code: '{print} Welkom bij Hedy!'
        7:
            header: Programmeren met Hedy
            text: Je kan je code opstarten met de Voer code uit knop onder het programmeerveld.
            code: '{print} Welkom bij Hedy!'
        8:
            header: Programmeren met Hedy
            text: De uitvoer verschijnt dan aan de rechterkant.
            code: '{print} Welkom bij Hedy!'
        9:
            header: Programmeren met Hedy
            text: De uitvoer kan ook een tekening zijn.
    1:
        1:
            header: Welkom bij level 1!
            text: |-
                We beginnen level 1 met het maken van een interactief verhaal.

                Daarvoor hebben we drie tekstcodes nodig.
        2:
            header: 'Hedy level 1: {print}'
            text: |-
                De eerste code die je kan gebruiken in level 1 is `{print}`.

                `print` zorgt ervoor dat er tekst in het uitvoerveld komt.
            code: '{print} Presenteer tekst op het scherm'
        3:
            header: Het {print} commando
            text: |-
                Je kunt de tekst na het print veranderen met je eigen tekst

                Of je kunt meerdere regels printen door extra regels code toe te voegen die ook starten met `{print}`.
            code: |-
                {print} Welkom bij Hedy!
                {print} Start nu met programmeren!
        4:
            header: 'Hedy level 1: {echo}'
            text: |-
                De tweede code die je kunt gebruiken in level 1 is `{ask}`.

                `{ask}` wordt gebruikt om een vraag te stellen die beantwoord kan worden.
            code: |-
                {print} Welkom bij je eigen steen papier schaar!
                {ask} Wat is je keuze?
        5:
            text: |-
                Zoals je kon zien in het vorige voorbeeld. Als je het `{ask}` commando gebruikt kun je een vraag stellen.
                Alleen wordt het antwoord niet gepresenteerd in het uitvoer scherm.

                Als je het antwoord wilt presenteren kun je het laatste commando van dit level gebruiken: `{echo}`.
                `{echo}` is gebruikt on het antwoord van een `{ask}`te presenteren.
            code: |-
                {print} Hallo!
                {ask} Wat is je naam?
                {echo} Hallo
        6:
            header: Programmeren maar!
            text: |-
                Met `{print}`, `{ask}` en `{echo}` kun je al een klein verhaal programmeren.
                Dit is een goed moment om de Papegaai, Verhaal en Steen, Papier, Schaar avonturen te proberen.
        7:
            header: Programmeren maar!
            text: Avonturen worden in tabjes getoond.
            editor: /hedy#print_command
        8:
            header: Programmeren!
            text: De gele pijlen knoppen kunnen gebruikt worden om de voorbeelden te kopiëren.
            editor: /hedy#print_commando
        9:
            header: Tekenen met de schildpad
            text: Met `{forward}` kun je de schildpad vooruit laten bewegen.
        10:
            header: 'Tekenen met de schildpad: {forward}'
            text: '`{forward}` wordt gebruikt om de schildpad naar voren te bewegen.'
        11:
            header: 'Tekenen met de schildpad: {turn}'
            text: '`{turn}` wordt gebruikt om de schildpad links of rechtsom te laten draaien.'
        12:
            header: Debugging (foutzoeken)
            text: Debugging van de code betekent het oplossen van fouten in de code. Laten we deze code samen debuggen. Klik op de ladybug knop (lieveheersbeestje) om de debugger te starten.
            code: |-
                Ik ben DJ Hedy
                {print} Welk liedje wil je horen?
                {ask} Ik vind dat ook een leuk liedje!
                {print} Volgende... {echo}
            debug: Waar
        13:
            header: Laat het programmeerfeest beginnen!
            text: Veel plezier met de avonturen in level 1!
    2:
        1:
            header: Welkom bij level 2
            text: |-
                In dit level leer je gebruik te maken van variabelen.

                Een variabele is een woord waarin je informatie kunt opslaan.

                Zoals: een naam, leeftijd of favoriete sportteam.
        2:
            header: Variabelen
            text: Om een variabele te maken of 'in te stellen' gebruiken we het `{is}` commando
            code: |-
                naam {is} Hedy
                leeftijd {is} 15
                {print} naam is leeftijd jaar
        3:
            header: Interactief
            text: |-
                We kunnen ook een variabele instellen door vragen te stellen.

                Het antwoord op de vraag wordt dan opgeslagen in de variabele.

                Zo hebben we het `{echo}` commando niet meer nodig.
            code: |-
                naam {is} {ask} Wat is je naam?
                {print} Hallo naam
        4:
            header: Meerdere variabelen
            text: Nu we variabelen kunnen gebruiken, kunnen we meteen ook meerdere variabelen gebruiken in tegenstelling tot maar één `{echo}` commando.
            code: "naam {is} {ask} Wat is je naam ?\n{print} Hallo naam \nleeftijd {is} {ask} Hoe oud ben je?\n{print} naam is leeftijd jaar."
        5:
            header: Slaap
            text: Je kunt het `{sleep}` commando gebruiken om de code een tijdje op pauze te zetten.
            code: |-
                {print} Mijn favoriete kleur is...
                {sleep} 2
                {print} groen!
        6:
            header: '{sleep} 5'
            text: |-
                Je kunt een getal achter het `{sleep}` commando typen als je een langere stilte wilt.

                Als je wil, kun je een zelfs een variabele gebruiken in plaats van een nummer om te bepalen hoe lang het programma moet pauzeren.
            code: |-
                pauze {is} 10
                {print} Mijn favoriete kleur is...
                {sleep} pauze
                {print} groen!
        7:
            header: Debugging (foutzoeken)
            text: Debugging van de code betekent het oplossen van fouten in de code. Laten we deze code samen debuggen. Klik op de ladybug knop (lieveheersbeestje) om de debugger te starten.
            code: |-
                {print} Welkom in de donut winkel!
                vulling {is} Wat voor vulling wil je graag?
                {print} Je hebt gekozen voor... vulling ! Lekkerr!
                topping {ask} Wat voor topping wil je graag?
                topping is heerlijk!
                {print} Ik ga je donut.halen {sleep}
                {print} Asjeblieft! Een vulling donut met topping!
                {ask} Fijne dag nog!
            debug: Waar
        8:
            header: Veel programmeerplezier!
            text: Veel plezier met de avonturen in level 2!
    3:
        1:
            header: Welkom bij level 3
            text: In dit level leer je een lijstje te maken, items aan het lijstje toe te voegen of verwijderen en een willekeurig item uit het lijstje kiezen.
        2:
            header: Een lijst maken
            text: |-
                Je maakt een lijst met `{is}`.

                Scheid de elementen in de lijst met komma's.
            code: dieren {is} honden, katten, kangoeroes
        3:
            header: '{at} {random}'
            text: |-
                Je kunt na het maken van een lijstje het `{at}` `{random}` commando gebruiken.
                De computer kiest dan een willekeurig item van het lijstje.
                Je krijgt bij deze code dus elke keer dat je het uitvoert een verschillende uitvoer.
            code: |-
                dieren {is} honden, katten, kangoeroes
                {print} dieren {at} {random}
        4:
            header: '{at} {random} in een zin'
            text: Je kunt `{at}` `{random}` ook midden in een zin gebruiken.
            code: |-
                dieren {is} honden, katten, kangoeroes
                {print} Mijn favoriete dier is dieren {at} {random}
        5:
            header: '{add} {to}'
            text: |-
                Je kunt items aan een lijst toevoegen met het `{add}` `{to_list}` commando.

                Je kunt zelf kiezen wat je aan de lijst toevoegt, of je kunt de speler laten kiezen.
                Dat doe je door `{add}` `{to}` te gebruiken in combinatie met een `{ask}` commando.
            code: |-
                dieren {is} honden, katten, kangoeroes
                favoriet {is} {ask} Wat is je favoriete dier?
                {add} favoriet {to_list} dieren
                {print} Ik kies dieren {at} {random}
        6:
            header: '{remove} {from}'
            text: |-
                Het tegenovergestelde van `{add}` `{to}` is  `{remove}` `{from}`.
                Met dit commando haal je dus juist items van het lijstje af.
            code: |-
                dieren {is} honden, katten, kangoeroes
                nietleuk {is} {ask} Welk dier vind je niet leuk?
                {remove} nietleuk {from} dieren
                {print} I choose dieren {at} {random}
        7:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                muziek_genres {is} rock, pop, metal, indie, jazz
                gekozen_genre is muziek {at} {random}
                {print} Laten we luisteren naar gekozen genre
                nice {ask} Houd je van dat genre?
                {remove} gekozen_genre {from} gekozen_genre
                tweede_keus {is} muziek_genres
                {print} of houd je meer van... tweede_keus {at} {random}
                {remove} tweede_keus {to} muziek_genres
                {print} Ik houd het meest van muziek_genre {random} !
            debug: Waar
        8:
            header: Laten we aan het werk gaan!
            text: Veel plezier met de avonturen in level 3!
    4:
        1:
            header: Welkom bij level 4
            text: In dit level leer je aanhalingstekens te gebruiken.
            code: '{print} ''print met quotes!'''
        2:
            header: Probleem
            text: 'In de vorige levels heb je dit probleem misschien gezien:'
            code: |-
                naam {is} Sophie
                {print} Mijn naam is naam
            debug: Waar
        3:
            header: Aanhalingstekens zijn de oplossing
            text: |-
                In dit level leer je het probleem op te lossen met aanhalingstekens.

                Dit zorgt er ook voor dat je code meer begint te lijken op 'echte' Python code.
        4:
            header: Aanhalingstekens en {print}
            text: Elke keer als je het `{print}` commando gebruikt, moet je de tekst die je letterlijk op het uitvoerscherm wil zien tussen aanhalingstekens zetten.
            code: '{print} ''print met quotes!'''
        5:
            header: Aanhalingstekens en {ask}
            text: Dit geldt ook voor `{ask}` .
            code: naam {is} {ask} 'naam graag?'
        6:
            header: Aanhalingstekens en variabelen
            text: |-
                De naam van je variabele wil je niet letterlijk in het uitvoerscherm zien verschijnen.
                Daarom moeten variabelenamen buiten de aanhalingstekens gehouden worden! Kijk maar:
            code: |-
                naam {is} Harry
                {print} 'Hallo ' naam
        7:
            header: Aanhalingstekens en variabelen
            text: |-
                Als een variabele midden in een zin staat, moet de variabele nog steeds buiten de aanhalingstekens gezet worden.
                De rest van de zin moet daarentegen wel binnen aanhalingstekens. Dat ziet er dan zo uit:
            code: |-
                naam {is} Harry
                {print} 'Hallo ' naam ', hoe gaat het met jou?'
        8:
            header: Aanhalingstekens en hoge komma's
            text: |-
                Let op! Nu we aanhalingstekens gebruiken, kun je geen hoge komma's gebruiken voor andere doeleinden.

                Kijk maar eens wat er gebeurt als je een hoge komma voor auto's, of voor 's middags, deze maken Hedy in de war....
            code: '{print} ''De oma''s rijden in de auto''s.'''
            debug: Waar
        9:
            header: '{clear}'
            text: |-
                In dit level is het `{clear}` commando ook nieuw.
                Hiermee kun je alle tekst van je uitvoerscherm wissen.

                Let op dat je hierbij ook altijd een `{sleep}` commando gebruikt. Doe je dit niet, dan wist de computer alle tekst al van je scherm voordat je het kan lezen!
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} 'VERRASSING!'
        10:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {clear}
                {print} Wat een mooie dag om naar het strand te gaan!
                {ask} 'Wil je een zandkasteel bouwen of in zee zwemmen?'
                {print} 'Dus je wilt activiteit'
                {print} 'Dat wil ik ook'
                {print} 'Kijk eens wat een mooie zeeschelpen!'
                kleuren {is} 'oranje, zilver, wit, bruin'
                {print} 'Ik houd van kleuren {at} {random} !'
                keuze {is} {ask} Welke kleur vind jij mooi?
        11:
            header: Klaar voor de start? Af!
            text: Veel plezier met de avonturen in level 4!
    5:
        1:
            header: Welkom bij level 5
            text: 'In dit level leer je 3 nieuwe commando''s: `{if}`, `{else}` en `{in}`.'
        2:
            header: '{if}'
            text: |-
                Door {if} kun je kiezen uit twee opties.
                In dit voorbeeld wordt er bijvoorbeeld 'nice' geprint als de speler 'Hedy' antwoordt.
                Antwoordt de speler iets anders, dan doet de computer niets.
            code: |-
                naam {is} {ask} 'wat is je naam?'
                {if} naam {is} Hedy {print} 'leuk'
        3:
            header: Vergeet het print commando niet
            text: |-
                Als je een `{if}` commando gebruikt, vergeet dan niet om ook een `{print}` commando te gebruiken.
                Deze code werkt niet!
            code: '{if} naam {is} Hedy ''leuk'''
        4:
            header: '{else}'
            text: |-
                Als je een {if} gebruikt, kun je ook een {else} toevoegen.
                Als het antwoord op de vraag 'Hedy' is, zegt de computer 'leuk'.
                Is het antwoord iets anders, dan print de computer 'minder leuk'
            code: '{if} naam {is} Hedy {print} ''leuk'' {else} {print} ''minder leuk!'''
        5:
            header: Lange regels
            text: |-
                Door {if} en {else} te gebruiken in één regel, kunnen je regels erg lang worden.
                :
                Daarom mag je de commando's ook op twee losse regels gebruiken, zoals hier:
            code: |-
                {if} naam {is} Hedy {print} 'leuk'
                {else} {print} 'minder leuk'
        6:
            header: Nog iets nieuws
            text: |-
                Als je hebt geoefend met `{if}` en `{else}`, kun je aan de slag met het `{in}` commando.

                Met `{in}` kun je de computer laten checken of iets in jouw lijstje staat. Kijk maar naar het voorbeeld:

                Let daarbij wel op dat Hedy hoofdlettergevoelig is. Als je "Groen" intikt in plaats van "groen", dan zegt Hedy "minder mooi".
            code: |-
                leuke_kleuren {is} groen, geel
                favoriete_kleur {is} {ask} 'What is your favorite color?'
                {if} favoriete_kleur {in} leuke_kleuren {print} 'mooi!'
                {else} {print} 'minder mooi'
        7:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {print} Welkom bij HedyAir Security!
                instapkaart {is} {ask} 'Heeft U een instapkaart bij de hand?'
                {if} instaapkaart ja{print} Prima!
                {else} Houd je instapkaart bij de hand alstublieft.
                paspoort {is} 'Mag ik Uw paspoort zien?'
                {if} paspoort {is} ja 'dank U'
                {else} 'U kunt niet vliegen zonder paspoort'
                aangeven {is} {ask} Heeft U iets aan te geven?
                {if} aangeven {is} ja
                aangeef_voorwerp {is} {ask} 'Wat wilt U aangeven'
                {else} OK
                {print} Dank U. Gaat U naar gate A22 alstublieft.'
        8:
            header: Werken maar!
            text: Veel plezier met de avonturen in level 5!
    6:
        1:
            header: Welkom bij level 6
            text: In dit level kunnen we gaan rekenen in onze codes.
        2:
            header: Optellen
            text: Wil je optellen, dan gebruik je het plusteken.
        3:
            header: Aftrekken
            text: Wil je twee getallen van elkaar aftrekken, gebruik dan het minteken.
        4:
            header: Vermenigvuldigen
            text: Wil je vermenigvuldigen, gebruik dan het sterretje.
            code: '{print} ''5 maal 5 is '' 5 * 5'
        5:
            header: Delen
            text: Voor delen gebruik je de slash.
            code: '{print} ''5 gedeeld door 5 is '' 5 / 5'
        6:
            header: Samenvatting
            text: 'Je kan deze tekens dus gebruiken om mee te rekenen: +, -, * en /.'
            code: |-
                {print} '5 plus 5 is ' 5 + 5
                {print} '5 min 5 is ' 5 - 5
                {print} '5 maal 5 is ' 5 * 5
                {print} '5 gedeeld door 5 is ' 5 / 5
        7:
            header: Het = symbool
            text: |-
                Vanaf nu kun je het = symbool gebruiken in plaats van het `{is}` commando.
                Dit geldt voor getallen en woorden, en het geldt ook na `{if}` of `{else}` commando's.
            code: |-
                naam = Hedy
                antwoord = 20 + 4
        8:
            header: Rekenen met variabelen
            text: 'Je kunt rekenen met getallen, maar je kunt ook variabelen gebruiken in je berekeningen. Kijk maar:'
            code: |-
                nummer_1 = {ask} 'Vul eerste nummer in:'
                nummer_2 = {ask} 'Vul tweede nummer in:'
                correct_antwoord = nummer_1 * nummer_2
                {print} nummer_1 ' maal ' nummer_2 ' is ' correct_antwoord
        9:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {print} 'Dit is het water park kaartjes automaat'
                {print} 'Priislijst: Kinderen onder 12 €3, Volwassenen €5'
                {print} 'Maandag 25% korting'
                aantal_kinderen = 'Hoeveel kinder kaartjes wilt U?'
                aantal_volwassenen = 'Hoeveel volwassenen kaartjes wilt U ?'
                dag_van_de_week = {ask} 'Welke dag is het vandaag?'
                {clear}
                kinder_prijs = aantal_kinderen * 3
                volwassen_prijs = aantal_volwassenen + 5
                total_price = volwassen_prijs * kinder_prijs
                {if} dag {is} maandag
                totaal = total_price * 0.25
                {print} 'Totaal prijs is totaal'
        10:
            header: Aan de slag!
            text: Veel plezier met de avonturen in level 6!
    7:
        1:
            header: Welkom bij level 7
            text: In dit level leer je hoe je een regel code zo vaak als je wil kunt herhalen.
        2:
            header: '{repeat} 3 {times}'
            text: |-
                Wil je een regel code herhalen, gebruik dan deze code `{repeat}` 3 `{times}`.
                Wil je de regel vaker herhalen dan 3 keer, verander dan simpelweg het getal.

                Bijvoorbeeld: Wil je in je spannende verhaal een personage 5x om hulp laten schreeuwen. Doe dat dan zo:
            code: |-
                {print} 'De prins bleef om hulp roepen'
                {repeat} 5 {times} {print} 'Help!'
                {print} 'Waarom helpt niemand mij?'
        3:
            header: Vergeet print niet
            text: Als je {repeat} gebruikt, vergeet dan {print} niet.
        4:
            header: '{repeat} met {ask}'
            text: Je kunt {repeat} ook gebruiken met `{ask}`, `{if}` of `{else}`.
            code: |-
                {repeat} 2 {times} antwoord = {ask} 'Wist je dat je een vraag meerdere keren kunt stellen?'
                {if} antwoord {is} ja {repeat} 2 {times} {print} 'Je wist het al!'
                {else} {repeat} 3 {times} {print} 'Je hebt wat nieuws geleerd!'
        5:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {print} Je bent gestrand op een onbewoond eiland.
                {repeat} 3 'Help!'
                gered = {ask} Is er iemand gekomen om je te redden?
                {if} gered yes {is}
                {print} Geluksvogel!
                {else} {repeat} 3 {times} 'HELP!'
                gered = 'Ben je nu gered?'
                {if} ja
                {print} 'Hoera!
                {else} 'Dat is jammer.. Nou ja... tijd om een hut te bouwen en wat eten te zoeken.'
        6:
            header: Klaar voor de start? Af!
            text: Veel plezier met de avonturen in level 7!
    8:
        1:
            header: Welkom bij level 8
            text: In dit level leer je inspringen bij `{repeat}`, `{if}` en `{else}`, om de commando's te gebruiken over meerdere regels code.
        2:
            header: '{repeat} hiervoor'
            text: |-
                Voor dit level zag `{repeat}` er zo uit:

                Je kon het maar gebruiken over 1 regel.
        3:
            header: '{repeat} nu'
            text: |-
                In dit level kun je meerdere regels code herhalen. Om dit te doen moet je de computer duidelijk maken welke regels bij elkaar horen en dus herhaald moeten worden.
                Dit doe je door in te springen.

                Inspringen doe je met 4 spaties (of een tab) aan het begin van elke regel die herhaald moet worden. Zoals in het voorbeeld:
            code: |-
                {repeat} 5 {times}
                    {print} 'Hallo iedereen'
                    {print} 'Dit wordt 5 keer geprint'
        4:
            header: '{repeat} nu'
            text: |-
                Als je wil kun je onder het blok van regels die herhaald gaan worden gewoon weer verder typen zonder in te springen.
                De regels die niet inspringen worden dan niet herhaald.
            code: |-
                {repeat} 3 {times}
                    {print} 'Hallo!'
                {print} 'We zijn klaar met herhalen!'
        5:
            header: '{if} en {else} hiervoor'
            text: |-
                Hetzelfde geldt voor `{if}` en `{else}`.
                Hiervoor gebruikte je deze commando's zo:
            code: |-
                {if} naam {is} Hedy {print} 'leuk'
                {else} {print} 'minder leuk!'
        6:
            header: '{if} en {else} nu'
            text: |-
                Zo zien de `{if}` and `{else}` commando's er nu uit.
                Bij {if} en {else} spring je nu ook in.
            code: |-
                naam = {ask} 'Wat is je naam?'
                {if} naam {is} Hedy
                    {print} 'Welkom Hedy'
                {else}
                    {print} 'Welkom programmeur!'
        7:
            header: Stoppen met inspringen
            text: Net als bij {repeat}, kun je stoppen met inspringen. Hierdoor worden de regels altijd getoond en niet alleen als de stelling waar is.
            code: "naam = {ask} 'Wat is je naam ?'\n{if} naam {is} Hedy\n    {print} 'Welkom Hedy'\n{else}\n    {print} 'Welkom programmeur!' \n{print} '3..2..1.. Start met programmeren!'"
        8:
            header: '{if}jes in {if}jes'
            text: |-
                Misschien heb je al bedacht om te proberen om een {if} in een {repeat} te stoppen, of andersom.
                Voor nu kan dit nog niet. In hoger levels mag dit wel, maar we willen je eerst even goed laten oefenen met het inspringen bij deze commando's.
        9:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {print} 'HedyBus bustickets'
                zone_1 = Stadhuis, Bibliotheek, Campus, Markt
                zone_2 = Zwembad, Skatepark, Winkelcentrum, Luchthaven
                bestemming = 'Waar wilt u heen?'
                {if} bestemming {in} zone 1
                {print} bestemming 'is in zone 1'
                prijs = 3 euro
                    {if} bestemming {is} zone_2
                {print} bestemmming 'is in zone 2'
                price = 6
                ticket_types = {ask} 'Druk op 1 voor een enkeltje.
                Druk op 2 voor een retourtje.'
                {if} ticket_type = 1
                {print} 'Je koos voor een enkele reis'
                {else}
                        {print} Je koos voor een retour ticket'
                prijs * 2
                {print} 'Dat wordt dan ' prijs ' euro alstublieft'
        10:
            header: Op naar de avonturen!
            text: Veel plezier met de avonturen in level 8!
    9:
        1:
            header: Welkom bij level 9
            text: |-
                In dit level leer je meerdere regels code te gebruiken na een `{if}` of na een `{repeat}` commando.

                Je mag zelfs een `{repeat}` commando in een ander `{repeat}`  commando zetten.
        2:
            header: Meerdere regels na `{repeat}`
            text: Je mag meerdere regels gebruiken na `{repeat}`.
            code: |-
                {repeat} 3 {times}
                    eten= {ask} 'Wat wil je eten?'
                    {if} eten {is} pizza
                        {print} 'lekker!'
                    {else}
                        {print} 'pizza is beter'
        3:
            header: Inspringen is belangrijk!
            text: Inspringen is erg belangrijk om de computer te vertellen welke regels herhaald moeten worden en welke niet.
            code: |-
                {repeat} 3 {times}
                    {print} 'Deze regel wordt herhaald...'
                    {print} 'Deze regel ook...'
                {print} 'Maar deze regel niet!'
        4:
            header: Meerdere regels na `{if}`
            text: Je mag ook meerdere regels gebruiken na een `{if}`
            code: |-
                doorgaan = {ask} 'Wil je doorgaan?'
                {if} doorgaan = yes
                    zeker = {ask} 'Weet je het zeker?'
                    {if} zeker {is} ja
                        {print} 'We zullen doorgaan'
                    {else}
                        {print} 'Je weet het niet zeker'
                {else}
                    {print} 'Je wilt niet doorgaan'
        5:
            header: Inspringen is belangrijk
            text: Ook hier is inspringen superbelangrijk! Het kan een groot verschil maken in je code.
            code: |-
                doorgaan = {ask} 'Wil je doorgaan ?'
                {if} doorgaan = yes
                    zeker= {ask} 'Weet je het zeker?'
                    {if} zeker {is} ja
                        {print} 'We zullen doorgaan '
                {else}
                    {print} 'Je weet het niet zeker'
        6:
            header: Een `{if}` in een `{repeat}`
            text: |-
                Nu je meerdere regels kunt gebruiken na deze commando's, kun je ze ook in elkaar zetten.
                Bekijk dit voorbeeld maar eens:
            code: |-
                {repeat} 3 {times}
                    eten = {ask} 'Wat wil je eten?'
                    {if} eten {is} pizza
                        {print} 'lekker!'
                    {else}
                        {print} 'pizza is beter'
        7:
            header: Let op het inspringen
            text: Zie hoe de 4e en 6e regel van deze code beginnen met 8 spaties.
            code: |-
                {repeat} 3 {times}
                    eten = {ask} 'Wat wil je eten?'
                    {if} eten {is} pizza
                        {print} 'lekker!'
                    {else}
                        {print} 'pizza is beter'
        8:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {print} 'Welkom bij HedyJumps, voor jouw parachutesprong!'
                mensen = {ask} 'Hoeveel mensen willen er vandaag de sprong wagen?
                {print} 'Leuk!' We hebben wat vragen voor iedereen.'
                extra_instructies_mensen = a, b
                {repeat} 3 {times}
                    naam = {ask} 'Hoe heet je?'
                sprong_ervaring = 'Heb je al eens eerder parachute gesprongen, naam ?'
                {if} ervaring  nee
                {print} 'Geen probleem! Ga zo naar kamer 13 voor extra instructies.'
                {add} naam {to} extra_instructies_mensen
                {else}
                {print} 'Gaaf!'
                {print} 'Bedankt voor het invullen allemaal! Veel plezier vandaag!'
        9:
            header: Doen!
            text: Veel plezier met de avonturen in level 9!
    10:
        1:
            header: Welkom bij level 10
            text: 'In dit level leer je het nieuwe commando: `{for}`.'
        2:
            header: '{for}'
            text: Met {for} kun je een lijst maken en alle items op die lijst gebruiken. `{for}` creëert net als {repeat} en {if} een blok waarbij je 4 spaties moet inspringen.
            code: |-
                dieren = hond, kat, goudvis
                {for} dier {in} dieren
                    {print} 'I love ' dier
        3:
            header: '{for}'
            text: 'Hier zie je een ander voorbeeld van `{for}`:'
            code: |-
                dagen= Maandag, Dinsdag, Woensdag, Donderdag, Vrijdag, Zaterdag, Zondag
                namen= Mama, Papa, Emma, Sophie
                {for} dag {in} dagen
                    {print} namen {at} {random} ' doet de afwas on ' dag
        4:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen
            code: |-
                {print} 'Dames en heren!'
                {print} 'Komt dat zien! Vanavond in circus Hedy!'
                acts = uit een kanon schieten, koortdansen , zichzelf inpakken in een koffertje,
                mensen = Gina de Geweldige Olly de Ongelooflijke Francis de Fantastische
                    {for} mensen {in} acts
                gekozen_persoon {is} mensen {random}
                    gekozen_persoon ' zal ' act
                {add} gekozen_persoon {from} mensen
                {print} 'Komt dat zien! Alleen vanavond!'
                {print} 'Laatste tickets verkrijgbaar aan de kassa
        5:
            header: Programmeertijd!
            text: Veel plezier met de avonturen in level 10!
    11:
        1:
            header: Welkom bij level 11
            text: |-
                In dit level leer je een nieuwe vorm van `{for}`. In de eerdere levels gebruikte je `{for}` voor een lijstje, maar we kunnen het ook gebruiken met getallen.

                Hierdoor hebben we het `{repeat}` commando niet meer nodig.
        2:
            header: '{for}'
            text: 'Zo ziet de nieuwe vorm van `{for}` eruit:'
            code: "{for} teller {in} {range} 1 {to} 10\n    {print} teller \n{print} 'Klaar of niet. Ik kom eraan!'"
        3:
            header: De variabele i
            text: |-
                In de vorige slide heette de variabele 'teller', omdat hij aan het aftellen was.
                Je kunt een variabele natuurlijk alle namen geven die je wil.
                In Python is de standaard naam die in deze situatie voor variabelen gebruikt wordt 'i'.
                Dat ziet er zo uit:
        4:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                factor {is} {ask} 'Welke maaltafel heb je nodig?'
                {repeat} {for} nummers {in} {range} 1 {to} 10 {times}
                    {print} Dit is de tafel van factor
                    {print} nummer ' x ' factor ' = ' i * factor
        5:
            header: Lekker programmeren!
            text: Veel plezier met de avonturen in level 11!
    12:
        1:
            header: Welkom bij level 12
            text: |-
                Vanaf dit level kun je decimale getallen gebruiken en er is een aantal aanpassingen gedaan bij de aanhalingstekens.
                Vanaf dit level kun je ook functies gebruiken!
        2:
            header: Aanhalingstekens
            text: |-
                In dit level is er iets aangepast aan de aanhalingstekens.
                Vanaf nu moet **alle tekst** in aanhalingstekens. Dus ook de waarden die je aan variabelen geeft, items op lijsten en tekst na {if} commando's.
            code: |-
                naam = 'Hedy de Robot'
                {print} 'Hallo ' naam
        3:
            header: Decimale getallen
            text: |-
                Vanaf nu kun je decimale getallen gebruiken. Dit kan bijvoorbeeld leuk zijn in jouw restaurantprogramma!

                Getallen hebben geen aanhalingstekens nodig.
            code: |-
                {print} 'Decimale nummers moeten vanaf nu met een punt'
                {print} 2.5 + 2.5
        4:
            header: Functies!
            text: |-
                In dit level leer je functies te gebruiken. Een functie is een blokje code dat je gemakkelijk meerdere keren kunt gebruiken. Functies helpen je de code te organiseren en stuken steeds opnieuw te gebruiken. Gebruik {define} om een functie te maken en een naam te geven. Typ daarna alle regels die je in de functie wil hebben in een ingesprongen blokje onder de regel met {define}. Laat een regel leeg om je code er netjes uit te laten zien. Fantastisch! Je hebt een functie gemaakt!

                Nu kun je dit blokje code meermaals gebruiken. Je roept de functie op met {call}! Je hoeft de code dan niet helemaal opnieuw te typen.
        5:
            header: Schitter Schitter klein sterretje!
            text: |-
                In dit programma zie je een voorbeeld van een functie.
                Laten we kijken wat er gebeurt als je de rest van het lied aanvult!
            code: |-
                {define} schitter
                     {print} 'Schitter'
                     {print} '...'

                {call} schitter
                {print} 'Hoog boven de wereld'
                {print} 'Als een diamant aan de hemel'
                {call} schitter
        6:
            header: Functies
            text: Zoals je kunt zien in de voorbeelden is een functie een blokje code dat je vaker kunt oproepen. Je gebruikt `{define}` om de functie te maken en `{call}` om hem te gebruiken.
        7:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {call} nieuw_lid
                {print} 'Hallo nieuw lid!'
                gebruikersnaam = {ask} 'Wat is je gebruikersnaam?'
                wachtwoord = 'Wat is je wachtwoord?'
                {print} 'Welkom bij de club!'

                gebruikersnaam = {ask} 'Voer je gebruikersnaam in. Ben je nieuw? Typ Nieuw Lid'
                {if} gebruikersnaam = Nieuw Lid
                {call} nieuw lid
                    {else}
                        wachtwoord = {ask} 'Voer je wachtwoord in'
        8:
            header: Klaar om het te gaan proberen?
            text: Veel plezier met de avonturen in level 12!
    13:
        1:
            header: Welkom bij level 13
            text: |-
                We gaan dit level `{and}` en `{or}` leren! Als je 2 stellingen wil checken, komen deze commando's goed van pas.
                Vanaf nu kun je argumenten in je functies gebruiken.
        2:
            header: '{and}'
            text: |-
                {and} gebruik je altijd in combinatie met een {if}.
                Met dit commando kun je checken of 2 stellingen allebei waar zijn. Bijvoorbeeld:
            code: |-
                naam = {ask} 'wat is je naam?'
                leeftijd = {ask} 'wat is je leeftijd ?'
                {if} naam {is} 'Hedy' {and} leeftijd {is} 2
                        {print} 'Je bent de echte Hedy!'
        3:
            header: '{or}'
            text: |-
                {or} werkt op dezelfde manier als `{and}`, maar dan hoeft maar één van de twee stellingen waar te zijn.

                Laten we kijken wat er gebeurt als je de `{and}` in het voorbeeld verandert naar `{or}`.
            code: |-
                naam = {ask} 'wat is je naam ?'
                {if} naam {is} 'Hedy' {or} naam  {is} 'hedy'
                         {print} 'Welkom!!'
        4:
            header: Functies met argumenten
            text: In het vorige level heb je geleerd om functies te gebruiken. Nu leer je functies te gebruiken met **argumenten**. Een argument is een variabele die je alleen gebruikt in een functie. Daarbuiten wordt de variabele niet gebruikt.
        5:
            header: Voorbeeld
            text: |-
                In dit voorbeeld zie je hoe het argument 'plaats' gebruikt wordt bij een functie.
                Voer de code uit en verander 'ocean' en 'sea' naar iets anders en zie wat er gebeurt...
            code: "{define} lied {with} plaats\n    {print} 'My Bonnie is over the ' plaats \n\n{call} lied {with} 'ocean'\n{call} lied {with} 'sea'\n{call} lied {with} 'ocean'"
        6:
            header: Voorbeeld met variabele
            text: |-
                Nu je hebt gezien hoe argumenten werken, kun je ze ook combineren met een vraag.

                Wat gebeurt er als je deze aanpassingen maakt?
                ```
                {define} lied {with} plaats
                    {print} 'My Bonnie is ' plaats

                antwoord = {ask} 'Waar is Bonnie?'
                {call} song {with} antwoord
                ```
            code: |-
                {define} lied {with} plaats
                    {print} 'My Bonnie is over the ' plaats

                {call} lied {with} 'ocean'
                {call} lied {with} 'sea'
                {call} lied {with} 'ocean'
        7:
            header: Nog meer vragen!
            text: |-
                Je kunt zelfs meerdere vragen combineren met de functie. Type deze code en kijk maar wat er gebeurt.

                Let op! Zie je hoe de variabele en de argumenten nu dezelfde naam hebben. Dat mag!
                Raak je hiervan in de war? Gebruik dan verschillende namen, want dat mag ook gewoon.
                ```
                {define} lied {with} naam, plaats
                    {print} 'Mijn' naam ' is ' plaats

                naam = {vraag} 'Wie?'
                plaats = {vraag} 'Waar zijn zij?'
                {call} lied {with} naam, plaats
                ```
            code: |-
                {define} lied {with} plaats
                    {print} 'My Bonnie is over the ' plaats

                {call} lied {with} 'ocean'
                {call} lied {with} 'sea'
                {call} lied {with} 'ocean'
        8:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                {define} blijdschap {with} naam
                    {print} '🥳'
                {play} G
                {play} A
                {play} B
                {print} 'Lekker bezig, ' name
                {define} verdriet
                {print} '😞'
                {play} E
                {play} D
                {play} C
                {print} 'Hopelijk knap je snel op, ' name

                naam = {ask} 'Wat is jouw' naam '?'
                gevoel = {ask} 'Ben je blij of verdrietig?'
                {if} stemming = blij
                    {call} blijdschap {with} persoon
                {else} gevoel = verdrietig
                    {define} verdriet {to} naam
        9:
            header: Doen!
            text: Veel plezier met de avonturen in level 13!
    14:
        1:
            header: Welkom bij level 14
            text: In dit level leer je een aantal nieuwe symbolen die je programma's kunnen verbeteren, zoals >. Je leert ook werken met een terugkeer variabelen van een functie.
        2:
            header: Symbolen
            text: |-
                Deze nieuwe symbolen kun je gebruiken:

                  De >  betekent groter dan...

                  De >= betekent groter dan of gelijk aan...

                  De <  betekent kleiner dan...

                  De <= betekent kleiner dan of gelijk aan...

                Hier zie je een voorbeeld van hoe je deze symbolen kunt gebruiken:
            code: |-
                leeftijd = {ask} 'Hoe oud ben je?'
                {if} leeftijd < 13
                    {print} 'Je bent jonger dan ik!'
                {else}
                    {print} 'Je bent ouder dan ik!'
        3:
            header: Symbolen
            text: |-
                Je kunt ook deze twee symbolen gebruiken:

                 == is hetzelfde als.

                 != is niet

                 == gebruik je bij een `{if}`.
            code: |-
                antwoord= {ask} 'Wil je nog meer leren?'
                {if} antwoord== 'ja'
                    {print} 'Ga naar het volgende avontuur!'
                {if} antwoord != 'ja'
                    {print} 'Dat i jammer!'
        4:
            header: Return value (terugkeer variabele)
            text: In de vorige levels heb je over functies met argumenten geleerd. Waar je functies ook goed voor kunt gebruiken is om ze iets uit te laten rekenen. Je kunt de functie een som geven en de functie berekent dan het antwoord voor je. Het antwoord dat je terugkrijgt noem je de **return value**.
        5:
            header: Return waarde
            text: Bijvoorbeeld, in deze code wordt de nieuwe prijs van een item berekend door de functie bereken_nieuwe_prijs. De nieuwe prijs is hierbij dus de return value.
            code: |-
                {define} bereken_nieuwe_prijs {with} hoogte, percentage
                    percentage = percentage / 100
                    kortings_hoogte = hoogte * percentage
                    return hoogte - kortings_hoogte

                oude_prijs = {ask} 'Wat staat er op het prijskaartje?'
                korting = {ask} 'Wat is de kortingspercentage?'

                nieuwe_prijs = {call} bereken_nieuwe_prijs  {with} oude_prijs, korting
                {print} 'De nieuwe prijs is ' nieuwe_prijs ' euro'
        6:
            header: Debugging (foutzoeken)
            text: Laten we deze code debuggen!
            code: |-
                artikel = 'niet gekocht'
                {print} 'Ik wil graag dit artikel kopen'
                prijs == {ask} 'Hoe duur is het?'
                {if} prijs is minder dan of gelijk aan 10
                    {print} 'Superdeal!'
                    artikel = 'gekocht'
                {if} prijs is meer dan 10 {and} minder dan of gelijk aan 20
                    {print} 'Vooruit'
                    artikel = 'gekocht'
                {if} prijs is meer dan 20 {and} minder dan 50
                    {print} 'Dat is wel erg veel!'
                {if} prijs is meer dan of gelijk aan 50
                    {print} 'Geen haar op mijn hoofd die eraan denkt!'
                {if} artikel =! gekocht
                    {print} 'Jammer... ik koop het niet'
                {else}
                    {print} 'Ik koop het! Bedankt!'
        7:
            header: Aan het werk!!
            text: Veel plezier met de avonturen in level 14!
    15:
        1:
            header: Welkom bij level 15
            text: In dit level leer je over de `{while}` lus.
        2:
            text: |-
                Nu gaan we een nieuwe lus leren: De {while} lus! We gaan door zo lang het statement dat we hebben waar is. Vergeet dus niet in de loop de waarde te veranderen.

                Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven. Als er nooit een goed antwoord wordt gegeven, dan stopt de lus nooit!
            code: |-
                antwoord = 0
                {while} antwoord  != 25
                    answer = {ask} 'Hoeveel is 5 maal 5?'
                {print} 'Je antwoord is goed'
        3:
            text: Laten we deze code debuggen!
            code: |-
                getallen = 1, 2

                {for} i {in} {range} 3 {to} 50
                    {add} x {to} getal
                    i = + 1

                random_getal = getallen {random}
                gokjes = 10

                {while} guess = 0
                    antwoord = 'Raad mijn getal:'
                    {if} antwoord >= random_getal
                        {print} 'Lager!'
                        gokjes = gok -1
                    {if} antwoord > random_getal
                        {print} 'Hoger!'
                        gokjes = gokjes
                    {else} antwoord = random_getal
                        {print} 'Goedzo! Je hebt het geraden'
                        gokjes = 10
        4:
            header: Proberen maar!
            text: Veel plezier met de avonturen in level 15!
    16:
        1:
            header: Welkom bij level 16
            text: In dit level leer je over de [vierkante haken] en hoe je ze moet gebruiken.
        2:
            header: Vierkante haken
            text: We gaan lijstjes maken op de Python manier, met vierkante haken om de lijst! We zetten nog steeds aanhalingsteken om elk item, zoals je eerste hebt geleerd. We gebruiken vierkante haken om de plek in de lijst aan te geven. Het {at} {random} ziet er nu ook anders uit.
            code: |-
                vrienden = ['Ahmed', 'Ben', 'Cayden']
                {print} vrienden [1] ' is de eerste vriend op de lijst.'
                {print} vrienden [2] ' is de tweede vriend op de lijst.'
                {print} vrienden [3] ' is de derde vriend op de lijst.'
                #nu zullen we  2 lijsten samenvoegen met gebruik van de variabele i
                geluks_nummers = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                    {print} vrienden[i] 'zijn geluks nummer is ' geluks_nummers[i]
        3:
            text: Laten we deze code debuggen!
            code: |-
                {print} 'Test je vriendschap'
                {onderwerpen} = ['lied', 'film', 'eten', 'drinken']
                antwoorden_speler_1 = []
                antwoorden_speler_2 = []
                score = 100

                {for} i {in} {range} 1 {to} 4
                    antwoord = {ask} 'Wat is je favoriete ' onderwerpen[i]
                {add} answer {to} antwoorden_speler_1

                {print} 'Speler 2, jouw beurt!'
                {for} i {in} {range} 0 {to} 4
                    antwoorden_speler_2 = {ask} 'Wat is speler 2s favoriete ' onderwerpen
                    {add} antwoorden_speler_2 {in} antwoorden_speler_2
                    {if} antwoorden_speler_2[2] == antwoorden_speler[1]
                        {print} 'Juist!'
                    {else}
                        {print} 'Fout!'
                    score = score - 25

                {print} 'Je hebt een score van ' score '%'

                {if} score = 100
                    {print} 'Je bent een geweldige vriend(in)'
                {if} score < 100 {or} score >= 50
                    {print} 'Dat kan beter'
                {else} score < 50
                    {print} 'Jij noemt jezelf een vriend(in)?!'
        4:
            header: Proberen maar!
            text: Veel plezier met de avonturen in level 16!
    17:
        1:
            header: Welkom bij level 17
            text: In dit level leer je hoe je een dubbele punt gebruikt en leer je het {elif} commando.
        2:
            header: Dubbele punt
            text: Het inspringen verandert weer een klein beetje. Elke keer als er ingesprongen moet worden, hebben we ook een dubbele punt nodig in de zin daarvoor.
            code: |-
                prijzen = ['1 miljoen', 'een appletaart', 'niks']
                jouw_prijs = prijzen [{random}]
                {print} 'Je wint ' jouw_prijs
                {if} jouw_prijs == '1 miljoen' :
                    {print} 'Yess. Je bent rijk!'
                {else}:
                    {print} 'Meer geluk volgende keer..'
        3:
            header: '{elif}'
            text: 'In dit level kun je ook een nieuw commando gebruiken: {elif}. {elif} is een samenvoeging van {else} en {if}. Je kunt het gebruiken om een 3e optie te creëren (of zelfs meer!). Kijk maar!'
            code: |-
                prijzen = ['1 miljoen', 'een appeltaart', 'niks']
                jouw_prijs = prijzen [{random}]
                {print} 'Je wint ' jouw_prijs
                {if} jouw_prijs== '1 miljoen' :
                    {print} 'Yess! Je bent rijk!'
                {elif} jouw_prijs == 'een appeltaart' :
                    {print} 'Heerlijk, een appeltaart!'
                {else}:
                    {print} 'Meer geluk volgende keer..'
        4:
            text: Laten we deze code debuggen!
            code: |-
                {define} vraag_richting
                    richting = {ask} 'Waar wil je heen?'
                    {if} richting = 'terug'
                        {turn} 180
                    {else} richting == 'rechts'
                        {turn} 90
                    {else} richting == 'links'
                        {turn} 270
                        {forward} 100

                doorspelen = 'yes'

                {while} doorspelen == 'yes'
                    {print} vraag_richting
                    {sleep}
                    doorspelen = 'Wil je nog iets tekenen?'
                    {sleep}
        5:
            header: Aan het werk!
            text: Veel plezier met de avonturen in level 17!
    18:
        1:
            header: Welkom bij level 18
            text: Welkom in het laatste level van Hedy! We zijn aangekomen bij echte Python code! Dit betekent ook dat je de Hedy code uit de level in iedere Python omgeving kunt gebruiken als je Engelse commando's gebruikt. Deed je dat tot nu toe nog niet, zet dan de knop om in het commando's menu.
        2:
            header: De Python manier
            text: |-
                We zijn aangekomen bij echte Python code! Dat betekent dat we vanaf nu haakjes moeten zetten om {print} en {range}.

                Daarnaast moeten we komma's gaan gebruiken als we meer dan 1 item willen printen.

                Tot slot moeten we het commando {ask} veranderen in {input}.

                Klik op het tabje '{print}' voor alle voorbeelden.
        3:
            header: De laatste avonturen!
            text: Veel plezier bij de laatste avonturen in level 18!
