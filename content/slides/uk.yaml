levels:
    0:
        1:
            header: Ласкаво просимо до Hedy!
            text: Hedy - це мова програмування.
        2:
            header: Програмування
            text: |-
                Програмування - це надання інструкцій комп'ютеру, використовуючи мову комп'ютера.

                Така мова називається "мовою програмування".
        3:
            header: Мова програмування
            text: |-
                Можливо, ви вже знаєте деякі мови програмування?
                Деякі приклади:
                * Scratch
                * Python
                * HTML
        4:
            header: Програмування
            text: |-
                Якщо ви вмієте програмувати, ви можете робити багато крутих речей:
                * Створювати інтерактивні історії
                * Створювати комп'ютерні малюнки та переносити їх на папір чи тканину
                * Створювати власні додатки для використання на телефоні
        5:
            header: Програмування в Hedy
            text: У Hedy ми використовуємо спеціальні команди, такі як `{print}`.
            code: '{print} Ласкаво просимо до Hedy!'
        6:
            header: Програмування в Hedy
            text: Слова-команди будуть показані рожевим кольором.
            code: '{print} Ласкаво просимо до Hedy!'
        7:
            header: Програмування в Hedy
            text: Ми запускаємо команди за допомогою кнопки Запустити код під введеними командами.
            code: '{print} Ласкаво просимо до Hedy!'
        8:
            header: Програмування в Hedy
            text: Вихідні дані з'являються ліворуч.
            code: '{print} Ласкаво просимо до Hedy!'
        9:
            header: Програмування в Hedy
            text: Результатом також може бути малюнок.
            code: |-
                {forward} 100
                {turn} {left}
    1:
        1:
            header: Ласкаво просимо на перший рівень!
            text: |-
                Ми почнемо перший рівень зі створення історій у Hedy!

                Для створення інтерактивних історій нам знадобляться три текстові команди.
        2:
            header: '{print}'
            text: |-
                Перший команда, яку ви можете використовувати на першому рівні, це `{print}`.

                `{print}` використовується для виведення тексту на екран.
            code: '{print} Показати текст на екрані'
        3:
            header: 'Команда {print}'
            text: |-
                Другий команда, яку ви можете використовувати на першому рівні - це `{ask}`.

                `{ask}` використовується для того, щоб поставити запитання, на яке можна відповісти.
            code: |-
                {print} Ласкаво просимо до Hedy!
                {print} Почніть програмувати зараз!
        4:
            header: '{ask}'
            text: |-
                Остання команда, яку ви можете використати на першому рівні - `{echo}`.

                `{echo}` використовується для повторення відповіді на `{ask}`.
            code: |-
                {print} Ласкаво просимо до ваших власних паперових ножиць!
                {ask} Що ти вибереш?
        5:
            header: '{echo}'
            text: |-
                Як ви могли бачити в попередньому прикладі. Якщо ви використовуєте команду `{ask}`, ви можете поставити запитання.
                Однак відповідь не відображається на екрані виводу.

                Якщо ви хочете, щоб відповідь була показана, ви можете використати останню команду цього рівня: `{echo}`.
                `{echo}` використовується для повторення відповіді `{ask}`.
            code: "{print} Привіт!\n{ask} Як тебе звати?\n{echo} привіт"
        6:
            header: Програмуємо!
            text: "За допомогою `{print}`, `{ask}` і `{echo}` ви вже можете створити маленьку історію.\nЦе гарний час, щоб спробувати пригоди «Папуга», «Історія» та «Камінь, ножиці для паперу»."
            editor: /hedy/1
        7:
            header: Програмуємо!
            text: Кнопки з жовтими стрілками можна використовувати для копіювання прикладів.
            editor: /hedy#print_command
        8:
            header: Програмування!
            text: Жовті кнопки зі стрілками можна використовувати для копіювання прикладів.
            editor: /hedy# print_command
        9:
            header: 'Малювання з черепахою'
            text: '`{forward}` використовується для переміщення черепахи вперед.'
        10:
            header: 'Малюнок з черепахою: {forward}'
            text: Команда `{turn}` використовується, щоб змусити черепашку повернути ліворуч або праворуч.
            code: |-
                {forward} 50
        11:
            code: |-
                {forward} 50
                {turn} {left}
            header: 'Малюнок з черепахою: {turn}'
            text: '`{turn}` використовується для повороту черепахи ліворуч або праворуч.'
        12:
            header: Налагодження
            text: Налагодження коду означає позбавлення від помилок у коді. Давайте разом налагодимо цей код. Натисніть кнопку сонечка, щоб запустити налагоджувач.
            debug: 'True'
            code: "Я діджей Хеді\n{print} Яку пісню ви б хотіли почути?\n{ask} Мені теж подобається ця пісня!\n{print} Далі... {echo}"
        13:
            text: Насолоджуйтесь пригодами на рівні 1!
            header: Нехай розвага з програмування почнеться!
    2:
        3:
            text: |-
                Ми також можемо встановити змінну, ставлячи запитання.

                Відповідь на запитання зберігається у змінній.

                Таким чином нам не потрібна команда `{echo}`.
            header: Інтерактивний
            code: |-
                імя {is} {ask} Що таке імя?
                {print} Довідник імя
        4:
            text: Тепер, коли ми використовуємо змінні, ми можемо використовувати декілька змінних замість однієї команди `{echo}`.
            header: Кілька змінних
            code: |-
                імя {is} {ask} Що таке ім'я?
                {print} Довідник імя
                вік {is} {ask} Як старий ти?
                {print} імя вік років.
        1:
            header: Ласкаво просимо на рівень 2
            text: "На цьому рівні ви навчитеся використовувати змінні.\n\nЗмінна — це слово, яке можна використовувати для зберігання інформації.\n\nНаприклад: ім'я, вік або улюблена спортивна команда."
        2:
            header: Змінні
            text: Щоб створити або «встановити» змінну, ми використовуємо команду `{is}`
            code: "імя {is} Геди\nВік {is} 15 хв\n{print} імя віку"
        5:
            header: сон
            text: Ви також можете використати команду `{sleep}`, щоб призупинити код на деякий час.
            code: "{print} Мій улюблений колір...\n{sleep} 2\n{print} зелений!"
        6:
            header: Сон 5
            text: "Ви можете додати число після команди `{sleep}`, якщо хочете, щоб пауза була довшою.\n\nЯкщо ви хочете, ви навіть можете використовувати змінну замість числа, щоб визначити тривалість команди сну."
            code: "пауза {is} 10\n{print} Мій улюблений колір...\n{sleep} пауза\n{print} зелений!"
        7:
            header: Налагодження
            text: Налагодження коду означає позбавлення від помилок у коді. Давайте разом налагодимо цей код. Натисніть кнопку сонечка, щоб запустити налагоджувач.
            code: "{print} Ласкаво просимо до магазину пончиків!\nначинка {є} Яку начинку ви хотіли б?\n{print} Ви вибрали... Наповнення! смак!\ntopping {ask} Яку начинку ви хотіли б?\nначинка смачна!\n{print} Я піду за вашим пончиком. {сон}\n{print} Ось вам! Ситний пончик з начинкою!\n{ask} Гарного дня!"
            debug: 'True'
        8:
            header: Нехай розвага з програмування почнеться!
            text: Насолоджуйтесь пригодами на рівні 2!
    4:
        9:
            header: Очистити
            text: "На цьому рівні ви також вивчите команду {clear}.\nЗа допомогою цієї команди ви можете стерти весь текст із екрана виводу.\n\nБудьте обережні, щоб ви також завжди використовували команду сну. Якщо ви цього не зробите, комп’ютер зітре весь текст, перш ніж ви зможете його прочитати!"
            code: "{print} '3'\n{clear}\n{print} '2'\n{clear}\n{print} '1'\n{clear}\n{print} \"СЮРПРИЗ!\""
        7:
            header: Лапки та змінні
            code: "імя {is} Проксимус\n{print} 'Привіт' імя ', як ви? '"
            text: "Коли імена змінних використовуються в середині речення, ви повинні залишити змінні поза лапками.\nОднак решта речення потребує лапок. Це виглядає так:"
        5:
            code: імя {is} {ask} 'ім'я, будь ласка?'
            header: Лапки з запитом
            text: Це також стосується команди `{ask}`.
        11:
            text: Насолоджуйтесь пригодами на 4 рівні!
            header: Готовий, готовий, вперед!
        4:
            code: "{print} 'друк у лапках!'"
            header: Лапки з друком
            text: Кожного разу, коли ви використовуєте команду `{print}`, вам потрібно брати текст, який ви хочете відобразити на екрані, у лапки.
        1:
            header: Привітання до рівня 4
            text: У цьому рівні ви дізнаєтеся, як використовувати мітки.
            code: "{print} 'друк у лапках!'"
        2:
            text: 'У попередніх рівнях ви можете зіткнутися з цією проблемою:'
            header: Проблема
            code: "ім'я {is} Софі\nДовідник Ім'я"
            debug: 'True'
        3:
            header: Закріплюючи це лапками
            text: "На цьому рівні ми вирішимо цю проблему, використовуючи лапки.\n\nЦе також робить наш код більш схожим на «справжній» код Python."
        10:
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "{очистити}\n{print} Який чудовий день, щоб піти на пляж!\n{ask} «Ви хочете побудувати замок з піску чи поплавати в океані?»\n{print} \"Ви хотіли б зайнятися\"\n{print} \"Я теж хотів би це зробити\"\n{print} «Погляньте на ці чудові черепашки!»\nкольори {is} 'помаранчевий, срібний, білий, коричневий'\n{print} 'Мені подобаються кольори {at} {random} one!'\nвибір {є} {питати} Який тобі подобається?"
            debug: 'True'
        6:
            code: "імя {is} Проксимус\n{print} 'Привіт ' імя"
            header: Лапки та змінні
            text: "Ви не хочете, щоб імена змінних друкувались на екрані.\nОсь чому змінні слід не брати в лапки, наприклад:"
        8:
            code: '{print} "Це не спрацює!"'
            header: Лапки та скорочення
            text: "Будьте обережні! Тепер, коли ви використовуєте лапки, ви не можете використовувати апостроф у скороченнях.\n\nБудь ласка, спробуйте надрукувати скорочення на зразок «ти» або «я» на екрані нижче, і подивіться, що станеться...."
            debug: 'True'
    3:
        2:
            header: Складання списку
            text: "Ви створюєте список за допомогою `{is}`.\n\nРозділяйте елементи у списку комами."
            code: тварини {is} собаки, коти, кенгуру
        1:
            header: Ласкаво просимо на 3 рівень
            text: На цьому рівні ви навчитеся складати список, додавати й видаляти елементи зі своїх списків і вибирати випадковий елемент із цього списку.
        3:
            header: Навмання
            text: "Ви можете використовувати список за допомогою команди `{at}` `{random}`.\nКомп’ютер випадковим чином вибере один пункт зі списку.\nЩоразу, коли ви запускаєте цей код, результат буде відрізнятися."
            code: "тварини {is} собаки, коти, кенгуру\n{print} тварини {at} {random}"
        4:
            header: Навмання в реченні
            text: Ви також можете використовувати команду `{at}` `{random}` у реченні.
            code: |-
                тварини {is} собаки, коти, кенгуру
                {print} Мій улюблений тварини {at} {random}
        5:
            header: Додати до
            text: "Ви можете додати елементи до списку за допомогою команди `{add}` `{to}`.\n\nВи можете вибрати, що додати до списку, або скористатися командою `{add}` `{to}` у поєднанні з командою `{ask}`.\nТаким чином ви можете дозволити гравцеві вирішувати, що додати до списку."
            code: |-
                тварини {is} собака, кіт, kangaroo
                як {is} {ask} Що таке улюблена тварина?
                {add} як {to_list} тварини
                {print} Я обирає тварини {at} {random}

        7:
            debug: 'True'
            editor: "music_genres {is} рок, поп, метал, інді, джаз\nSelect_genre {is} Музика {at} {random}\nДовідник Послухайте вибраний жанр\nкрасиві {ask} Ви любите цей жанр?\n{remove} обраний_genre {від} вибрано_genre\nРусскийУкраїнськаБеларускаяOʻzbek tiliEnglish\n{print} або ви віддаєте перевагу... Другий_хойсе {at} {random}\n0 товар(ов) - 0.00 р.\nДовідник Я люблю музику_genre {random} кращий!"
            header: Налагодження
            text: Давайте налагодимо цей код!
        8:
            header: Давайте до роботи!
            text: Насолоджуйтесь пригодами на рівні 3!
        6:
            header: Видалити з
            code: |-
                тварини {is} собака, кіт, kangaroo
                тварина {is} {ask} Яку тварину ти не любиш?
                {remove} тварина {from} тварини
                {print} Я обирає тварини {at} {random}
            text: "Протилежністю команди `{add}` `{to}` є команда `{remove}` `{from}`.\nЦя команда видаляє елемент зі списку."
    6:
        3:
            text: Якщо ви хочете відняти, ви можете використовувати знак мінус.
            code: "{print} '5 мінус 5 це ' 5 - 5"
            header: Віднімання
        1:
            text: На цьому рівні ми додаємо математику до наших кодів.
            header: Ласкаво просимо на 6 рівень
        2:
            header: Доповнення
            code: "{print} '5 плюс 5 це ' 5 + 5"
            text: Якщо ви хочете обчислити додавання, просто використовуйте знак плюс.
        4:
            code: "{print} '5 помножити на 5 це ' 5 * 5"
            header: Множення
            text: Якщо ви хочете зробити множення, ви можете використовувати зірочку.
        7:
            code: |-
                імя = Hedy
                відповідь = 20 + 4
            header: Символ =
            text: "Відтепер ви також можете використовувати символ = замість команди `{is}`.\nЦе стосується як чисел, так і слів, а також після команд `{if}` або `{else}`."
        6:
            text: Підсумовуючи, ви можете використовувати +, -, * і / для виконання математики.
            header: Резюме
            code: "{print} '5 плюс 5 це ' 5 + 5\n{print} '5 мінус 5 це ' 5 - 5\n{print} '5 помножити на 5 це ' 5 * 5\n{print} '5 поділити на 5 це ' 5 / 5"
        8:
            header: Обчислення зі змінними
            text: 'Ви можете використовувати обчислення з числами, але ви також можете використовувати змінні для виконання обчислень, наприклад:'
            code: |-
                номер_1 = {ask} 'Підвіконня в першому номері:'
                номер_2 = {ask} 'Підвіконня в другому номері:'
                відповідь = номер_1 * номер_2 
                {print} номер_1 ' помножити на ' номер_2 ' дорівнює ' відповідь
        5:
            header: Поділ
            text: Ви можете використовувати косу риску для поділу.
            code: "{print} '5 поділити на 5 це ' 5 / 5"
        10:
            header: Давайте до роботи!
            text: Насолоджуйтесь пригодами на 6 рівні!
        9:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} \"Це автомат для продажу квитків у аквапарк\"\n{print} 'Прайс-лист: діти до 12 років 3 $, дорослі 5 $'\n{print} \"У понеділок діє знижка 25%\"\namount_of_children = 'Скільки дитячих квитків ви хочете?'\namount_of_adults = 'Скільки квитків для дорослих ви хочете?'\nday_of_the_week = {ask} 'Який сьогодні день?'\n{clear}\nchild_price = кількість дітей * 3\nдоросла_ціна = кількість_дорослих + 5\nзагальна_ціна = доросла_ціна * дитяча_ціна\n{if} день {is} понеділок\nзагальна_ціна = загальна_ціна * 0,25\n{print} \"Це буде total_price, будь ласка\""
    5:
        3:
            debug: 'True'
            header: Не забудьте роздрукувати
            text: "Використовуючи команду `{if}`, не забудьте використати команду `{print}`.\nЦей код не працюватиме!"
            code: "{if} name {is} Hedy 'приємно'"
        2:
            header: if
            code: "name {is} {ask} 'як тебе звуть?'\n{if} name {is} Hedy {print} 'nice'"
            text: "Команда `{if}` дозволяє вибрати між двома варіантами.\nУ цьому прикладі комп’ютер надрукує «приємно», якщо заданою відповіддю є Хеді.\nЯкщо відповідь не Hedy, комп’ютер нічого не робитиме."
        6:
            text: "Якщо ви тренувалися з командами `{if}` і `{else}`, ви також можете спробувати команду `{in}`.\n\nЗа допомогою `{in}` ви можете дозволити комп’ютеру перевірити, чи є елемент у списку, наприклад:\n\nЗверніть увагу, що Hedy чутливий до регістру. Це означає, що якщо ви відповісте «Green» замість «green», Hedy надрукує «meh»."
            header: Ще одна нова команда
            code: "гарні_кольори {is} зелений, жовтий\nулюблений_колір {is} {ask} 'Який твій улюблений колір?'\n{if} улюблений_колір {in} гарні_кольори {print} 'гарний!'\n{else} {print} 'пф'"
        8:
            header: ходімо!
            text: Насолоджуйтесь пригодами на рівні 5!
        7:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} Ласкаво просимо до HedyAir Security!\nboarding_pass {is} {ask} \"У вас є посадковий талон?\"\n{if} bording_pass так {print} Чудово!\n{else} Приготуйте свій посадковий талон.\npassport {is} 'Чи можу я побачити ваш паспорт, будь ласка?'\n{if} паспорт {is} так \"дякую\"\n{else} «Ти не можеш літати без паспорта»\ndeclare {is} {ask} Вам є що декларувати?\n{if} оголосити {is} так\nitem_to_declare {is} {ask} 'Що б ви хотіли задекларувати'\n{else} Добре\n{print} Дякую. Будь ласка, прямуйте до воріт A22»"
        1:
            header: Ласкаво просимо на 5 рівень
            text: 'На цьому рівні ви навчитеся використовувати 3 нові команди: `{if}`, `{else}` і `{in}`.'
        4:
            text: "Використовуючи команду `{if}`, ви також можете додати команду `{else}`.\nЯкщо відповідь Hedy, комп’ютер надрукує «приємно».\nАле якщо відповідь буде іншою, комп’ютер надрукує «бу»"
            header: Else
            code: "{if} name {is} Hedy {print} 'приємно' {else} {print} 'бу!'"
        5:
            header: Довгі черги
            code: "{if} name {is} Hedy {print} 'nice'\n{else} {print} \"бу!\""
            text: "Можливо, ви помітили, що ваші рядки можуть стати дуже довгими, якщо у вас одночасно є команди `{if}` і `{else}`.\n\nВи можете розділити команди та розмістити їх у 2 рядки, наприклад:"
    7:
        4:
            header: Повторіть команду запиту
            text: Ви також можете повторити команду `{ask}`, `{if}` або `{else}` кілька разів.
            code: "{repeat} 2 {times} answer = {ask} \"Чи знаєте ви, що можете поставити запитання кілька разів?\"\n{if} answer {is} yes {repeat} 2 {times} {print} 'Ви вже це знали!'\n{else} {repeat} 3 {times} {print} 'Ви дізналися щось нове!'"
        5:
            debug: 'True'
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "{print} Ви опинилися на безлюдному острові.\n{repeat} 3 'Допоможіть!'\nrescued = {ask} Хтось прийшов на допомогу?\n{if} врятовано так {is}\n{print} Пощастило!\n{else} {repeat} 3 {times} \"ДОПОМОЖІТЬ!\"\nrescued = 'А зараз?'\n{if} так\n{print} «Ура!\n{else} «Шкода... Ну що ж... час побудувати притулок і знайти їжу»"
        3:
            code: "{repeat} 5 {times} 'Допоможіть!'"
            header: Не забудьте команду друку
            text: Використовуючи команду повторення, не забувайте про команду `{print}`.
            debug: 'True'
        6:
            text: Насолоджуйтесь пригодами на 7 рівні!
            header: Готовий до старту!
        2:
            code: "{print} «Принц кликав на допомогу»\n{repeat} 5 {times} {print} 'Допоможіть!'\n{print} «Чому мені ніхто не допомагає?»"
            header: повторити 3 рази
            text: "Якщо ви хочете повторити рядок коду, ви можете використати код `{repeat}` 3 `{times}`.\nЯкщо ви хочете повторити рядок кілька разів, просто змініть номер.\n\nНаприклад: якщо ви програмуєте історію, у якій ваш персонаж 5 разів кричить про допомогу, це може виглядати так:"
        1:
            header: Ласкаво просимо на 7 рівень
            text: На цьому рівні ви навчитеся повторювати рядок коду скільки завгодно разів.
    8:
        4:
            text: "Якщо ви хочете, ви можете продовжити після команди `{repeat}` без відступу.\nРядки, які не починаються з відступу, не повторюватимуться."
            header: '{repeat} команд зараз'
            code: "{repeat} 3 {times}\n    {print} 'Привіт!'\n{print} 'Ми закінчили повторювати!'"
        8:
            header: оператори if всередині операторів if
            text: "Можливо, ви подумали спробувати вставити команду if в команду повторення або в іншу команду if.\nНаразі це поки що неможливо. На вищих рівнях це буде дозволено, але зараз давайте зосередимося на відпрацюванні команд `{if}` `{else}` і `{repeat}` з правильним відступом."
        9:
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "{print} \"Автомат для продажу автобусних квитків HedyWheels\"\nзона_1 = ратуша, бібліотека, кампус, ринок\nзона_2 = басейн, скейт-парк, торговий центр, аеропорт\nпризначення = 'Куди ви хочете поїхати?'\n{if} призначення {в} зоні 1\n{print} призначення \"знаходиться в зоні 1\"\nціна = 3 євро\n    {if} призначення {is} зона_2\n{print} призначення \"знаходиться в зоні 2\"\nціна = 6\nticket_types = {ask} 'Натисніть 1 для одноразового квитка.\nНатисніть 2, щоб отримати квиток в обидві сторони:'\n{if} тип_квитка = 1\n{print} \"Ви вибрали одноразовий квиток\"\n{інше}\n        {print} Ви вибрали квиток туди й назад\"\nціна * 2\n{print} \"Це буде \"ціна\" євро, будь ласка\""
            debug: 'True'
        2:
            code: "{repeat} 5 {times} {print} 'Допоможіть!'"
            header: '{повторити} команд раніше'
            text: "На попередніх рівнях команда `{repeat}` виглядала так:\n\nВи можете повторити лише один рядок коду."
            debug: 'True'
        7:
            header: зупинка відступу
            text: Подібно до команди `{repeat}`, ви можете припинити використання відступів, і рядки завжди відображатимуться. Не тільки якщо твердження правдиве.
            code: "name = {ask} 'Як тебе звати?'\n{if} name {is} Hedy\n    {print} «Ласкаво просимо, Хеді»\n{else}\n    {print} 'Ласкаво просимо програмісту!' \n{print} '3..2..1.. Розпочніть програмування!'"
        6:
            header: якщо і інакше зараз
            text: "Тепер це команди `{if}` і `{else}`.\nКожен рядок після команд `{if}` і `{else}` починається з відступу."
            code: |-
                імя = {ask} "Що таке ім'я?"
                {if} імя {is} Геди
                    {print} 'Ласкаво просимо Хеді'
                {else}
                    {print} 'Вітаю програміста'
        5:
            text: "Те саме стосується команд `{if}` і `{else}`.\nЦе були команди раніше:"
            debug: 'True'
            header: if і else раніше
            code: "{if} name {is} Hedy {print} 'nice'\n{else} {print} \"бу!\""
        1:
            header: Ласкаво просимо на 8 рівень
            text: На цьому рівні ви навчитеся використовувати відступи, щоб команди `{repeat}`, `{if}` і `{else}` працювали для кількох рядків коду.
        3:
            header: '{repeat} команд зараз'
            text: "На цьому рівні ви можете повторювати кілька рядків коду. Для цього ви повинні повідомити комп’ютеру, які рядки належать разом і повинні повторюватися.\nЦе можна зробити за допомогою відступу.\n\nВикористовуйте 4 пробіли (або одну табуляцію) на початку кожного рядка, який потрібно повторити, наприклад:"
            code: "{repeat} 5 {times}\n    {print} \"Всім привіт\"\n    {print} 'Це буде надруковано 5 разів'"
        10:
            header: Давайте перевіримо пригоди!
            text: Насолоджуйтесь пригодами на 8 рівні!
    9:
        8:
            header: Налагодження
            debug: 'True'
            text: Давайте налагодимо цей код!
            code: "{print} «Ласкаво просимо до HedyJumps, вашої пригоди з парашутом!»\npeople = {ask} «Зі скількома людьми ти сьогодні стрибаєш?»\n{print} \"З міркувань безпеки ми задамо вам кілька запитань\".\nдодаткові_інструкції_люди = a, b\n{repeat} 3 {times}\n    name = {ask} 'Як тебе звати?'\njumped_before = 'Ви коли-небудь стрибали з парашутом раніше, ' ім'я '?'\n{if} jumped_before ні\n{print} \"Не хвилюйтеся, ви отримаєте додатковий інструктаж з безпеки в кімнаті 13\"\n{add} name {to} extra_instructions_people \n{else}\n{print} Весело!\n{print} Дякуємо, що заповнили запитання щодо безпеки. Насолоджуйтесь своїм стрибком!'"
        2:
            header: Кілька рядків після `{repeat}`
            text: Вам дозволено комбінувати `{repeat}` і `{if}` на цьому рівні.
            code: "{repeat} 3 {times}\n    food = {ask} 'Що ти хочеш?'\n    {if} їжа {is} піца\n        {print} 'гарно!'\n    {else}\n        {print} \"піца краще\""
        1:
            text: "На цьому рівні ви можете використовувати кілька рядків коду після команди `{if}` або `{repeat}`.\n\nВи навіть можете помістити команду `{repeat}` в іншу команду `{repeat}`."
            header: Ласкаво просимо на 9 рівень
        3:
            code: "{repeat} 3 {times}\n    {print} 'Цей рядок буде повторюватися...'\n    {print} \"Цей теж...\"\n{print} 'але цього не буде!'"
            header: Відступ має значення!
            text: Відступи дуже важливі, щоб повідомити комп’ютеру, які рядки мають повторюватися, а які – лише один раз.
        4:
            code: "continue = {ask} 'Ви бажаєте продовжити?'\n{if} продовжити = так\n    sure = {ask} 'Ви впевнені?'\n    {if} впевнений {is} так\n        {print} «Ми продовжимо»\n    {else}\n        {print} \"Ви не впевнені\"\n{else}\n    {print} \"Ви не хочете продовжувати\""
            header: Кілька рядків після `{if}`
            text: Ви також можете використовувати кілька рядків післяr `{if}`
        7:
            text: Майте на увазі, що четвертий і шостий рядки цього коду починаються з 8 пробілів відступу.
            header: Зверніть увагу на відступ
            code: "{repeat} 3 {times}\n    food = {ask} 'Що ти хочеш?'\n    {if} їжа {is} піца\n        {print} 'приємно!'\n    {else}\n        {print} \"піца краще\""
        9:
            text: Насолоджуйтесь пригодами на 9 рівні!
            header: ходімо!
        6:
            code: |-
                {repeat} 3 {times}
                    їжа = {ask} 'Що ви хочете?'
                    {if} їжа {is} піца
                        {print} 'безкоштовно!'
                    {else}
                        {print} 'піца краще'
            header: '`{if}` всередині `{repeat}`'
            text: "Тепер, коли ви можете використовувати кілька рядків коду після цієї команди, ви також можете розмістити їх один в одному.\nПеревірте це:"
        5:
            header: Відступ має значення
            text: Знову ж таки, відступ все ще дуже важливий і може значно змінити код.
            code: "continue = {ask} 'Ви бажаєте продовжити?'\n{if} продовжити = так\n    sure = {ask} 'Ви впевнені?'\n    {if} впевнений {is} так\n        {print} «Ми продовжимо»\n{else}\n    {print} \"Ви не впевнені\""
    10:
        2:
            header: Команда for
            text: За допомогою for ви можете створити список і використовувати всі елементи цього списку. `{for}` створює блок, як і повтор, і якщо так, то всі рядки в блоці повинні починатися з відступу (4 пробіли).
            code: |-
                тварини = собака, кіт, бобова
                {for} тварина {in} тварини
                    {print} 'Я люблю ' тварина
        4:
            text: Давайте налагодимо цей код
            header: Налагодження
            debug: 'True'
            code: "{print} \"Пані та панове!\"\n{print} 'На одну ніч і тільки одну ніч у цирку Хеді!'\nдіяти = стріляти з канону, ходити по канату, пакувати себе у валізу,\nлюди = Айріс Неймовірна Ахмед Дивовижний Френсіс Фантастичний\n    {for} людей {in} діє\nобрана_особа {is} люди {випадкові}\n    вибрана_особа 'буде' діяти\n{add} selected_person {from} людей\n{print} 'Приходьте сьогодні на наше шоу!'\n{print} 'Квитки доступні лише в касі"
        5:
            text: Насолоджуйтесь пригодами на 10 рівні!
            header: Час програмувати!
        3:
            text: 'Ось ще один приклад команди `{for}`:'
            code: |-
                днів = понеділок, вівторок, середа, четвер, п'ятниця, субота, неділя
                імена = мама, тато, emma, sophi
                {for} день {in} днів
                    {print} імена {at} {random} ' робить посуд на ' день
            header: Команда for
        1:
            header: Ласкаво просимо на 10 рівень
            text: 'На цьому рівні ви вивчите нову команду: `{for}`.'
    11:
        2:
            header: Команда for
            text: 'Ось як виглядає нова команда for:'
            code: |-
                {for} лічильник {in} {range} 1 {to} 10
                    {print} лічильник
                {print} 'Читати або ні. Я приходжу!'
        1:
            header: Ласкаво просимо на 11 рівень
            text: "На цьому рівні ми додаємо нову форму команди `{for}`. На попередніх рівнях ми використовували для зі списком, але ми також можемо використовувати для з числами.\n\nТаким чином нам більше не потрібна команда `{repeat}`."
        3:
            header: змінна i
            code: "число = 10\n{for} i {in} {range} 1 {to} 10\n    {print} i * число"
            text: "На попередньому слайді змінна була названа «лічильник», оскільки вона веде зворотній відлік.\nВи, звичайно, можете використовувати будь-яке ім'я для змінної, яку хочете.\nСтандартна назва змінних у цій ситуації, яка використовується в мовах програмування, таких як Python, — «i».\nЦе виглядає так:"
        4:
            debug: 'True'
            code: "множник {is} {ask} 'Яка таблиця множення вам потрібна?'\n{repeat} {for} чисел {in} {range} 1 {in} 10 {times}\n    {print} Це таблиця множення на множник\n    {print} число 'x' фактор ' = ' i * фактор"
            header: Налагодження
            text: Давайте налагодимо цей код!
        5:
            header: Починаємо програмувати!
            text: Насолоджуйтесь пригодами на рівні 11!
    16:
        4:
            header: Давайте спробуємо!
            text: Насолоджуйтесь пригодами на рівні 16!
        3:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} «Тест на дружбу» \n{subjects} = ['пісня', 'фільм', 'їжа', 'напій'] \nanswers_player_1 = [] \nanswers_player_2 = [] \nбал = 100 \n\n{for} я {in} {range} 1 {to} 4 \n    answer = {ask} \"які твої улюблені\" предмети[i] \n{add} відповідь {до} answers_player_1 \n\n{print} 'Гравець 2, твоя черга!' \n{for} я {in} {range} 0 {to} 4 \n    answer_player_2 = {запитати} «які улюблені теми гравця». \n    {add} answer_player_2 {in} answers_player_2 \n    {if} answers_player_2[2] == answers_player_1[1] \n        {print} \"Правильно!\"\n    {else}\n        {print} \"Неправильно!\" \n    бал = бал - 25 \n\n{print} 'Гравець 2, ти набрав ' очок '%' \n\n{if} бал = 100 \n    {print} \"Ти чудовий друг\" \n{else} бал < 100 {або} бал >= 50 \n    {print} \"Ти міг би зробити краще\" \n{else} бал < 50 \n    {print} 'Ви взагалі знаєте цю людину?'"
        1:
            text: На цьому рівні ви дізнаєтеся про [квадратні дужки] і як ними користуватися.
            header: Ласкаво просимо на 16 рівень
        2:
            header: Квадратні дужки
            text: Ми збираємося створювати списки способом Python, з квадратними дужками навколо списків! Ми також зберігаємо лапки навколо кожного елемента, як ми навчилися на попередніх рівнях. Ми використовуємо квадратні дужки, щоб вказати місце в списку. Команду at random більше не можна використовувати.
            code: |-
                друзі = ['Ahmed', 'Ben', 'Cayden']
                {print} друзі[1] ' це перший друг у списку.'
                {print} друзі[2] ' є другим другом у списку.'
                {print} друзі[3] ' є третім другом у списку.'
                # тепер ми зустрінемо 2 списки за допомогою змінного i
                щасливі_числа = [15, 18, 6]
                {for} і {in} {range} 1 {to} 3
                    {print} друзі[і] ' щасливий номер є ' щасливі_числа[і]
    17:
        1:
            header: Ласкаво просимо на 17 рівень
            text: на цьому рівні ви навчитеся використовувати двокрапку та вивчите команду elif.
        4:
            code: "{define} ask_direction \n    direction = {ask} 'Куди ти хочеш піти?' \n    {if} direction = 'назад' \n        {turn} 180 \n    {else} direction == 'праворуч' \n        {turn} 90 \n    {else} direction == 'ліворуч' \n        {turn} 270 \n        {forward} 100 \n\nпродовжити = 'так' \n\n{while} continue == 'yes' \n    {print} ask_direction \n    {sleep}\n    continue = 'ти хочеш намалювати ще?' \n    {sleep} до"
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
        2:
            header: Товста кишка
            code: |-
                ціни = ['1 млн. доларів', 'ябл. пиріг', 'нічого']
                ваша_ціна = ціни[{random}]
                {print} 'Ви виграєте ' ваша_ціна
                {if} ваша_ціна == '1 млн. доларів':
                    {print} 'Я Ви багаті!'
                {else}:
                    {print} 'Повага наступного разу..'
            text: 'Тепер ми трохи змінимо відступ. Кожного разу, коли нам потрібен відступ, нам потрібно: у рядку перед відступом.'
        5:
            header: Давайте спробуємо!
            text: Насолоджуйтесь пригодами на рівні 17!
        3:
            text: 'На цьому рівні ви також можете використовувати нову команду: elif. elif — це скорочення від else if, і воно вам знадобиться, коли ви хочете створити 3 (або більше!) варіанти. Перевірте це!'
            code: |-
                ціни = ['1 млн. доларів', 'ябл. пиріг', 'nothing']
                ваша_ціна = ціни[{random}]
                {print} 'Ви виграєте ' ваша_ціна
                {if} ваша_ціна == '1 млн. доларів':
                    {print} 'Я Ви багаті!'
                {elif} ваша_ціна == "ябл. пиріг":
                    {print} 'Любо, яблуневий пиріг!'
                {else}:
                    {print} 'Повага наступного разу.. '
            header: elif
    13:
        5:
            header: приклад
            text: "У цьому прикладі ви бачите, як аргумент place використовується у функції.\nЗапустіть код і змініть «океан» і «море» на щось інше, і подивіться, що станеться."
            code: |-
                {define} пісня {with} місце
                    {print} 'Мій Бонні над ' місце

                {call} пісня {with} 'океан'
                {call} пісня {with} 'море'
                {call} пісня {with} 'океан'
        7:
            header: Ще більше питань!
            text: "Тепер ми об’єднали ще більше питань із функцією. Введіть цей код і подивіться, що станеться. \n\nЗверніть увагу, що змінні та аргументи мають однакові назви. Це дозволено. \nВас це бентежить? Просто використовуйте різні імена, це також дозволено. \n``` \n{визначити} пісню {з} назвою, місцем \n    {print} 'Моє ' ім'я ' над ' місцем \n\nname {is} {ask} 'Хто?' \nplace {is} {ask} 'Де вони?' \n{дзвінок} пісня {з} назвою, місцем \n```"
            code: |-
                {define} пісня {with} місце
                    {print} 'Мій Бонні над ' місце

                {call} пісня {with} 'океан'
                {call} пісня {with} 'море'
                {call} пісня {with} 'океан'
        2:
            code: "name = {ask} 'як тебе звати?'\nage = {ask} 'скільки твій вік?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'Ти справжня Хеді!'"
            header: Команда і
            text: "Команда `{and}` завжди використовується в комбінації з командою {if}.\nТаким чином можна перевірити правильність 2 тверджень. Наприклад:"
        9:
            header: ходімо!
            text: Насолоджуйтесь пригодами на рівні 13!
        6:
            text: "Ви також можете комбінувати функції із запитанням. \n\nЩо станеться, якщо ви внесете ці зміни: \n``` \n{define} пісня {with} місце \n    {print} Місце «Моя Бонні». \n\nanswer {is} {ask} 'Де моя Бонні?' \n{call} пісня {with} відповідь \n```"
            header: Приклад зі змінною
            code: |-
                {define} пісня {with} місце
                    {print} «Моя Бонні тут » місце

                {call} пісня {with} 'океан'
                {call} пісня {with} 'море'
                {call} пісня {with} 'океан'
        8:
            text: Давайте налагодимо цей код!
            debug: 'True'
            header: Налагодження
            code: |-
                {define} щастя {with} name
                    {print} '🥳'

                {play} G
                {play} A
                {play} B
                {print} 'Вечірка'
                {define} печаль
                {print} '😞'
                {play} E
                {play} D
                {play} C
                {print} «Сподіваюся, ти почуваєшся краще» імя
                імя = {ask} "Як ваше ім'я ?"
                mood = {ask} 'Ти щасливий чи сумний?'
                {if} mood = щасливий
                    {call} щастя {with} людиною
                {else} mood = сумний
                    {define} печаль {to} імя
        1:
            header: Ласкаво просимо на 13 рівень
            text: "Зараз ми вивчимо `{and}` та `{or}`! Якщо ви хочете перевірити два твердження, вам не обов’язково використовувати два `{if}``, але замість них можна використати `{and}` і `{or}``. \nВідтепер ви також можете використовувати аргументи у своїх функціях."
        3:
            header: Команда або
            text: "Команда `{or}` працює так само, як команда `{and}``, але лише 1 із двох тверджень має бути істинним.\n\nДавайте подивимося, що станеться, коли ви зміните `{and}` на `{or}`."
            code: |-
                name = {ask} 'як тебе звати?'
                {if} name {is} 'Hedy' {or} name {is} 'hedy'
                    {print} 'Ласкаво просимо!!'
        4:
            header: Функції з аргументами
            text: Тепер, коли ви навчилися використовувати функції, ви навчитеся використовувати функцію з **аргументом**. Аргумент — це змінна, яка використовується у функції. Він не використовується поза функцією.
    18:
        3:
            header: Останні пригоди!
            text: Насолоджуйтесь останніми пригодами на 18 рівні!
        2:
            editor: /hedy/18
            header: Шлях Python
            text: "Ми отримали справжній код Python! Це означає, що відтепер нам потрібно використовувати круглі дужки з print і range. \n\nКрім того, якщо ви хочете надрукувати більше одного елемента, вам потрібно розділити їх комами. \n\nОстання зміна, яку нам потрібно буде зробити, щоб отримати код Python, це зміна запиту на введення. \n\nЩоб переглянути всі приклади, натисніть вкладку «друк»."
        1:
            text: Щиро вітаю! Ви досягли останнього рівня Hedy! Код, який ви створили тут, можна скопіювати в реальне середовище Python, наприклад replit або PyCharm, і ви можете продовжувати навчання там! Зауважте, однак, що Python може читати лише англійські команди, тому, якщо ви використовували інші мови, вам потрібно зараз перейти на англійську.
            header: Ласкаво просимо на 18 рівень
    14:
        5:
            header: Повернене значення
            code: |-
                {define} розрахунок_нова_ціна {with} ціна, відсоток
                    відсоток = відсоток / 100
                    знижка = ціна * відсоток
                    {return} ціна - знижка

                старa_ціна = {ask} 'Як багато коштує на цінному тегі?'
                знижка = {ask} 'Що відсоток є знижка?'

                нова_ціна = {call} розрахунок_нова_ціна {with} старa_ціна, знижка
                {print} 'Нова ціна ' нова_ціна ' долар '
            text: Наприклад, у цьому коді функція calculate_new_price обчислить нову ціну будь-якого товару. Це дасть вам нову ціну як значення повернення.
        6:
            debug: 'True'
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "item = 'не куплено' \n{print} \"Я хотів би купити цей товар\" \nprice == {ask} 'Яка ціна?' \n{if} ціна менша або така ж, як 10 \n    {print} \"Це чудово!\" \n    item = 'куплений' \n{if} ціна більша за 10 {і} менша або така ж, як 20 \n    {print} \"Добре\"\n    item = 'куплений' \n{if} ціна більше 20 {і} менше 50 \n    {print} \"Це небагато!\" \n{if} ціна більше або дорівнює 50 \n    {print} \"Ні в якому разі!\" \n{else} елемент =! купив \n    {print} \"Ганьба.. Я не куплю\" \n{else}\n    {print} «Я куплю це! Дякую!'"
        7:
            header: Давайте до роботи!
            text: Насолоджуйтесь пригодами на рівні 14!
        4:
            header: Повернене значення
            text: На попередніх рівнях ви навчилися створювати функції та використовувати аргументи з ними. Ще одне чудове використання функції — дозволити їй щось обчислити за вас. Ви можете надати функції обчислення, і вона дасть вам відповідь обчислення. Ця відповідь називається **поверненим значенням**.
        3:
            text: "Ви також можете використовувати:\n\n== те саме, що.\n\n!= ні\n\n== використовується в операторах `{if}`."
            header: Символи
            code: |-
                відповідь = {ask} 'Ви хочете дізнатися більше?'
                {if} відповідь == 'так'
                    {print} «До наступної пригоди!»
                {if} відповідь != 'так'
                    {print} "Це ганьба!"
        2:
            code: |-
                вік = {ask} 'Скільки тобі років?'
                {if} вік < 13
                    {print} 'Ти молодший за мене!'
                {else}
                    {print} 'Ти старший за мене!'
            header: Символи
            text: "Ось нові символи, які ви можете використовувати: \n\n  > означає більше, ніж... \n\n  Знак >= означає більше або таке ж, як... \n\n  < означає менше, ніж... \n\n  <= означає менше або таке ж, як... \n\nВи можете використовувати їх так:"
        1:
            header: Ласкаво просимо на 14 рівень
            text: На цьому рівні ви вивчите деякі нові символи, які можуть допомогти вам покращити ваші програми, наприклад >. Ви також навчитеся працювати зі значеннями, що повертаються функцією.
    15:
        1:
            text: На цьому рівні ви дізнаєтеся про цикл `{while}`.
            header: Ласкаво просимо на 15 рівень
        2:
            header: '{while}'
            text: "Ми збираємося вивчити новий цикл, цикл while! Цикл продовжується до тих пір, поки твердження є істинним. Тому не забудьте змінити значення в циклі. \n\nУ прикладі коду ми продовжуємо, доки не буде дана правильна відповідь. Якщо правильна відповідь ніколи не буде дана, цикл ніколи не закінчиться!"
            code: "відповідь = 0\n{while} відповідь != 25\n    answer = {ask} 'Скільки буде 5 помножити на 5?'\n{print} 'Дано правильну відповідь'"
        3:
            code: "числа = 1, 2 \n\n{for} i {in} {range} 3 {to} 50 \n    {add} x {to} чисел \n    i = + 1 \n\nвипадкове_число = числа {випадкові} \nприпущення = 10 \n\n{while} припущення = 0 \n    answer = 'Вгадай мій номер:' \n    {if} відповідь >= випадкове_число \n        {print} 'нижчий' \n        відгадки = відгадки -1 \n    {if} відповідь > випадкове_число \n        {print} 'вище!' \n        догадки = догадки \n    {else} відповідь = випадкове_число \n        {print} 'правильно' \n        припущення = 10"
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
        4:
            header: Давайте спробуємо!
            text: Насолоджуйтесь пригодами на рівні 15!
    12:
        1:
            text: "Починаючи з цього рівня, вам дозволено використовувати десяткові числа, а також є деякі зміни в лапках.\nВи також можете використовувати функції з цього рівня!"
            header: Ласкаво просимо на 12 рівень
        5:
            header: Мерехтить Мерехтить маленька зіронька!
            text: "У цій програмі ви бачите приклад функції.\nДавайте подивимося, що станеться, якщо ви доповните решту пісні!"
            code: |-
                {define} близнюки
                    {print} 'Помилки'
                    {print} '...'

                {call} близнюки
                {print} 'Зверху над світом так висока'
                {print} 'Подивитися діамант в небі'
                {call} близнюки
        2:
            text: "Цей рівень вносить деякі зміни у використання лапок.\nВідтепер **усі тексти** потрібно брати в лапки. Це включає значення змінних, елементи в списках і текст після команд {if}."
            header: Лапки
            code: "імʼя= 'Робот Хейді'\n{print} 'Привіт ' імʼя"
        6:
            header: Функції
            text: Як ви могли бачити в прикладі, функція — це блок коду, який можна викликати будь-коли. Ви використовуєте `{define}` для встановлення функції та `{call}` для її використання.
        7:
            debug: 'True'
            header: Налагодження
            code: "{call} новий_учасник \n{print} 'Привіт, новий учасник!' \nusername = {ask} 'Яке ваше ім'я користувача?'\npassword = 'Який ваш пароль?' \n{print} 'Ласкаво просимо до нашого клубу!' \n\nusername = {ask} 'Будь ласка, введіть своє ім'я користувача. Ви новий учасник? Введіть New Member' \n{if} ім'я користувача = новий учасник \n{call} новий учасник \n    {else}\n        password = {ask} 'Будь ласка, введіть пароль'"
            text: Давайте налагодимо цей код!
        3:
            code: |-
                {print} 'декількі числа зараз потрібно використовувати точка'
                {print} 2.5 + 2.5
            text: "З цього рівня вам також дозволено використовувати десяткові числа. Це може зробити такі програми, як ваш ресторан, ще кращими!\n\nЧисла не потребують лапок."
            header: Десяткові числа
        4:
            header: Функції!
            text: "На цьому рівні ви навчитеся використовувати функції. Функція — це блок коду, який можна легко використовувати кілька разів. Використання функцій допомагає нам організувати фрагменти коду, які ми можемо використовувати знову і знову. Щоб створити функцію, використовуйте `{define}` і дайте функції назву. Потім помістіть усі рядки, які вам потрібні у функції, у блоці з відступом під рядком `{define}`. Залиште один порожній рядок у своєму коді, щоб він виглядав гарно та акуратно. Чудова робота! Ви створили функцію! \n\nТепер, коли нам потрібен цей блок коду, ми просто використовуємо `{call}` з назвою функції, щоб викликати його! Нам не потрібно знову вводити цей блок коду."
        8:
            header: Готові спробувати?
            text: Насолоджуйтесь пригодами на рівні 12!
