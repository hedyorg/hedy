#!/bin/bash
set -eu
scriptdir=$(cd $(dirname $0) && pwd)
cd $scriptdir

# Generate the lezer parsers from the grammars specified in  highlighting/lezer-grammars/
for grammarFile in ../../highlighting/lezer-grammars/level*.grammar ; do
    baseName=$(basename "$grammarFile")
    tsFile=${baseName%.grammar}-parser.ts

    # We need to parameterize the parsers generated by lezer-generator with a level and a language.
    # There is limited customizability in the tool, but lezer-generator will
    # generate a source file with a predictable format, that we can line-edit.
    npx lezer-generator --typeScript "$grammarFile" -o ../../static/js/lezer-parsers/$tsFile

    out=../../static/js/lezer-parsers/$tsFile
    mv $out $out.tmp

    echo "// This file was generated by lezer-generator. You probably shouldn't edit it." >> $out
    echo "// (It was then subsequently modified by generate-lezer-parsers)." >> $out
    echo 'import {LRParser} from "@lezer/lr"' >> $out
    echo 'import {specializeKeywordGen, extendKeywordGen} from "./tokens"' >> $out

    # Technically we know the level already and we could code it in directly here --
    # but here we're dealing with filenames and I don't want to make too many assumptions
    # in this place.
    echo 'export function generateParser(level: number, language: string): LRParser {' >> $out

    # So we don't get "unused import" errors
    if grep specializeKeyword $out.tmp > /dev/null; then
        echo '  const specializeKeyword = specializeKeywordGen(level, language);' >> $out
    else
        echo '  void specializeKeywordGen;' >> $out
    fi

    # So we don't get "unused import" errors
    if grep extendKeyword $out.tmp > /dev/null; then
        echo '  const extendKeyword = extendKeywordGen(level, language);' >> $out
    else
        echo '  void extendKeywordGen;' >> $out
    fi

    echo '  return LRParser.deserialize({' >> $out
    tail -n +5 $out.tmp >> $out
    echo '}' >> $out

    rm $out.tmp
done